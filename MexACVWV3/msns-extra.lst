
msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 1
MC68HC908GP32 User Bootloader


                        1  ;***************************************************
                                                       ************************
                        2  ;* msns-extra.asm MexACVW3 version
                        3  ;* By Robert Hiebert, September 13 2023
                        4  ;*
                        5  ;* This is a stripped down, no frills version of 
                                                          the MSnS extra 029y4a
                        6  ;* code designed to run a stock or nearly stock 
                                                      4cyl air cooled VW engine
                        7  ;* with Mexican EFI hardware. It uses a modified 
                                                    Megasquirt V2.2 board and a
                        8  ;* custom relay board and is tuned with Tuner 
                                                      Studio running the 029y4a
                        9  ;* .ini file.
                       10  ;* Text editor is Notepad++. Developement suite is 
                                                        Winide.exe. Firmware is
                       11  ;* loaded with prog08sz.exe and the Megaprogrammer 
                                                            by Patrick Carlier.
                       12  ;* It is absolutely essential that the controller 
                                                         is able to communicate
                       13  ;* with and be tuned with Tuner Studio, so the 
                                                    mainController.ini file has
                       14  ;* not been modified. Other than a cosmetic tidy up 
                                                          the msns-extra.h file
                       15  ;* has not been modified. In order to stay compatibl
                                                        e with Tuner Studio all
                       16  ;* the variables and configurable constants have 
                                                        been left in place even
                       17  ;* though only a small fraction of them are 
                                                                 actually used.
                       18  ;* The engine uses a degreed crank pully and a 36 
                                                          minus 1 tooth trigger
                       19  ;* wheel with a VR sensor from CB Performance. The 
                                                       sensor conditioner is in
                       20  ;* the relay board with the coil drivers. Fuel 
                                                     strategy is speed density.
                       21  ;* Ignition is waste spark and injection is 
                                                sequential paired. Pulse widths
                       22  ;* start at 10 degrees ATDC and 10 degrees ABDC. 
                                                     Half the fuel delivered on
                       23  ;* an open intake valve and the other half on a 
                                                      closed intake valve. Idle
                       24  ;* control is PWM for warmup only. I do not use 
                                                     closed loop AFR control or
                       25  ;* decel fuel cut, but the options are still there.
                       26  ;***************************************************
                                                      *************************
                       27  
                       28  ; MegaSquirt Hardware Wiring
                       29  
                       30  ; Port A
                       31  ;  PTA0 - FP                                        
                                                                       ;* fuelp
                       32  ;  PTA1 - FIDLE                                     
                                                                        ;* iasc
                       33  ;  PTA2 - Output 2 (X5)                             
                                                                       ;* Tacho
                       34  ;  PTA3 - Output 1 (X4)


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 2
MC68HC908GP32 User Bootloader


                       35  ;  PTA4             X3
                       36  ;  PTA5             X2
                       37  ;  PTA6 - Flyback
                       38  ;  PTA7 - Flyback
                       39  
                       40  ; Port B (ADC inputs)
                       41  ;  PTB0/AD0 - MAP                                   
                                                                         ;* MAP
                       42  ;  PTB1/AD1 - MAT                                   
                                                                         ;* MAT
                       43  ;  PTB2/AD2 - CLT                                   
                                                                         ;* CLT
                       44  ;  PTB3/AD3 - TPS                                   
                                                                         ;* TPS
                       45  ;  PTB4/AD4 - BAT                                   
                                                                         ;* BAT
                       46  ;  PTB5/AD5 - EGO                                   
                                                                         ;* EGO
                       47  ;  PTB6/AD6 - "X7" spare, EGO2, fuel pressure or 
                                                                        2nd MAP
                       48  ;  PTB7/AD7 - "X6" spare, EGT
                       49  
                       50  ; Port C
                       51  ;  PTC0 - Squirt LED  or coil a                     
                                                                       ;* coila
                       52  ;  PTC1 - Accel LED   or coil b or HEI7 bypass      
                                                                       ;* coilb
                       53  ;  PTC2 - Warmup LED  or coil c or output 4         
                                                            ;* wled (Synch LED)
                       54  ;  PTC3 } multiplexed shift { or coil e
                       55  ;  PTC4 } light outputs     { or 2nd trig input
                       56  
                       57  ; Port D
                       58  ;  PTD0/~SS - unused  or coil d
                       59  ;  PTD1/MISO - nitrous in / table switch
                       60  ;  PTD2/MOSI - knock in / coil f
                       61  ;  PTD3/SPSCK - launch in
                       62  ;  PTD4/T1CH0 - Inj1                                
                                                                        ;* Inj1
                       63  ;  PTD5/T1CH1 - Inj2                                
                                                                        ;* Inj2
                       64  
                       65  ;.base 10t
                       66  ;.set simulate
                       67  
 0040                  68       org     ram_start
 0040                  69       include "msns-extra.h"
                       70  ;****************************************************************************
                       71  ;* msns-extra.h MexACVW3 version, include file for msns-extra.asm MexACVW3 
                       72  ;* version 
                       73  ;* By Robert Hiebert, September 13 2023
                       74  ;*
                       75  ;* This is a stripped down, no frills version of the MSnS extra 029y4a
                       76  ;* code designed to run a stock or nearly stock 4cyl air cooled VW engine
                       77  ;* with Mexican EFI hardware. It uses a modified Megasquirt V2.2 board and a
                       78  ;* custom relay board and is tuned with Tuner Studio running the 029y4a
                       79  ;* .ini file.
                       80  ;* Text editor is Notepad++. Developement suite is Winide.exe. Firmware is 
                       81  ;* loaded with prog08sz.exe and the Megaprogrammer by Patrick Carlier.
                       82  ;* It is absolutely essential that the controller is able to communicate
                       83  ;* with and be tuned with Tuner Studio, so the mainController.ini file has
                       84  ;* not been modified. Other than a cosmetic tidy up the msns-extra.h file 
                       85  ;* has not been modified. In order to stay compatible with Tuner Studio all
                       86  ;* the variables and configurable constants have been left in place even
                       87  ;* though only a small fraction of them are actually used.
                       88  ;* The engine uses a degreed crank pully and a 36 minus 1 tooth trigger
                       89  ;* wheel with a VR sensor from CB Performance. The sensor conditioner is in 
                       90  ;* the relay board with the coil drivers. Fuel strategy is speed density.  
                       91  ;* Ignition is waste spark and injection is sequential paired. Pulse widths  
                       92  ;* start at 10 degrees ATDC and 10 degrees ABDC. Half the fuel delivered on  
                       93  ;* an open intake valve and the other half on a closed intake valve. Idle  
                       94  ;* control is PWM for warmup only. I do not use closed loop AFR control or  
                       95  ;* decel fuel cut, but the options are still there.    
                       96  ;****************************************************************************
                       97  
                       98  ; MegaSquirt Hardware Wiring
                       99  
                      100  ; Port A
                      101  ;  PTA0 - FP                                            ;* fuelp
                      102  ;  PTA1 - FIDLE                                         ;* iasc
                      103  ;  PTA2 - Output 2 (X5)                                 ;* Tacho
                      104  ;  PTA3 - Output 1 (X4)
                      105  ;  PTA4             X3
                      106  ;  PTA5             X2
                      107  ;  PTA6 - Flyback
                      108  ;  PTA7 - Flyback
                      109  
                      110  ; Port B (ADC inputs)
                      111  ;  PTB0/AD0 - MAP                                        ;* MAP
                      112  ;  PTB1/AD1 - MAT                                        ;* MAT
                      113  ;  PTB2/AD2 - CLT                                        ;* CLT
                      114  ;  PTB3/AD3 - TPS                                        ;* TPS
                      115  ;  PTB4/AD4 - BAT                                        ;* BAT
                      116  ;  PTB5/AD5 - EGO                                        ;* EGO
                      117  ;  PTB6/AD6 - "X7" spare, EGO2, fuel pressure or 2nd MAP
                      118  ;  PTB7/AD7 - "X6" spare, EGT
                      119  
                      120  ; Port C
                      121  ;  PTC0 - Squirt LED  or coil a                          ;* coila
                      122  ;  PTC1 - Accel LED   or coil b or HEI7 bypass           ;* coilb
                      123  ;  PTC2 - Warmup LED  or coil c or output 4              ;* wled (Synch LED)
                      124  ;  PTC3 } multiplexed shift { or coil e
                      125  ;  PTC4 } light outputs     { or 2nd trig input
                      126  
                      127  ; Port D
                      128  ;  PTD0/~SS - unused  or coil d
                      129  ;  PTD1/MISO - nitrous in / table switch
                      130  ;  PTD2/MOSI - knock in / coil f
                      131  ;  PTD3/SPSCK - launch in
                      132  ;  PTD4/T1CH0 - Inj1                                     ;* Inj1
                      133  ;  PTD5/T1CH1 - Inj2                                     ;* Inj2
                      134  
                      135  
                      136  ; portd
 0040                 137  NosIn:          equ     1
 0040                 138  KnockIn:        equ     2
 0040                 139  launch:         equ     3
 0040                 140  inject1:        equ     4
 0040                 141  inject2:        equ     5
                      142  
                      143  ; porta
 0040                 144  fuelp:          equ     0
 0040                 145  iasc:           equ     1
 0040                 146  output2:        equ     2
 0040                 147  output1:        equ     3
 0040                 148  water2:         equ     4
 0040                 149  water:                   equ     5   ; or used for X2 Electric fan output
                      150  
 0040                 151  boostP:         equ     3
 0040                 152  Output3:        equ     0
                      153  
                      154  ; portc
 0040                 155  sled:           equ     0 ; LED17
 0040                 156  aled:           equ     1 ; LED19
 0040                 157  wled:           equ     2 ; also IRQ LED18 only used in "fuel only" code
 0040                 158  coila           equ     0 ; LED17


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 3
MC68HC908GP32 User Bootloader


 0040                 159  coilb           equ     1 ; LED19
 0040                 160  pin10           equ     3 ; ptc3 - 2nd trigger for wheel decoder or shiftlight
 0040                 161  pin11           equ     4 ; ptc4
                      162  
 0040                 163  c13_of          equ      %00000001  ; defined but rarely used in code
 0040                 164  c13_o2          equ      %00000010
 0040                 165  c13_cs          equ      %00000100
 0040                 166  c13_bc          equ      %00001000
                      167  
                      168  
 0040                 169  WHEELINIT       equ      %11000011   ; 029g holdoff 3 (011), was 5 (101) recently
                      170  
                      171  
                      172  
                      173  ; oddfire offset setting equates
 0040                 174  outoff_22b      equ     $01
 0040                 175  outoff_45b      equ     $02
 0040                 176  outoff_90b      equ     $04
                      177  
                      178  ; this is the size of the data page, used by the P and C commands
 0040                 179  PAGESIZE        equ     189T
                      180  
 0040                 181  KPASCALE300     equ      $42   ; 1+ 0.258*256 =  66 hardcoded scaling factor for kpa
 0040                 182  KPASCALE400     equ      $a7   ; 1+ 0.652*256 = 167
                      183   
                      184  ;****************************************************
                      185  ;*
                      186  ;* MegaSquirt RAM Variables
                      187  ;*
                      188  ;* We wish we had plenty of RAM to burn
                      189  ;****************************************************
                      190  
                      191  ms_ram_start:
                      192  
                      193  ; RAM Variables - Ordered List for RS232 realtime download - delivered in one pack
 0040                 194  secl:           ds   1  ; low seconds - from 0 to 255, then rollover     ;* 0
 0041                 195  squirt:         ds  1  ; Event variable bit field for Injector Firing   ;* 1
                      196  
                      197  ; Squirt Event Scheduling Variables - bit fields for "squirt" variable
 0042                 198  inj1:           equ 0  ; 0 = no squirt 1 = squirt
 0042                 199  inj2:           equ 1  ; 0 = no squirt 1 = squirt
 0042                 200  sched1:         equ 2  ; 0 = nothing scheduled 1 = scheduled to squirt
 0042                 201  firing1:        equ 3  ; 0 = not squirting 1 = squirting
 0042                 202  sched2:         equ  4
 0042                 203  firing2:        equ  5
 0042                 204  bcTableUse:     equ 6  ; boost control
                      205  
 0042                 206  engine:         ds  1  ; Variable bit-field to hold engine current status  ;* 2
                      207  
                      208  ; Engine Operating/Status variables - bit fields for "engine" variable
 0043                 209  running:        equ 0  ; 0 = engine not running 1 = running
 0043                 210  crank:          equ 1  ; 0 = engine not cranking 1 = engine cranking
 0043                 211  startw:         equ 2  ; 0 = not in startup warmup 1 = in warmup enrichment
 0043                 212  warmup:         equ 3  ; 0 = not in warmup 1 = in warmup
 0043                 213  tpsaen:         equ 4  ; 0 = not in TPS acceleration mode 1 = TPS acceleration mode
 0043                 214  tpsden:         equ 5  ; 0 = not in deacceleration mode 1 = in deacceleration mode
 0043                 215  mapaen:         equ 6  ; 0 = not in MAP acceleration mode 1 = MAP deaceeleration mode
 0043                 216  idleOn:         equ 7  ;
                      217  
 0043                 218  baro:           ds   1       ; Barometer ADC Raw Reading - KPa (0 - 255)                  ;* 3
 0044                 219  map:            ds   1       ; Manifold Absolute Pressure ADC Raw Reading - KPa (0 - 255) ;* 4
 0045                 220  mat:            ds   1       ; Manifold Air Temp ADC Raw Reading - counts (0 - 255)       ;* 5
 0046                 221  clt:            ds   1       ; Coolant Temperature ADC Raw Reading - counts (0 - 255)     ;* 6
 0047                 222  tps:            ds   1       ; Throttle Position Sensor ADC Raw Reading - counts, represents 0 - 5 volts  ;* 7
 0048                 223  batt:           ds   1       ; Battery Voltage ADC Raw Reading - counts                   ;* 8
 0049                 224  ego:            ds  1   ; Exhaust Gas Oxygen ADC Raw Reading - counts                ;* 9
 004A                 225  egocorr:        ds  1   ; Oxygen Sensor Correction                                   ;* 10
 004B                 226  aircor:         ds  1   ; Air Density Correction lookup - percent                    ;* 11
 004C                 227  warmcor:        ds  1   ; Total Warmup Correction - percent                          ;* 12
 004D                 228  rpm:            ds  1   ; Computed engine RPM - rpm/100                              ;* 13
 004E                 229  pw1:            ds  1   ; injector squirt time in 1/10 millesec (0 to 25.5 millisec) - applied  ;* 14
 004F                 230  tpsaccel:       ds  1   ; Acceleration enrichment - percent                          ;* 15
 0050                 231  barocor:        ds  1   ; Barometer Lookup Correction - percent                      ;* 16
 0051                 232  gammae:         ds  1   ; Total Gamma Enrichments - percent                          ;* 17
 0052                 233  vecurr:         ds  1   ; Current VE value from lookup table - percent               ;* 18
 0053                 234  pw2:            ds  1                                                                ;* 19
 0054                 235  vecurr2:        ds  1                                                                ;* 20
 0055                 236  idleDC:         ds  1                                                                ;* 21
                      237  
                      238  ;********************************************************************************************
                      239  ;* This marks the end of output channels ordered list sent by the "A" commnd, 22 in total
                      240  ;********************************************************************************************
                      241  
 0056                 242  ctimeCommH:     ds  1   ; Cycle time H for communication                             ;* 22
 0057                 243  ctimeCommL:     ds  1   ; Cycle time L for communication                             ;* 23
 0058                 244  SparkAngle:     ds  1   ; Spark angle (256 = 90 deg)                                 ;* 24
 0059                 245  afrTarget:      ds  1   ; AFR Target temp variable                                   ;* 25
 005A                 246  o2_fpadc:       ds  1   ; Second O2 sensor or Fuel Pressure                          ;* 26
 005B                 247  egtadc:         ds  1   ; EGT Temperature                                            ;* 27
 005C                 248  CltIatAngle:    ds  1   ; Coolant Iat Angle                                          ;* 28
 005D                 249  KnockAngle:     ds  1   ; Knock Angle                                                ;* 29
 005E                 250  egoCorr2:       ds  1   ; Second O2 sensor Ego Correction                            ;* 30
                      251  
                      252  ;********************************************************************************************
                      253  
                      254  ;* This marks the end of output channels ordered list sent by the "R" commnd.
                      255  ;* The following channels are also sent, 39 in total.
                      256  ;* porta   ;* 31 (Declared in GP32.equ)
                      257  ;* portb   ;* 32 (Declared in GP32.equ)
                      258  ;* portc   ;* 33 (Declared in GP32.equ)
                      259  ;* portd   ;* 34 (Declared in GP32.equ)
                      260  ;* stackL  ;* 35 (Stack pointer)
                      261  ;* TPSlast ;* 36
                      262  ;* itimeX  ;* 37
                      263  ;* bcDC    ;* 38
                      264  
                      265  ;********************************************************************************************
                      266  
                      267  ;-------------------------
                      268  
 005F                 269  SparkBits:      ds  1   ; Spark timing bits                                          
                      270  
                      271  ; Bit fields for "SparkBits" variable
 0060                 272  SparkTrigg      equ 0   ; SparkBits(0) IRQ has triggered, but no spark yet
 0060                 273  SparkHSpeed     equ 1   ; SparkBits(1) High speed spark (using highres timer)
 0060                 274  SparkLSpeed     equ 2   ; SparkBits(2) Low speed spark (using low speed timer or trigger going low)
 0060                 275  dwellcd         equ 3   ; used for rotary to tell calcdwellspk not to dwell trailing
 0060                 276  rise            equ 4   ; found a rising IRQ edge / 2nd multispark / coilcbit
 0060                 277  lc_fs           equ 5   ; doing flat shift vs. launch
 0060                 278  trigret         equ 6   ; falling edge at end of short pulses - sets crank timing
                      279  ;*Knocked         equ 7   ; Knock system working
 0060                 280  IRQtime         equ 7   ; 100us counter for IRQ period enable/disable
                      281  
                      282  ; Rev limiter variables
 0060                 283  RevLimBits      ds  1   ; Rev limiter status bits                           
                      284  
                      285  ; Bit fields for "RevLimBits" variable                                      
 0061                 286  RevLimSoft      equ 0   ; RevLimBits(0) Soft rev limiter in action
 0061                 287  RevLimHSoft     equ 1   ; RevLimBits(1) Soft rev limiter hard mode
 0061                 288  RevLimHard      equ 2   ; RevLimBits(2) Hard rev limiter in action
 0061                 289  sparkon         equ 3   ; ran out of space in sparkbits
 0061                 290  coilerr         equ 4   ; out of sequence coil detection
 0061                 291  sparkCut        equ 5   ; Spark Cut in action
 0061                 292  LaunchOn        equ 6   ; Soft Launch On
 0061                 293  Advancing       equ 7   ; Advancing Knock system
                      294  


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 4
MC68HC908GP32 User Bootloader


 0061                 295  personality     ds  1   ; code works from ram. loaded from flash at boot    
                      296  
                      297  ; Bit fields for "personality" variable
 0062                 298  MSNS            equ 0   ; Megasquirtnspark
 0062                 299  MSNEON          equ 1   ; MS neon decoder
 0062                 300  WHEEL           equ 2   ; generalised decoder 36-1, 60-2 etc
 0062                 301  WHEEL2          equ 3   ; 0 = -1  1 = -2
 0062                 302  EDIS            equ 4   ; edis
 0062                 303  DUALEDIS        equ 5   ; two edis modules (for edis4 on V8, edis6 on V12)
 0062                 304  TFI             equ 6   ; Ford TFI system
 0062                 305  HEI7            equ 7   ; GM 7 pin HEI
                      306  
                      307  ;* output bits
                      308  ;* spark output defaults to FIDLE (original MSnS)
                      309  ;* Neon code always put coils on D19 and D17
                      310  
 0062                 311  outputpins       ds  1   ;         0 (B&G)  | 1 (non B&G)                                          
                      312  
                      313  ; Bit fields for "outputpins" variable
 0063                 314  REUSE_FIDLE      equ 0  ; FIDLE for iasc   | spark output
 0063                 315  REUSE_LED17      equ 1  ; LED17 for sled   | coila output
 0063                 316  REUSE_LED18      equ 2  ; mismatch between .ini and .asm
 0063                 317  REUSE_LED18_2    equ 3  ;
                      318  ; LED18_2   LED18    function
                      319  ;  0         0       wled
                      320  ;  0         1       irq
                      321  ;  1         0       output4
                      322  ;  1         1       spark c
                      323  
 0063                 324  REUSE_LED19     equ 4  ; LED19 for aled   | coilb output
 0063                 325  X2_FAN          equ 5  ; X2   water/n2o   | fan control
 0063                 326  LED18_FAN       equ 6  ; LED18 output4    | fan control
 0063                 327  TOY_DLI         equ 7  ; toyota DLI ignition multiplex
                      328  
 0063                 329  feature1        ds  1  ; some features taken from Dual Table                 
                      330  
                      331  ; Bit fields for "feature1" variable
 0064                 332  wd_2trig        equ 0  ; wheel decoder 2nd trigger i/p - new in 023c9
 0064                 333  wd_2trigb       equ 1  ; for use by BIT
 0064                 334  whlsim          equ 2  ; enable wheel simulator for use on the stim ONLY
 0064                 335  taeIgnCount     equ 3
 0064                 336  rotaryFDign     equ 4  ; enable rotary FD ignition outputs
 0064                 337  hybridAlphaN    equ 5
 0064                 338  CrankingPW2     equ 6
 0064                 339  Nitrous         equ 7
                      340  
                      341  
 0064                 342  feature2        ds  1  ; more                                               
                      343  
                      344  ; Bit fields for "feature2" variable
 0065                 345  BoostControl    equ 0
 0065                 346  ShiftLight      equ 1
 0065                 347  LaunchControl   equ 2
                      348  ; spare         equ 3
 0065                 349  out3sparkd      equ 4 ; 1= use output for spark D
 0065                 350  min_dwell       equ 5
 0065                 351  dwellduty50     equ 6
 0065                 352  config_error    equ 7 ; set if non-sense combination of options - don't run.
                      353  
 0065                 354  feature7        ds  1  ; Enhanced stuff                                    
                      355  
                      356  ; Bit fields for "feature7" variable
 0066                 357  TractionNos     equ 0  ; Turn Nos off in Traction Loss?
 0066                 358  dwellcont       equ 1  ; Real (crude) dwell control
 0066                 359  TCcycleSec      equ 2  ; Hold traction settings for cycles or till rpm stable for 0.1S
 0066                 360  WheelSensor     equ 3  ; TC wheel sensors fitted
 0066                 361  AlphaTarAFR     equ 4  ; Alpha n or speed density for target afr
 0066                 362  TPSTargetAFR    equ 5  ; TPS setpoint for target AFR's
 0066                 363  StagedMAP2nd equ 6  ; Do we want to use a 2nd param for staged (MAP only for now)
 0066                 364  StagedAnd        equ 7  ; and/or operation for Staged second param
                      365  
                      366  ;bit definitions of "missing" flash feature vars in .asm
                      367  
 0066                 368  EnhancedBits:   ds  1  ; Enhanced Stuff                                    
                      369  
                      370  ; Bit fields for "EnhancedBits" variable
 0067                 371  NosDcOk:        equ 0  ; Nos System not causing Duty Cycle of >90%
 0067                 372  NosSysOn:       equ 1  ; Nos System Running
 0067                 373  OverRun:        equ 2  ; Over Run Fuel Cut
 0067                 374  REStaging:      equ 3  ; Roger Enns Staging On
 0067                 375  NosAntiLag:     equ 4  ; Nos Antilag running
 0067                 376  NosSysReady:    equ 5  ; NOS Ready to go
 0067                 377  UseVE3:         equ 6  ; Use VE table 3
 0067                 378  Primed:         equ 7  ; Fuel System Primed
                      379  
 0067                 380  EnhancedBits2:  ds  1  ; A few more enhanced bits                        
                      381  
                      382  ; Bit fields for "EnhancedBits2" variable
 0068                 383  Traction:       equ 0  ; Traction control running
 0068                 384  Output1On:      equ 1  ; Bit for the output 1 on
 0068                 385  Output2On:      equ 2  ; Bit for the output 2 on
 0068                 386  cant_crank      equ 3  ; Flag that we can't enter crank mode
 0068                 387  cant_delay      equ 4  ; delay bit for cant crank mode
 0068                 388  over_Run_Set:   equ 5  ; Set over run active for timer
 0068                 389  mv_mode:        equ 6  ; we are in Megaview mode, disable enhanced comms
 0068                 390  OneShotBArro:   equ 7  ; One check for baro correction
                      391  
 0068                 392  coilsel:        ds  1  ; which coil are we working on                    
                      393  
                      394  ; Bit fields for "coilsel" variable
 0069                 395  coilabit        equ 0  ; now a bit each to make life easier
 0069                 396  coilbbit        equ 1
 0069                 397  coilcbit        equ 2
 0069                 398  coildbit        equ 3
 0069                 399  coilebit        equ 4
 0069                 400  coilfbit        equ 5
                      401  ;don't expect any more!
                      402  
 0069                 403  EnhancedBits4:  ds  1                                                   
                      404  
                      405  ; Bit fields for "EnhancedBits4" variable
 006A                 406  roll1           equ 0  ; bits to see if we missed a T2 overflow
 006A                 407  roll2           equ 1
 006A                 408  page2:          equ 2  ; this was a whole byte
 006A                 409  wspk            equ 3  ; set if we are running wasted spark type multiple outputs
 006A                 410  indwell         equ 4  ; hi-res dwell is in process - may drop
 006A                 411  nextcyl         equ 5  ; quick calc for next cyl mode
 006A                 412  invspk          equ 6  ; quick calc for inverted / non-inverted spark
 006A                 413  FxdASEDone      equ 7  ; Fixed ASE done now use normal ASE
                      414  
 006A                 415  EnhancedBits5:   ds  1                                                    
                      416  
                      417  ; Bit fields for "EnhancedBits5" variable
 006B                 418  rotary2          equ 0  ; gets copied from flash var on boot and Burn
                      419                          ; enable twin rotor leading/trailing split stuff
 006B                 420  checkbit         equ 1  ; For testing the code.
 006B                 421  toothlog         equ 2  ; log teeth in wheel decoder
 006B                 422  triglog          equ 3  ; log ignition triggers (all ignition codes)
 006B                 423  rsh_s            equ 4  ; rotary split hysteresis on split
 006B                 424  rsh_r            equ 5  ; rotary split hysteresis on rpm
                      425  ;cto spare       equ 6  ; tach output armed
 006B                 426  ctodiv           equ 7  ; tach output divider bit for half speed
 006B                 427  ctodivb          equ $80; ctodiv for bit/eor ops
                      428  
 006B                 429  EnhancedBits6:   ds   1                                                 
                      430  


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 5
MC68HC908GP32 User Bootloader


                      431  ; Bit fields for "EnhancedBits6" variable
 006C                 432  hrdwon           equ  0  ; hi-res dwell hysteresis bit
 006C                 433  wsync            equ  1  ; wheel is synced
 006C                 434  whold            equ  2  ; wheel not in holdoff
 006C                 435  trigger2         equ  3  ; used in conjunction with "rise" bit for 2nd trigger input
 006C                 436  IdleAdvTimeOK    equ  4
 006C                 437  StgTransDone     equ  5
 006C                 438  idashbit         equ  6       ; kg PWM idle
 006C                 439  istartbit         equ  7      ; kg PWM idle added for startup
                      440  
                      441  
                      442  ; Calculation Variable
 006C                 443  pwrun1           ds  1   ; Pulsewidth timing variable - from 0 to 25.5ms  
 006D                 444  pwrun2           ds   1                                                    
 006E                 445  pwcalc1          ds  1                                                    
 006F                 446  pwcalc2          ds  1                                                    
                      447  
                      448  ; Engine RPM -> RPM = 12000/(ncyl * (rpmph - rpmpl))
 0070                 449  rpmph:           ds  1   ; High part of RPM Period                        
 0071                 450  rpmpl:           ds  1   ; Low part of RPM Period                         
 0072                 451  rpmch:           ds  1   ; Counter for high part of RPM                  
 0073                 452  rpmcl:           ds  1   ; Counter for low part of RPM                    
                      453  ;*idleph           ds  1T
                      454  ;*idlepl           ds  1T
 0074                 455  usc100H:         ds  1T  ;* Counter for IRQ period calcs Hi byte (.1mS rolling counter)
 0075                 456  usc100L:         ds  1T  ;* Counter for IRQ period calcs Lo byte (.1mS rolling counter)
                      457  
 0076                 458  flocker:         ds  1   ; Flash locker semaphore
                      459  
                      460  ; Previous ADC values for computing derivatives
 0077                 461  lmap:                 ds      1       ; Manifold Absolute Pressure ADC last Reading
 0078                 462  lmat:                 ds      1       ; Manifold Air Temp ADC last Reading
 0079                 463  lclt:                 ds      1       ; Coolant Temperature ADC last Reading
 007A                 464  ltps:                 ds      1       ; Throttle Position Sensor ADC last Reading
 007B                 465  lbatt:                ds      1       ; Battery Voltage ADC last Reading
 007C                 466  lego:            ds  1   ; Last EGO ADC reading
                      467  
                      468  ; Global Time Clock
 007D                 469  mms:          ds      1      ; 0.0001 second update variable
 007E                 470  ms:               ds  1      ; 0.001  second increment
 007F                 471  tenth:           ds  1  ; 1/10th second
 0080                 472  sech:                 ds      1      ; high seconds - rollover at 65536 secs (1110.933 minutes, 18.51 hours)
 0081                 473  tpsaclk:         ds  1  ; TPS enrichment timer clock in 0.1 second resolution
 0082                 474  egocount:        ds  1  ; Counter value for EGO step - incremented every ignition pulse
 0083                 475  asecount:        ds  1  ; Counter value for after-start enrichment counter - every ignition pulse
 0084                 476  igncount1:       ds  1  ; Ignition pulse counter
 0085                 477  igncount2:       ds  1  ; Ignition pulse counter
 0086                 478  altcount1:       ds  1  ; Alternate count selector
 0087                 479  altcount2:       ds  1  ; Alternate count selector
 0088                 480  Decay_Accel:     ds  1  ; Storage for Accel Value to decay from
 0089                 481  tpsfuelcut:      ds   1      ; TPS Fuel Cut (percent)
                      482  
                      483  ;SCI parameters/variables
 008A                 484  txcnt:           ds  1  ; SCI transmitter count (incremented)
 008B                 485  txgoal:          ds  1  ; SCI number of bytes to transmit
 008C                 486  txmode:          ds  1  ; Transmit mode flag
 008D                 487  rxoffset:        ds  1  ; offset placeholder when receiving VE/constants vis. SCI
                      488  
 008E                 489  adsel:                ds      1  ; ADC Selector Variable
                      490  
                      491  ; Timer Equates for real-time clock function
 008F                 492  T1Timerstop      equ  %00110010  ;TSC
 008F                 493  T1Timergo        equ  %01010010  ;TSC
                      494  
                      495  
                      496  ; These control Injector PWM mode for T1SC0 and T1SC1
 008F                 497  Timergo_NO_INT  equ  %00000010  ;TSC without interrupts
 008F                 498  T1SCX_PWM       equ  %00011110  ; Unbuffered PWM enabled - set high on compare, toggle on overflow
 008F                 499  T1SCX_NO_PWM    equ  %00010000  ; No PWM
                      500  
 008F                 501  burnSrc:         ds 2T
 0091                 502  burnDst:         ds 2T
 0093                 503  burnCount:       ds 1T
                      504  
                      505  ; Temporary variables
 0094                 506  tmp1:            ds 1
 0095                 507  tmp2:            ds 1
 0096                 508  tmp3:            ds 1
 0097                 509  tmp4:            ds 1
 0098                 510  tmp5:            ds 1
 0099                 511  tmp6:            ds 1
 009A                 512  tmp7:            ds 1
 009B                 513  tmp8:            ds 1
 009C                 514  tmp9:            ds 1
 009D                 515  tmp10:           ds 1
 009E                 516  tmp11:           ds 1
 009F                 517  tmp12:           ds 1
 00A0                 518  tmp13:           ds 1
 00A1                 519  tmp14:           ds 1
 00A2                 520  tmp15:           ds 1
 00A3                 521  tmp16:           ds 1
 00A4                 522  tmp17:           ds 1
 00A5                 523  tmp18:           ds 1
 00A6                 524  tmp19:           ds 1
 00A7                 525  tmp20:           ds 1
 00A8                 526  tmp21:           ds 1
 00A9                 527  tmp22:           ds 1
                      528  
 00AA                 529  T2CNTX           ds 1  ; software 3rd byte of T2
                      530  
                      531  ; variables here don't need to be zero page
                      532  ; Spark timing variables
 00AB                 533  T2LastX:         ds 1   ; T2 xhigh last
 00AC                 534  T2LastH:         ds 1   ; Timer 2 high last  ; T2 at last decoded pulse. All spark codes.
 00AD                 535  T2LastL:         ds 1   ; Timer 2 low last
 00AE                 536  itimeX:          ds 1   ; Time between decoded triggers in us. X - calc in DOSQUIRT
 00AF                 537  itimeH:          ds 1   ; mid byte
 00B0                 538  itimeL:          ds 1   ; low byte
 00B1                 539  SparkDelayH:     ds 1   ; Spark delay high
 00B2                 540  SparkDelayL:     ds 1   ; Spark delay low
 00B3                 541  SparkOnLeftah:   ds 1   ; Time left for spark to be on (0.1ms) coil a high
 00B4                 542  SparkOnLeftal:   ds 1   ; Time left for spark to be on (0.1ms) coil a low
 00B5                 543  SparkOnLeftbh:   ds 1   ; Time left for spark to be on (0.1ms) coil b high
 00B6                 544  SparkOnLeftbl:   ds 1   ; Time left for spark to be on (0.1ms) coil b low
 00B7                 545  SparkOnLeftch:   ds 1   ; Time left for spark to be on (0.1ms) coil c high
 00B8                 546  SparkOnLeftcl:   ds 1   ; Time left for spark to be on (0.1ms) coil c low
 00B9                 547  SparkOnLeftdh:   ds 1   ; Time left for spark to be on (0.1ms) coil d high
 00BA                 548  SparkOnLeftdl:   ds 1   ; Time left for spark to be on (0.1ms) coil d low
 00BB                 549  SparkOnLefteh:   ds 1   ; Time left for spark to be on (0.1ms) coil e high
 00BC                 550  SparkOnLeftel:   ds 1   ; Time left for spark to be on (0.1ms) coil e low
 00BD                 551  SparkOnLeftfh:   ds 1   ; Time left for spark to be on (0.1ms) coil f high
 00BE                 552  SparkOnLeftfl:   ds 1   ; Time left for spark to be on (0.1ms) coil f low
 00BF                 553  cTimeH:          ds 1   ; Cycle time for spark delay calculation
 00C0                 554  cTimeL:          ds 1   ; Cycle time for spark delay calculation
 00C1                 555  SparkTempH:      ds 1   ; Temporary storage for spark delay calculation
 00C2                 556  SparkTempL:      ds 1   ; Temporary storage for spark delay calculation
 00C3                 557  SparkCarry:      ds 1   ; Temporary storage for spark delay calculation
 00C4                 558  SRevLimTimeLeft  ds 1   ; Soft rev limiter time left to hard mode
 00C5                 559  T2PrevX:         ds 1   ; top byte - only used for v.low rpm
 00C6                 560  T2PrevH:         ds 1   ; T2 at last IRQ/tooth - wheel decoder
 00C7                 561  T2PrevL:         ds 1   ; low byte
 00C8                 562  acch:            ds 1   ; engine accel/devel
 00C9                 563  accl:            ds 1   ;     "
 00CA                 564  Pambient:        ds 1T
 00CB                 565  kpa:             ds 1T
 00CC                 566  coolant:         ds 1T


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 6
MC68HC908GP32 User Bootloader


 00CD                 567  idleLastDC:      ds 1T
 00CE                 568  idleTarget:      ds 1T
 00CF                 569  bcDC:            ds 1T                                                  
 00D0                 570  KPAlast:         ds 1T
 00D1                 571  TPSlast:         ds 1T                                                  
 00D2                 572  idleCtlClock:    ds 1T
 00D3                 573  idleActClock:    ds 1T
 00D4                 574  bcActClock:      ds 1T
 00D5                 575  bcCtlClock:      ds 1T  ;DT
 00D6                 576  TPSfuelCorr:     ds 1T
                      577  
                      578  ; Enhanced stuff added
 00D7                 579  OverRunTime:     ds 1  ; Timer for over run to cut in
 00D8                 580  SparkCutCnt:     ds 1
 00D9                 581  KnockTimLft:     ds 1
 00DA                 582  KnockAdv:        ds 1
 00DB                 583  kpa_n:           ds 1  ; Kpa or TPs value for spark table lookup.
 00DC                 584  tmp31:           ds 1  ; Tmp storage for anything thats only used in a jsr
 00DD                 585  tmp32:           ds 1  ; Tmp Storage for anything thats only used in a jsr
 00DE                 586  ST2Timer:        ds 1  ; Spark Table 2 delay timer
 00DF                 587  VE3Timer:        ds 1  ; VE Table 3 delay timer
 00E0                 588  TCAccel:         ds 1  ; Traction Control Enrichment
 00E1                 589  TCAngle:         ds 1  ; Traction Control Spark Retard
 00E2                 590  TCSparkCut:      ds 1  ; Traction Control Spark Cut number and prime pulse cnt
 00E3                 591  mmsDiv:          ds 1  ; 0.1mS counter for Boost Control
 00E4                 592  TCCycles:        ds 1  ; Engine hold cycles
 00E5                 593  Out3Timer:       ds 1  ; Output3 timer
                      594  
                      595  ; yet more ram variables for EDIS /wheel stuff
 00E6                 596  wheelcount       ds 1  ; wheel counter for decoder _and_ HoldSpark/toothsync/ignore_small
                      597  ;note on wheelcount:
                      598  ;In Neon mode this is used as a holdoff for syncing counting up to zero
                      599  ;    bit7 = !sync
                      600  ;    bit6 = holdspark
                      601  ;    Once synced it is used to count the teeth
                      602  ; In non-Neon mode it is used as HoldSpark counting down to zero
                      603  ; these two used by tooth decoders or EDIS
                      604  
 00E7                 605  dwelldelay1:     ds  1  ; 2 bytes of dwell delay in 0.1ms
 00E8                 606                   ds  1
 00E9                 607  dwelldelay2:     ds  1  ; same for period +1
 00EA                 608                   ds  1
 00EB                 609  dwelldelay3:     ds  1  ; same for period +2
 00EC                 610                   ds  1
 00ED                 611  dwelldelay4:     ds  1  ; same for period +3
 00EE                 612                   ds  1
 00EF                 613  dwelldelay5:     ds  1  ; same for period +4
 00F0                 614                   ds  1
 00F1                 615  dwelldelay6:     ds  1  ; same for period +5
 00F2                 616                   ds  1
                      617  sawh:                   ; EDIS SAW width
                      618  stHp:
 00F3                 619  avgtoothh:        ds  1  ; OR.. gap between teeth previous in decoders
                      620  sawl:
                      621  stLp:
 00F4                 622  avgtoothl:        ds  1  ; low byte
 00F5                 623  lowresH:          ds  1  ; low res counter. Added for Neon code.
 00F6                 624  lowresL:          ds  1  ;
 00F7                 625  dwelldms:         ds  1  ; target dwell in 0.1ms units
 00F8                 626  dwellush:         ds  1  ; target dwell in us units
 00F9                 627  dwellusl:         ds  1  ;  low byte
 00FA                 628  sparktargeth:     ds  1  ; H target t2 value for spark (used in hi-res dwell)
 00FB                 629  sparktargetl:     ds  1  ; L
 00FC                 630  iTimepX:          ds  1                                                        ;* 37
 00FD                 631  iTimepH:          ds  1  ; previous hi-res cycle time (for accel/decel)
 00FE                 632  iTimepL:          ds  1  ;
                      633  ;*splitdelH:        ds  1  ; trailing split delay for rotary
                      634  ;*splitdelL:        ds  1
 00FF                 635  usc100Hprv:       ds  1 ;* Counter for IRQ period calcs Hi byte (.1mS rolling counter previous)
 0100                 636  usc100Lprv:       ds  1 ;* Counter for IRQ period calcs Lo byte (.1mS rolling counter previous)
                      637  ;*KnockBoost        ds  1  ; Boost to remove from controller if Knock detected
                      638  ;*KnockAngleRet:    ds  1  ; Knock Angle storage
 0101                 639  IRQpH:            ds  1  ;* IRQ period Hi byte
 0102                 640  IRQpL:            ds  1  ;* IRQ period Lo byte
 0103                 641  rpmlast:          ds  1  ; RPM accel dot last value
 0104                 642  VlaunchLimit:     ds  1  ; Variable Launch RPM value
 0105                 643  page:             ds  1
 0106                 644  DelayAngle:       ds  1  ; Angle to delay spark (TriggAngle - SparkAngle)
 0107                 645  airTemp:          ds  1
 0108                 646  NitrousAngle:     ds  1  ; Nitrous Angle of Retard
 0109                 647  NosPW:            ds  1  ; PW to add for NOS System
 010A                 648  pw_staged:        ds  1
 010B                 649  n2olaunchdel:     ds  1  ; launch to nitrous delay timer
 010C                 650  n2ohold:          ds  1  ; nitrous fuel and retard hold-on timer ; not yet used
 010D                 651  pw_staged2:       ds  1  ; secondary pulsewidth for staging.
 010E                 652  stgTransitionCnt: ds  1  ; transition count for staging.
 010F                 653  idlAdvHld:        ds  1  ; Idle Advance Hold off after conditions are met.
                      654  
                      655  ; rename and use these place holders as needed
                      656  ;ramslot10:       ds  1
                      657  ;ramslot9:        ds  1
 0110                 658  idleRPM:               ds  1T  ; PWM idle kg
 0111                 659  idleDelayClock:        ds  1T  ; PWM Idle kg
                      660  ;ramslot8:        ds  1   ; commented one more for safety zone
                      661  ;xramslot7:       ds  1
                      662  ;xramslot6:       ds  1
                      663  ;xramslot5:       ds  1
                      664  ;xramslot4:       ds  1
                      665  ;xramslot3:       ds  1
                      666  ;xramslot2:       ds  1
                      667  ;xramslot1:       ds  1   ; oh shit, only 1 left!
                      668  
                      669  ; no more or ram copy of data will overrun stack
                      670  
                      671  ms_ram_end:
                      672  
                      673  ;**************************************************
                      674  ; Flash Configuration Variables here - variables can be downloaded via serial link
                      675  ; VETABLE and Constants
                      676  ; "VE" is entry point, everything is offset from this point
                      677  ; All of these variables point to RAM locations. Renamed to _r
                      678  ;**************************************************
                      679  
                      680  ms_rf_start:
 0112                 681  VE_r      rmb     $90     ; 64 bytes for VE Table - Now 144 for 12x12
                      682  ;CWU_r       rmb  1       ; Crank Enrichment at -40 F
                      683  ;CWH_r       rmb  1       ; Crank Enrichment at 170 F
                      684  ;AWEV_r      rmb  1       ; After-start Warmup Percent enrichment add-on value
                      685  ;AWC_r       rmb  1       ; After-start number of cycles
                      686  ;WWU_r       rmb  $0A     ; Warmup bins(fn temp)
                      687  ;TPSAQ_r     rmb  $04     ; TPS acceleration amount (fn TPSDOT) in 0.1 ms units
                      688  ;tpsacold_r  rmb  1       ; Cold acceleration amount (at -40 degrees) in 0.1 ms units
                      689  ;tpsthresh_r rmb  1       ; Accel TPS DOT threshold
                      690  ;TPSASYNC_r  rmb  1       ; ***** TPS Acceleration clock value
                      691  ;TPSDQ_r     rmb  1       ; Deacceleration fuel cut
 01A2                 692  egotemp_r rmb     1       ; Coolant Temperature where EGO is active
 01A3                 693  egocountcmp_r rmb 1       ; Counter value where EGO step is to occur
 01A4                 694  egodelta_r rmb    1       ; EGO Percent step size for rich/lean
 01A5                 695  egolimit_r rmb    1       ; Upper/Lower EGO rail limit (egocorr is inside 100 +/- Limit)
 01A6                 696  REQ_FUEL_r rmb    1       ; Fuel Constant
 01A7                 697  DIVIDER_r  rmb    1       ; IRQ divide factor for pulse
 01A8                 698  Alternate_r rmb   1       ; Alternate injector drivers
 01A9                 699  InjOpen_r rmb     1       ; Injector Open Time
 01AA                 700  InjOCFuel_r rmb   1       ; PW-correlated amount of fuel injected during injector open
 01AB                 701  INJPWM_r  rmb     1       ; Injector PWM duty cycle at current limit
 01AC                 702  INJPWMT_r rmb     1       ; Injector PWM mmillisec time at which to activate.


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 7
MC68HC908GP32 User Bootloader


 01AD                 703  BATTFAC_r rmb     1       ; Battery Gamma Factor
 01AE                 704  rpmk_r    rmb     2       ; Constant for RPM = 12,000/ncyl - downloaded constant
 01B0                 705  RPMRANGEVE_r rmb  12      ; VE table RPM Bins for 2-D interpolation
 01C2                 706  KPARANGEVE_r rmb  12      ; VE Table MAP Pressure Bins for 2_D interp.
 01D4                 707  CONFIG11_r rmb    1       ; Configuration for PC Configurator
                      708  
                      709  ; Bit field for "CONFIG11_r" variable 
                      710  ;  Bit 0-1 = MAP Type
                      711  ;            00 = MPX4115AP
                      712  ;            01 = MPX4250AP
                      713  ;            10 = MPXH6300A
                      714  ;            11 = MPXH6400A
                      715  ;  Bit 2   = Engine Stroke
                      716  ;            0 = Four Stroke
                      717  ;            1 = Two Stroke
                      718  ;  Bit 3   = Injection Type - NOT USED!
                      719  ;            0 = Port Injection
                      720  ;            1 = Throttle Body
                      721  ;  Bit 4-7 = Number of Cylinders
                      722  ;            0000 = 1 cylinder
                      723  ;            0001 = 2 cylinders
                      724  ;            0010 = 3 cylinders
                      725  ;            0011 = 4 cylinders
                      726  ;            0100 = 5 cylinder
                      727  ;            0101 = 6 cylinders
                      728  ;            0110 = 7 cylinders
                      729  ;            0111 = 8 cylinders
                      730  ;            1000 = 9 cylinders
                      731  ;            1001 = 10 cylinders
                      732  ;            1010 = 11 cylinders
                      733  ;            1011 = 12 cylinders
 01D5                 734  M_TwoStroke:      equ     4
                      735  
 01D5                 736  CONFIG12_r rmb    1  ; Configuration for PC Configurator
                      737  
                      738  ; Bit field for "CONFIG12_r" variable
                      739  ;  Bit 0-1 = COOL Sensor Type
                      740  ;            00 = GM
                      741  ;            01 = User-defined
                      742  ;            10 = User-defined
                      743  ;            11 = User-Defined
                      744  ;  Bit 2-3 = MAT Sensor Type
                      745  ;            00 = GM
                      746  ;            01 = Undefined
                      747  ;            10 = Undefined
                      748  ;            11 = Undefined
                      749  ;  Bit 4-7 = Number of Injectors
                      750  ;            0000 = 1 Injector
                      751  ;            0001 = 2 Injectors
                      752  ;            0010 = 3 Injectors
                      753  ;            0011 = 4 Injectors
                      754  ;            0100 = 5 Injectors
                      755  ;            0101 = 6 Injectors
                      756  ;            0110 = 7 Injectors
                      757  ;            0111 = 8 Injectors
                      758  ;            1000 = 9 Injectors
                      759  ;            1001 = 10 Injectors
                      760  ;            1010 = 11 Injectors
                      761  ;            1011 = 12 Injectors
                      762  
 01D6                 763  CONFIG13_r  rmb   1  ; Configuration for PC Configurator
                      764  
                      765  ; Bit field for "CONFIG13_r" variable
                      766  ;  Bit 0   = Odd-fire averaging
                      767  ;            0 = Normal
                      768  ;            1 = Odd-Fire
                      769  ;  Bit 1   = O2 Sensor Type
                      770  ;            0 = Narrow-band (single wire 14.7 stoch)
                      771  ;            1 = DIY-WB (Stoch = 2.5V, reverse slope)
                      772  ;  Bit 2   = Control Stategy
                      773  ;            0 = Speed-Density
                      774  ;            1 = Alpha-N
                      775  ;  Bit 3   = Barometer Correction
                      776  ;            0 = Enrichment Off (set to 100%)
                      777  ;            1 = Enrichment On
                      778  
 01D7                 779  RPMOXLIMIT_r   rmb  1  ; Minimum RPM where O2 Closed Loop is Active
 01D8                 780  FASTIDLE_r     rmb  1  ; Fast idle if enabled
 01D9                 781  VOLTOXTARGET_r rmb  1  ; O2 sensor flip target value
                      782  ;ACMULT_r      rmb  1  ; Acceleration cold multiplication factor (percent/100)
                      783  ;BLANK         rmb  4  ; Extra Slots to make up 64 bytes total
                      784  
                      785  ; Page 0 variables
                      786  ; These are flash ONLY so no need to read them from RAM
                      787  
                      788  ; Page 3 spark variables that get used from RAM
 01DA                 789  ST_r            equ       ms_rf_start        ; spark timing table
 01DA                 790  RPMRANGEST_r    equ     {ms_rf_start + $90}  ; Spark timing RPM bins for 2-D interpolation
 01DA                 791  KPARANGEST_r    equ     {ms_rf_start + $9c}  ; Spark timing MAP pressure bins for 2-D interpolation
                      792  
 01DA                 793  TriggAngle_r    equ     {ms_rf_start + $a8}  ; Trigger angle BTDC
 01DA                 794  FixedAngle_r    equ     {ms_rf_start + $a9}  ; Fixed angle, 0 = not in used
 01DA                 795  TrimAngle_r     equ     {ms_rf_start + $aa}  ; Trim angle, positive and negative
 01DA                 796  CrankAngle_r    equ     {ms_rf_start + $ab}  ; Cranking angle
                      797  
                      798  ; Increased to 200 as according to the 'List' file thats the size of ms_fr since 12x12 ?
                      799  
 01DA                 800       org     {ms_rf_start + 200T}  ; reserve 200 bytes for paging use in RAM
                      801       
                      802  ms_rf_end:
                      803  
                      804  ;-------------------------------------------------------------------------------
 01DA                 805  ms_ram_size       equ {ms_ram_end-ms_ram_start}
 01DA                 806  ms_rf_size        equ {ms_rf_end-ms_rf_start}
 01DA                 807  ms_total_ram_size equ {ms_rf_end-ms_ram_start}
                      808  ;-------------------------------------------------------------------------------
                      809  
                      810  ;new equates so burner ram_exec area can be used as temp storage WITHIN int handlers
 01DA                 811  int_ram       equ      $01ED    ; same as ram_exec, space used by burner
                      812  
 01DA                 813  itmp00        equ       {int_ram + $00 }
 01DA                 814  itmp01        equ       {int_ram + $01 }
 01DA                 815  itmp02        equ       {int_ram + $02 }
 01DA                 816  itmp03        equ       {int_ram + $03 }
 01DA                 817  itmp04        equ       {int_ram + $04 }
 01DA                 818  itmp05        equ       {int_ram + $05 }
 01DA                 819  itmp06        equ       {int_ram + $06 }
 01DA                 820  itmp07        equ       {int_ram + $07 }
 01DA                 821  itmp08        equ       {int_ram + $08 }
 01DA                 822  itmp09        equ       {int_ram + $09 }
 01DA                 823  itmp0a        equ       {int_ram + $0a }
 01DA                 824  itmp0b        equ       {int_ram + $0b }
 01DA                 825  itmp0c        equ       {int_ram + $0c }
 01DA                 826  itmp0d        equ       {int_ram + $0d }
 01DA                 827  itmp0e        equ       {int_ram + $0e }
 01DA                 828  itmp0f        equ       {int_ram + $0f }
                      829  
 01DA                 830  itmp10        equ       {int_ram + $10 }
 01DA                 831  itmp11        equ       {int_ram + $11 }
 01DA                 832  itmp12        equ       {int_ram + $12 }
 01DA                 833  itmp13        equ       {int_ram + $13 }
 01DA                 834  itmp14        equ       {int_ram + $14 }
 01DA                 835  itmp15        equ       {int_ram + $15 }
 01DA                 836  itmp16        equ       {int_ram + $16 }
 01DA                 837  itmp17        equ       {int_ram + $17 }
 01DA                 838  itmp18        equ       {int_ram + $18 }


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 8
MC68HC908GP32 User Bootloader


 01DA                 839  itmp19        equ       {int_ram + $19 }
 01DA                 840  itmp1a        equ       {int_ram + $1a }
 01DA                 841  itmp1b        equ       {int_ram + $1b }
 01DA                 842  itmp1c        equ       {int_ram + $1c }
 01DA                 843  itmp1d        equ       {int_ram + $1d }
 01DA                 844  itmp1e        equ       {int_ram + $1e }
 01DA                 845  itmp1f        equ       {int_ram + $1f }
                      846  
 01DA                 847  itmpcomm      equ       {int_ram + $20 }  ; $32 (50) bytes for SCI comm data packet
                      848  
                      849  ***************************************************************************
                      850  ; Argument list for LinInterp, used throughout.
                      851  ;
                      852  ; If you move these down to LinInterp, the assembler can't use direct
                      853  ; addressing for some arguments, so the code is bigger.
                      854  
 01DA                 855  liX1      equ  tmp1
 01DA                 856  liX2      equ  tmp2
 01DA                 857  liY1      equ  tmp3
 01DA                 858  liY2      equ  tmp4
 01DA                 859  liX       equ  tmp5
 01DA                 860  liY       equ  tmp6 ; Function output.
                      861  
                      862  ;udvd32 uses some memory space, use tmp instead
 01DA                 863  INTACC1          equ tmp1  ; and 2,3,4
 01DA                 864  INTACC2          equ tmp5  ; and 6,7,8
                      865  ;                    tmp9,10,11 used within udvd32
                      866  ; udvd32 is only used within Calcrpm, ought to rewrite a simpler routine
                      867  
                      868  ;misc_spark uses these
 01DA                 869  dwelltmpX        equ  tmp2
 01DA                 870  dwelltmpH        equ  tmp3
 01DA                 871  dwelltmpL        equ  tmp4
 01DA                 872  dwelltmpXp       equ  tmp12
 01DA                 873  dwelltmpHp       equ  tmp13
 01DA                 874  dwelltmpLp       equ  tmp14
 01DA                 875  dwelltmpXac      equ  tmp20  ; use these so they don't get trashed by lookup
 01DA                 876  dwelltmpHac      equ  tmp21
 01DA                 877  dwelltmpLac      equ  tmp22
 01DA                 878  dwelltmpXop      equ  tmp5   ; these are the us result
 01DA                 879  dwelltmpHop      equ  tmp6
 01DA                 880  dwelltmpLop      equ  tmp7
 01DA                 881  dwelltmpXms      equ  tmp8   ; these are the 0.1ms result before transferring to dwelldelay1,2,3,4
 01DA                 882  dwelltmpHms      equ  tmp9
 01DA                 883  dwelltmpLms      equ  tmp10
                      884  
 01DA                 885  SparkdltX        equ  tmp2  ; not used at same time as dwelltmpX etc.
 01DA                 886  SparkdltH        equ  tmp3
 01DA                 887  SparkdltL        equ  tmp4
                      888  
                      889  ***************************************************************************
                      890  *some paging macros. (Were subroutines but consume yet more stack)
                      891  ***************************************************************************
                      892  ; NOTE! page  stores which table is paged into RAM.
                      893  
                      894  ;                    VE TABLE 1
 01DA                 895  $MACRO ve1x          ; gets a VE byte from page1 or RAM. On entry X contains index.
                      896                               ; Returns byte in A
                      897      lda    page
                      898      cmp    #01T
                      899      bne    ve1xf
                      900      lda    VE_r,x
                      901      bra    ve1xc
                      902  
                      903  ve1xf:
                      904      lda    VE_f1,x
                      905  
                      906  ve1xc:
                      907  
 01DA                 908  $MACROEND
                      909  
                      910  ;                   VE TABLE 2
 01DA                 911  $MACRO ve2x            ; gets a VE byte from page2 or RAM. On entry X contains index.
                      912                                 ; Returns byte in A
                      913      lda    page
                      914      cmp    #02T
                      915      bne    ve2xf
                      916      lda    VE_r,x
                      917      bra    ve2xc
                      918  
                      919  ve2xf:
                      920     lda    VE_f2,x
                      921  
                      922  ve2xc:
                      923  
 01DA                 924  $MACROEND
                      925  
                      926  ;                  SPARK TABLE 1
 01DA                 927  $MACRO ve3x            ; gets a ST byte from page3 or RAM. On entry X contains index.
                      928                                 ; Returns byte in A
                      929      lda    page
                      930      cmp    #03T
                      931      bne    ve3xf
                      932      lda    VE_r,x
                      933      bra    ve3xc
                      934  
                      935  ve3xf:
                      936     lda     ST_f1,x
                      937  
                      938  ve3xc:
                      939  
 01DA                 940  $MACROEND
                      941  
                      942  ;                  SPARK TABLE 2
 01DA                 943  $MACRO ve4x           ; gets a ST byte from page4 or RAM. On entry X contains index.
                      944                                ; Returns byte in A
                      945      lda    page
                      946      cmp    #04T
                      947      bne    ve4xf
                      948      lda    VE_r,x
                      949      bra    ve4xc
                      950  
                      951  ve4xf:
                      952     lda    ST_f2,x
                      953  
                      954  ve4xc:
                      955  
 01DA                 956  $MACROEND
                      957  
                      958  ;                   VE TABLE 3
 01DA                 959  $MACRO ve5x           ; gets a VE byte from page5 or RAM. On entry X contains index.
                      960                                ; Returns byte in A
                      961      lda    page
                      962      cmp    #05T
                      963      bne    ve5xf
                      964      lda    VE_r,x
                      965      bra    ve5xc
                      966  
                      967  ve5xf:
                      968     lda    VE_f3,x
                      969  
                      970  ve5xc:
                      971  
 01DA                 972  $MACROEND
                      973  
                      974  ;                  AFR TABLE 1 for VE1


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 9
MC68HC908GP32 User Bootloader


 01DA                 975  $MACRO AFR1X  ; gets an AFR byte from page6 or RAM. On entry X contains index.
                      976                                ; Returns byte in A
                      977      lda    page
                      978      cmp    #06T
                      979      bne    ve6xf
                      980      lda    VE_r,x
                      981      bra    ve6xc
                      982  
                      983  ve6xf:
                      984     lda    AFR_f1,x
                      985  
                      986  ve6xc:
                      987  
 01DA                 988  $MACROEND
                      989  
                      990  ;                 AFR TABLE 2 for VE3
 01DA                 991  $MACRO AFR2X     ; gets an AFR byte from page7 or RAM. On entry X contains index.
                      992                                ; Returns byte in A
                      993      lda    page
                      994      cmp    #07T
                      995      bne    ve7xf
                      996      lda    VE_r,x
                      997      bra    ve7xc
                      998  
                      999  ve7xf:
                     1000      lda    AFR_f2,x
                     1001  
                     1002  ve7xc:
                     1003  
 01DA                1004  $MACROEND
                     1005  
                     1006  ***************************************************************************
                     1007  **
                     1008  ** Main Routine Here - Initialization and main loop
                     1009  **
                     1010  ** Note: Org down 128 bytes below the "rom_start" point
                     1011  **       because of erase bug in bootloader routine
                     1012  ** All MS HC908 continue to be shipped with the bug to preserve backward
                     1013  ** compatability (BB posted on this on www.msefi.com)
                     1014  ** Do not mess with this offset or your chip won't boot!
                     1015  **
                     1016  ** Note: Items commented out after the Start entry point are
                     1017  **       taken care of in the Boot_R12.asm code
                     1018  ***************************************************************************
 8128                1019       org     {rom_start + 128}
                     1020  
                     1021  Start:
 8128 [03] 4501ED    1022       ldhx    #init_stack+1 ; Set the stack Pointer
 812B [02] 94        1023       txs                                   ; Move before burner to avoid conflict
                     1024  
                     1025  ; Clock now 8MHz - DJLH
 812C [04] 1936      1026       bclr    BCS,pctl                ; Select external Clock Reference
 812E [04] 1B36      1027       bclr    PLLON,pctl              ; Turn Off PLL
 8130 [04] 6E0236    1028       mov         #$02,pctl           ; Set P and E Bits
 8133 [04] 6ED03A    1029       mov         #$D0,pmrs           ; Set L
 8136 [04] 6E0338    1030       mov         #$03,pmsh           ; Set N (MSB)
 8139 [04] 6ED139    1031       mov         #$D1,pmsl           ; Set N (LSB)
 813C [04] 1E37      1032       bset    AUTO,pbwc
 813E [04] 1A36      1033       bset    PLLON,pctl              ; Turn back on PLL
                     1034  
                     1035  ;PLLwait:
 8140 [05] 0D37FD    1036      brclr   LOCK,pbwc,*
 8143 [04] 1836      1037      bset    BCS,pctl
                     1038  ;   Set all RAM to known value - for code runaway protection.
                     1039  ;   If there is ever a code runaway, and processor tries
                     1040  ;    executing this as an opcode ($32) then a reset will occur.
                     1041  
 8145 [03] 450040    1042       ldhx   #ram_start       ; Point to start of RAM
                     1043  ClearRAM:
 8148 [02] A632      1044       lda        #$32             ; This is an illegal op-code -
                     1045                                           ; cause reset if executed
 814A [02] F7        1046       sta    ,x                   ; Set RAM location
 814B [02] AF01      1047       aix    #1                   ; advance pointer
 814D [03] 650240    1048       cphx   #ram_last+1      ; done ?
 8150 [03] 26F6      1049       bne    ClearRAM         ; loop back if not
                     1050  
                     1051  
                     1052  ; Set up the port data-direction registers
                     1053  
 8152 [02] A600      1054      lda    #%00000000
 8154 [03] B705      1055      sta    ddrb              ; Set as inputs (ADC will select which channel later)
 8156 [02] A630      1056      lda    #%00110000                ; Turn off injectors (inverted output)
 8158 [03] B703      1057      sta    portd
 815A [04] 160F      1058      bset   launch,ptdpue
 815C [04] 120F      1059      bset   NosIn,ptdpue              ; Set all the inputs internal pull ups On
 815E [04] C6E074    1060      lda    feature8_f       ; using spark F ?
 8161 [02] A510      1061      bit    #spkfopb
 8163 [03] 2704      1062      beq    no_spk_f
 8165 [02] A6F5      1063      lda    #%11110101       ; make pin an output
 8167 [03] 2004      1064      bra     store_ddrd
                     1065  
                     1066  no_spk_f:
 8169 [04] 140F      1067      bset   KnockIn,ptdpue
 816B [02] A6F1      1068      lda    #%11110001                ; Changed to 0 is an output
                     1069  
                     1070  store_ddrd:
 816D [03] B707      1071      sta    ddrd                          ; Outputs for injector
                     1072  
 816F [03] 3F00      1073      clr    porta
 8171 [02] A6FF      1074      lda    #%11111111
 8173 [03] B704      1075      sta    ddra                          ; Outputs for Fp and Spark
 8175 [02] A600      1076      lda    #$00
 8177 [03] B702      1077      sta    portc
                     1078  
                     1079  ;is PTC4 an input?    - see also 'B' code section
 8179 [04] C6E00B    1080      lda    feature1_f       ; we haven't copied to RAM yet
 817C [02] A501      1081      bit    #wd_2trigb
 817E [03] 2704      1082      beq    norm_op_ddrc
 8180 [02] A60F      1083      lda    #%00001111       ; make PTC4 an input for second trigger
 8182 [03] 2002      1084      bra    op_ddrc
                     1085  
                     1086  norm_op_ddrc:
 8184 [02] A61F      1087      lda    #%00011111                ; ** Was 11111111
                     1088  
                     1089  op_ddrc:
 8186 [03] B706      1090      sta    ddrc                      ; Outputs for LED
 8188 [02] A601      1091      lda    #%00000001                ; Serial Comm Port
 818A [03] B70C      1092      sta    ddre
                     1093  
                     1094  ; Set up the Real-time clock Timer (TIM2)
 818C [04] 6E332B    1095      MOV    #%00110011,t2sc   ; Stop Timer so it can be set up
                     1096                                               ; No overflow interrupt, stop,
                     1097                                               ; reset, div / 8
 818F [04] 6EFF2E    1098      mov    #$FF,T2MODH               ; Free running timer
 8192 [04] 6EFF2F    1099      mov    #$FF,T2MODL
 8195 [04] 6E0031    1100      mov    #0T,T2CH0H                ; Channel 0 high, 0
 8198 [04] 6E6432    1101      mov    #100T,T2CH0L              ; Channel 0 low, 100 = 0.1 ms @ 8.0MHz - DJLH
 819B [04] 6E5430    1102      mov    #%01010100,T2SC0  ; Output compare, interrupt enabled
 819E [04] 6E0034    1103      mov    #$00,T2CH1H               ; Channel 1 high, to be used for spark control
 81A1 [04] 6E0035    1104      mov    #$00,T2CH1L               ; Channel 1 low, 0
 81A4 [04] 6E5433    1105      mov    #%01010100,T2SC1  ; Channel 1 Output compare, interrupt enabled
 81A7 [04] 1F33      1106      bclr   TOF,T2SC1         ; clear any pending interrupt
 81A9 [04] 1D33      1107      bclr   TOIE,T2SC1                ; Disable timer interrupt until we are ready
 81AB [04] 6E532B    1108      mov    #%01010011,T2SC   ; Start timer, overflow int, div / 8
                     1109  
                     1110  ; Set up the PWM for the Injector (for current limit mode)


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 10
MC68HC908GP32 User Bootloader


 81AE [04] 6E3220    1111      MOV    #T1Timerstop,t1sc ; Stop Timer so it can be set up
 81B1 [04] 6E0023    1112      mov    #$00,T1MODH
 81B4 [04] 6E6424    1113      mov    #$64,T1MODL                ; set timer modulus register to 100 decimal
 81B7 [04] 6E0026    1114      mov    #$00,T1CH0H
 81BA [04] C6E199    1115      lda    INJPWM_f1
 81BD [03] B727      1116      sta    T1CH0L
 81BF [04] 6E0029    1117      mov    #$00,T1CH1H
 81C2 [04] C6E021    1118      lda    dtmode_f
 81C5 [02] A510      1119      bit    #alt_i2t2
 81C7 [03] 2705      1120      beq    setpwmsingle
 81C9 [04] C6E299    1121      lda    INJPWM_f2
 81CC [03] 2003      1122      bra    store_pwm
                     1123  
                     1124  setpwmsingle:
 81CE [04] C6E199    1125      lda    INJPWM_f1
                     1126  
                     1127  store_pwm:
 81D1 [03] B72A      1128      sta    T1CH1L
                     1129  
                     1130  ; Set up SCI port
 81D3 [02] A630      1131       lda    #$30               ; This is 9615 baud w/ the osc frequency 8.0M - DJLH
 81D5 [03] B719      1132       sta        scbr
 81D7 [04] 1C13      1133       bset   ensci,scc1         ; Enable SCI
 81D9 [04] 1414      1134       bset   RE,SCC2    ; Enable receiver
 81DB [04] 1A14      1135      bset   SCRIE,SCC2 ; Enable Receive interrupt
 81DD [03] B616      1136       lda        SCS1           ; Clear SCI transmitter Empty Bit
 81DF [03] 3F8A      1137      clr    txcnt
 81E1 [03] 3F8B      1138      clr    txgoal
                     1139  
                     1140  ; Set up Interrupts
 81E3 [04] 6E041D    1141      mov    #%00000100,INTSCR ;Enable IRQ
                     1142  
                     1143  ;clear water outputs
 81E6 [04] 1B00      1144      bclr    water,porta              ;water injection
 81E8 [04] 1900      1145      bclr    water2,porta           ;2nd water injection output
 81EA [05] 086402    1146      brset   out3sparkd,feature2,w_no3
 81ED [04] 1103      1147      bclr    Output3,portd
                     1148  
                     1149  w_no3:
                     1150  
                     1151  ; Load the constants (VE Table, etc) from Flash to RAM - the program
                     1152  ; uses the RAM values.
                     1153  ; Changed!
                     1154  ; For multi table work we always operate from flash unless directed to
                     1155  ; copy the data into RAM for tuning. Even then only the VE tables will
                     1156  ; use the RAM version.  Extra coding could change this, but the initial
                     1157  ; release will use all other variables from flash ONLY - so be sure to
                     1158  ; "send" the data after changes.
                     1159  
 81EF [02] A6FF      1160      lda      #$ff
 81F1 [04] C70105    1161      sta      page            ; select invalid page to make sure we run from flash
                     1162  
                     1163  ; Set up RAM Variable - also when burning page0 search for "burning page0"
 81F4 [04] C6E00B    1164      lda     feature1_f
 81F7 [03] B763      1165      sta     feature1
 81F9 [04] C6E00C    1166      lda     feature2_f
 81FC [03] B764      1167      sta     feature2
 81FE [04] C6E06D    1168      lda     feature7_f
 8201 [03] B765      1169      sta     feature7
 8203 [04] C6E001    1170      lda     outputpins_f
 8206 [03] B762      1171      sta     outputpins
 8208 [04] C6E000    1172      lda     personality_f
 820B [03] B761      1173      sta     personality              ;move from flash to ram
 820D [03] 3F7D      1174      clr     mms
 820F [03] 3F7E      1175      clr     ms
 8211 [03] 3F7F      1176      clr     tenth
 8213 [03] 3F40      1177      clr     secl
 8215 [03] 3F80      1178      clr     sech
 8217 [03] 3F41      1179      clr     squirt
 8219 [03] 3F42      1180      clr     engine
 821B [03] 3F70      1181      clr     rpmph
 821D [03] 3F71      1182      clr     rpmpl
 821F [03] 3F72      1183      clr     rpmch
 8221 [03] 3F73      1184      clr     rpmcl
 8223 [03] 3F4D      1185      clr     rpm
 8225 [03] 3F76      1186      clr          flocker
 8227 [02] A600      1187      lda     #$00
 8229 [03] B7FF      1188      sta     usc100Hprv  ;* Counter for IRQ period calcs Hi byte (.1mS free running counter previous)
 822B [04] C70100    1189      sta     usc100Lprv  ;* Counter for IRQ period calcs Lo byte (.1mS free running counter previous)
 822E [03] B774      1190      sta     usc100H     ;* Counter for IRQ period calcs Hi byte (.1mS free running counter)
 8230 [03] B775      1191      sta     usc100L     ;* Counter for IRQ period calcs Lo byte (.1
 8232 [03] B7FC      1192      sta     iTimepX
 8234 [03] B7FD      1193      sta     iTimepH
 8236 [03] B7FE      1194      sta     iTimepL
 8238 [04] C70102    1195      sta     IRQpL
 823B [03] B7DA      1196      sta     KnockAdv
 823D [03] B7D9      1197      sta     KnockTimLft
 823F [03] B75D      1198      sta     KnockAngle
 8241 [03] B7E1      1199      sta     TCAngle
 8243 [04] C70101    1200      sta     IRQpH
 8246 [03] B75C      1201      sta     CltIatAngle
 8248 [03] B7E0      1202      sta     TCAccel
 824A [03] B76E      1203      sta     pwcalc1
 824C [03] B76F      1204      sta     pwcalc2
 824E [03] B74E      1205      sta     pw1
 8250 [03] B753      1206      sta     pw2
 8252 [03] 3F6C      1207      clr     pwrun1
 8254 [03] 3F6D      1208      clr     pwrun2
 8256 [02] A6FF      1209      lda     #$FF
 8258 [03] B7D1      1210      sta     TPSlast
 825A [04] C70103    1211      sta     rpmlast
 825D [03] 3F82      1212      clr     egocount
 825F [04] C7010B    1213      sta     N2Olaunchdel
 8262 [03] 450000    1214      ldhx    #0
 8265 [04] 35E7      1215      sthx    dwelldelay1
 8267 [04] 35E9      1216      sthx    dwelldelay2
 8269 [04] 35EB      1217      sthx    dwelldelay3
 826B [04] 35ED      1218      sthx    dwelldelay4
 826D [04] 35EF      1219      sthx    dwelldelay5
 826F [04] 35F1      1220      sthx    dwelldelay6
 8271 [02] A6BB      1221      lda     #$BB
 8273 [03] B743      1222      sta     baro
 8275 [03] B744      1223      sta     map
 8277 [03] B745      1224      sta     mat
 8279 [03] B746      1225      sta     clt
 827B [03] B747      1226      sta     tps
 827D [03] B748      1227      sta     batt
 827F [02] A664      1228      lda     #$64
 8281 [03] B74B      1229      sta     aircor
 8283 [03] B752      1230      sta     vecurr
 8285 [03] B750      1231      sta     barocor
 8287 [03] B74C      1232      sta     warmcor
 8289 [03] B74A      1233      sta     egocorr
 828B [03] B75E      1234      sta     EgoCorr2
 828D [03] B789      1235       sta         tpsfuelcut
 828F [03] 3F51      1236      clr     gammae
 8291 [03] 3F4F      1237      clr     tpsaccel
 8293 [03] 3F88      1238      clr     Decay_Accel
 8295 [03] 3F84      1239      clr     igncount1
 8297 [03] 3F85      1240      clr     igncount2
 8299 [03] 3F55      1241      clr     idleDC                           ; set fully closed
 829B [03] 3FCD      1242      clr     idlelastdc                       ; PWM idle kg
 829D [04] 1F42      1243      bclr    idleon,engine                ; PWM idle kg
 829F [04] 1D6B      1244      bclr    idashbit,EnhancedBits6   ; PWM idle kg
 82A1 [04] 1F6B      1245      bclr    istartbit,EnhancedBits6  ; PWM idle kg
 82A3 [04] C6E057    1246      lda     Spark2Delay_f


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 11
MC68HC908GP32 User Bootloader


 82A6 [03] B7DE      1247      sta     ST2Timer                 ; Set delay timer for ST2
 82A8 [04] C6E05D    1248      lda     VE3Delay_f
 82AB [03] B7DF      1249      sta     VE3Timer                 ; Set Delay timer for VE 3
 82AD [01] 4F        1250      clra
 82AE [04] C70111    1251       sta         idledelayclock                  ; PWM idle kg
 82B1 [03] B7E2      1252      sta     TCSparkCut
 82B3 [03] B7C4      1253      sta     SRevLimTimeLeft
 82B5 [04] C70108    1254      sta     NitrousAngle                 ; Clear the NOS Angle
 82B8 [04] C70109    1255      sta     NosPW                            ; Clear the Nos PW
 82BB [03] B7D8      1256      sta     SparkCutCnt                      ; Spark Cut counter - Enhanced
 82BD [04] C7010A    1257      sta     pw_staged                        ; Reset the Staged PW
 82C0 [04] C7010D    1258       sta         pw_staged2
 82C3 [04] C7010E    1259       sta         stgTransitionCnt
 82C6 [04] C7010F    1260       sta         idlAdvHld
 82C9 [03] 3F5F      1261      clr     SparkBits
 82CB [03] 3FB3      1262      clr     Sparkonleftah
 82CD [03] 3FB4      1263      clr     Sparkonleftal
 82CF [03] 3FB5      1264      clr     Sparkonleftbh
 82D1 [03] 3FB6      1265      clr     Sparkonleftbl
 82D3 [03] 3FB7      1266      clr     Sparkonleftch
 82D5 [03] 3FB8      1267      clr     Sparkonleftcl
 82D7 [03] 3FB9      1268      clr     Sparkonleftdh
 82D9 [03] 3FBA      1269      clr     Sparkonleftdl
 82DB [03] 3FBB      1270      clr     Sparkonlefteh
 82DD [03] 3FBC      1271      clr     Sparkonleftel
 82DF [03] 3FBD      1272      clr     Sparkonleftfh
 82E1 [03] 3FBE      1273      clr     Sparkonleftfl
 82E3 [03] 3FF5      1274      clr     lowresH                          ; low res (0.1ms) timer
 82E5 [03] 3FF6      1275      clr     lowresL
 82E7 [04] C6E06E    1276      lda     dwellcrank_f
 82EA [03] B7F7      1277      sta     dwelldms                 ; initial dwell period
 82EC [04] 6E10F8    1278      mov     #$10,dwellush            ; } high speed dwell delay, default of 4.1ms
 82EF [03] 3FF9      1279      clr     dwellusl                 ; } until calc in main loop
 82F1 [04] 145F      1280      bset    SparkLSpeed,SparkBits    ; At boot turn on low speed ignition
 82F3 [03] 3F60      1281      clr     RevLimBits
 82F5 [03] 3F66      1282      clr     EnhancedBits
 82F7 [03] 3F67      1283      clr     EnhancedBits2
 82F9 [03] 3F69      1284      clr     EnhancedBits4
 82FB [03] 3F6A      1285      clr     EnhancedBits5
 82FD [03] 3F6B      1286      clr     EnhancedBits6
 82FF [03] 3F68      1287      clr     coilsel
 8301 [04] 1068      1288      bset    coilabit,coilsel
 8303 [04] 1860      1289      bset    coilerr,RevLimBits           ; set "error" bit so first coil found is used
                     1290  
                     1291  ;possible that this calc could go wrong if a large "addition" was used but then a small
                     1292  ;real angle. Shouldn't happen if angles set correctly.
 8305 [04] C6E3A8    1293      lda     TriggAngle_f          ;* TriggAngle_f = 253 (253 * .352 = 89 degrees)
 8308 [02] A139      1294      cmp     #57T                           ; check for next cyl mode
 830A [03] 2202      1295      bhi     init_crang                     ; trigger angle > 20, continue
 830C [04] 1A69      1296      bset    nextcyl,EnhancedBits4
                     1297  
                     1298  init_crang:
 830E [04] C6E3AB    1299      lda     CrankAngle_f                   ;* CrankAngle_f = 56 (56 - 28.4 = 27.6 * .352 = 9.71 (10 degrees)
 8311 [03] B758      1300      sta     SparkAngle                     ;* SparkAngle now = 56 (10 degrees)
 8313 [04] C6E3A8    1301      lda     TriggAngle_f                   ;* TriggAngle_f = 253 (253 * .352 = 89 degrees)
 8316 [04] C0E3AB    1302      sub     CrankAngle_f                   ;* CrankAngle_f = 56 (56 - 28.4 = 27.6 * .352 = 9.71 (10 degrees)
 8319 [02] AB1C      1303      add     #28T                     ; - - 10deg    ;* 253 - 56 = 197 + 28 = 225 (225 * .352 = 79.2 (80 degrees)
 831B [04] C70106    1304      sta     DelayAngle                     ;* DelayAngle now = 225 (80 degrees)
 831E [04] C6E3AC    1305      lda     SparkHoldCyc_f                 ;* SparkHold_f = 0
 8321 [03] B7E6      1306      sta     wheelcount               ; (HoldSpark)  ;* Wheelcount now = 0
                     1307  
                     1308  init_wheel:
 8323 [04] 6EC3E6    1309      mov     #WHEELINIT,wheelcount    ; holdoff for Neon/Wheel
 8326 [04] 136B      1310      bclr    wsync,EnhancedBits6
 8328 [04] 1502      1311      bclr    wled,portc              ;* Synch LED off  RJH 8/11/23
 832A [04] 146B      1312      bset    whold,EnhancedBits6
 832C [02] A600      1313      lda     #0
 832E [03] B7F3      1314      sta     avgtoothh
 8330 [03] B7F4      1315      sta     avgtoothl
 8332 [02] A6FF      1316      lda     #$FF
 8334 [03] B7AF      1317      sta     iTimeH
 8336 [03] B7B0      1318      sta     iTimeL
 8338 [03] B7AE      1319      sta     iTimeX
 833A [04] 1C69      1320      bset    invspk,EnhancedBits4     ; set inverted
 833C [04] 1669      1321      bset    wspk,EnhancedBits4           ; set that we are doing wasted spark
                     1322  
                     1323  mv_init:
                     1324  ; set MegaView mode to block enhanced comms, S,P,R,X commands reset
                     1325  ; it to allow normal ops
 833E [04] 1C67      1326      bset    mv_mode,EnhancedBits2
 8340 [05] CD8B3E    1327      jsr     turnallsparkoff     ; subroutine
                     1328  
                     1329  start_adc:
                     1330  ; Fire up the ADC, and perform three conversions to get the baro value, IAT
                     1331  ; and the clt temp
                     1332  
 8343 [02] A670      1333       lda         #%01110000      ; Set up divide 8 and internal bus clock source
 8345 [03] B73E      1334       sta         adclk
 8347 [02] A600      1335       lda         #%00000000      ; Select one conversion, no interrupt, AD0
 8349 [03] B73C      1336       sta         adscr
 834B [05] 0F3CFD    1337       brclr   coco,adscr,*    ; wait until conversion is finished
 834E [03] B63D      1338       lda         adr
 8350 [03] B743      1339       sta         baro                    ; Store value in Barometer
 8352 [02] A602      1340       lda         #%00000010      ; Select second conversion, no interrupt, AD2
 8354 [03] B73C      1341       sta         adscr
 8356 [05] 0F3CFD    1342       brclr   coco,adscr,*    ; wait until conversion is finished
 8359 [03] BE3D      1343       ldx     adr
 835B [04] D6F200    1344       lda     THERMFACTOR,x
 835E [03] B7CC      1345       sta     coolant             ; Coolant temperature in degrees F + 40
 8360 [02] A603      1346       lda         #%00000011      ; Select third conversion, no interrupt, AD3
 8362 [03] B73C      1347       sta         adscr
 8364 [05] 0F3CFD    1348       brclr   coco,adscr,*    ; wait until conversion is finished
 8367 [03] BE3D      1349       ldx     adr
 8369 [04] D6F200    1350       lda     THERMFACTOR,x
 836C [04] C70107    1351      sta     airTemp
 836F [03] 3F8E      1352       clr     adsel              ; Clear the channel selector
                     1353  
                     1354  TURN_ON_INTS:
 8371 [02] 9A        1355      cli                                 ; Turn on all interrupts now
                     1356  
                     1357  ***************************************************************************
                     1358  **
                     1359  ** Prime Pulse - Shoot out one priming pulse of length PRIMEP now or
                     1360  ** after 2 seconds
                     1361  ** Also added the facility for 2 priming pulses  P Ringwood
                     1362  **
                     1363  ***************************************************************************
 8372 [04] 1E66      1364      bset   Primed,EnhancedBits               ; set the primed bit
 8374 [05] CD8AB7    1365      jsr    crankingModePrime
 8377 [03] B699      1366      lda    tmp6
 8379 [04] 1042      1367      bset   running,engine
 837B [04] 1000      1368      bset   fuelp,porta
 837D [03] B74E      1369      sta    pw1
 837F [03] 3F6C      1370      clr    pwrun1
 8381 [04] 1441      1371      bset   sched1,squirt
 8383 [04] 1041      1372      bset   inj1,squirt
 8385 [03] B753      1373      sta    pw2
 8387 [03] 3F6D      1374      clr    pwrun2
 8389 [04] 1841      1375      bset   sched2,squirt
 838B [04] 1241      1376      bset   inj2,squirt
                     1377  
                     1378  *****************************************************************************
                     1379  *****************************************************************************
                     1380  **
                     1381  **  Correction Factor Lookup Table Access
                     1382  **


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 12
MC68HC908GP32 User Bootloader


                     1383  **   Perform table lookup for barometer and air density correction factors,
                     1384  **    and performs coolant temperature conversion from counts to degrees F.
                     1385  **
                     1386  **   All tables are pre-computed for all 256 different values
                     1387  **    and stored in FLASH.
                     1388  **
                     1389  **   Note: Coolant temperature is in degrees F plus 40 - this allows
                     1390  **    unsigned numbers for full temperature range of -40 to 215.
                     1391  **
                     1392  ***************************************************************************
                     1393  ***************************************************************************
                     1394  ;* Start of main loop
                     1395  ***************************************************************************
                     1396  
                     1397  CalcRunningParameters:
 838D [01] 8C        1398      clrh
 838E [05] 0E6702    1399      brset   OneShotBArro,EnhancedBits2,bEnd_of_Baro  ; Only do this once
                     1400                                                                 ; as we may change the baro value
 8391 [03] 2003      1401      bra     OneShot_Bar   ;* RJH 8/03/23
                     1402  
                     1403  bEnd_of_Baro:
 8393 [03] CC83BA    1404      jmp     End_of_Baro       ; extend branch below
                     1405  
                     1406  OneShot_Bar:
 8396 [04] 1E67      1407      bset    OneShotBArro,EnhancedBits2
 8398 [03] BE43      1408      ldx     baro
                     1409  
                     1410  ; check if within sensible range
 839A [04] C3E052    1411      cpx     BarroHi_f
 839D [03] 2505      1412      blo     Baro_Lo_Check
 839F [04] CEE052    1413      ldx     BarroHi_f
 83A2 [03] 2008      1414      bra     Do_Baro
                     1415  
                     1416  Baro_Lo_Check:
 83A4 [04] C3E053    1417      cpx     BarroLow_f
 83A7 [03] 2203      1418      bhi     Do_Baro
 83A9 [04] CEE053    1419      ldx     BarroLow_f
                     1420  
                     1421  Do_Baro:
 83AC [03] BF43      1422      stx     baro              ; re-store whatever it ended up as
 83AE [04] D6F100    1423      lda     KPAFACTOR4250,x
 83B1 [03] B7CA      1424      sta     Pambient
 83B3 [04] D6F000    1425      lda     BAROFAC4250,x
 83B6 [03] 2000      1426      bra     DoneBaroCorr
                     1427  
                     1428  DoneBaroCorr:
 83B8 [03] B750      1429      sta     barocor                  ; Barometer Correction Gamma
                     1430  
                     1431  End_of_Baro:
                     1432  
                     1433  ; now convert map ADC count into internal kpa
 83BA [03] BE44      1434      ldx     map
                     1435  
                     1436  do_kpa4250:
 83BC [04] D6F100    1437      lda     KPAFACTOR4250,x
                     1438  
                     1439  Donekpa:
 83BF [03] B7CB      1440      sta     kpa
 83C1 [03] BE46      1441      ldx     clt
 83C3 [04] D6F200    1442      lda     THERMFACTOR,x
 83C6 [03] B7CC      1443      sta     coolant                  ; Coolant temperature in degrees F + 40
 83C8 [03] BE45      1444      ldx     mat
 83CA [04] D6F200    1445      lda     THERMFACTOR,x
 83CD [04] C70107    1446      sta     airTemp                  ; Added for enhanced stuff Air Temp in F + 40
                     1447  
                     1448  NormAirDen:
 83D0 [03] BE45      1449      ldx     mat
 83D2 [04] D6F300    1450      lda     AIRDENFACTOR,x
                     1451  
                     1452  Store_AirCor:
 83D5 [03] B74B      1453      sta     AirCor                   ; Air Density Correction Factor
                     1454  
                     1455  ***************************************************************************
                     1456  **
                     1457  ** Computation of RPM
                     1458  **
                     1459  **   Result left in accumulator.
                     1460  **
                     1461  **     rpmk:rpmk+1
                     1462  **     ----------- = rpm
                     1463  **     rpmph:rpmpl
                     1464  **
                     1465  **  rpmk:rpmK+1 = RPM constant = (6,000 * (stroke/2))/ncyl
                     1466  **  rpmph:rpmpl = period count between IRQ pulsed lines, in 0.1 ms resolution
                     1467  **  4Cyl 4 stroke rpmk:rpmk+1 = (6,000 * (4/2)/4 = 3000T, $0BB8, %1011 1011 1000
                     1468  **
                     1469  **
                     1470  ****************************************************************************
                     1471  
                     1472  CalcRPM:  ; 50% re-written in 026i with aim of better odd-fire averaging
 83D7 [05] 004207    1473      brset   running,engine,dorpmCalc
 83DA [04] 5570      1474      ldhx    rpmph
 83DC [03] 2603      1475      bne     dorpmCalc          ; If zero then jump over calculation, - prevent divide by zero
 83DE [03] CC8452    1476      jmp     rpmCalcZero  ; previous branches out of range
                     1477  
                     1478  dorpmCalc: ; tmp12,13,14 used to hold average iTime or avg iTime
 83E1 [02] 9B        1479      sei                    ; must block ints for this little period
 83E2 [05] 4EAE9F    1480      mov    iTimeX,tmp12
 83E5 [05] 4EAFA0    1481      mov    iTimeH,tmp13
 83E8 [05] 4EB0A1    1482      mov    iTimeL,tmp14
 83EB [05] 4EFCA2    1483      mov    iTimepX,tmp15
 83EE [05] 4EFDA3    1484      mov    iTimepH,tmp16
 83F1 [05] 4EFEA4    1485      mov    iTimepL,tmp17
 83F4 [02] 9A        1486      cli
 83F5 [03] B69F      1487      lda    tmp12
 83F7 [03] 2731      1488      beq    rpmCalcFast               ; If we have only 8-bit denominator,
                     1489                                               ; then use native divide
                     1490  
                     1491  ; note, udvd32 re-written so that it uses
                     1492  ; tmp1,2,3,4 as intacc1
                     1493  ; tmp5,6,7,8 as intacc2
                     1494  ; tmp9,10,11 as temp storage instead of extra stack
                     1495  
                     1496  rpmCalcSlow: ; need to divide period (tmp12,13,14) by 100 to obtain period time in 0.1ms
 83F9 [02] AE64      1497      ldx    #100T
 83FB [01] 8C        1498      clrh
 83FC [03] B69F      1499      lda    tmp12
 83FE [07] 52        1500      div                              ; A rem H = (H:A) / X
 83FF [03] B79F      1501      sta    tmp12
 8401 [03] B6A0      1502      lda    tmp13
 8403 [07] 52        1503      div                              ; A rem H = (H:A) / X
 8404 [03] B7A0      1504      sta    tmp13
 8406 [03] B6A1      1505      lda    tmp14
 8408 [07] 52        1506      div                              ; A rem H = (H:A) / X
 8409 [03] B7A1      1507      sta    tmp14
 840B [03] B69F      1508      lda    tmp12
 840D [03] 2643      1509      bne    rpmCalcZero      ; if tmp12>0 then very slow indeed (<100rpm)
 840F [03] 3F94      1510      clr    intacc1
 8411 [03] 3F95      1511      clr    intacc1+1
 8413 [05] 4EA098    1512      mov    tmp13,intacc2
 8416 [05] 4EA199    1513      mov    tmp14,intacc2+1
 8419 [04] C6E19C    1514      lda    rpmk_f1
 841C [03] B796      1515      sta    intacc1+2
 841E [04] C6E19D    1516      lda    rpmk_f1+1
 8421 [03] B797      1517      sta    intacc1+3
 8423 [05] CD984E    1518      jsr    udvd32                ; 32 / 16 divide


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 13
MC68HC908GP32 User Bootloader


 8426 [03] B697      1519      lda    intacc1+3         ; get 8-bit RPM result
 8428 [03] 2029      1520      bra    rpmCalcDone
                     1521  
                     1522  rpmCalcFast:
                     1523  ;This (new) slower code takes the time between IRQs in 1us accuracy to calc the rpm
                     1524  ;this should eliminate the jumpiness at high rpm where one 0.1ms step > 100rpm
                     1525  ;
                     1526  ;Multiply rpmk x 100 then do 32/16 divide using 1us time
 842A [02] A664      1527      lda    #100T
 842C [04] CEE19D    1528      ldx    rpmk_f1+1                 ; LSB of multiplicand.
 842F [05] 42        1529      mul
 8430 [03] B797      1530      sta    intacc1+3                 ; LSB of result stored.
 8432 [03] BF96      1531      stx         intacc1+2                    ; Carry on stack.
 8434 [02] A664      1532      lda    #100T
 8436 [04] CEE19C    1533      ldx    rpmk_f1                   ; MSB of multiplicand.
 8439 [05] 42        1534      mul
 843A [03] BB96      1535      add    intacc1+2                 ; Add in carry from LSB.
 843C [03] B796      1536      sta    intacc1+2         ; MSB of result.
 843E [03] 2401      1537      bcc    nox_of
 8440 [01] 5C        1538      incx
                     1539  
                     1540  nox_of:
 8441 [03] BF95      1541      stx    intacc1+1
 8443 [03] 3F94      1542      clr    intacc1
                     1543  ; rpmk x 100 now dividend
                     1544  ; make iTime the divisor
 8445 [05] 4EA098    1545      mov    tmp13,intacc2
 8448 [05] 4EA199    1546      mov    tmp14,intacc2+1
 844B [05] CD984E    1547      jsr    udvd32         ; 32/16 divide
 844E [03] B697      1548      lda    intacc1+3         ; get 8-bit RPM result
 8450 [03] 2001      1549      bra    rpmCalcDone
                     1550  
                     1551  rpmCalcZero:
 8452 [01] 4F        1552      clra
                     1553  
                     1554  rpmCalcDone:
 8453 [03] B74D      1555      sta    rpm
                     1556  
                     1557  ***************************************************************************
                     1558  ** First, check RPM value to determine if we are cranking or running,
                     1559  ** then calculate the appropriate pulse width.
                     1560  ***************************************************************************
                     1561  CalcPWs:
 8455 [03] B64D      1562      lda    rpm
 8457 [04] C1E82B    1563      cmp    crankRPM_f                ; Check if we are cranking,
 845A [03] 2409      1564      bhs    runIt           ;* branches at or above 3T
 845C [05] 066706    1565      brset  cant_crank,EnhancedBits2,runIt    ; don't allow reentry
                     1566                                                       ; to crank mode while running
                     1567  crankIt:
 845F [05] CD8AB4    1568      jsr    crankingMode
 8462 [03] CC8874    1569      jmp    checkRPMsettings
                     1570  
                     1571  runIt:
                     1572  
                     1573  ;--------------------------------------------------------------------------
                     1574  ; Approximate ranges of the various terms of the equation:
                     1575  ;
                     1576  ;   gammae   90-150, highest when cold, but really of no consequence.
                     1577  ;   vecurr   10-200, biggest range with blown motors.
                     1578  ;   kPa      20-250, biggest range with blown motors.
                     1579  ;   reqFuel  50-150, lowest values with big injectors, blown motors again.
                     1580  ;   battcorr ~100, assume it's constant.
                     1581  ;
                     1582  ; So calc VEcurr * reqFuel before * kPa to minimize overflow.
                     1583  
                     1584  ; calc 'PW1' from table 1
                     1585  
 8465 [04] 1569      1586       bclr    page2,EnhancedBits4     ; set table 1
                     1587  
                     1588  ;***************************************************************************
                     1589  ;***************************************************************************
                     1590  ;**
                     1591  ;**  VE 3-D Table Lookup
                     1592  ;**
                     1593  ;**   This is used to determine value of VE based on RPM and MAP
                     1594  ;**   The table looks like:
                     1595  ;**
                     1596  ;**      105 +....+....+....+....+....+....+....+
                     1597  ;**          ....................................
                     1598  ;**      100 +....+....+....+....+....+....+....+
                     1599  ;**                     ...
                     1600  ;**   KPA                 ...
                     1601  ;**                         ...
                     1602  ;**       35 +....+....+....+....+....+....+....+
                     1603  ;**          5    15   25   35   45   55   65   75 RPM/100
                     1604  ;**
                     1605  ;**
                     1606  ;**  Steps:
                     1607  ;**   1) Find the bracketing KPA positions via tableLookup, put index in
                     1608  ;**       tmp8 and bounding values in tmp9(kpa1) and tmp10(kpa2)
                     1609  ;**   2) Find the bracketing RPM positions via tableLookup, store index
                     1610  ;**       in tmp11 and bounding values in tmp13(rpm1) and tmp14(rpm2)
                     1611  ;**   3) Using the VE table, find the table VE values for tmp15=VE(kpa1,rpm1),
                     1612  ;**       tmp16=VE(kpa1,rpm2), tmp17 = VE(kpa2,rpm1), and tmp18 = VE(kpa2,rpm2)
                     1613  ;**   4) Find the interpolated VE value at the lower KPA range :
                     1614  ;**       x1=rpm1, x2=rpm2, y1=VE(kpa1,rpm1), y2=VE(kpa1,rpm2) - put in tmp19
                     1615  ;**   5) Find the interpolated VE value at the upper KPA range :
                     1616  ;**       x1=rpm1, x2=rpm2, y1=VE(kpa2,rpm1), y2=VE(kpa2,rpm2) - put in tmp11
                     1617  ;**   6) Find the final VE value using the two interpolated VE values:
                     1618  ;**       x1=kpa1, x2=kpa2, y1=VE_FROM_STEP_4, y2=VE_FROM_STEP_5
                     1619  ;**
                     1620  ;***************************************************************************
                     1621  
                     1622  ;***************************************************************************
                     1623  ;** JSM changed it to just be one routine per page. Maybe Eric will kill
                     1624  ;** me, but we've plenty of flash and I'm obviously a bit lazy.
                     1625  ;***************************************************************************
                     1626  
                     1627  VE1_LOOKUP:                          ; ALWAYS page 1
 8467 [01] 8C        1628      clrh
 8468 [01] 5F        1629      clrx
 8469 [04] C6E0B8    1630      lda     feature9_f
 846C [02] A520      1631      bit     #MassAirFlwb
 846E [03] 2704      1632      beq     VE1_LOOKUP_PW1   ; Are we using a MAF on pin X7?
 8470 [03] B65A      1633      lda     o2_fpadc         ; Using MAF thats on pin X7
 8472 [03] 200D      1634      bra     VE1_STEP_1
                     1635  
                     1636  VE1_LOOKUP_PW1:
 8474 [04] C6E1B8    1637      lda     config13_f1
 8477 [02] A504      1638      bit     #c13_cs
 8479 [03] 2604      1639      bne     VE1_AN                   ; Using Alpha_n?
 847B [03] B6CB      1640      lda     kpa                          ; SD, so use kpa for load
 847D [03] 2002      1641      bra     VE1_STEP_1
                     1642  
                     1643  VE1_AN:
 847F [03] B647      1644      lda     tps             ; Alpha_n
                     1645  
                     1646  VE1_STEP_1:
 8481 [03] B7DB      1647      sta     kpa_n
 8483 [03] 45E1AA    1648      ldhx    #KPARANGEVE_f1
 8486 [04] 3594      1649      sthx    tmp1
 8488 [02] A60B      1650      lda     #$0b                     ; 12x12
 848A [03] B796      1651      sta     tmp3
 848C [03] B6DB      1652      lda     kpa_n
 848E [03] B797      1653      sta     tmp4
 8490 [05] CD97B6    1654      jsr     tableLookup


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 14
MC68HC908GP32 User Bootloader


 8493 [03] B694      1655      lda     tmp1
 8495 [03] B695      1656      lda     tmp2
 8497 [05] 4E989B    1657      mov     tmp5,tmp8                ; Index
 849A [05] 4E949C    1658      mov     tmp1,tmp9                ; X1
 849D [05] 4E959D    1659      mov     tmp2,tmp10               ; X2
                     1660  
                     1661  VE1_STEP_2:
 84A0 [03] 45E19E    1662      ldhx    #RPMRANGEVE_f1
 84A3 [04] 3594      1663      sthx    tmp1
 84A5 [04] 6E0B96    1664      mov     #$0b,tmp3                ; 12x12
 84A8 [05] 4E4D97    1665      mov     rpm,tmp4
 84AB [05] CD97B6    1666      jsr     tableLookup
 84AE [05] 4E989E    1667      mov     tmp5,tmp11               ; Index
 84B1 [05] 4E94A0    1668      mov     tmp1,tmp13               ; X1
 84B4 [05] 4E95A1    1669      mov     tmp2,tmp14               ; X2
                     1670  
                     1671  VE1_STEP_3:
 84B7 [01] 8C        1672      clrh
 84B8 [02] AE0C      1673      ldx     #$0c                     ; 12x12
 84BA [03] B69B      1674      lda     tmp8
 84BC [01] 4A        1675      deca
 84BD [05] 42        1676      mul
 84BE [03] BB9E      1677      add     tmp11
 84C0 [01] 4A        1678      deca
 84C1 [01] 97        1679      tax
 84C2 macro          1680      VE1X
 84C2 [04] C60105    1681   LDA PAGE  
 84C5 [02] A101      1682   CMP #01T  
 84C7 [03] 2605      1683   BNE VE1XF  
 84C9 [04] D60112    1684   LDA VE_R,X  
 84CC [03] 2003      1685   BRA VE1XC  
                     1686  VE1XF:  
 84CE [04] D6E100    1687   LDA VE_F1,X  
                     1688  VE1XC:  
 84D1 [03] B7A2      1689      sta     tmp15
 84D3 [01] 5C        1690      incx
 84D4 macro          1691      VE1X
 84D4 [04] C60105    1692   LDA PAGE  
 84D7 [02] A101      1693   CMP #01T  
 84D9 [03] 2605      1694   BNE VE1XF  
 84DB [04] D60112    1695   LDA VE_R,X  
 84DE [03] 2003      1696   BRA VE1XC  
                     1697  VE1XF:  
 84E0 [04] D6E100    1698   LDA VE_F1,X  
                     1699  VE1XC:  
 84E3 [03] B7A3      1700      sta     tmp16
 84E5 [02] AE0C      1701      ldx     #$0c                     ; 12x12
 84E7 [03] B69B      1702      lda     tmp8
 84E9 [05] 42        1703      mul
 84EA [03] BB9E      1704      add     tmp11
 84EC [01] 4A        1705      deca
 84ED [01] 97        1706      tax
 84EE macro          1707      VE1X
 84EE [04] C60105    1708   LDA PAGE  
 84F1 [02] A101      1709   CMP #01T  
 84F3 [03] 2605      1710   BNE VE1XF  
 84F5 [04] D60112    1711   LDA VE_R,X  
 84F8 [03] 2003      1712   BRA VE1XC  
                     1713  VE1XF:  
 84FA [04] D6E100    1714   LDA VE_F1,X  
                     1715  VE1XC:  
 84FD [03] B7A4      1716      sta     tmp17
 84FF [01] 5C        1717      incx
 8500 macro          1718      VE1X
 8500 [04] C60105    1719   LDA PAGE  
 8503 [02] A101      1720   CMP #01T  
 8505 [03] 2605      1721   BNE VE1XF  
 8507 [04] D60112    1722   LDA VE_R,X  
 850A [03] 2003      1723   BRA VE1XC  
                     1724  VE1XF:  
 850C [04] D6E100    1725   LDA VE_F1,X  
                     1726  VE1XC:  
 850F [03] B7A5      1727      sta     tmp18
 8511 [05] CD8B00    1728      jsr     VE_STEP_4
 8514 [05] 4E9952    1729      mov     tmp6,vecurr
                     1730  
                     1731  CalcGammaE:
                     1732  
                     1733  ; Now we do all the WUE, TAE and EGO in sequence rather than subroutines
                     1734  ; (ram saving?)
                     1735  
                     1736  ***************************************************************************
                     1737  **  PW Correction Factor subroutines.
                     1738  ***************************************************************************
                     1739  ***************************************************************************
                     1740  **
                     1741  ** Warm-up and After-start Enrichment Section
                     1742  **
                     1743  ** The Warm-up enrichment is a linear interpolated value from WWU (10 points)
                     1744  **  which are placed at different temperatures
                     1745  **
                     1746  ** Method:
                     1747  **
                     1748  ** 1) Perform ordered table search of WWU (using coolant variable) to determine
                     1749  **  which bin.
                     1750  ** 2) Perform linear interpolation to get interpolated warmup enrichment
                     1751  **
                     1752  ** Also, the after-start enrichment value is calculated and applied here - it
                     1753  ** is an added percent value on top of the warmup enrichment, and it is applied
                     1754  ** for the number of ignition cycles specified in AWC. This enrichment starts
                     1755  ** at a value of AWEV at first, then it linearly interpolates down to zero
                     1756  ** after AWC cycles.
                     1757  **
                     1758  ** 3) If (startw, engine is set) then:
                     1759  ** 4) compare if (awc < ASEcount) then:
                     1760  ** 5) x1=0, x2=AWC, y1=AWEV, y2=0, x=ASEcount, y=ASEenrichment
                     1761  ** 6) else clear startw bit in engine
                     1762  **
                     1763  ** During calcs we use tmp31 for result then store at end
                     1764  ***************************************************************************
                     1765  
                     1766  WUE_CALC:
 8517 [05] 03420E    1767      brclr   crank,engine,WUE1  ; already out of crank mode
 851A [04] 1342      1768      bclr    crank,engine
 851C [03] 3FE4      1769      clr     TCCycles
 851E [03] 3FE0      1770      clr     TCAccel
 8520 [04] 1442      1771      bset    startw,engine
 8522 [04] 1642      1772      bset    warmup,engine
 8524 [04] 1F69      1773      bclr    FxdASEDone,EnhancedBits4   ; not done yet
 8526 [03] 3F83      1774      clr     ASEcount
                     1775  
                     1776  WUE1:
 8528 [05] 064206    1777      brset   warmup,engine,WUE1a   ; only run code if in warmup
 852B [04] 6E64DC    1778      mov     #100T,tmp31           ; ensure wue is 100%
 852E [03] CC85BC    1779      jmp     WUE_DONE
                     1780  
                     1781  WUE1a:
 8531 [03] B6CC      1782      lda     coolant
 8533 [02] A1CD      1783      cmp     #205T
 8535 [03] 242A      1784      bhs     Warm_Done_Now  ; If coolant is >165F (greater than the max setting)
                     1785  
                     1786  ; Warm_NotDone:
 8537 [03] 459A94    1787      ldhx    #WWURANGE
 853A [04] 3594      1788      sthx    tmp1
 853C [04] 6E0996    1789      mov     #$09,tmp3
 853F [03] B6CC      1790      lda     coolant


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 15
MC68HC908GP32 User Bootloader


 8541 [03] B797      1791      sta     tmp4
 8543 [05] CD97B6    1792      jsr     tableLookup
 8546 [01] 8C        1793      clrh
 8547 [03] BE98      1794      ldx     tmp5
 8549 [04] D6E816    1795      lda     WWU_f1,x
 854C [03] B797      1796      sta     liY2
 854E [01] 5A        1797      decx
 854F [04] D6E816    1798      lda     WWU_f1,x
 8552 [03] B796      1799      sta     liY1
 8554 [03] B6CC      1800      lda     coolant
 8556 [03] B798      1801      sta     liX
 8558 [05] CD97D1    1802      jsr     LinInterp
 855B [03] B699      1803      lda     tmp6
 855D [03] B7DC      1804      sta     tmp31   ; save result
 855F [03] 200C      1805      bra     WUE2    ; only end warmup when reached temp
                     1806  
                     1807  ; Outside of warmup range - clear warmup enrichment mode (also ends any ASE)
                     1808  Warm_Done_Now:
 8561 [04] 6E64DC    1809      mov     #100T,tmp31
 8564 [04] 1E69      1810      bset    FxdASEDone,EnhancedBits4
 8566 [04] 1542      1811      bclr    startw,engine
 8568 [04] 1742      1812      bclr    warmup,engine
                     1813  
                     1814  jWUE_DONE:
 856A [03] CC85BC    1815          jmp     WUE_DONE
                     1816  
                     1817  WUE2:
                     1818  
                     1819  WUE2_ledskip:
 856D [05] 0542FA    1820      brclr   startw,engine,jWUE_DONE
 8570 [03] B683      1821      lda     ASEcount
 8572 [04] C1E5B2    1822      cmp     awc_f1                   ; Check if ASE period has expired.
 8575 [03] 2443      1823      bhs     WUE3
                     1824  
                     1825  ; Table ASE stuff based on coolant temp - PR
                     1826  Table_ASEStuff:
 8577 [05] 4ECC97    1827      mov     coolant,tmp4
 857A [03] 459A94    1828      ldhx    #WWURANGE
 857D [04] 3594      1829      sthx    tmp1
 857F [04] 6E0996    1830      mov     #$09,tmp3                ; 10 bits wide
 8582 [05] CD97B6    1831      jsr     tableLookup              ; This finds the bins when the temperatures are set
 8585 [01] 8C        1832      clrh
 8586 [03] BE98      1833      ldx     tmp5
 8588 [04] D6E5A8    1834      lda     ASEVTbl_f,x
 858B [03] B797      1835      sta     liY2
 858D [01] 5A        1836      decx
 858E [04] D6E5A8    1837      lda     ASEVTbl_f,x              ; This finds the values for the
                     1838                                               ; ase percentage for the temperature
 8591 [03] B796      1839      sta     liY1
 8593 [05] 4ECC98    1840      mov     coolant,liX
 8596 [05] CD97D1    1841      jsr     LinInterp                ; tmp6 contains amount of ase
                     1842                                               ; enrichment in percent for this temperature
 8599 [03] 3F94      1843      clr     liX1
 859B [04] C6E5B2    1844      lda     AWC_f1
 859E [03] B795      1845      sta     liX2
 85A0 [03] B699      1846      lda     tmp6                     ; Use the value from the interpolated
                     1847                                               ; table rather than the normal value
 85A2 [03] B796      1848      sta     liY1
 85A4 [03] 3F97      1849      clr     liY2
 85A6 [03] 3F98      1850      clr     liX
 85A8 [05] 4E8398    1851      mov     ASEcount,liX
                     1852  
                     1853  All_ASECount:
 85AB [05] CD97D1    1854      jsr     LinInterp
 85AE [03] B699      1855      lda     tmp6
 85B0 [03] BBDC      1856      add     tmp31
 85B2 [03] 2402      1857      bcc     aacok
 85B4 [02] A6FF      1858      lda     #255T           ; overflowed, rail at 255%
                     1859  
                     1860  aacok:
 85B6 [03] B7DC      1861      sta     tmp31
 85B8 [03] 2002      1862      bra     WUE_DONE
                     1863  
                     1864  WUE3:
 85BA [04] 1542      1865      bclr    startw,engine    ; ASE period terminated, turn off bit.
                     1866  
                     1867  WUE_DONE:
 85BC [05] 4EDC4C    1868      mov     tmp31,warmcor   ; only store in warmcor after all calcs
                     1869  
                     1870  ***************************************************************************
                     1871  **
                     1872  **  Throttle Position Acceleration Enrichment
                     1873  **
                     1874  **   Method is the following:
                     1875  **
                     1876  **
                     1877  **   ACCELERATION ENRICHMENT:
                     1878  **   If (TPS < TPSlast) goto DECELERATION ENLEANMENT
                     1879  **   If (TPS - TPSlast) > TPSthresh and TPSAEN == 0 {
                     1880  **      Turn on acceleration enrichment.
                     1881  **      1) Set acceleration mode.
                     1882  **      2) Continuously determine rate-of-change of throttle, and
                     1883  **          perform interpolation of TPSAQ values to determine
                     1884  **          acceleration enrichment amount to apply.
                     1885  **   }
                     1886  **   If (TPSACLK > TPSACLKCMP) and TPSAEN is set {
                     1887  **      1) Clear TPSAEN engine bit.
                     1888  **      2) Set TPSACCEL to 0 ms.
                     1889  **      3) Go to EGO Delta Step Check Section.
                     1890  **   }
                     1891  **
                     1892  **
                     1893  **   DECELERATION ENLEANMENT:
                     1894  **   If (TPSlast - TPS) > TPSthresh {
                     1895  **      If TPSAEN == 1 {
                     1896  **         1) TPSACCEL = 0 ms (terminate AE early)
                     1897  **         2) Clear TPSAEN bit in ENGINE
                     1898  **         3) Go to EGO Delta Step
                     1899  **      }
                     1900  **      If RPM > 15 {
                     1901  **         Turn on deceleration fuel cut.
                     1902  **         1) Set TPSACCEL value to TPSDQ
                     1903  **         2) Set TPSDEN bit in ENGINE
                     1904  **         3) Go to EGO Delta Step Check Section
                     1905  **      }
                     1906  **   }
                     1907  **   else {
                     1908  **      If TPSDEN == 1 {
                     1909  **         1) Clear TPSDEN bit in ENGINE
                     1910  **         2) TPSACCEL = 0 ms
                     1911  **         3) Go to EGO Delta Step Check Section
                     1912  **      }
                     1913  **   }
                     1914  **
                     1915  ***************************************************************************
                     1916  
                     1917  TAE_CALC:
 85BF [02] 9B        1918      sei
 85C0 [05] 4E4794    1919      mov     tps,tmp1
 85C3 [03] B6D1      1920      lda     TPSlast
 85C5 [03] B795      1921      sta     tmp2
 85C7 [02] 9A        1922      cli
 85C8 [03] B694      1923      lda     tmp1
 85CA [03] B195      1924      cmp     tmp2
 85CC [03] 220E      1925      bhi     AE_CHK
 85CE [03] 2703      1926      beq     Dec_Accel


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 16
MC68HC908GP32 User Bootloader


 85D0 [03] CC86CF    1927      jmp     TDE
                     1928  
                     1929  Dec_Accel:  ; Throttle steady but lets check if we have just triggered decel
 85D3 [05] 0B4206    1930      brclr   TPSDEN,ENGINE,AE_CHK    ; If we are not decel then check accel threshold
 85D6 [03] CC86CF    1931       jmp     TDE                                 ; We are deceling so check decel timers, etc
                     1932  
                     1933  TAE_CHK_JMP1:
 85D9 [03] CC8682    1934      jmp     TAE_CHK_TIME
                     1935  
                     1936  AE_CHK:
 85DC [04] 1B42      1937      bclr    TPSDEN,ENGINE
 85DE [04] 6E64D6    1938      mov     #100T,TPSfuelCorr
 85E1 [03] B095      1939      sub     tmp2
 85E3 [03] B7DC      1940      sta     tmp31
 85E5 [03] B6DC      1941      lda     tmp31
 85E7 [04] C1E0B2    1942      cmp     TPSthresh_f1                      ; Are we above the Accel threshold for TPS?
 85EA [03] 2406      1943      bhs     AE_SET
 85EC [05] 094213    1944      brclr   TPSAEN,ENGINE,acc_done_led   ; If we are not in AE mode then jump to end
 85EF [03] CC8682    1945      jmp     TAE_CHK_TIME
                     1946  
                     1947  AE_SET:
 85F2 [05] 084213    1948      brset   TPSAEN,ENGINE,AE_COMP_SHOOT_AMT
                     1949  
                     1950  ; Add in accel enrichment
 85F5 [04] C6E0AD    1951      lda     TPSAQ_f1 ; start out using first element - will determine actual next
                     1952                                           ; time around
                     1953  Store_TEA1:
 85F8 [03] B74F      1954      sta     TPSACCEL ; Acceleration percent amount - used in later calculations
 85FA [03] B788      1955      sta     Decay_Accel
                     1956  
                     1957  RPMBackAE:
 85FC [03] 3F81      1958      clr     TPSACLK
 85FE [04] 1842      1959      bset    TPSAEN,ENGINE
 8600 [04] 1B42      1960      bclr    TPSDEN,ENGINE
                     1961  
                     1962  acc_done_led:
 8602 [03] CC871F    1963      jmp     TAE_DONE
                     1964  
                     1965  TAE_CHK_JMP:
 8605 [03] CC8682    1966      jmp     TAE_CHK_TIME
                     1967  
                     1968  ; First, calculate cold temperature add-on enrichment value from coolant value,
                     1969  ; from -40 degrees to 165 degrees.
                     1970  ;
                     1971  ; Then determine cold temperature multiplier value ACCELMULT (in percent),
                     1972  ; from -40 degrees to 165 degrees.
                     1973  ;
                     1974  ; Next, calculate squirt amount (quantity) for acceleration enrichment
                     1975  ; Find bins (between) for corresponding TPSdot, and linear interpolate
                     1976  ; to find enrichment amount (from TPSAQ). This is continuously
                     1977  ; checked every time thru main loop while in acceleration mode,
                     1978  ; and the highest value is latched and used.
                     1979  ;
                     1980  ; The final acceleration applied is:
                     1981  ;  AE = Alookup(TPSdot) * (ACCELMULT/100) + TPSACOLD
                     1982  
                     1983  AE_COMP_SHOOT_AMT:          ; First, the amount based on cold temperatures
 8608 [03] B64C      1984      lda     warmcor
 860A [02] A164      1985      cmp     #100T           ; And if Warm corr = 100?
 860C [03] 2731      1986      beq     Warmup_OverAE
 860E [03] 3F94      1987      clr     liX1                     ; 0 -> - 40 degrees
 8610 [04] 6ECD95    1988      mov     #205T,liX2               ; 165 + 40 degrees (because of offset in lookup table)
 8613 [04] C6E0B1    1989      lda     TPSACOLD_f1
 8616 [03] B796      1990      sta     liY1                     ; This is the amount at coldest
 8618 [03] 3F97      1991      clr     liY2                     ; no enrichment addon at warm temperature
 861A [03] B6CC      1992      lda     coolant
 861C [03] B798      1993      sta     liX
 861E [05] CD97D1    1994      jsr     LinInterp
 8621 [05] 4E99A0    1995     mov     liY,tmp13         ; result - save here temporarily
                     1996  
                     1997  ; Second, find the multiplier (ACCELMULT) amount based on cold temperatures
 8624 [03] 3F94      1998      clr     liX1                     ; 0 -> - 40 degrees
 8626 [04] 6ECD95    1999      mov     #205T,liX2               ; 165 + 40 degrees
 8629 [03] 3F95      2000      clr     tmp2
 862B [04] C6E0B5    2001      lda     ACMULT_f1
 862E [03] B796      2002      sta     liY1                     ; This is the amount at coldest
 8630 [04] 6E6497    2003      mov     #100T,liY2               ; 1.00 multiplier at 165 degrees
 8633 [03] B6CC      2004      lda     coolant
 8635 [03] B798      2005      sta     liX
 8637 [05] CD97D1    2006      jsr     lininterp
 863A [05] 4E99A1    2007      mov     liY,tmp14                ; result - save here temporarily
 863D [03] 2008      2008      bra     AECarry_OnAE
                     2009  
                     2010  Warmup_OverAE:
 863F [02] A600      2011      lda     #00T            ; If we get here then the warmup = 100 so no need to
 8641 [03] B7A0      2012      sta     tmp13           ; Add any cold stuff so bypass it
 8643 [02] A664      2013      lda     #100T
 8645 [03] B7A1      2014      sta     tmp14
                     2015  
                     2016  AECarry_OnAE:
 8647 [03] 45E0A1    2017      ldhx    #TPSdotrate
 864A [04] 3594      2018      sthx    tmp1
 864C [04] 6E0396    2019      mov     #$03,tmp3
 864F [03] B647      2020      lda     tps
 8651 [03] B0D1      2021      sub     TPSlast
 8653 [03] B797      2022      sta     tmp4                     ; TPSdot
 8655 [03] B79D      2023      sta     tmp10                    ; Save away for later use below
 8657 [05] CD97B6    2024      jsr     tableLookup
                     2025  
                     2026  miss_tps:
 865A [01] 8C        2027      clrh
 865B [03] BE98      2028      ldx     tmp5
 865D [04] D6E0AD    2029      lda     TPSAQ_f1,x               ; TPS Based dot
 8660 [03] B797      2030      sta     liY2
 8662 [01] 5A        2031      decx
 8663 [04] D6E0AD    2032      lda     TPSAQ_f1,x
                     2033  
                     2034  Carry_On_TEA:
 8666 [03] B796      2035      sta     liY1
 8668 [05] 4E9D98    2036      mov     tmp10,liX
 866B [05] CD97D1    2037      jsr     LinInterp
                     2038  
                     2039  ; Apply the cold multiplier
 866E [05] 4E999E    2040      mov     tmp6,tmp11
 8671 [03] 3F9F      2041      clr     tmp12
 8673 [03] B6A1      2042      lda     tmp14
 8675 [05] CD9823    2043      jsr     uMulAndDiv
 8678 [03] B69E      2044      lda     tmp11
 867A [03] BBA0      2045      add     tmp13                    ; Add on the amount computed in cold temperature enrich above
 867C [03] B799      2046      sta     tmp6
 867E [03] B14F      2047      cmp     TPSACCEL
 8680 [03] 220D      2048      bhi     Higher_AcJMP
                     2049  
                     2050  TAE_CHK_TIME:  ; Check if acceleration done
 8682 [05] 0A420C    2051      brset   TPSDEN,ENGINE,RST_ACCJMP
 8685 [03] B681      2052      lda     TPSaclk
 8687 [04] C1E0B3    2053      cmp     TPSASYNC_f1
 868A [03] 2405      2054      bhs     RST_ACCJMP
                     2055  
                     2056  TAE_DONEJ:
 868C [03] CC871F    2057      jmp     TAE_DONE
                     2058  
                     2059  Higher_AcJMP:
 868F [03] 2028      2060      bra     Higher_Accel
                     2061  
                     2062  RST_ACCJMP:


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 17
MC68HC908GP32 User Bootloader


 8691 [03] 202F      2063      bra     RST_ACCEL
                     2064  
                     2065  ; Decay the Accel enrichment away to a setpoint in the time period set - Phil
                     2066  Decay_AE_Aw:
 8693 [04] C6E0B7    2067      lda     AccelDecay_f
 8696 [03] B14F      2068      cmp     TPSACCEL ; Only do interpolated Decay if Accel is higher than target point
 8698 [03] 241C      2069      bhs     TAE_DONEJMP
 869A [03] B797      2070      sta     liY2             ; Load in the Decay PW value in mS at the end of the timer
 869C [03] 3F94      2071      clr     lix1             ; Acceltimer Start point for linear interpolater.
 869E [04] C6E0B3    2072      lda     TPSASYNC_f1
 86A1 [03] B795      2073      sta     lix2             ; Stick the max time in lix2 for linear interpolater.
 86A3 [03] B688      2074      lda     Decay_Accel
 86A5 [03] B796      2075      sta     liY1             ; Load in the actual maximum PW we calculated fo the Accel to
                     2076                                           ; interpolate from
 86A7 [03] B681      2077      lda     TPSaclk
 86A9 [03] B798      2078      sta     lix                      ; Actual timer point
 86AB [05] CD97D1    2079      jsr     lininterp        ; Go and work out the value
 86AE [03] B699      2080      lda     tmp6
 86B0 [03] B7DC      2081      sta     tmp31       ; Save true result for a moment
 86B2 [03] B6DC      2082      lda     tmp31
                     2083  
                     2084  StoreTPSACCEL:
 86B4 [03] B74F      2085      sta     TPSACCEL ; Save decaying accel value
                     2086  
                     2087  TAE_DONEJMP:
 86B6 [03] CC871F    2088      jmp     TAE_DONE
                     2089  
                     2090  Higher_Accel:
 86B9 [03] B699      2091      lda     tmp6             ; Replace with this higher value
 86BB [03] B74F      2092      sta     TPSACCEL
 86BD [03] B788      2093      sta     Decay_Accel      ; Decaying Accel value
 86BF [03] CC871F    2094      jmp     TAE_DONE
                     2095  
                     2096  RST_ACCEL:
 86C2 [04] 6E64D6    2097      mov     #100T,TPSfuelCorr
 86C5 [03] 3F4F      2098      clr     TPSACCEL
 86C7 [03] 3F88      2099      clr     Decay_Accel
 86C9 [04] 1942      2100      bclr    TPSAEN,ENGINE
 86CB [04] 1B42      2101      bclr    TPSDEN,ENGINE
 86CD [03] 2050      2102      bra     TAE_DONE
                     2103  
                     2104  TDE:  ; deaccel
 86CF [04] C6E05C    2105      lda     feature6_f
 86D2 [02] A580      2106      bit     #NoDecelBoostb   ; Have we selected to use Decel all the time?
 86D4 [03] 2707      2107      beq     NormDecel
 86D6 [03] B6CB      2108      lda     kpa
 86D8 [04] C1E081    2109      cmp     DecelKpa_f
 86DB [03] 2242      2110      bhi     TAE_DONE         ; If KPa above user defined amount then no decel enrichment
                     2111  
                     2112  NormDecel:
 86DD [05] 0A4227    2113      brset   TPSDEN,ENGINE,CheckDecelT ; If we are already decelin then carry on with it
 86E0 [03] B695      2114      lda     tmp2
 86E2 [03] B094      2115      sub     tmp1
 86E4 [03] B7DC      2116      sta     tmp31
 86E6 [03] B6DC      2117      lda     tmp31
 86E8 [04] C1E0B2    2118      cmp     TPSthresh_f1
 86EB [03] 2526      2119      blo     TDE_CHK_DONE
 86ED [05] 09420B    2120      brclr   TPSAEN,ENGINE,TDE_CHK_FUEL_CUT
                     2121  
                     2122  Clear_Decel:
 86F0 [04] 6E64D6    2123      mov     #100T,TPSfuelCorr
 86F3 [03] 3F4F      2124      clr     TPSACCEL
 86F5 [03] 3F88      2125      clr     Decay_Accel
 86F7 [04] 1942      2126      bclr    TPSAEN,ENGINE
 86F9 [04] 1B42      2127      bclr    TPSDEN,ENGINE
                     2128  
                     2129  TDE_CHK_FUEL_CUT:
 86FB [03] B64D      2130      lda     rpm
 86FD [02] A10F      2131      cmp     #15T                     ; Only active above 1500
 86FF [03] 251E      2132      blo     TAE_DONE
 8701 [04] 1A42      2133      bset    TPSDEN,ENGINE
 8703 [04] 1942      2134      bclr    TPSAEN,ENGINE
 8705 [03] 3F81      2135      clr     TPSaclk
                     2136  
                     2137  CheckDecelT:                         ; New decel timer
 8707 [04] C6E0B4    2138      lda     TPSDQ_f1
 870A [03] B7D6      2139      sta     TPSfuelCorr
 870C [03] B681      2140      lda     TPSaclk         ; Use accel timer for decel timer
 870E [04] C1E0B3    2141      cmp     TPSASYNC_f1
 8711 [03] 24DD      2142      bhs     Clear_Decel
                     2143  
                     2144  TDE_CHK_DONE:
 8713 [05] 0B4209    2145      brclr   TPSDEN,ENGINE,TAE_DONE
 8716 [04] 1B42      2146      bclr    TPSDEN,ENGINE
 8718 [04] 6E64D6    2147      mov     #100T,TPSfuelCorr
 871B [03] 3F4F      2148      clr     TPSACCEL
 871D [03] 3F88      2149      clr     Decay_Accel
                     2150  
                     2151  TAE_DONE:
                     2152  
                     2153  ***************************************************************************
                     2154  **
                     2155  **  Exhaust Gas Oxygen Sensor Measurement Section
                     2156  **
                     2157  **   Steps are the following:
                     2158  **
                     2159  **   If EGOdelta = 0                                 then skipo2
                     2160  **   If KPA > 100                                    then skipo2
                     2161  **   If RPM < ego_rpm                                then skipo2
                     2162  **   If TPSAEN in ENGINE or TPSDEN in ENGINE are set then skipo2
                     2163  **   If coolant < EGOtemp                            then skipo2
                     2164  **   If sech = 0 and secl < 30 seconds               then skipo2
                     2165  **     (skip first 30 seconds)
                     2166  **   If TPS > 3.5 volts                              then skipo2
                     2167  **
                     2168  **   If EGOcount > EGOcountcmp {
                     2169  **      EGOcount = 0
                     2170  **      If EGO > 26 (counts, or 0.5 Volts) then (rich) {
                     2171  **         tpm = EGOcurr - EGOdelta
                     2172  **         if tpm >= EGOlimit then EGOcorr = tpm
                     2173  **         return
                     2174  **      }
                     2175  **      else (lean) {
                     2176  **         tpm = EGOcorr + EGOdelta
                     2177  **         if tpm > EGOlimit then EGOcorr = tpm
                     2178  **         return
                     2179  **      }
                     2180  **   }
                     2181  **
                     2182  **   skipo2:
                     2183  **   EGOcorr = 100%
                     2184  **
                     2185  ***************************************************************************
                     2186  
                     2187  EGO_CALC:
 871F [05] 026615    2188      brset NosSysOn,EnhancedBits,SKIP_ALL_O2; If NOS running then no O2 checks
 8722 [05] 046612    2189      brset OverRun,EnhancedBits,SKIP_ALL_O2; Skip O2 if in Overrun mode
 8725 [04] C6E192    2190      lda   EGOdelta_f         ; No delta means open loop.
 8728 [03] 270B      2191      beq   SkipO2JMP
 872A [04] C6E040    2192      lda   kpaO2_f                    ; In KPa mode so is it higher than setpoint?
 872D [03] 2711      2193      beq   SETAFR_UP                  ; If its zero dont check it as no open loop
 872F [03] B1CB      2194      cmp   kpa
 8731 [03] 2504      2195      blo   SKIP_ALL_O2                ; If it is dont check O2
                     2196  
                     2197  No_KPA_Check:
 8733 [03] 200B      2198      bra   SETAFR_UP


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 18
MC68HC908GP32 User Bootloader


                     2199  
                     2200  SkipO2JMP:
 8735 [03] 204E      2201      bra    SKIPO2A
                     2202  
                     2203  SKIP_ALL_O2:                 ; Skip both O2 checks
 8737 [02] A664      2204      lda    #100T
 8739 [03] B74A      2205      sta    EGOCorr
 873B [03] B75E      2206      sta    EgoCorr2
 873D [03] CC87C3    2207      jmp    EGOALL_DONE
                     2208  
                     2209  SETAFR_UP:
 8740 [03] B649      2210      lda     ego
 8742 [03] B7DD      2211      sta     tmp32    ; Make tmp32 = the ego raw adc
                     2212                                       ; in narrow band or non AFR target mode
                     2213  
                     2214  AFTERAFRSET:
 8744 [05] 0842F0    2215      brset   TPSAEN,ENGINE,Skip_ALL_O2
 8747 [05] 0A42ED    2216      brset   TPSDEN,ENGINE,Skip_ALL_O2
 874A [05] 0067EA    2217      brset   Traction,EnhancedBits2,Skip_ALL_O2
 874D [03] B680      2218      lda     sech
 874F [03] 2606      2219      bne     chk_o2_lag               ; if high seconds set then we can check o2
 8751 [03] B640      2220      lda     secl
 8753 [02] A11E      2221      cmp     #30T                     ; 30 seconds threshold
 8755 [03] 25E0      2222      blo     Skip_ALL_O2
                     2223  
                     2224  CHK_O2_LAG:  ; Check if exceeded lag time - if so then we can modify EGOcorr
 8757 [03] B682      2225      lda     EGOcount
 8759 [04] C1E191    2226      cmp     EGOcountcmp_f
 875C [03] 2509      2227      blo     EGOALL_DONEJMP
                     2228  ; Check if we are over the O2 operating temp
 875E [03] B6CC      2229      lda     coolant
 8760 [04] C1E190    2230      cmp     EGOtemp_f
 8763 [03] 2520      2231      blo     SkipO2A
 8765 [03] 2002      2232      bra     Do_The_Ego
                     2233  
                     2234  EGOALL_DONEJMP:
 8767 [03] 205A      2235      bra     EGOALL_DONE
                     2236  
                     2237  Do_The_Ego:
 8769 [03] B64D      2238      lda     rpm                          ; Over EGOrpm we go closed loop.
 876B [04] C1E1B9    2239      cmp     EGOrpm_f
 876E [03] 2515      2240      blo     SkipO2A
                     2241  
                     2242  ; Check if rich/lean
 8770 [03] 3F82      2243      clr     EGOcount
 8772 [03] B6CB      2244      lda     kpa                          ; See if we need to load in a new Ego Limit
 8774 [04] C1E027    2245      cmp     EgoLimitKPa_f
 8777 [03] 2207      2246      bhi     New_EgoLim
 8779 [04] C6E193    2247      lda     EGOlimit_f               ; Original Ego Limit
 877C [03] B7DC      2248      sta     tmp31
 877E [03] 2005      2249      bra     EgoLim_Done
                     2250  
                     2251  New_EgoLim:
 8780 [04] C6E028    2252      lda     EgoLim2_f                ; New Ego Limit
 8783 [03] B7DC      2253      sta     tmp31
                     2254  
                     2255  EgoLim_Done:
                     2256  
                     2257  SkipO2A:                                 ; Jmp for Skip O2
 8785 [03] 2034      2258      bra     SkipO2
                     2259  
                     2260  WBO2TYPE:
 8787 [03] B6DD      2261      lda     tmp32
 8789 [03] B159      2262      cmp     afrTarget
 878B [03] 2217      2263      bhi     O2_IS_LEAN
                     2264  
                     2265  O2_IS_RICH:                 ; rich o2 - lean out EGOcorr
 878D [02] A664      2266      lda     #100T
 878F [03] B0DC      2267      sub     tmp31                    ; Generate the lower limit rail point
 8791 [03] B795      2268      sta     tmp2
 8793 [03] B64A      2269      lda     EGOcorr
 8795 [04] C0E192    2270      sub     EGOdelta_f               ; remove the amount required per step.
 8798 [03] B794      2271      sta     tmp1
 879A [03] B195      2272      cmp     tmp2
 879C [03] 2521      2273      blo     EGO_DONE         ; railed at EGOlimit value
 879E [03] B694      2274      lda     tmp1
 87A0 [03] B74A      2275      sta     EGOcorr
 87A2 [03] 201B      2276      bra     EGO_DONE
                     2277  
                     2278  
                     2279  O2_IS_LEAN:                 ; lean o2 - richen EGOcorr
 87A4 [02] A664      2280      lda     #100T
 87A6 [03] BBDC      2281      add     tmp31                    ; Generate the upper limit rail point
 87A8 [03] B795      2282      sta     tmp2
 87AA [03] B64A      2283      lda     EGOcorr
 87AC [04] CBE192    2284      add     EGOdelta_f
 87AF [03] B794      2285      sta     tmp1
 87B1 [03] B195      2286      cmp     tmp2
 87B3 [03] 220A      2287      bhi     EGO_DONE         ; railed at EGOlimit value
 87B5 [03] B694      2288      lda     tmp1
 87B7 [03] B74A      2289      sta     EGOcorr
 87B9 [03] 2004      2290      bra     EGO_DONE
                     2291  
                     2292  SkipO2:  ; reset EGOcorr to 100%
 87BB [02] A664      2293      lda     #100T
 87BD [03] B74A      2294      sta     EGOcorr
                     2295  
                     2296  EGO_DONE:
 87BF [03] B64A      2297      lda     Egocorr
 87C1 [03] B75E      2298      sta     Egocorr2
                     2299  
                     2300  EGOALL_DONE:
                     2301  
                     2302  ***************************************************************************
                     2303  ***************************************************************************
                     2304  ***************************************************************************
                     2305  **
                     2306  ** Computation of Fuel Parameters
                     2307  **
                     2308  ** Remainders are maintained for hi-resolution calculations - results
                     2309  **  converted back to 100 microsecond resolution at end.
                     2310  **
                     2311  ** (Warm * Tpsfuelcut)/100 = R1 + rem1/100
                     2312  ** (Barcor * Aircor)/100 = R2 + rem2/100
                     2313  ** ((R1 + rem1/100) * (R2 + rem2/100)) / 100 = R3 + rem3/100
                     2314  ** (EGO * MAP)/100 = R4 + rem4/100
                     2315  ** ((R3 + rem3/100) * (R4 + rem4/100)) /100 = R5 + rem5/100
                     2316  ** (VE * REQ_FUEL)/100 = R6 + rem6/100
                     2317  ** ((R5 + rem5/100) * (R6 + rem6/100))  = R7
                     2318  **
                     2319  **
                     2320  **
                     2321  ** Note: that GAMMAE only includes Warm, Tpsfuelcut, Barocor, and Aircor
                     2322  ** (EGO no longer included)
                     2323  **
                     2324  ** Rationle on ordering: to prevent calculation overflow for boosted
                     2325  ** operations, the variables have been ordered in specific "pairs" in
                     2326  ** the calculation:
                     2327  **   EGO * MAP - when at WOT, EGO is set to 100%,
                     2328  **   so MAP can run up to 255% without overflow
                     2329  **   VE * REQ_FUEL - for boosted applications,
                     2330  **   REQ_FUEL tends to be low (below 10 ms) due to the added fuel
                     2331  **   requirements (i.e. large injectors), so VE entries can be well
                     2332  **   above 100%.
                     2333  **
                     2334  ***************************************************************************


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 19
MC68HC908GP32 User Bootloader


                     2335  
                     2336  WARMACCEL_COMP:
                     2337  
 87C3 [05] 4E4C9D    2338      mov     warmcor,tmp10            ; Warmup Correction in tmp10
 87C6 [03] 3F9E      2339      clr     tmp11                        ; tmp11 is zero
 87C8 [05] 4ED69F    2340      mov     TPSfuelcorr,tmp12        ; tpsfuelcut in tmp12
 87CB [03] 3FA0      2341      clr     tmp13                        ; tmp13 is zero
 87CD [05] CD9989    2342      jsr     Supernorm                    ; do the multiply and normalization
 87D0 [05] 4E9DDC    2343      mov     tmp10,tmp31                  ; save whole result in tmp31
 87D3 [05] 4E9EDD    2344      mov     tmp11,tmp32                  ; save remainder in tmp32
 87D6 [05] 4E509D    2345      mov     barocor,tmp10        ; tmp10 is barometer percent
 87D9 [03] 3F9E      2346      clr     tmp11                        ; zero to tmp11
 87DB [05] 4E4B9F    2347      mov     AirCor,tmp12         ; air temp correction % in tmp12
 87DE [03] 3FA0      2348      clr     tmp13                        ; tmp13 is zero
 87E0 [05] CD9989    2349      jsr     Supernorm                    ; multiply and divide by 100 result in tmp10:tmp11
 87E3 [05] 4EDC9F    2350      mov     tmp31,tmp12                  ; move saved tmp31 into tmp12
 87E6 [05] 4EDDA0    2351      mov     tmp32,tmp13                  ; move saved tmp32 into tmp13
 87E9 [05] CD9989    2352      jsr     Supernorm                    ; multiply/divide
 87EC [05] 4E9D98    2353      mov     tmp10,tmp5                   ; save whole result into tmp5
 87EF [05] 4E9E99    2354      mov     tmp11,tmp6                   ; save remainder into tmp6
 87F2 [05] 4E9D51    2355      mov     tmp10,GammaE
                     2356  
                     2357  ld_ve_1Done:
 87F5 [05] 4E4A9D    2358      mov     EGOcorr,tmp10            ; closed-loop correction percent into tmp10
 87F8 [03] 3F9E      2359      clr     tmp11                        ; remainder is zero
 87FA [05] 4ECB9F    2360      mov     kpa,tmp12                    ; MAP into tmp12
 87FD [03] 3FA0      2361      clr     tmp13                        ; no remainder
 87FF [05] CD9989    2362      jsr     Supernorm                    ; do the multiply and divide
                     2363  
                     2364  LoadContribDone:                ; NORMAL KPA stuff now
 8802 [05] 4E989F    2365      mov     tmp5,tmp12                   ; take saved result in tmp5 and put into tmp12
 8805 [05] 4E99A0    2366      mov     tmp6,tmp13                   ; tmp6 into tmp13
 8808 [05] CD9989    2367      jsr     Supernorm                    ; mult/div
 880B [05] 4E9D96    2368      mov     tmp10,tmp3                   ; result (whole) save in tmp3
 880E [05] 4E9E97    2369      mov     tmp11,tmp4                   ; remainder result save in tmp4
 8811 [05] 4E529D    2370      mov     vecurr,tmp10             ; VE into tmp10
 8814 [03] 3F9E      2371      clr     tmp11                        ; no remainder value for VE
 8816 [04] C60105    2372      lda     page
 8819 [02] A101      2373      cmp     #01T
 881B [03] 2705      2374      beq     rqfr1
 881D [04] C6E194    2375      lda     REQ_FUEL_f1
 8820 [03] 2003      2376      bra     rqfe1
                     2377  
                     2378  rqfr1:
 8822 [04] C601A6    2379      lda     REQ_FUEL_r
                     2380  
                     2381  rqfe1:
 8825 [03] B79F      2382      sta     tmp12                        ; req-fuel into tmp12
 8827 [03] 3FA0      2383      clr     tmp13                        ; no remainder
 8829 [05] CD9989    2384      jsr     Supernorm                    ; mult/div
 882C [05] 4E969F    2385      mov     tmp3,tmp12                   ; take previous result and put in tmp12
 882F [05] 4E97A0    2386      mov     tmp4,tmp13                   ; again for remainder
 8832 [05] CD9989    2387      jsr     Supernorm                    ; multiply/divide
 8835 [05] 4E9D9E    2388      mov     tmp10,tmp11
                     2389  
                     2390  ***************************************************************************
                     2391  ** For    V E   T A B L E  1 and 3
                     2392  ** Calculation of Battery Voltage Correction for Injector Opening Time
                     2393  **
                     2394  ** Leaves result in liY == tmp6.
                     2395  ** Mangles tmp1-tmp5.
                     2396  **
                     2397  ** Injector open time is implemented as a linear function of
                     2398  **  battery voltage, from 7.2 volts (61 ADC counts) to 19.2 volts (164 counts),
                     2399  **  with 13.2 volts (113 counts) being the nominal operating voltage
                     2400  **
                     2401  ** INJOPEN = injector open time at 13.2 volts in mms
                     2402  ** BATTFAC = injector open adjustment factor 6 volts from 13.2V in mms
                     2403  **
                     2404  **
                     2405  ** + (INJOPEN + BATTFAC)
                     2406  ** +   *
                     2407  ** +                     (INJOPEN)
                     2408  ** +                         *
                     2409  ** +                                       (INJOPEN - BATTFAC)
                     2410  ** +                                               *
                     2411  ** +
                     2412  ** ++++++++++++++++++++++++++++++++++++++++++++++++++++++
                     2413  **           7.2v          13.2v          19.2v
                     2414  **
                     2415  ***************************************************************************
                     2416  
                     2417  BATT_CORR_CALC:
 8838 [01] 8C        2418      clrh
                     2419  
                     2420  BATT_CORR_PW:
 8839 [04] 6E3D94    2421      mov     #061T,liX1               ; x1
 883C [04] 6EA495    2422      mov     #164T,liX2               ; x2
 883F [04] C6E197    2423      lda     InjOpen_f1
 8842 [04] CBE19B    2424      add     battfac_f1
 8845 [03] B796      2425      sta     liY1                     ; y1
 8847 [04] C6E197    2426      lda     injopen_f1
 884A [04] C0E19B    2427      sub     battfac_f1
 884D [03] B797      2428      sta     liY2                     ; y2
 884F [03] 2A02      2429      bpl     MBFF                     ; y2 < 0, underflow
 8851 [03] 3F97      2430      clr     liY2                     ; Screws up slope, but gives reasonable result.
                     2431  MBFF:
 8853 [05] 4E4898    2432      mov     batt,liX         ; xInterp
 8856 [05] CD97D1    2433      jsr     LinInterp                ; injector open time in tmp6
                     2434  
                     2435  ***************************************************************************
                     2436  **       F O R    V E   T A B L E   1 and 3
                     2437  ** Calculation of Final Pulse Width
                     2438  **
                     2439  **  The following equation is evaluated here:
                     2440  **
                     2441  **  tmp20 = tmp6 + TMP11 + TPSACCEL - INJOCFUEL
                     2442  **
                     2443  **  Note that InjOCFuel (injected fuel during injector open and
                     2444  **  close) is currently a constant - eventually it will be a function
                     2445  **  of battery voltage.
                     2446  **
                     2447  ***************************************************************************
                     2448  
                     2449  CALC_FINAL:
 8859 [03] B69E      2450      lda     tmp11                    ; From required fuel, above.
 885B [03] 270C      2451      beq     PW_Done                  ; If no calculated pulse, then don't open at all.
 885D [03] BB99      2452      add     tmp6                     ; from batt correction
 885F [03] 2506      2453      bcs     MaxPulse
 8861 [03] BB4F      2454      add     TPSACCEL
 8863 [03] 2502      2455      bcs     MaxPulse
 8865 [03] 2002      2456      bra     PW_Done
                     2457  
                     2458  MaxPulse:
 8867 [02] A6FF      2459      lda     #$FF
                     2460  
                     2461  PW_Done:
 8869 [03] B7A7      2462      sta     tmp20
                     2463  
                     2464  Calc_Final1Done:
 886B [05] 4EA794    2465       mov     tmp20,tmp1              ; store PW from table 1
                     2466  
                     2467  both_table1:
 886E [03] B6A7      2468      lda     tmp20
 8870 [03] B794      2469      sta     tmp1
 8872 [03] B795      2470      sta     tmp2


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 20
MC68HC908GP32 User Bootloader


                     2471  
                     2472  checkRPMsettings:                  ; Do all the rpm related stuff here.
 8874 [04] 1B60      2473      bclr    sparkCut,RevLimBits    ; Reset spark cut bit
 8876 [03] 200E      2474      bra     checkRevsOk            ;* RJH 8/04/23
                     2475  
                     2476  cutChannels:
 8878 [03] 3F94      2477      clr     tmp1
 887A [03] 3F95      2478      clr     tmp2
 887C [04] 1566      2479      bclr    OverRun,EnhancedBits                  ; Reset Over Run Fuel Cut
 887E [05] 4E946E    2480      mov     tmp1,pwcalc1
 8881 [05] 4E956F    2481      mov     tmp2,pwcalc2
 8884 [03] 2009      2482      bra     spark_lookup                                      ; In fuel cut mode so return with zeros
                     2483  
                     2484  checkRevsOk:
 8886 [05] 0466EF    2485      brset   OverRun,EnhancedBits,cutChannels ; If Over run fuel cut on cut fuel
 8889 [05] 4E946E    2486      mov       tmp1,pwcalc1
 888C [05] 4E956F    2487      mov       tmp2,pwcalc2
                     2488  
                     2489  ***************************************************************************
                     2490  **
                     2491  ** Check if fixed spark angle - only works if we are tuning this page
                     2492  **
                     2493  ***************************************************************************
                     2494  spark_lookup:
 888F [04] C60105    2495      lda     page
 8892 [02] A103      2496      cmp     #3
 8894 [03] 2605      2497      bne     fixed_fl
 8896 [04] C601BB    2498      lda     FixedAngle_r
 8899 [03] 2003      2499      bra     fxr_c
                     2500  
                     2501  fixed_fl:
 889B [04] C6E3A9    2502      lda     FixedAngle_f
                     2503  
                     2504  fxr_c:
 889E [02] A103      2505      cmp     #$03
 88A0 [03] 2503      2506      blo     NOT_FIXED        ; Added this as earlier MT didnt
                     2507                                           ; send a perfect 00T for -10 (use map)
 88A2 [03] CC89A8    2508      jmp     CALC_DELAY
                     2509  
                     2510  NOT_FIXED:
                     2511  
                     2512  ;***************************************************************************
                     2513  ;**
                     2514  ;**  ST 3-D Table Lookup
                     2515  ;**
                     2516  ;**   This is used to determine value of SparkAngle ST based on RPM and MAP
                     2517  ;**   The table looks like:
                     2518  ;**
                     2519  ;**      105 +....+....+....+....+....+....+....+
                     2520  ;**          ....................................
                     2521  ;**      100 +....+....+....+....+....+....+....+
                     2522  ;**                     ...
                     2523  ;**   KPA                 ...
                     2524  ;**                         ...
                     2525  ;**       35 +....+....+....+....+....+....+....+
                     2526  ;**          5    15   25   35   45   55   65   75 RPM/100
                     2527  ;**
                     2528  ;**
                     2529  ;**  Steps:
                     2530  ;**   1) Find the bracketing KPA positions via tableLookup,
                     2531  ;**       put index in tmp8 and bounding values in tmp9(kpa1) and tmp10(kpa2)
                     2532  ;**   2) Find the bracketing RPM positions via tableLookup, store
                     2533  ;**       index in tmp11 and bounding values in tmp13(rpm1) and tmp14(rpm2)
                     2534  ;**   3) Using the ST table, find the table ST values for tmp15=ST(kpa1,rpm1),
                     2535  ;**       tmp16=ST(kpa1,rpm2), tmp17 = ST(kpa2,rpm1), and tmp18 = ST(kpa2,rpm2)
                     2536  ;**   4) Find the interpolated ST value at the lower KPA range :
                     2537  ;**       x1=rpm1, x2=rpm2, y1=ST(kpa1,rpm1), y2=ST(kpa1,rpm2) - put in tmp19
                     2538  ;**   5) Find the interpolated ST value at the upper KPA range :
                     2539  ;**       x1=rpm1, x2=rpm2, y1=ST(kpa2,rpm1), y2=ST(kpa2,rpm2) - put in tmp11
                     2540  ;**   6) Find the final ST value using the two interpolated ST values:
                     2541  ;**       x1=kpa1, x2=kpa2, y1=ST_FROM_STEP_4, y2=ST_FROM_STEP_5
                     2542  ;**
                     2543  ;***************************************************************************
                     2544  
                     2545  STTABLELOOKUP:
 88A5 [03] B6CB      2546      lda     kpa
 88A7 [03] B7DB      2547      sta     kpa_n                    ; Added so as KPa can be used
                     2548  
                     2549  ST_STEP_1:                                   ; else where in code
 88A9 [03] 45E39C    2550      ldhx    #KPARANGEST_f1
 88AC [04] 3594      2551      sthx    tmp1
 88AE [02] A60B      2552      lda     #$0b                     ;(12-1)
 88B0 [03] B796      2553      sta     tmp3
 88B2 [03] B6DB      2554      lda     kpa_n
 88B4 [03] B797      2555      sta     tmp4
 88B6 [05] CD97B6    2556      jsr     tableLookup
 88B9 [05] 4E989B    2557      mov     tmp5,tmp8                ;Index
 88BC [05] 4E949C    2558      mov     tmp1,tmp9                ;X1
 88BF [05] 4E959D    2559      mov     tmp2,tmp10               ;X2
                     2560  
                     2561  ST_STEP_2:
 88C2 [03] 45E390    2562      ldhx    #RPMRANGEST_f1
 88C5 [04] 3594      2563      sthx    tmp1
 88C7 [02] A60B      2564      lda     #$0b                     ;(12-1)
 88C9 [03] B796      2565      sta     tmp3
 88CB [03] B64D      2566      lda     rpm
 88CD [03] B797      2567      sta     tmp4
 88CF [05] CD97B6    2568      jsr     tableLookup
 88D2 [05] 4E989E    2569      mov     tmp5,tmp11               ;Index
 88D5 [05] 4E94A0    2570      mov     tmp1,tmp13               ;X1
 88D8 [05] 4E95A1    2571      mov     tmp2,tmp14               ;X2
                     2572  
                     2573  ST_STEP_3:  ; TABLEWALK:
 88DB [01] 8C        2574      clrh
 88DC [02] AE0C      2575      ldx     #$0c                     ;(12)
 88DE [03] B69B      2576      lda     tmp8
 88E0 [01] 4A        2577      deca
 88E1 [05] 42        2578      mul
 88E2 [03] BB9E      2579      add     tmp11
 88E4 [01] 4A        2580      deca
 88E5 [01] 97        2581      tax
 88E6 macro          2582      VE3X
 88E6 [04] C60105    2583   LDA PAGE  
 88E9 [02] A103      2584   CMP #03T  
 88EB [03] 2605      2585   BNE VE3XF  
 88ED [04] D60112    2586   LDA VE_R,X  
 88F0 [03] 2003      2587   BRA VE3XC  
                     2588  VE3XF:  
 88F2 [04] D6E300    2589   LDA ST_F1,X  
                     2590  VE3XC:  
 88F5 [03] B7A2      2591      sta     tmp15
 88F7 [01] 5C        2592      incx
 88F8 macro          2593      VE3X
 88F8 [04] C60105    2594   LDA PAGE  
 88FB [02] A103      2595   CMP #03T  
 88FD [03] 2605      2596   BNE VE3XF  
 88FF [04] D60112    2597   LDA VE_R,X  
 8902 [03] 2003      2598   BRA VE3XC  
                     2599  VE3XF:  
 8904 [04] D6E300    2600   LDA ST_F1,X  
                     2601  VE3XC:  
 8907 [03] B7A3      2602      sta     tmp16
 8909 [02] AE0C      2603      ldx     #$0c                     ;(12)
 890B [03] B69B      2604      lda     tmp8
 890D [05] 42        2605      mul
 890E [03] BB9E      2606      add     tmp11


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 21
MC68HC908GP32 User Bootloader


 8910 [01] 4A        2607      deca
 8911 [01] 97        2608      tax
 8912 macro          2609      VE3X
 8912 [04] C60105    2610   LDA PAGE  
 8915 [02] A103      2611   CMP #03T  
 8917 [03] 2605      2612   BNE VE3XF  
 8919 [04] D60112    2613   LDA VE_R,X  
 891C [03] 2003      2614   BRA VE3XC  
                     2615  VE3XF:  
 891E [04] D6E300    2616   LDA ST_F1,X  
                     2617  VE3XC:  
 8921 [03] B7A4      2618      sta     tmp17
 8923 [01] 5C        2619      incx
 8924 macro          2620      VE3X
 8924 [04] C60105    2621   LDA PAGE  
 8927 [02] A103      2622   CMP #03T  
 8929 [03] 2605      2623   BNE VE3XF  
 892B [04] D60112    2624   LDA VE_R,X  
 892E [03] 2003      2625   BRA VE3XC  
                     2626  VE3XF:  
 8930 [04] D6E300    2627   LDA ST_F1,X  
                     2628  VE3XC:  
 8933 [03] B7A5      2629      sta     tmp18
 8935 [03] CC8938    2630      jmp     ST_STEP_4
                     2631  
                     2632  ST_STEP_4:
 8938 [05] 4EA094    2633      mov     tmp13,tmp1
 893B [05] 4EA195    2634      mov     tmp14,tmp2
 893E [05] 4EA296    2635      mov     tmp15,tmp3
 8941 [05] 4EA397    2636      mov     tmp16,tmp4
 8944 [05] 4E4D98    2637      mov     rpm,tmp5
 8947 [05] CD97D1    2638      jsr     lininterp
 894A [05] 4E99A6    2639      mov     tmp6,tmp19
                     2640  
                     2641  ST_STEP_5:
 894D [05] 4EA094    2642      mov     tmp13,tmp1
 8950 [05] 4EA195    2643      mov     tmp14,tmp2
 8953 [05] 4EA496    2644      mov     tmp17,tmp3
 8956 [05] 4EA597    2645      mov     tmp18,tmp4
 8959 [05] 4E4D98    2646      mov     rpm,tmp5
 895C [05] CD97D1    2647      jsr     lininterp
 895F [05] 4E999E    2648      mov     tmp6,tmp11
                     2649  
                     2650  ST_STEP_6:
 8962 [05] 4E9C94    2651      mov     tmp9,tmp1
 8965 [05] 4E9D95    2652      mov     tmp10,tmp2
 8968 [05] 4EA696    2653      mov     tmp19,tmp3
 896B [05] 4E9E97    2654      mov     tmp11,tmp4
 896E [05] 4EDB98    2655      mov     kpa_n,tmp5
 8971 [05] CD97D1    2656      jsr     lininterp
 8974 [03] B699      2657      lda     tmp6
 8976 [03] B7DC      2658      sta     tmp31                    ; Store the result away
 8978 [03] B6DC      2659      lda     tmp31                    ; Reload the look up angle for ST1
 897A [03] B799      2660      sta     tmp6
                     2661  
                     2662  Not_ST1:
 897C [04] C60105    2663      lda     page
 897F [02] A103      2664      cmp     #3
 8981 [03] 2605      2665      bne     trim_fl
 8983 [04] C601BC    2666      lda     TrimAngle_r
 8986 [03] 2003      2667      bra     trim_c
                     2668  
                     2669  trim_fl:
 8988 [04] C6E3AA    2670      lda     TrimAngle_f   ;* TrimAngle_f = 1
                     2671  
                     2672  trim_c:
 898B [03] 2A0A      2673      bpl     CHECK_SP_ADD     ; check adding of trim
 898D [03] BB99      2674      add     tmp6                     ; add lookup angle
 898F [03] 250E      2675      bcs     TRIM_DONE                ; if carry, all is done = high advance
 8991 [03] 2A0C      2676      bpl     TRIM_DONE                ; if result is positive
 8993 [02] A600      2677      lda     #$00                     ; Negative trim over to high advance, clamp to 0
 8995 [03] 2008      2678      bra     TRIM_DONE
                     2679  
                     2680  CHECK_SP_ADD:
 8997 [03] BB99      2681      add     tmp6                     ; add lookup angle
 8999 [03] 2404      2682      bcc     TRIM_DONE                ; Check if add over into low advance
 899B [03] 2B02      2683      bmi     TRIM_DONE                ; Check if result negative
 899D [02] A6FF      2684      lda     #$FF                     ; Clamp to maximum
                     2685  
                     2686  TRIM_DONE:
 899F [05] 034203    2687      brclr   crank,engine,TRIM_DONE2
 89A2 [04] C6E3AB    2688      lda     CrankAngle_f             ; Update spark angle for User Interface  ;* CrankAngle_f = 56 (56 - 28.4 = 27.6 * .352 = 9.71 (10 degrees)
                     2689  
                     2690  TRIM_DONE2:
                     2691  
                     2692  store_spark:
 89A5 [05] 024200    2693      brset   crank,engine,store_spark2        ; if we are cranking skip to the save
                     2694  
                     2695  store_spark2:
                     2696  CALC_DELAY:
 89A8 [01] 97        2697      tax    ; take a copy in x, but don't save to SparkAngle yet
 89A9 [03] BF58      2698      stx     SparkAngle                ;* SparkAngle now = ST lookup + 1 degree
 89AB [04] C6E3A8    2699      lda     TriggAngle_f              ;* TriggAngle_f = 253 (253 * .352 = 89 degrees)
 89AE [03] B058      2700      sub     SparkAngle                ;* (253 - (ST lookup + 1 degree)
 89B0 [02] AB1C      2701      add     #28T                      ;* ((253 - (ST lookup + 1 degree)) + 10 degrees
 89B2 [04] C70106    2702      sta     DelayAngle                ;* DelayAngle now = (((253 - ST lookup + 1 degree)) + 10 degrees)
                     2703  
                     2704  *******************************************************************************
                     2705  **
                     2706  **   Over run fuel cut system                    (P Ringwood)
                     2707  **
                     2708  *******************************************************************************
                     2709  
                     2710  Over_Run:
 89B5 [04] C6E042    2711      lda     feature4_f
 89B8 [02] A540      2712      bit     #OverRunOnb
 89BA [03] 2736      2713      beq     Over_Run_Done
                     2714  
                     2715  No_Over_Run:
 89BC [03] B6CB      2716      lda    kpa
 89BE [04] C1E048    2717      cmp    ORunKpa_f         ; Is the KPa lower than the set point?
 89C1 [03] 222B      2718      bhi    No_OverRun                ; No so no over run
 89C3 [03] B64D      2719      lda    rpm
 89C5 [04] C1E047    2720      cmp    ORunRpm_f         ; Is the rpm higher than the setpoint?
 89C8 [03] 2524      2721      blo    No_OverRun                ; No so no Over run
 89CA [03] B647      2722      lda    tps
 89CC [04] C1E049    2723      cmp    ORunTPS_f         ; Is the TPS below the setpoint?
 89CF [03] 221D      2724      bhi    No_OverRun                ; No so no over run
 89D1 [03] B6CC      2725      lda    coolant
 89D3 [04] C1E0B6    2726      cmp    OverRunClt_f1     ; Is the coolant temp high enough?
 89D6 [03] 2516      2727      blo    No_OverRun
 89D8 [05] 0A6706    2728      brset  over_Run_Set,EnhancedBits2,No_OverRun_Reset
 89DB [04] 1A67      2729      bset   over_Run_Set,EnhancedBits2
 89DD [02] A600      2730      lda    #00T
 89DF [03] B7D7      2731      sta    OverRunTime               ; Reset the over run timer once per over run
                     2732  
                     2733  No_OverRun_Reset:
 89E1 [03] B6D7      2734      lda    OverRunTime
 89E3 [04] C1E082    2735      cmp    OverRunT_f
 89E6 [03] 2402      2736      bhs    Do_OverRun
 89E8 [03] 2006      2737      bra    Over_Run_T
                     2738  
                     2739  Do_OverRun:
 89EA [04] 1466      2740      bset   OverRun,EnhancedBits      ; Set Over Run Fuel Cut
 89EC [03] 2004      2741      bra    Over_Run_Done
                     2742  


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 22
MC68HC908GP32 User Bootloader


                     2743  No_OverRun:
 89EE [04] 1B67      2744      bclr  over_Run_Set,EnhancedBits2 ; Clear the over run timer clear bit
                     2745  
                     2746  Over_Run_T:
 89F0 [04] 1566      2747      bclr  OverRun,EnhancedBits       ; Clear the over run fuel cut
                     2748  
                     2749  Over_Run_Done:
                     2750  
                     2751  ***************************************************************************
                     2752  **
                     2753  ** Idle Speed Adjustment
                     2754  **
                     2755  **    Ubipa's idle control algorithm with KeithG front end logic and such.
                     2756  **
                     2757  **    idleOn = adjustment algorithm is running.  If it is not, then
                     2758  **    idleLastDC will not be changed.
                     2759  **
                     2760  **    if cranking
                     2761  **       idleDC     = icrankdc
                     2762  **       idleLastDC = icrankdc
                     2763  **
                     2764  **    Active Dashpot
                     2765  **    small amount added to last idle DC value recorded
                     2766  **
                     2767  **    Through the closed loop warmup, activation tracks idle speed because it
                     2768  **    is 'rpms above idle' not a fixed value.
                     2769  **
                     2770  **    JSM added warmup PWM setting. Can choose open loop or closed loop.
                     2771  **    This is designed to work like a variable version of B&G
                     2772  **    Can set duty cycle at lower temp. Interpolates to zero at upper temp, where
                     2773  **    rpm targets take over.
                     2774  **    If rpm targets are set to zero then valve shut about upper temp.
                     2775  ***************************************************************************
                     2776  
                     2777  IdleAdjust:
                     2778  
                     2779  idlePWM:
 89F2 [05] 0E6B37    2780       brset   istartbit,EnhancedBits6,Crank_PWM       ; loop to stabilize on startup
 89F5 [05] 024234    2781       brset   crank,engine,Crank_PWM                  ; open AIC for cranking
 89F8 [05] 01422E    2782       brclr   running,engine,Idle_doneJMP1        ; no PWM adjust when not running
                     2783  
                     2784  idle_openloop:
 89FB [03] B6CC      2785          lda     coolant
 89FD [04] C1E812    2786          cmp     slowIdleTemp_f
 8A00 [03] 2507      2787          blo     idle_loopcold
 8A02 [04] C6E806    2788          lda     idle_dc_hi      ; Store hot DC in Idle DC
 8A05 [03] B755      2789          sta     idleDC          ; Added for setting idle DC as if ignition turned
 8A07 [03] 2020      2790          bra     idle_DoneJMP1        ; on when engine hot
                     2791  
                     2792  idle_loopcold:                  ; determine duty cycle by linear interpolation
 8A09 [04] C6E811    2793      lda     fastIdletemp_f
 8A0C [03] B794      2794      sta     liX1
 8A0E [04] C6E812    2795      lda     slowIdleTemp_f
 8A11 [03] B795      2796      sta     liX2
 8A13 [04] C6E800    2797      lda     idle_dc_lo
 8A16 [03] B796      2798      sta     liY1
 8A18 [04] C6E806    2799      lda     idle_dc_hi
 8A1B [03] B797      2800      sta     liy2                    ; rmd upper duty limit
 8A1D [03] B6CC      2801      lda     coolant
 8A1F [03] B798      2802      sta     liX
 8A21 [05] CD97D1    2803      jsr     lininterp
 8A24 [05] 4E9955    2804      mov     liY,idleDC
 8A27 [03] 2047      2805       bra         idle_closedloop
                     2806  
                     2807  Idle_doneJMP1:
 8A29 [03] CC8A72    2808       jmp     Idle_done
                     2809  
                     2810  Crank_PWM:
 8A2C [05] 0E6B1C    2811       brset   istartbit,EnhancedBits6,start_delay
 8A2F [04] C6E811    2812       lda     fastIdletemp_f    ; interpolate delay to 0 at
 8A32 [03] B794      2813       sta     tmp1                      ; slow idle temp
 8A34 [04] C6E812    2814       lda     slowIdleTemp_f
 8A37 [03] B795      2815       sta     tmp2
 8A39 [04] C6E80C    2816       lda         idlestartclk_f
 8A3C [03] B796      2817       sta     tmp3
 8A3E [03] 3F97      2818       clr     tmp4
 8A40 [05] 4ECC98    2819       mov     coolant,tmp5
 8A43 [05] CD97D1    2820       jsr     lininterp
 8A46 [03] B699      2821       lda         tmp6
 8A48 [04] C70111    2822       sta         idleDelayClock
                     2823  
                     2824  start_delay:
 8A4B [04] C6E802    2825       lda         idlecrankdc_f
 8A4E [03] B755      2826       sta         idleDC
 8A50 [03] B7CD      2827       sta         idlelastdc
 8A52 [04] 1E6B      2828       bset    istartbit,EnhancedBits6 ; let em know we are starting...
 8A54 [04] C60111    2829       lda         idledelayClock                  ; Make sure we settle here for a bit
 8A57 [03] 26D0      2830       bne         idle_doneJMP1                   ; clear the bit after the wait time
 8A59 [04] 1F6B      2831       bclr    istartbit,EnhancedBits6 ; we are no longer starting
 8A5B [04] 1E42      2832       bset    idleon,engine               ; we want to idle down
 8A5D [04] 1C6B      2833       bset    idashbit,EnhancedBits6  ; we want to bypass the rpm test for a bit
 8A5F [04] C6E80C    2834       lda         idlestartclk_f                  ; load start delay clock again
 8A62 [04] C1E803    2835       cmp         idleDelayClock_f
 8A65 [03] 2203      2836       bhi         longer_delay
 8A67 [04] C6E803    2837       lda         idleDelayClock_f
                     2838  
                     2839  longer_delay:
 8A6A [04] C70111    2840       sta         idleDelayClock                  ; to allow for the decay time
                     2841  
                     2842  Idle_doneJMP2:
 8A6D [03] CC8A72    2843       jmp         Idle_done
                     2844  
                     2845  idle_closedloop:
 8A70 [03] 20B7      2846      bra     idle_DoneJMP1  ;*RJH 8/05/23
                     2847  
                     2848  Idle_done:
                     2849  
                     2850  ***************************************************************************
                     2851  ********************    S U B   S E C T I O N    L O O P     **************
                     2852  ***************************************************************************
                     2853  
 8A72 [05] CD99DF    2854      jsr     AFR1_Targets; Get Target AFR from table 1 for VE 1
 8A75 [05] 004203    2855      brset   running,engine,nospkoff   ; skip next check
                     2856          ;if not running then make sure all spark outputs are OFF
                     2857          ;this is a bandaid, but better safe than sorry
 8A78 [05] CD8B3E    2858      jsr     turnallsparkoff     ; subroutine to stop them all
                     2859  
                     2860  nospkoff:
 8A7B [05] CD8B5F    2861      jsr    misc_spark           ; dwell and other bits
                     2862  
                     2863  No_misc_Spark:
                     2864  ;This section checks for imminent T2 rollover. Trying to avoid a race condition where
                     2865  ;the timer overflows but we try to read software byte before the overflow handler
                     2866  ; gets there. This would give an incorrect 24bit "current" value
 8A7E [02] 9B        2867      sei
 8A7F [05] 006904    2868      brset  roll1,EnhancedBits4,roll1set
 8A82 [04] 1369      2869      bclr   roll2,EnhancedBits4
 8A84 [03] 2002      2870      bra    chk_roll
                     2871  
                     2872  roll1set:
 8A86 [04] 1269      2873      bset   roll2,EnhancedBits4
                     2874  
                     2875  chk_roll:
 8A88 [03] B62D      2876      lda    T2CNTL           ; unlatch any previous read
 8A8A [03] B62C      2877      lda    T2CNTH
 8A8C [02] A1FF      2878      cmp    #$FF


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 23
MC68HC908GP32 User Bootloader


 8A8E [03] 2604      2879      bne    roll_not_high
 8A90 [04] 1069      2880      bset   roll1,EnhancedBits4
 8A92 [03] 2002      2881      bra    chkroll_end
                     2882  
                     2883  roll_not_high:
 8A94 [04] 1169      2884      bclr   roll1,EnhancedBits4
                     2885  
                     2886  chkroll_end:
 8A96 [02] 9A        2887      cli
                     2888  
                     2889  ; test code
                     2890  ; check if 0.1ms code has executed since we got here last. Major problem if it hasn't.
                     2891  
 8A97 [05] 036A15    2892      brclr  checkbit,EnhancedBits5,troll_ck_done  ; ok
                     2893  
                     2894  ; oh dear, we've missed it
 8A9A [03] B62D      2895      lda     T2CNTL      ; unlatch any previous read
 8A9C [03] B62C      2896      lda     T2CNTH
 8A9E [03] B794      2897      sta     tmp1
 8AA0 [03] B62D      2898      lda     T2CNTL
 8AA2 [02] AB0A      2899      add     #10T        ; interrupt will occur in 10us
 8AA4 [01] 97        2900      tax
 8AA5 [03] B694      2901      lda     tmp1
 8AA7 [02] A900      2902      adc     #0T
 8AA9 [03] B731      2903      sta     T2CH0H
 8AAB [03] BF32      2904      stx     T2CH0L
 8AAD [04] 1C30      2905      bset    TOIE,T2SC0  ; re-enable 0.1ms interrupt
                     2906  
                     2907  troll_ck_done:
 8AAF [04] 126A      2908      bset   checkbit,EnhancedBits5  ; set it here, 0.1ms will clear it
                     2909  
                     2910  ***************************************************************************
                     2911  ;* End of main loop
                     2912  ***************************************************************************
                     2913  
 8AB1 [03] CC838D    2914      jmp    CalcRunningParameters   ; Start main loop again
                     2915  
                     2916  ***************************************************************************
                     2917  **
                     2918  ** Cranking Mode
                     2919  **
                     2920  ** Pulsewidth is directly set by the coolant temperature value of
                     2921  ** 021p added facility to use Inlet Manifold air temp instead / as well
                     2922  ** CWU (at -40 degrees) and CWH (at 165 degrees) - value is interpolated
                     2923  **
                     2924  ** Leaves result in tmp1, clears tmp2.
                     2925  **
                     2926  ***************************************************************************
                     2927  
                     2928  crankingMode:
 8AB4 [05] 014211    2929      brclr    running,engine,ExtraFuelCrank   ; We are stopped so do we add
                     2930                                               ; extra fuel whilst cranking?
                     2931  
                     2932  crankingModePrime:
 8AB7 [04] 1242      2933      bset    crank,engine     ; Turn on cranking mode.
 8AB9 [04] 1542      2934      bclr    startw,engine    ; Turn off ASE mode.
 8ABB [04] 1742      2935      bclr    warmup,engine   ; Turn off WUE mode.
 8ABD [03] B647      2936      lda     tps                          ; ~70% comparison value for throttle - flood clear trigger
 8ABF [04] C1E82C    2937      cmp     tpsflood_f
 8AC2 [03] 2506      2938      blo     crankingPW
                     2939  
                     2940  floodClear:
 8AC4 [01] 4F        2941      clra                                 ; Turn off pulses altogether.
 8AC5 [03] CC8AF5    2942      jmp     crankingDone
                     2943  
                     2944  ; Extra Fueling for Cranking! This is triggered if the TPS goes above the floodclear
                     2945  ; value 3 times before starting. Were using the NosDcOk Bit as its not used at cranking.
                     2946  ; Were also using various Traction Bytes too. All this to save RAM.
                     2947  
                     2948  ExtraFuelCrank:
 8AC8 [03] 20FA      2949      bra     floodClear   ;* RJH 7/25/23
                     2950  
                     2951  crankingPW:
 8ACA [03] B6CC      2952      lda     coolant
 8ACC [03] B798      2953      sta     liX
                     2954  
                     2955  ; Table look up for Cranking PW, liX already contains temperature to look for - PR
 8ACE [05] 4E9897    2956      mov     liX,tmp4         ; tmp4 holds the variable to look for in the lookup table
 8AD1 [05] 4E989D    2957      mov     liX,tmp10                ; Save away for later use below
 8AD4 [03] 459A94    2958      ldhx    #WWURANGE
 8AD7 [04] 3594      2959      sthx    tmp1
 8AD9 [04] 6E0996    2960      mov     #$09,tmp3                ; 10 bits wide
 8ADC [05] CD97B6    2961      jsr     tableLookup              ; This finds the bins when the temperatures are set
 8ADF [01] 8C        2962      clrh
 8AE0 [03] BE98      2963      ldx     tmp5
 8AE2 [04] D6E820    2964      lda     CrankPWs_f,x
 8AE5 [03] B797      2965      sta     liY2
 8AE7 [01] 5A        2966      decx
 8AE8 [04] D6E820    2967      lda     CrankPWs_f,x     ; This finds the values for the PW at the above temperatures
 8AEB [03] B796      2968      sta     liY1
 8AED [05] 4E9D98    2969      mov     tmp10,liX
 8AF0 [05] CD97D1    2970      jsr     LinInterp
 8AF3 [03] B699      2971      lda     tmp6                     ; Leave it where expected.
                     2972  
                     2973  crankingDone:
 8AF5 [03] B794      2974      sta     tmp1
 8AF7 [05] 0D6303    2975      brclr   CrankingPW2,feature1,no_crankpw2
 8AFA [03] B795      2976      sta     tmp2                     ; Pulse bank 2 just like bank 1.
 8AFC [04] 81        2977      rts
                     2978  
                     2979  no_crankpw2:
 8AFD [03] 3F95      2980      clr     tmp2                     ; Zero out bank 2 while cranking.
 8AFF [04] 81        2981      rts
                     2982  
                     2983  ****************************************************************
                     2984  
                     2985  VE_STEP_4:
 8B00 [05] 4EA094    2986      mov     tmp13,liX1               ; rpm low
 8B03 [05] 4EA195    2987      mov     tmp14,liX2               ; rpm high
 8B06 [05] 4EA296    2988      mov     tmp15,liY1               ; ve low
 8B09 [05] 4EA397    2989      mov     tmp16,liY2               ; ve high
 8B0C [05] 4E4D98    2990      mov     rpm,liX
 8B0F [05] CD97D1    2991      jsr     LinInterp
 8B12 [05] 4E99A6    2992      mov     tmp6,tmp19               ; ve at lower kPa/alpha bound
                     2993  
                     2994  VE_STEP_5:
 8B15 [05] 4EA094    2995      mov     tmp13,liX1               ; rpm low
 8B18 [05] 4EA195    2996      mov     tmp14,liX2               ; rpm high
 8B1B [05] 4EA496    2997      mov     tmp17,liY1               ; ve low
 8B1E [05] 4EA597    2998      mov     tmp18,liY2               ; ve high
 8B21 [05] 4E4D98    2999      mov     rpm,liX
 8B24 [05] CD97D1    3000      jsr     LinInterp
 8B27 [05] 4E999E    3001      mov     tmp6,tmp11               ; ve at upper kPa/alpha bound
                     3002  
                     3003  VE_STEP_6:
 8B2A [05] 4E9C94    3004      mov     tmp9,liX1                ; kPa/alpha low
 8B2D [05] 4E9D95    3005      mov     tmp10,liX2               ; kPa/alpha high
 8B30 [05] 4EA696    3006      mov     tmp19,liY1               ; ve low
 8B33 [05] 4E9E97    3007      mov     tmp11,liY2               ; ve high
 8B36 [03] B6DB      3008      lda     kpa_n
 8B38 [03] B798      3009      sta     liX
 8B3A [05] CD97D1    3010      jsr     LinInterp
 8B3D [04] 81        3011      rts
                     3012  
                     3013  ***************************************************************************
                     3014  


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 24
MC68HC908GP32 User Bootloader


 8B3E                3015  $MACRO TurnAllSpkOff ; gets called in stall or on entering bootloader mode
                     3016                                           ; turn spark outputs to inactive
                     3017      bclr     iasc,porta
                     3018      bclr     sled,portc
                     3019      bclr     aled,portc
                     3020      bclr     Output3,portd
                     3021      bclr     pin10,portc
                     3022      bclr     KnockIn,portd
                     3023  
                     3024  ; kill the dwell timers too just in case
                     3025      clr     SparkOnLeftah
                     3026      clr     SparkOnLeftal
                     3027      clr     SparkOnLeftbh
                     3028      clr     SparkOnLeftbl
                     3029  
 8B3E                3030  $MACROEND
                     3031  
                     3032  ***************************************************************************
                     3033  
 8B3E                3034  $MACRO  SubDwell
                     3035      lda     dwelltmpLop
                     3036      sub     dwellusl ; dwell target calc'd just earlier
                     3037      sta     dwelltmpLop     ; temp result
                     3038      lda     dwelltmpHop
                     3039      sbc     dwellush
                     3040      sta     dwelltmpHop
                     3041      lda     dwelltmpXop
                     3042      sbc     #0
                     3043      sta     dwelltmpXop
                     3044  
 8B3E                3045  $MACROEND
                     3046  
 8B3E                3047  $MACRO DwellRail          ; check if we've gone too low
                     3048      lda     dwelltmpXop
                     3049      beq     dwlnwchk
                     3050      bit     #$80
                     3051      bne     dwlnwrail       ; gone negative. Rail.
                     3052      bra     dwlnwok         ; X byte>0 so dwell long enough
                     3053  
                     3054  dwlnwchk:
                     3055      lda     dwelltmpHop
                     3056      bne     dwlnwok         ; H byte>0 so dwell long enough
                     3057      lda     dwelltmpLop
                     3058      cmp     mindischg_f
                     3059      bhs     dwlnwok
                     3060  
                     3061  dwlnwrail:
                     3062      clr     dwelltmpXop     ; rail dwell delay at min discharge
                     3063      clr     dwelltmpHop
                     3064      lda     mindischg_f
                     3065      sta     dwelltmpLop
                     3066  
                     3067  dwlnwok:
                     3068  
 8B3E                3069  $MACROEND
                     3070  
 8B3E                3071  $MACRO DwellDiv   ; store result. Convert us to 0.1ms
                     3072                    ; don't use udvd32 - wasteful, only need 24/8bit divide
                     3073      clrh
                     3074      ldx     #100T
                     3075      lda     dwelltmpXop
                     3076      div                     ;A rem H = (H:A) / X
                     3077      sta     dwelltmpXms
                     3078      lda     dwelltmpHop
                     3079      div
                     3080      sta     dwelltmpHms
                     3081      lda     dwelltmpLop
                     3082      div
                     3083      sta     dwelltmpLms
                     3084      lda     dwelltmpXms
                     3085      beq     dwlldend      ; too long, rail to max
                     3086      lda     #255T
                     3087      sta     dwelltmpHms
                     3088      sta     dwelltmpLms
                     3089  
                     3090  dwlldend:        ; check for high speed when dwell and period may be close
                     3091      lda     dwelltmpHms
                     3092      bne     save_dwell
                     3093      lda     dwelltmpLms
                     3094      cmp     mindischg_f      ; check if less than minimum period
                     3095      bhi     save_dwell
                     3096  
                     3097  dwell_lim:                           ; target dwell period>available period
                     3098      clr     dwelltmpHms
                     3099      lda     mindischg_f
                     3100      sta     dwelltmpLms      ; minimum X x 0.1ms non-dwell time
                     3101  
                     3102  save_dwell:      ; move calculation variable into variable used by CalcDwellspk
                     3103      ldhx    dwelltmpHms
                     3104  
 8B3E                3105  $MACROEND
                     3106  
                     3107  ***************************************************************************
                     3108  
                     3109  turnallsparkoff:
                     3110  
 8B3E macro          3111          TurnAllSpkOff   ; macro
 8B3E [04] 1300      3112   BCLR IASC,PORTA  
 8B40 [04] 1102      3113   BCLR SLED,PORTC  
 8B42 [04] 1302      3114   BCLR ALED,PORTC  
 8B44 [04] 1103      3115   BCLR OUTPUT3,PORTD  
 8B46 [04] 1702      3116   BCLR PIN10,PORTC  
 8B48 [04] 1503      3117   BCLR KNOCKIN,PORTD  
 8B4A [03] 3FB3      3118   CLR SPARKONLEFTAH  
 8B4C [03] 3FB4      3119   CLR SPARKONLEFTAL  
 8B4E [03] 3FB5      3120   CLR SPARKONLEFTBH  
 8B50 [03] 3FB6      3121   CLR SPARKONLEFTBL  
 8B52 [04] 81        3122      rts
                     3123  
                     3124  ***************************************************************************
                     3125  * Spark and Dwell stuff
                     3126  * Some bits moved out of interrupt routines to save a few ticks
                     3127  ***************************************************************************
                     3128  * The following table is a dwell period vs battery voltage correction table
                     3129  * derived from
                     3130  * T = -L/R * ln(1- RI/V)
                     3131  ***************************************************************************
                     3132  
 8B53      33445566  3133  dwelltv: db     51T,68T,85T,102T,119T,136T   ; 6v,8v,10v,12v,14v,16v
           7788 
 8B59      FA7C5440  3134  dwelltf: db     250T,124T,84T,64T,51T,44T
           332C 
                     3135  ;Values in table are /4 (i.e. 250 = 250/256*4 = x 3.9)
                     3136  
                     3137  misc_spark:
 8B5F [05] 004200    3138      brset   running,engine,hei7_spd   ; skip next check
                     3139          ;if not running then make sure all spark outputs are OFF
                     3140          ;this is a bandaid, but better safe than sorry
                     3141  
                     3142  hei7_spd:    ; moved from Sparktime - set/clr HEI7 output
                     3143  
                     3144  ; first lookup battery correction factor from above table
 8B62 [03] 458B53    3145      ldhx    #dwelltv
 8B65 [04] 3594      3146      sthx    tmp1
 8B67 [04] 6E0596    3147      mov     #5,tmp3                  ; 6 elements
 8B6A [05] 4E4897    3148      mov     batt,tmp4


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 25
MC68HC908GP32 User Bootloader


 8B6D [05] CD97B6    3149      jsr     tableLookup
 8B70 [01] 8C        3150      clrh
 8B71 [03] BE98      3151      ldx     tmp5
 8B73 [04] D68B59    3152      lda     dwelltf,x
 8B76 [03] B797      3153      sta     liY2
 8B78 [01] 5A        3154      decx
 8B79 [04] D68B59    3155      lda     dwelltf,x
 8B7C [03] B796      3156      sta     liY1
 8B7E [03] B648      3157      lda     batt
 8B80 [03] B798      3158      sta     liX
 8B82 [05] CD97D1    3159      jsr     LinInterp        ; result in tmp6
 8B85 [05] 024205    3160      brset   crank,engine,crankdwell
 8B88 [04] C6E06F    3161      lda     dwellrun_f
 8B8B [03] 2003      3162      bra     dwell_corr
                     3163  
                     3164  crankdwell:
 8B8D [04] C6E06E    3165      lda     dwellcrank_f
                     3166  
                     3167  dwell_corr:
 8B90 [03] BE99      3168      ldx     tmp6
 8B92 [05] 42        3169      mul                                      ; result in x:a
                     3170  
                     3171  ;now multiply by 4 as factor table is /4 and dwell in 0.1ms units
 8B93 [01] 48        3172      lsla
 8B94 [01] 59        3173      rolx
 8B95 [03] 2504      3174      bcs     max_dwell
 8B97 [01] 48        3175      lsla
 8B98 [01] 59        3176      rolx
 8B99 [03] 2402      3177      bcc     do_dwell_us
                     3178  
                     3179  max_dwell:
 8B9B [02] AEFF      3180      ldx     #255T                    ; max dwell 25.5ms
                     3181  
                     3182  do_dwell_us:
 8B9D [03] BFF7      3183      stx     dwelldms         ; save corrected target dwell (in 0.1ms units)
                     3184  
                     3185  ;calculate this in us
 8B9F [02] A664      3186      lda     #100T
 8BA1 [05] 42        3187      mul
 8BA2 [02] 9B        3188      sei                                      ; no ints while we save these
 8BA3 [03] BFF8      3189      stx     dwellush        ; this is the microsecond duration of coil-on
 8BA5 [03] B7F9      3190      sta     dwellusl
 8BA7 [02] 9A        3191      cli
                     3192  
                     3193  ; we've now calculated target dwell period used by dwell and duty cycle
                     3194  ms_dwell:
 8BA8 [02] 9B        3195      sei                         ; avoid interruption between high/low bytes
 8BA9 [05] 4EAE95    3196      mov     iTimeX,dwelltmpX    ; dt-1
 8BAC [05] 4EAF96    3197      mov     iTimeH,dwelltmpH
 8BAF [05] 4EB097    3198      mov     iTimeL,dwelltmpL
 8BB2 [05] 4EFC9F    3199      mov     iTimepX,dwelltmpXp  ; dt-2
 8BB5 [05] 4EFDA0    3200      mov     iTimepH,dwelltmpHp
 8BB8 [05] 4EFEA1    3201      mov     iTimepL,dwelltmpLp
 8BBB [02] 9A        3202      cli
                     3203  
                     3204  ;For a single period, can..
                     3205  ;predict this period iTime[this] = itime[last]) + (itime[last] - itime[previous])
                     3206  ;calculate acceleration factor (itime[last] - itime[previous]) and store in dwelltmp?ac
                     3207  ;024n sense changed now +ve is accel, -ve is decel. Unlikely to make any difference, but
                     3208  ;worth a try
                     3209  
                     3210  ;025n7, try reversing sense as it was doing more harm than good
                     3211  ;somehow I'd got the sense wrong.
                     3212  
 8BBC [03] B6A1      3213      lda     dwelltmpLp
 8BBE [03] B097      3214      sub     dwelltmpL
 8BC0 [03] B7A9      3215      sta     dwelltmpLac     ; ddt
 8BC2 [03] B6A0      3216      lda     dwelltmpHp
 8BC4 [03] B296      3217      sbc     dwelltmpH
 8BC6 [03] B7A8      3218      sta     dwelltmpHac
 8BC8 [03] B69F      3219      lda     dwelltmpXp
 8BCA [03] B295      3220      sbc     dwelltmpX
 8BCC [03] B7A7      3221      sta     dwelltmpXac
                     3222  
                     3223  true_dwell_calc:
                     3224  
                     3225  ; One section of code depending on number of spark outputs now
                     3226  ; so code can apply delay of 1,2,3,4 periods back depending on rpm/advance
                     3227  ; this is supposed to improve dwell stability at medium speeds when engine conditions
                     3228  ; could have changed a lot between setting the dwell timer and the dwell starting.
                     3229  
                     3230  ; Fixed duty cycle doesn't really need this lot as we always "dwell" across the whole time
                     3231  ; between sparks on one channel.
                     3232  ; Most of the comments in here are related to real dwell control.
                     3233  
                     3234  ;WAS....
                     3235  ;dwellduty1 = dt-1 + acc factor - dwell       dt-1 +   ddt
                     3236  ;dwellduty2 = dwellduty1 + dt-1 + ac + ac    2dt-1 +  3ddt
                     3237  ;dwellduty3 = dwellduty2 + dt-1 + ac + 2ac   3dt-1 +  6ddt
                     3238  ;dwellduty4 = dwellduty3 + dt-1 + 4ac        4dt-1 + 10ddt
                     3239  
                     3240  ;But the massive loads of correction factor seemed to do more harm than good,
                     3241  ;NOW....
                     3242  ;dwellduty1 = dt-1 + acc factor - dwell       dt-1 +   ddt
                     3243  ;dwellduty2 = dwellduty1 + dt-1 + ac + ac    2dt-1 +  2ddt
                     3244  ;dwellduty3 = dwellduty2 + dt-1 + ac + 2ac   3dt-1 +  3ddt
                     3245  ;dwellduty4 = dwellduty3 + dt-1 + 4ac        4dt-1 + 4ddt
                     3246  
                     3247  ;add off the accel factor (-ve)    dt = dt-1 + (-ddt) (predicted next period)
 8BCE [03] B697      3248      lda     dwelltmpL     ; dt-1
 8BD0 [03] BBA9      3249      add     dwelltmpLac   ; ac
 8BD2 [03] B7A1      3250      sta     dwelltmpLp    ; used if wspk
 8BD4 [03] B79A      3251      sta     dwelltmpLop   ; output value
 8BD6 [03] B696      3252      lda     dwelltmpH
 8BD8 [03] B9A8      3253      adc     dwelltmpHac
 8BDA [03] B7A0      3254      sta     dwelltmpHp
 8BDC [03] B799      3255      sta     dwelltmpHop
 8BDE [03] B695      3256      lda     dwelltmpX
 8BE0 [03] B9A7      3257      adc     dwelltmpXac
 8BE2 [03] B79F      3258      sta     dwelltmpXp
 8BE4 [03] B798      3259      sta     dwelltmpXop
                     3260  
 8BE6 macro          3261          SubDwell        ; subtract dwell macro
 8BE6 [03] B69A      3262   LDA DWELLTMPLOP  
 8BE8 [03] B0F9      3263   SUB DWELLUSL  
 8BEA [03] B79A      3264   STA DWELLTMPLOP  
 8BEC [03] B699      3265   LDA DWELLTMPHOP  
 8BEE [03] B2F8      3266   SBC DWELLUSH  
 8BF0 [03] B799      3267   STA DWELLTMPHOP  
 8BF2 [03] B698      3268   LDA DWELLTMPXOP  
 8BF4 [02] A200      3269   SBC #0  
 8BF6 [03] B798      3270   STA DWELLTMPXOP  
                     3271  
                     3272  cd1_start:    ;check to see if value we _would_ store in dwelldelay1 is negative
                     3273                ; ie. top bit set
 8BF8 [03] B698      3274      lda     dwelltmpXop
 8BFA [03] 2B32      3275      bmi     cd_1rail   ; if pos ok, else set to zero  ?? is BMI correct?
                     3276  
 8BFC macro          3277          DwellDiv       ; divide dwell macro
 8BFC [01] 8C        3278   CLRH  
 8BFD [02] AE64      3279   LDX #100T  
 8BFF [03] B698      3280   LDA DWELLTMPXOP  
 8C01 [07] 52        3281   DIV  
 8C02 [03] B79B      3282   STA DWELLTMPXMS  
 8C04 [03] B699      3283   LDA DWELLTMPHOP  
 8C06 [07] 52        3284   DIV  


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 26
MC68HC908GP32 User Bootloader


 8C07 [03] B79C      3285   STA DWELLTMPHMS  
 8C09 [03] B69A      3286   LDA DWELLTMPLOP  
 8C0B [07] 52        3287   DIV  
 8C0C [03] B79D      3288   STA DWELLTMPLMS  
 8C0E [03] B69B      3289   LDA DWELLTMPXMS  
 8C10 [03] 2706      3290   BEQ DWLLDEND  
 8C12 [02] A6FF      3291   LDA #255T  
 8C14 [03] B79C      3292   STA DWELLTMPHMS  
 8C16 [03] B79D      3293   STA DWELLTMPLMS  
                     3294  DWLLDEND:  
 8C18 [03] B69C      3295   LDA DWELLTMPHMS  
 8C1A [03] 260E      3296   BNE SAVE_DWELL  
 8C1C [03] B69D      3297   LDA DWELLTMPLMS  
 8C1E [04] C1E08F    3298   CMP MINDISCHG_F  
 8C21 [03] 2207      3299   BHI SAVE_DWELL  
                     3300  DWELL_LIM:  
 8C23 [03] 3F9C      3301   CLR DWELLTMPHMS  
 8C25 [04] C6E08F    3302   LDA MINDISCHG_F  
 8C28 [03] B79D      3303   STA DWELLTMPLMS  
                     3304  SAVE_DWELL:  
 8C2A [04] 559C      3305   LDHX DWELLTMPHMS  
                     3306  
 8C2C [03] 2003      3307      bra     cd_1store
                     3308  
                     3309  cd_1rail:
 8C2E [03] 450000    3310      ldhx    #0
                     3311  
                     3312  cd_1store:
 8C31 [04] 35E7      3313      sthx    dwelldelay1
                     3314  
                     3315  cd_2:     ;  dd2 = dd1 +dt-1 + ac + ac
 8C33 [03] B6A1      3316      lda     dwelltmpLp ; period without dwell removed
 8C35 [03] BB97      3317      add     dwelltmpL
 8C37 [03] B7A1      3318      sta     dwelltmpLp  ; now 2 periods ready for next calc
 8C39 [03] B79A      3319      sta     dwelltmpLop
 8C3B [03] B6A0      3320      lda     dwelltmpHp
 8C3D [03] B996      3321      adc     dwelltmpH
 8C3F [03] B7A0      3322      sta     dwelltmpHp
 8C41 [03] B799      3323      sta     dwelltmpHop
 8C43 [03] B69F      3324      lda     dwelltmpXp
 8C45 [03] B995      3325      adc     dwelltmpX
 8C47 [03] B79F      3326      sta     dwelltmpXp
 8C49 [03] B798      3327      sta     dwelltmpXop
 8C4B [03] B69A      3328      lda     dwelltmpLop
 8C4D [03] BBA9      3329      add     dwelltmpLac
 8C4F [03] B79A      3330      sta     dwelltmpLop
 8C51 [03] B699      3331      lda     dwelltmpHop
 8C53 [03] B9A8      3332      adc     dwelltmpHac
 8C55 [03] B799      3333      sta     dwelltmpHop
 8C57 [03] B698      3334      lda     dwelltmpXop
 8C59 [03] B9A7      3335      adc     dwelltmpXac
 8C5B [03] B798      3336      sta     dwelltmpXop
                     3337  
 8C5D macro          3338          SubDwell        ; subtract dwell macro
 8C5D [03] B69A      3339   LDA DWELLTMPLOP  
 8C5F [03] B0F9      3340   SUB DWELLUSL  
 8C61 [03] B79A      3341   STA DWELLTMPLOP  
 8C63 [03] B699      3342   LDA DWELLTMPHOP  
 8C65 [03] B2F8      3343   SBC DWELLUSH  
 8C67 [03] B799      3344   STA DWELLTMPHOP  
 8C69 [03] B698      3345   LDA DWELLTMPXOP  
 8C6B [02] A200      3346   SBC #0  
 8C6D [03] B798      3347   STA DWELLTMPXOP  
                     3348  
 8C6F macro          3349          DwellRail       ; check if negative or less than mindischarge macro
 8C6F [03] B698      3350   LDA DWELLTMPXOP  
 8C71 [03] 2706      3351   BEQ DWLNWCHK  
 8C73 [02] A580      3352   BIT #$80  
 8C75 [03] 260D      3353   BNE DWLNWRAIL  
 8C77 [03] 2014      3354   BRA DWLNWOK  
                     3355  DWLNWCHK:  
 8C79 [03] B699      3356   LDA DWELLTMPHOP  
 8C7B [03] 2610      3357   BNE DWLNWOK  
 8C7D [03] B69A      3358   LDA DWELLTMPLOP  
 8C7F [04] C1E08F    3359   CMP MINDISCHG_F  
 8C82 [03] 2409      3360   BHS DWLNWOK  
                     3361  DWLNWRAIL:  
 8C84 [03] 3F98      3362   CLR DWELLTMPXOP  
 8C86 [03] 3F99      3363   CLR DWELLTMPHOP  
 8C88 [04] C6E08F    3364   LDA MINDISCHG_F  
 8C8B [03] B79A      3365   STA DWELLTMPLOP  
                     3366  DWLNWOK:  
                     3367  
 8C8D macro          3368          DwellDiv        ; convert microseconds to 0.1ms units macro
 8C8D [01] 8C        3369   CLRH  
 8C8E [02] AE64      3370   LDX #100T  
 8C90 [03] B698      3371   LDA DWELLTMPXOP  
 8C92 [07] 52        3372   DIV  
 8C93 [03] B79B      3373   STA DWELLTMPXMS  
 8C95 [03] B699      3374   LDA DWELLTMPHOP  
 8C97 [07] 52        3375   DIV  
 8C98 [03] B79C      3376   STA DWELLTMPHMS  
 8C9A [03] B69A      3377   LDA DWELLTMPLOP  
 8C9C [07] 52        3378   DIV  
 8C9D [03] B79D      3379   STA DWELLTMPLMS  
 8C9F [03] B69B      3380   LDA DWELLTMPXMS  
 8CA1 [03] 2706      3381   BEQ DWLLDEND  
 8CA3 [02] A6FF      3382   LDA #255T  
 8CA5 [03] B79C      3383   STA DWELLTMPHMS  
 8CA7 [03] B79D      3384   STA DWELLTMPLMS  
                     3385  DWLLDEND:  
 8CA9 [03] B69C      3386   LDA DWELLTMPHMS  
 8CAB [03] 260E      3387   BNE SAVE_DWELL  
 8CAD [03] B69D      3388   LDA DWELLTMPLMS  
 8CAF [04] C1E08F    3389   CMP MINDISCHG_F  
 8CB2 [03] 2207      3390   BHI SAVE_DWELL  
                     3391  DWELL_LIM:  
 8CB4 [03] 3F9C      3392   CLR DWELLTMPHMS  
 8CB6 [04] C6E08F    3393   LDA MINDISCHG_F  
 8CB9 [03] B79D      3394   STA DWELLTMPLMS  
                     3395  SAVE_DWELL:  
 8CBB [04] 559C      3396   LDHX DWELLTMPHMS  
                     3397  
 8CBD [04] 35E9      3398      sthx    dwelldelay2
                     3399  
                     3400  ; finally we've calculated everything we need to for dwell and saved it away - phew!
                     3401  
 8CBF [04] 81        3402      rts
                     3403  
                     3404  ;***************************************************************************
                     3405  ;**
                     3406  ;** * * * * Interrupt Section * * * * *
                     3407  ;**
                     3408  ;** Following interrupt service routines:
                     3409  ;**  - Timer Overflow
                     3410  ;**  - ADC Conversion Complete
                     3411  ;**  - IRQ input line transistion from high to low
                     3412  ;**  - Serial Communication received character
                     3413  ;**  - Serial Communications transmit buffer empty (send another character)
                     3414  ;**
                     3415  ;***************************************************************************
                     3416  
                     3417  ;First some Macros used within the interrupt sections
                     3418  
 8CC0                3419  $MACRO COILNEG
                     3420  


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 27
MC68HC908GP32 User Bootloader


                     3421      brset   coilabit,coilsel,dslsa
                     3422      brset   coilbbit,coilsel,dslsb
                     3423      bra     cn_end                   ; should never get here
                     3424  
                     3425  dslsa:
                     3426      bset    coila,portc              ; Set spark on
                     3427      bra     cn_end
                     3428  
                     3429  dslsb:
                     3430      bset    coilb,portc              ; Set spark on
                     3431      bra     cn_end
                     3432  
                     3433  cn_end:
                     3434  
 8CC0                3435  $MACROEND
                     3436  
                     3437  ;***************************************************************************
                     3438  
 8CC0                3439  $MACRO COILPOS
                     3440      brset   coilabit,coilsel,ilsoa
                     3441      brset   coilbbit,coilsel,ilsob
                     3442      bra     fc_end                   ; should never get here
                     3443  
                     3444  ilsoa:
                     3445      bclr    coila,portc
                     3446      bra     fc_end
                     3447  
                     3448  ilsob:
                     3449      bclr    coilb,portc
                     3450      bra     fc_end
                     3451  
                     3452  fc_end:
                     3453  
 8CC0                3454  $MACROEND
                     3455  
                     3456  ***************************************************************************
                     3457  **
                     3458  ** Timer Rollover - Occurs every 1/10 of a millisecond - main timing clock
                     3459  **
                     3460  **
                     3461  ** Generate time rates:
                     3462  **  1/10 milliseconds
                     3463  **  1 milliseconds
                     3464  **  1/10 seconds
                     3465  **  seconds
                     3466  **
                     3467  ** Also, in 1/10 millisecond section, turn on/off injector and
                     3468  **  check RPM for stall condition
                     3469  ** In milliseconds section, fire off ADC conversion for next channel (5 total),
                     3470  **  and wrap back when all channels done
                     3471  **
                     3472  ***************************************************************************
                     3473  
 8CC0                3474  $MACRO CalcDwellspk
                     3475  
                     3476  ; This is now one massive macro. There is a section of code depending on how many spark
                     3477  ; outputs there are - 1,2,3,4,5,6
                     3478  ;022g - macro is now used to apply dwelldelay value calculated in main loop.
                     3479  ; macro only used after spark when mainloop will??? have had time to calc since trigger
                     3480  
                     3481  wdwell2op:   ; first off always store a 360deg dwell delay
                     3482      ldhx    dwelldelay2    ; precalculated to rail at mindischg
                     3483      brset   coilbbit,coilsel,wd2b360
                     3484  
                     3485  wd2a360:
                     3486      sthx    SparkOnLeftah
                     3487      bra     wd2end360
                     3488  
                     3489  wd2b360:
                     3490      sthx    SparkOnLeftbh
                     3491  
                     3492  wd2end360:     ; we've now set the 360deg wait, see if we can delay off previous spark (180deg)
                     3493      lda     dwelldelay1
                     3494      bne     wd2ok
                     3495      lda     dwelldelay1+1
                     3496      cmp     #2
                     3497      blo     wd2skip   ; check if more than 0.2ms if less then dwell might get missed
                     3498  wd2ok:
                     3499      ldhx    dwelldelay1
                     3500      brset   coilabit,coilsel,wd2a180
                     3501      brset   coilbbit,coilsel,wd2b180
                     3502  
                     3503  wd2a180:
                     3504      sthx    SparkOnLeftbh
                     3505      bra     wd2end180
                     3506  
                     3507  wd2b180:
                     3508      sthx    SparkOnLeftah
                     3509  
                     3510  wd2end180:
                     3511  
                     3512  wd2skip:
                     3513  
 8CC0                3514  $MACROEND
                     3515  
                     3516  ******************************************************************************
                     3517  
                     3518  TIMERROLL:
                     3519  
 8CC0 [04] 136A      3520      bclr    checkbit,EnhancedBits5
 8CC2 [02] 8B        3521      pshh                         ; Stack h
 8CC3 [03] B630      3522      lda     T2SC0            ; ack the interrupt
 8CC5 [04] 1F30      3523      bclr    CHxF,T2SC0       ; clear pending bit
 8CC7 [03] B62D      3524      lda     T2CNTL           ; unlatch any previous read (added JSM)
                     3525  
                     3526  ; revised section - from Dan Hiebert's TFI code
 8CC9 [04] 5531      3527      ldhx    T2CH0H           ; Load index register with value in TIM2 CH0
                     3528                                           ; register H:L (output compare value)
 8CCB [02] AF64      3529      aix     #100T            ; Add decimal 100 (100 uS)
 8CCD [04] 3531      3530      sthx    T2CH0H           ; Copy result to TIM2 CH0 register
                     3531                                   ;(new output compare value)
                     3532  ; end revised section
                     3533  
                     3534  ;******************************************************************************
                     3535  ; New code to delay wheel decode until IRQ period is short enough so 1uS
                     3536  ; timer won't overflow. This uses the 100uS counter usc100H:usc100L
                     3537  ; to measure the IRQ period. In the "decode_wheel" section of the DOSQUIRT
                     3538  ; interrupt routine, on the first IRQ signal the "IRQtime" bit is set to start
                     3539  ; the counter here. On the Next IRQ signal the "IRQtime" bit is cleared to
                     3540  ; stop the timer. usc100H:usc100L is copied to IRQpH:IRQpL and the "IRQtime"
                     3541  ; bit is set to start again. This cycle is repeated until the wheel can be
                     3542  ; decoded succesfully.
                     3543  ;******************************************************************************
                     3544  
 8CCF [05] 0F5F06    3545      brclr  IRQtime,SparkBits,No_IRQtimer
 8CD2 [04] 3C75      3546      inc    usc100L
 8CD4 [03] 2602      3547       bne    No_usc100L_roll
 8CD6 [04] 3C74      3548      inc    usc100H
                     3549  
                     3550  No_usc100L_roll:
                     3551  
                     3552  No_IRQtimer:
                     3553  
                     3554  ; if we are stalled don't increment these or we might skip the wheeldecoder
 8CD8 [05] 014206    3555      brclr    running,engine,TIMER_DONE
 8CDB [04] 3CF6      3556      inc      lowresL         ; 16bit 0.1ms timer


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 28
MC68HC908GP32 User Bootloader


 8CDD [03] 2602      3557      bne      TIMER_DONE
 8CDF [04] 3CF5      3558      inc      lowresH
                     3559  
                     3560  TIMER_DONE:
 8CE1 [04] 1D30      3561      bclr     TOIE,T2SC0      ; disable 0.1ms interrupt to prevent re-entry
 8CE3 [02] 9A        3562      cli         ; allow interrupts during the large chunk of code below. This
                     3563                           ; significantly reduces spark jitter. Without it there is
                     3564                               ; ~6deg at 9000rpm only really want IRQ to be allowed
                     3565  
                     3566  ***************************************************************************
                     3567  ***************** 0.1 millisecond section ********************************
                     3568  ***************************************************************************
                     3569  
 8CE4 [04] 3C7D      3570      inc      mms                     ; bump up 0.1 millisec variable
                     3571  
                     3572  ; now with multi-dwell check them all each time (how much delay to
                     3573  ; 0.1ms routine?) this routine is flawed but only slightly - when one
                     3574  ; coil gets to zero those below don't get decremented so will be 0.1ms
                     3575  ; late. a jsr would be nice.
                     3576  
 8CE6 [02] 9B        3577      sei                              ; no ints while we are stealing this variable
 8CE7 [05] 4E68C3    3578      mov     coilsel,SparkCarry; temporary
 8CEA [05] 096900    3579       brclr   indwell,EnhancedBits4,sin_a
                     3580  
                     3581  sin_a:
 8CED [04] 55B3      3582      ldhx    SparkOnLeftah
 8CEF [03] 270F      3583      beq     sin_b
 8CF1 [02] AFFF      3584      aix     #-1                      ; is it time to start charging
 8CF3 [04] 35B3      3585      sthx    SparkOnLeftah
 8CF5 [03] 650000    3586      cphx    #0
 8CF8 [03] 2606      3587      bne     sin_b
 8CFA [03] 3F68      3588      clr     coilsel
 8CFC [04] 1068      3589      bset    coilabit,coilsel
 8CFE [03] 2017      3590      bra     lowspdspk
                     3591  
                     3592  sin_b:
 8D00 [04] 55B5      3593      ldhx    SparkOnLeftbh
 8D02 [03] 270F      3594      beq     j_CSL
 8D04 [02] AFFF      3595      aix     #-1                      ; is it time to start charging
 8D06 [04] 35B5      3596      sthx    SparkOnLeftbh
 8D08 [03] 650000    3597      cphx    #0
 8D0B [03] 2606      3598      bne     j_CSL
 8D0D [03] 3F68      3599      clr     coilsel
 8D0F [04] 1268      3600      bset    coilbbit,coilsel
 8D11 [03] 2004      3601      bra     lowspdspk
                     3602  
                     3603  j_CSL:
 8D13 [02] 9A        3604      cli
 8D14 [03] CC8D43    3605      jmp     CHECK_SPARK_LATE
                     3606  
                     3607  lowspdspk:
 8D17 [05] 086910    3608      brset   indwell,EnhancedBits4,blssd      ; if doing hi-res
                     3609                                                           ; dwell then don't turn on coil now
                     3610  dodwell:
 8D1A [04] 1760      3611      bclr    sparkon,revlimbits       ; spark now off
 8D1C [03] B6D8      3612      lda     SparkCutCnt      ; Check Spark Counter
 8D1E [01] 4C        3613      inca
 8D1F [04] C1E04E    3614      cmp     SparkCutBase_f   ; How many sparks to count to
 8D22 [03] 2502      3615      blo     Dont_ResetCnt
 8D24 [02] A601      3616      lda     #01T
                     3617  
                     3618  Dont_ResetCnt:
 8D26 [03] B7D8      3619      sta     SparkCutCnt      ; Store new value to spark counter
 8D28 [03] 2002      3620      bra     lsspk_inv       ;* RJH 7/25/23
                     3621  
                     3622  blssd:
 8D2A [03] 2013      3623      bra     lsspk_done
                     3624  
                     3625  lsspk_inv:
 8D2C [05] 024210    3626      brset    crank,engine,NoCoilNeg1
                     3627  
 8D2F macro          3628          COILNEG                              ; charge coil for inverted macro
 8D2F [05] 006805    3629   BRSET COILABIT,COILSEL,DSLSA  
 8D32 [05] 026806    3630   BRSET COILBBIT,COILSEL,DSLSB  
 8D35 [03] 2008      3631   BRA CN_END  
                     3632  DSLSA:  
 8D37 [04] 1002      3633   BSET COILA,PORTC  
 8D39 [03] 2004      3634   BRA CN_END  
                     3635  DSLSB:  
 8D3B [04] 1202      3636   BSET COILB,PORTC  
 8D3D [03] 2000      3637   BRA CN_END  
                     3638  CN_END:  
                     3639  
                     3640  NoCoilNeg1:
                     3641  
                     3642  lsspk_done:
 8D3F [05] 4EC368    3643      mov     SparkCarry,coilsel; put it back as we found it
 8D42 [02] 9A        3644      cli
                     3645  
                     3646  CHECK_SPARK_LATE:
 8D43 [05] 055F1B    3647      brclr   SparkLSpeed,SparkBits,jINJ_FIRE_CTL      ; Skip if not low speed sparking
 8D46 [05] 015F18    3648      brclr   sparktrigg,sparkbits,jINJ_FIRE_CTL       ; Skip if spark already done
                     3649  
                     3650  ; Phil R reports problems with this, so try cant_crank instead
                     3651  ; this will give a 1-2 second delay before timebased is used
                     3652  ;  hopefully this will not be a problem
                     3653  
 8D49 [05] 066707    3654      brset   cant_crank,EnhancedBits2,timebased
 8D4C [04] C6E3AD    3655      lda    SparkConfig1_f            ; check if noninv or inv spark                                       ;* SparkConfig1_f = %00001000
 8D4F [02] A504      3656      bit    #M_SC1TimCrnk             ; Check if spark on time or IRQ return (SparkConfig1 already in A)   ;* M_SC1TimCrnk 0 = trigger return
 8D51 [03] 2711      3657      beq    IRQ_SPARK            ;                                                                                    1 = time based
                     3658  
                     3659  timebased:      ; Check if time for spark
 8D53 [03] B672      3660      lda     rpmch
 8D55 [03] B1B1      3661      cmp     SparkDelayH
 8D57 [03] 2608      3662      bne     jINJ_FIRE_CTL
 8D59 [03] B673      3663      lda     rpmcl
 8D5B [03] B1B2      3664      cmp     SparkDelayL
 8D5D [03] 2602      3665      bne     jINJ_FIRE_CTL
 8D5F [03] 2005      3666      bra     ChkHold
                     3667  
                     3668  ;**************************************************************
                     3669  jINJ_FIRE_CTL:                               ; convenient place to branch to
 8D61 [03] CC8D89    3670          jmp     INJ_FIRE_CTL
                     3671  ;**************************************************************
                     3672  
                     3673  IRQ_SPARK:
 8D64 [03] 2004      3674      bra    irq_spark_neon           ;* RJH 8/07/23
                     3675  
                     3676  ChkHold:
 8D66 [04] 115F      3677      bclr    sparktrigg,sparkbits     ; No more sparks for this IRQ
 8D68 [03] 2007      3678      bra   DoSparkLSpeed             ;* RJH 8/07/23
                     3679  
                     3680  ; This will not work with wheel decoder, need to use a flag
                     3681  ;        Treat end of third pulse as trigger return
                     3682  
                     3683  irq_spark_neon:
 8D6A [05] 0D5FF4    3684      brclr   trigret,SparkBits,jINJ_FIRE_CTL
 8D6D [04] 1D5F      3685      bclr    trigret,SparkBits            ; clear it now
 8D6F [04] 115F      3686      bclr    sparktrigg,sparkbits     ; No more sparks for this IRQ
                     3687  
                     3688  DoSparkLSpeed:
 8D71 [04] 1660      3689      bset    sparkon,revlimbits           ; spark now on
 8D73 [05] 024210    3690      brset   crank,engine,NoCoilPos1
                     3691  
 8D76 macro          3692      COILPOS                  ; macro = fire coil for inverted


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 29
MC68HC908GP32 User Bootloader


 8D76 [05] 006805    3693   BRSET COILABIT,COILSEL,ILSOA  
 8D79 [05] 026806    3694   BRSET COILBBIT,COILSEL,ILSOB  
 8D7C [03] 2008      3695   BRA FC_END  
                     3696  ILSOA:  
 8D7E [04] 1102      3697   BCLR COILA,PORTC  
 8D80 [03] 2004      3698   BRA FC_END  
                     3699  ILSOB:  
 8D82 [04] 1302      3700   BCLR COILB,PORTC  
 8D84 [03] 2000      3701   BRA FC_END  
                     3702  FC_END:  
                     3703  
                     3704  NoCoilPos1:
                     3705  
                     3706  ; changed - low speed and dwell control, schedule dwell at same time
                     3707  ; as we schedule the spark to maintain a consistent dwell
                     3708  
                     3709  b_INJFC2:
 8D86 [03] CC8D89    3710      jmp     INJ_FIRE_CTL
                     3711  
                     3712  INJ_FIRE_CTL:
                     3713  ;======== Injector Firing Control ========
                     3714  ;===== Main Injector Control Logic =======
                     3715  
 8D89 [05] 04410C    3716      brset    sched1,squirt,NEW_SQUIRT1
                     3717  
                     3718  INJF1:
 8D8C [05] 08411F    3719      brset    sched2,squirt,NEW_SQUIRT2
                     3720  
                     3721  INJF2:
 8D8F [05] 064134    3722      brset    firing1,squirt,CHK_DONE_1
                     3723  
                     3724  INJF3:
 8D92 [05] 0A4145    3725      brset    firing2,squirt,CHK_DONE_2JMP
 8D95 [03] CC8E33    3726      jmp      inj2done
                     3727  
                     3728  ;=== Injector #1 - Start New Injection ===
                     3729  
                     3730  NEW_SQUIRT1:
 8D98 [04] 1641      3731      bset     firing1,squirt          ; Turn on "firing" bit
 8D9A [04] 1541      3732      bclr     sched1,squirt           ; Turn off schedule bit (is now current operation)
 8D9C [04] 1041      3733      bset     inj1,squirt
 8D9E [03] 3F6C      3734      clr      pwrun1
                     3735  
                     3736  nsq1:
 8DA0 [04] 6E0026    3737      mov      #$00,T1CH0H
 8DA3 [04] C6E199    3738      lda      INJPWM_f1
 8DA6 [03] B727      3739      sta      T1CH0L
 8DA8 [04] 1E00      3740       bset     7,PORTA                ; ** Flyback Damper - turn on X0 for Inj1
                     3741  
                     3742  No_FlyBk:
 8DAA [04] 1903      3743      bclr     inject1,portd   ; ^* * * Turn on Injector #1 (inverted drive)
 8DAC [03] 20DE      3744       bra      INJF1
                     3745  
                     3746  ;=== Injector #2 - Start New Injection ===
                     3747  
                     3748  NEW_SQUIRT2:
 8DAE [04] 1A41      3749      bset     firing2,squirt          ; Turn on "firing" bit
 8DB0 [04] 1941      3750      bclr     sched2,squirt           ; Turn off schedule bit (is now current operation)
 8DB2 [04] 1241      3751      bset     inj2,squirt
 8DB4 [03] 3F6D      3752      clr      pwrun2
                     3753  
                     3754  nsq2:
 8DB6 [04] 6E0029    3755      mov      #$00,T1CH1H
 8DB9 [04] C6E199    3756      lda      INJPWM_f1
                     3757  
                     3758  nsq2cont:
 8DBC [03] B72A      3759      sta      T1CH1L
 8DBE [04] 1C00      3760      bset     6,PORTA         ; ** Flyback Damper - turn on X1 for Injector 2
 8DC0 [04] 1B03      3761      bclr     inject2,portd   ; ^* * * Turn on Injector #2 (inverted drive)
 8DC2 [03] 20CB      3762      bra    INJF2                     ; Carry on as normal
                     3763  
                     3764  INJF3JMP:
 8DC4 [03] 20CC      3765      bra    INJF3
                     3766  
                     3767  ;=== Injector #1 - Check for end of Injection ===
                     3768  
                     3769  CHK_DONE_1:
 8DC6 [04] 3C6C      3770      inc      pwrun1
 8DC8 [03] B66C      3771      lda      pwrun1
 8DCA [03] B14E      3772      cmp      pw1
 8DCC [03] 270E      3773      beq      OFF_INJ_1
 8DCE [05] 0242C1    3774       brset    crank,engine,INJF3     ; do not perform PWM limiting when cranking
 8DD1 [03] B66C      3775      lda      pwrun1
 8DD3 [04] C1E19A    3776      cmp      INJPWMT_f1
 8DD6 [03] 271A      3777      beq      PWM_LIMIT_1
 8DD8 [03] 20B8      3778       bra          INJF3
                     3779  
                     3780  CHK_DONE_2JMP:
 8DDA [03] 2022      3781          bra      CHK_DONE_2          ; Jump added
                     3782  
                     3783  OFF_INJ_1:
 8DDC [04] 1741      3784      bclr     firing1,squirt
 8DDE [04] 1541      3785      bclr     sched1,squirt
 8DE0 [04] 1141      3786      bclr     inj1,squirt
 8DE2 [04] 1F00      3787       bclr     7,PORTA                    ; ** Flyback Damper - turn off X0
 8DE4 [04] 1803      3788      bset     inject1,portd           ; ^* * * Turn Off Injector #1 (inverted drive)
 8DE6 [04] 6E3220    3789      mov      #T1Timerstop,T1SC
 8DE9 [04] 6E1025    3790      mov      #t1scx_NO_PWM,T1SC0
 8DEC [04] 6E0220    3791      mov      #Timergo_NO_INT,T1SC
 8DEF [03] CC8D92    3792      jmp      INJF3
                     3793  
                     3794  PWM_LIMIT_1:
 8DF2 [04] 6E3220    3795      mov      #T1Timerstop,T1SC
 8DF5 [04] 6E1E25    3796      mov      #T1SCX_PWM,T1SC0
 8DF8 [04] 6E0220    3797      mov      #Timergo_NO_INT,T1SC
 8DFB [03] CC8D92    3798      jmp      INJF3
                     3799  
                     3800  ;=== Injector #2 - Check for end of Injection ===
                     3801  
                     3802  CHK_DONE_2:
 8DFE [04] 3C6D      3803      inc      pwrun2
 8E00 [03] B66D      3804      lda      pwrun2
 8E02 [03] B153      3805      cmp      pw2
 8E04 [03] 270F      3806      beq      OFF_INJ_2
 8E06 [05] 034203    3807       brclr    crank,engine,CKDN2
 8E09 [03] CC8E60    3808      jmp      CHECK_RPM
                     3809  
                     3810  CKDN2:
 8E0C [03] B66D      3811      lda      pwrun2                  ; use PWM settings from first table
 8E0E [04] C1E19A    3812      cmp      INJPWMT_f1
 8E11 [03] 2717      3813      beq      PWM_LIMIT_2
 8E13 [03] 201E      3814       bra      inj2done
                     3815  
                     3816  OFF_INJ_2:
 8E15 [04] 1B41      3817      bclr     firing2,squirt
 8E17 [04] 1941      3818      bclr     sched2,squirt
 8E19 [04] 1341      3819      bclr     inj2,squirt
 8E1B [04] 1D00      3820       bclr     6,PORTA                    ; ** Flyback Damper - turn off X1 (for Inj 2)
 8E1D [04] 1A03      3821      bset     inject2,portd           ; ^* * * Turn Off Injector #2 (inverted drive)
 8E1F [04] 6E3220    3822      mov      #T1Timerstop,T1SC
 8E22 [04] 6E1028    3823      mov      #t1scx_NO_PWM,T1SC1
 8E25 [04] 6E0220    3824      mov      #Timergo_NO_INT,T1SC
 8E28 [03] 2009      3825      bra      inj2done
                     3826  
                     3827  PWM_LIMIT_2:
 8E2A [04] 6E3220    3828      mov      #T1Timerstop,T1SC


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 30
MC68HC908GP32 User Bootloader


 8E2D [04] 6E1E28    3829      mov      #T1SCX_PWM,T1SC1
 8E30 [04] 6E0220    3830      mov      #Timergo_NO_INT,T1SC
                     3831  
                     3832  inj2done:
                     3833  
                     3834  *****************************************************************************
                     3835  ** Idle Control PWM Actuator
                     3836  **
                     3837  ** Runs at 10000/100 = 100 Hz.  Must be before RPM check.
                     3838  *****************************************************************************
                     3839  
                     3840  idleActuator:
 8E33 [05] 024224    3841      brset    crank,engine,idleActOn  ; if cranking then keep it
                     3842                                                       ; shut (rmd changed from off to on)
 8E36 [05] 014225    3843      brclr    running,engine,idleActOff       ; if not running then close it
 8E39 [04] C6E810    3844      lda      feature13_f     ; skip if on/off mode
 8E3C [02] A501      3845      bit      #pwmidleb
 8E3E [03] 270B      3846      beq      idleActCheck
 8E40 [04] 3CD3      3847      inc      idleActClock            ; Adjust idle PWM count
 8E42 [03] B6D3      3848      lda      idleActClock
 8E44 [04] C1E80B    3849      cmp      idlefreq_f
 8E47 [03] 2602      3850      bne      idleActCheck
 8E49 [03] 3FD3      3851      clr      idleActClock
                     3852  
                     3853  idleActCheck:
 8E4B [03] B655      3854      lda      idleDC
 8E4D [02] A100      3855      cmp      #0T
 8E4F [03] 270D      3856      beq      idleActOff
 8E51 [04] C1E80B    3857      cmp      idlefreq_f  ; #255T KG
 8E54 [03] 2704      3858      beq      idleActOn
 8E56 [03] B1D3      3859      cmp      idleActClock
 8E58 [03] 2304      3860      bls      idleActOff
                     3861  
                     3862  idleActOn:
 8E5A [04] 1200      3863      bset     iasc,porta
 8E5C [03] 2002      3864      bra      idleActDone
                     3865  
                     3866  idleActOff:
 8E5E [04] 1300      3867      bclr     iasc,porta
                     3868  
                     3869  idleActDone:
                     3870  
                     3871  ;=======Check RPM Section====
                     3872  
                     3873  CHECK_RPM:
 8E60 [05] 014212    3874      brclr    running,engine,b_ENABLE; Branch if not running right now
 8E63 [05] 064103    3875      brset    firing1,squirt,CHK_RE_ENABLE
 8E66 [05] 0A4100    3876      brset    firing2,squirt,CHK_RE_ENABLE
                     3877  
                     3878  CHK_RE_ENABLE:
                     3879  
                     3880  ;====== Check for re-enabling of IRQ input pulses
                     3881  
 8E69 [03] B670      3882      lda      rpmph                   ; Get high byte of last rpm interval
 8E6B [03] 270B      3883      beq      RPMLOWBYTECHK   ; If zero go ahead check for half interval
 8E6D [03] B673      3884      lda      rpmcl                   ; Check current rpm interval
 8E6F [02] A180      3885      cmp      #128T                   ; 12.8 milliseconds is maximum (JSM changed this and cause 'stumble')
 8E71 [03] 270C      3886      beq      REARM_IRQ               ; time to re-arm IRQ
 8E73 [03] 200C      3887      bra      INCRPMER                ; Jump around rpm half interval check
                     3888  
                     3889  b_ENABLE:
 8E75 [03] CC8EFF    3890     jmp    ENABLE_THE_IRQ
                     3891  
                     3892  RPMLOWBYTECHK:
 8E78 [03] B671      3893       lda      rpmpl                  ; Load in the latched previous RPM value
 8E7A [01] 44        3894      lsra
 8E7B [03] B173      3895       cmp      rpmcl                  ; Is it the same value as current RPM Counter?
 8E7D [03] 2602      3896       bne      INCRPMER               ; If not then jump around this
                     3897  
                     3898  REARM_IRQ:    ; Also do tacho output in here to give 50% output duty
 8E7F [04] 1500      3899      bclr     output2,porta    ;* tacho  off
                     3900  
                     3901  INCRPMER:
 8E81 [02] 9B        3902      sei
 8E82 [04] 3C73      3903      inc      rpmcl
 8E84 [03] 2611      3904      bne      jCHECK_MMS
 8E86 [04] 3C72      3905      inc      rpmch
 8E88 [05] 01420C    3906      brclr    running,engine,jCHECK_MMS       ; don't do stall check if not running
 8E8B [03] B672      3907      lda      rpmch
 8E8D [05] 07670A    3908      brclr    cant_crank,EnhancedBits2,incrpm_crank   ; if we've fully exited crank mode
 8E90 [02] A11E      3909      cmp      #30T                    ; then 0.75 seconds timeout (<360rpm on a 2cyl) (was 0.25s)
 8E92 [03] 2503      3910      blo      jCHECK_MMS
 8E94 [02] 9A        3911      cli                                      ; ok, we can be interrupted again
 8E95 [03] 2008      3912      bra      stall
                     3913  
                     3914  jCHECK_MMS:
 8E97 [03] CC8F01    3915      jmp     CHECK_MMS
                     3916  
                     3917  incrpm_crank:
 8E9A [02] A164      3918      cmp      #$64            ; If RPMPH is 100 (or RPMPeriod = 2.5 sec) then engine stalled
 8E9C [03] 25F9      3919      blo      jCHECK_MMS
 8E9E [02] 9A        3920      cli                                  ; ok, we can be interrupted again
                     3921  
                     3922  stall:
 8E9F [03] 3F42      3923      clr      engine                          ; Engine is stalled, clear all in engine
 8EA1 [04] 1100      3924      bclr     fuelp,porta             ; Turn off fuel Pump
 8EA3 [03] 3F72      3925      clr      rpmch
 8EA5 [03] 3F73      3926      clr      rpmcl
 8EA7 [02] A600      3927      lda      #00T
 8EA9 [03] B7E4      3928      sta      TCCycles               ; If stalled then clear these 3 for Extra
 8EAB [03] B7E0      3929      sta      TCAccel                ; fuel during cranking
 8EAD [04] 1166      3930      bclr     NosDcOk,EnhancedBits   ;
 8EAF [02] A6FF      3931      lda      #$FF   ; changed 025n, was zero. Causing problems with wheel pickup?
 8EB1 [03] B7B0      3932      sta      iTimeL
 8EB3 [03] B7AF      3933      sta      iTimeH
 8EB5 [03] B7AE      3934      sta      iTimeX
 8EB7 [03] 3F4E      3935      clr      pw1                             ; zero out pulsewidth
 8EB9 [03] 3F53      3936      clr      pw2                             ; zero out pulsewidth
 8EBB [03] 3F4D      3937      clr      rpm
 8EBD [04] 1767      3938      bclr     cant_crank,EnhancedBits2        ; if we stalled we can crank again
                     3939  
 8EBF macro          3940          TurnAllSpkOff                                ; macro to turn off all spark outputs
 8EBF [04] 1300      3941   BCLR IASC,PORTA  
 8EC1 [04] 1102      3942   BCLR SLED,PORTC  
 8EC3 [04] 1302      3943   BCLR ALED,PORTC  
 8EC5 [04] 1103      3944   BCLR OUTPUT3,PORTD  
 8EC7 [04] 1702      3945   BCLR PIN10,PORTC  
 8EC9 [04] 1503      3946   BCLR KNOCKIN,PORTD  
 8ECB [03] 3FB3      3947   CLR SPARKONLEFTAH  
 8ECD [03] 3FB4      3948   CLR SPARKONLEFTAL  
 8ECF [03] 3FB5      3949   CLR SPARKONLEFTBH  
 8ED1 [03] 3FB6      3950   CLR SPARKONLEFTBL  
                     3951  
                     3952  stall_cont:
 8ED3 [04] C6E3A8    3953      lda      TriggAngle_f            ; Calculate crank delay angle   ;* TriggAngle_f = 253 (253 * .352 = 89 degrees)
 8ED6 [04] C0E3AB    3954      sub      CrankAngle_f                                       ;* CrankAngle_f = 56 (56 - 28.4 = 27.6 * .352 = 9.71 (10 degrees)
 8ED9 [02] AB1C      3955      add      #28T                    ; - -10 deg                         ;* 253 - 56 = 197 +28 = 225 (225 * .352 = 79.2 (80 degrees)
 8EDB [04] C70106    3956      sta      DelayAngle                                         ;* DelayAngle now = 225 (80 degrees)
                     3957  
                     3958  pass_store:
 8EDE [04] C6E3AB    3959      lda      CrankAngle_f                ; Update spark angle for user interface  ;* CrankAngle_f = 56 (56 - 28.4 = 27.6 * .352 = 9.71 (10 degrees)
 8EE1 [03] B758      3960      sta      SparkAngle                                                      ;* SparkAngle now = 56 (10 degrees)
 8EE3 [04] C6E3AC    3961      lda      SparkHoldCyc_f              ; Hold spark after stall                 ;* SparkHold_f = 0
 8EE6 [03] B7E6      3962      sta      wheelcount                      ; (HoldSpark)                            ;* wheelcount now = 0
 8EE8 [04] 6EC3E6    3963      mov     #WHEELINIT,wheelcount    ; set !sync,holdoff, 3 teeth holdoff
 8EEB [04] 136B      3964      bclr    wsync,EnhancedBits6


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 31
MC68HC908GP32 User Bootloader


 8EED [04] 1502      3965      bclr    wled,portc                                                        ;* Synch LED off  RJH 8/11/23
 8EEF [04] 146B      3966      bset    whold,EnhancedBits6
 8EF1 [02] A600      3967      lda     #0
 8EF3 [03] B7F3      3968      sta     avgtoothh
 8EF5 [03] B7F4      3969      sta     avgtoothl
 8EF7 [03] 3FF5      3970      clr     lowresH                           ; low res (0.1ms) timer
 8EF9 [03] 3FF6      3971      clr     lowresL
 8EFB [04] 1068      3972      bset    coilabit,coilsel
 8EFD [04] 1860      3973      bset    coilerr,RevLimBits
                     3974  
                     3975  ENABLE_THE_IRQ:
 8EFF [04] 131D      3976       bclr     IMASK,INTSCR           ; Enable IRQ
                     3977  
                     3978  CHECK_MMS:
 8F01 [02] 9A        3979      cli
 8F02 [03] B67D      3980      lda      mms
 8F04 [02] A109      3981      cmp      #$09
 8F06 [03] 2203      3982      bhi      MSEC                    ;(was #$0A  beq)
 8F08 [03] CC8F95    3983      jmp      RTC_DONE
                     3984  
                     3985  ****************************************************************************
                     3986  ********************* millisecond section ********************************
                     3987  ****************************************************************************
                     3988  
                     3989  MSEC:
 8F0B [04] 3C7E      3990      inc    ms                        ; bump up millisec
 8F0D [03] 3F7D      3991      clr    mms
 8F0F [03] B68E      3992       lda        adsel
 8F11 [02] AA40      3993       ora        #%01000000
 8F13 [03] B73C      3994       sta        adscr
 8F15 [04] 3CD5      3995      inc    bcCtlClock
                     3996  
                     3997  MSDONE:
                     3998  ***************************************************************************
                     3999  ********************* 1/100 second section ********************************
                     4000  ***************************************************************************
 8F17 [03] B67E      4001      lda      ms
 8F19 [04] 41001D    4002      cbeqa    #00,one00th    ; surely there's a better/quicker way than this?
 8F1C [04] 410A1A    4003      cbeqa    #10T,one00th
 8F1F [04] 411417    4004      cbeqa    #20T,one00th
 8F22 [04] 411E14    4005      cbeqa    #30T,one00th
 8F25 [04] 412811    4006      cbeqa    #40T,one00th
 8F28 [04] 41320E    4007      cbeqa    #50T,one00th
 8F2B [04] 413C0B    4008      cbeqa    #60T,one00th
 8F2E [04] 414608    4009      cbeqa    #70T,one00th
 8F31 [04] 415005    4010      cbeqa    #80T,one00th
 8F34 [04] 415A02    4011      cbeqa    #90T,one00th
 8F37 [03] 2000      4012      bra      end100th
                     4013  
                     4014  one00th:
                     4015  
                     4016  end100th:
 8F39 [03] B67E      4017      lda      ms
 8F3B [02] A164      4018      cmp      #$64
 8F3D [03] 2530      4019      blo      RTC_DONEJMP
                     4020  
                     4021  ***************************************************************************
                     4022  ********************* 1/10 second section *********************************
                     4023  ***************************************************************************
                     4024  
                     4025  ONETENTH:
 8F3F [03] 3F7E      4026      clr      ms
                     4027  ; see if need to restart tooth logger
 8F41 [04] C60105    4028      lda      page
 8F44 [04] 41F005    4029      cbeqa    #$F0,restart_F0
 8F47 [04] 41F10F    4030      cbeqa    #$F1,restart_F1
 8F4A [03] 201A      4031      bra      oneten_notlog
                     4032  
                     4033  restart_F0:
 8F4C [05] 046A17    4034      brset    toothlog,EnhancedBits5,oneten_notlog
 8F4F [03] B68A      4035      lda      txcnt
 8F51 [03] 2613      4036      bne      oneten_notlog   ; if sending data then do not restart
 8F53 [04] 146A      4037      bset     toothlog,EnhancedBits5    ; turn logger back on (after send)
 8F55 [04] 176A      4038      bclr     triglog,EnhancedBits5    ; turn logger back on (after send)
 8F57 [03] 200D      4039      bra      oneten_notlog
                     4040  
                     4041  restart_F1:
 8F59 [05] 066A0A    4042      brset    triglog,EnhancedBits5,oneten_notlog
 8F5C [03] B68A      4043      lda      txcnt
 8F5E [03] 2606      4044      bne      oneten_notlog   ; if sending data then do not restart
 8F60 [04] 166A      4045      bset     triglog,EnhancedBits5    ; turn logger back on (after send)
 8F62 [04] 156A      4046      bclr     toothlog,EnhancedBits5    ; turn logger back on (after send)
 8F64 [03] 2000      4047      bra      oneten_notlog
                     4048  
                     4049  oneten_notlog:
 8F66 [04] 3C7F      4050      inc      tenth
 8F68 [03] B64D      4051      lda      rpm
 8F6A [04] C70103    4052      sta      rpmlast
 8F6D [03] 2003      4053      bra      No_TPSCount  ;* RJH 7/31/23
                     4054  
                     4055  ;*************************************
                     4056  RTC_DONEJMP:
 8F6F [03] CC8F95    4057      jmp     RTC_DONE
                     4058  ;*************************************
                     4059  
                     4060  No_TPSCount:
 8F72 [03] B67F      4061      lda      tenth
 8F74 [02] A10A      4062      cmp      #$0A
 8F76 [03] 251D      4063      blo      RTC_DONE
                     4064  
                     4065  ****************************************************************************
                     4066  ********************** seconds section ***********************************
                     4067  ****************************************************************************
                     4068  SECONDS:
 8F78 [04] 3CD7      4069          inc      OverRunTime
                     4070  
                     4071  ; crank mode inhibit
                     4072  ; make a 1-2 second delay
                     4073  ; if running and !cranking and !cant_delay then set cant_delay
                     4074  ; if running and !cranking and cant_delay then set cant_crank
                     4075  ; else clear cant_delay
 8F7A [05] 02420E    4076      brset    crank,engine,cant_off
 8F7D [05] 01420B    4077      brclr    running,engine,cant_off
 8F80 [05] 086704    4078      brset    cant_delay,EnhancedBits2,cant_set
 8F83 [04] 1867      4079      bset     cant_delay,EnhancedBits2
 8F85 [03] 2006      4080      bra      sec_fin
                     4081  
                     4082  cant_set:
 8F87 [04] 1667      4083      bset     cant_crank,EnhancedBits2
 8F89 [03] 2002      4084      bra      sec_fin
                     4085  
                     4086  cant_off:
 8F8B [04] 1967      4087      bclr     cant_delay,EnhancedBits2
                     4088  
                     4089  sec_fin:
 8F8D [03] 3F7F      4090      clr      tenth
 8F8F [04] 3C40      4091      inc      secl                    ; bump up second count
 8F91 [03] 2602      4092      bne      RTC_DONE
 8F93 [04] 3C80      4093      inc      sech
                     4094  
                     4095  RTC_DONE:      ; now check that we haven't already missed the target
 8F95 [02] 9B        4096      sei
 8F96 [03] B62D      4097      lda     T2CNTL ; unlatch any previous read
 8F98 [03] B62C      4098      lda     T2CNTH
 8F9A [04] C701ED    4099      sta     itmp00
 8F9D [03] B62D      4100      lda     T2CNTL


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 32
MC68HC908GP32 User Bootloader


 8F9F [04] C701EE    4101      sta     itmp01
 8FA2 [03] B632      4102      lda     T2CH0L
 8FA4 [04] C001EE    4103      sub     itmp01
 8FA7 [04] C701F0    4104      sta     itmp03
 8FAA [03] B631      4105      lda     T2CH0H
 8FAC [04] C201ED    4106      sbc     itmp00
                     4107  
                     4108  ; assume we need at least 5us? from setting and RTIing before output compare will work
 8FAF [03] 2607      4109      bne     RTC_reset  ; if high byte non zero then we've already missed it
 8FB1 [04] C601F0    4110      lda     itmp03
 8FB4 [02] A10A      4111      cmp     #10T
 8FB6 [03] 220F      4112      bhi     RTC_DONE2     ; if less than 5us then we are likely to miss it
                     4113  
                     4114  RTC_reset:
 8FB8 [04] C601EE    4115      lda     itmp01
 8FBB [02] AB0A      4116      add     #10T   ; allow 10us from here to be sure we don't miss it
                     4117                         ; this will cause a "lazy" 0.1ms if it happens often
                     4118                         ; but should eliminate total dropout
 8FBD [01] 97        4119      tax
 8FBE [04] C601ED    4120      lda     itmp00
 8FC1 [02] A900      4121      adc     #0T
 8FC3 [03] B731      4122      sta     T2CH0H
 8FC5 [03] BF32      4123      stx     T2CH0L
                     4124  
                     4125  RTC_DONE2:
 8FC7 [04] 1C30      4126      bset    TOIE,T2SC0               ; re-enable 0.1ms interrupt
                     4127  
                     4128  NOTSPKTIME:                              ; close branch for below
 8FC9 [02] 8A        4129      pulh
 8FCA [07] 80        4130       rti
                     4131  
                     4132  ***************************************************************************
                     4133  **
                     4134  ** Spark timing
                     4135  **
                     4136  ***************************************************************************
                     4137  
 8FCB [03] CC901A    4138  j_hires_dwell:    jmp   hires_dwell
                     4139  
                     4140  SPARKTIME:
 8FCE [02] 8B        4141      pshh
 8FCF [03] B633      4142      lda     T2SC1            ; Read interrupt
 8FD1 [04] 1F33      4143      bclr    CHxF,T2SC1       ; Reset interrupt
 8FD3 [05] 035FF3    4144      brclr   SparkHSpeed,SparkBits,NOTSPKTIME ; Don't spark on time when going slow
 8FD6 [05] 0869F2    4145      brset   indwell,EnhancedBits4,j_hires_dwell      ; start dwell period
 8FD9 [05] 015FED    4146      brclr   SparkTrigg,Sparkbits,NOTSPKTIME      ; Should never do this
 8FDC [04] 1660      4147      bset    sparkon,revlimbits                       ; spark now on
 8FDE [05] 024210    4148      brset    crank,engine,NoCoilPos2
                     4149  
 8FE1 macro          4150          COILPOS                      ; macro = fire coil for inverted
 8FE1 [05] 006805    4151   BRSET COILABIT,COILSEL,ILSOA  
 8FE4 [05] 026806    4152   BRSET COILBBIT,COILSEL,ILSOB  
 8FE7 [03] 2008      4153   BRA FC_END  
                     4154  ILSOA:  
 8FE9 [04] 1102      4155   BCLR COILA,PORTC  
 8FEB [03] 2004      4156   BRA FC_END  
                     4157  ILSOB:  
 8FED [04] 1302      4158   BCLR COILB,PORTC  
 8FEF [03] 2000      4159   BRA FC_END  
                     4160  FC_END:  
                     4161  
                     4162  NoCoilPos2:
 8FF1 [04] 1D33      4163      bclr    TOIE,T2SC1       ; Disable interrupts
                     4164  
 8FF3 macro          4165          CalcDwellspk         ; Set spark on time macro
                     4166  WDWELL2OP:  
 8FF3 [04] 55E9      4167   LDHX DWELLDELAY2  
 8FF5 [05] 026804    4168   BRSET COILBBIT,COILSEL,WD2B360  
                     4169  WD2A360:  
 8FF8 [04] 35B3      4170   STHX SPARKONLEFTAH  
 8FFA [03] 2002      4171   BRA WD2END360  
                     4172  WD2B360:  
 8FFC [04] 35B5      4173   STHX SPARKONLEFTBH  
                     4174  WD2END360:  
 8FFE [03] B6E7      4175   LDA DWELLDELAY1  
 9000 [03] 2606      4176   BNE WD2OK  
 9002 [03] B6E8      4177   LDA DWELLDELAY1+1  
 9004 [02] A102      4178   CMP #2  
 9006 [03] 250E      4179   BLO WD2SKIP  
                     4180  WD2OK:  
 9008 [04] 55E7      4181   LDHX DWELLDELAY1  
 900A [05] 006803    4182   BRSET COILABIT,COILSEL,WD2A180  
 900D [05] 026804    4183   BRSET COILBBIT,COILSEL,WD2B180  
                     4184  WD2A180:  
 9010 [04] 35B5      4185   STHX SPARKONLEFTBH  
 9012 [03] 2002      4186   BRA WD2END180  
                     4187  WD2B180:  
 9014 [04] 35B3      4188   STHX SPARKONLEFTAH  
                     4189  WD2END180:  
                     4190  WD2SKIP:  
                     4191  
                     4192  sparktime_exit:
 9016 [04] 115F      4193      bclr    SparkTrigg,Sparkbits     ; No more sparks for this IRQ
 9018 [02] 8A        4194      pulh
 9019 [07] 80        4195      rti
                     4196  
                     4197  hires_dwell:
                     4198  
                     4199  ; first turn on coil, then reset T2 to spark point saved in sparktargetH/L
                     4200  ; spark cut- actually cut the coil-on
 901A [03] B6D8      4201      lda     SparkCutCnt          ; Check Spark Counter
 901C [01] 4C        4202      inca
 901D [04] C1E04E    4203      cmp     SparkCutBase_f   ; How many sparks to count to
 9020 [03] 2502      4204      blo     Dont_ResetCnt2
 9022 [02] A601      4205      lda     #01T
                     4206  
                     4207  Dont_ResetCnt2:
 9024 [03] B7D8      4208      sta     SparkCutCnt          ; Store new value to spark counter
 9026 [05] 024210    4209      brset    crank,engine,NoCoilNeg2
                     4210  
 9029 macro          4211          COILNEG                              ; charge coil for inverted
 9029 [05] 006805    4212   BRSET COILABIT,COILSEL,DSLSA  
 902C [05] 026806    4213   BRSET COILBBIT,COILSEL,DSLSB  
 902F [03] 2008      4214   BRA CN_END  
                     4215  DSLSA:  
 9031 [04] 1002      4216   BSET COILA,PORTC  
 9033 [03] 2004      4217   BRA CN_END  
                     4218  DSLSB:  
 9035 [04] 1202      4219   BSET COILB,PORTC  
 9037 [03] 2000      4220   BRA CN_END  
                     4221  CN_END:  
                     4222  
                     4223  NoCoilNeg2:
 9039 [04] 1969      4224      bclr    indwell,EnhancedBits4    ; turn it off so next sparktime fires coil
 903B [04] 1760      4225      bclr    sparkon,revlimbits       ; spark now on
                     4226  
                     4227  ; store pre-calculated spark time into timer and set it off
 903D [03] B6FA      4228      lda     SparkTargetH
 903F [03] B734      4229      sta     T2CH1H
 9041 [03] B6FB      4230      lda     SparkTargetL
 9043 [03] B735      4231      sta     T2CH1L
 9045 [04] 1F33      4232      bclr    TOF,T2SC1        ; clear any pending interrupt
 9047 [04] 1C33      4233      bset    TOIE,T2SC1       ; Enable timer interrupt
 9049 [02] 8A        4234      pulh
 904A [07] 80        4235      rti
                     4236  


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 33
MC68HC908GP32 User Bootloader


                     4237  ***************************************************************************
                     4238  **
                     4239  ** IRQ - Input trigger for new pulse event
                     4240  **
                     4241  ** This line is connected to the input trigger (i.e TACH signal from ignition
                     4242  **  system), and schedules a new injector shot (injector actually opened in
                     4243  **  1/10 timer section above)
                     4244  **
                     4245  **  Wheel encoders now removed (020p2) and available as encoder???.s19
                     4246  ***************************************************************************
                     4247  
                     4248  ; as we don't get interrupted can safely use some of burner area
                     4249  ; but beware that this is non-zero page ram hence slower instructions.
                     4250  ; if enough ram may put back into ZP for a small speed increase
                     4251  
 904B                4252  stX:         equ   itmp10          ; temp space used in Neon
 904B                4253  stH:         equ   itmp11
 904B                4254  stL:         equ   itmp12
                     4255  
 904B                4256  cTimeHcp:    equ   itmp13         ; copy of predicted period
 904B                4257  cTimeLcp:    equ   itmp14
                     4258  
 904B                4259  T2CurrX:     equ   itmp15         ; value of T2 at start of handler
 904B                4260  T2CurrH:     equ   itmp16
 904B                4261  T2CurrL:     equ   itmp17
                     4262  
 904B                4263  currtth14h:  equ   itmp18    ; 1/4 current tooth
 904B                4264  currtth14l:  equ   itmp19    ; 1/4 current tooth
 904B                4265  avgtth14h:   equ   itmp1a    ; 1/4 avg tooth
 904B                4266  avgtth14l:   equ   itmp1b    ; 1/4 avg tooth
                     4267  
 904B                4268  avgtth12h:   equ   itmp1c    ; 1/2 of avg tooth
 904B                4269  avgtth12l:   equ   itmp1d    ; 1/2 of avg tooth
                     4270  
 904B                4271  offsetstep:  equ   itmp1e    ; offset step (used by oddfire)
 904B                4272  offsetang:   equ   itmp1f    ; offset angle (used by oddfire)
                     4273  
                     4274  DOSQUIRT:
 904B [02] 8B        4275          pshh
                     4276  ; First thing to do is read the current T2 value
                     4277  ; this should ensure the maximum spark accuracy. Delay value will be based on timer HERE
                     4278  ; rather than after all the other missing tooth calcs by the time we reach done_decode
                     4279  
 904C [03] B62D      4280      lda     T2CNTL                   ; Unlatch any previous reads
 904E [03] BE2C      4281      ldx     T2CNTH
 9050 [04] CF0203    4282      stx     T2CurrH                  ; Save current counter value
 9053 [03] B62D      4283      lda     T2CNTL
 9055 [04] C70204    4284      sta     T2CurrL                  ; Save current counter value
 9058 [03] B6AA      4285      lda     T2CNTX                  ;sw byte
 905A [02] A300      4286      cpx     #0
 905C [03] 2604      4287      bne     no_rollchk
 905E [05] 036901    4288      brclr   roll2,EnhancedBits4,no_rollchk  ; we were't about to rollover
                     4289                                              ; a few ms ago or byte already
                     4290                                              ; cleared by handler - so skip
 9061 [01] 4C        4291      inca                                    ; Missed a rollover so inc top byte
                     4292  
                     4293  no_rollchk:
 9062 [04] C70202    4294      sta     T2CurrX
                     4295  
                     4296  ;new in 029e - surely we must be running if we got an IRQ
                     4297  
 9065 [04] 1042      4298      bset      running,engine ; Set engine running value
                     4299  
                     4300  ****************************************************************************
                     4301  **  generic wheel decoder
                     4302  **  -1 Missing tooth when iTimet > 1.5 * iTimep
                     4303  **  -2 Missing teeth when iTimet > 1.5 * iTimep (was 2.5*) (changed 029k)
                     4304  **  We don't get here until we've had a few teeth. When we've found
                     4305  ** missing tooth then clr top bit of wheelcount
                     4306  **
                     4307  ****************************************************************************
                     4308  decode_wheel:
                     4309  
                     4310  w_high:
 9067 [03] B64D      4311      lda     rpm
 9069 [03] 2632      4312      bne     w_high_fast
                     4313  
                     4314  ;******************************************************************************
                     4315  ; New code to delay wheel decode until IRQ period is short enough so 1uS
                     4316  ; timer won't overflow. This uses the free running 100uS counter usc100H:usc100L
                     4317  ; to calculate the IRQ period. RJH 8/13/23
                     4318  ; Check for very slow rpm that will cause timer overflow.
                     4319  ; -1 wheel  does *1.5 so max time is 65/1.5 = 43ms  -> 38rpm on 36-1
                     4320  ;******************************************************************************
                     4321  
 906B [05] 0E5F04    4322      brset   IRQtime,SparkBits,Getusc100  ;* If "IRQtime bit is already set, fall through
 906E [04] 1E5F      4323       bset    IRQtime,Sparkbits
 9070 [03] 2028      4324       bra     j_lost_sync3
                     4325  
                     4326  Getusc100:
 9072 [02] 9B        4327      sei                          ;* Disable interrpts for this section
 9073 [04] 1F5F      4328      bclr    IRQtime,Sparkbits    ;* stop the 100us timer
 9075 [03] B675      4329      lda     usc100L
 9077 [04] C70102    4330      sta     IRQpL                ;* usc100L -> IRQpL
 907A [03] B674      4331      lda     usc100H
 907C [04] C70101    4332      sta     IRQpH                ;* usc100H -> IRQpH
 907F [03] 3F75      4333      clr     usc100L              ;* Clear timer counter
 9081 [03] 3F74      4334      clr     usc100H
 9083 [04] 1E5F      4335       bset    IRQtime,Sparkbits    ;* Restart the timer
 9085 [02] 9A        4336       cli                          ;* Enable interrupts again
                     4337  
 9086 [04] C60101    4338      lda    IRQpH          ;* IRQpH -> Accu A
 9089 [02] A101      4339      cmp    #1             ;* Compare with 1 (25.6 ms)
 908B [03] 2510      4340       blo    w_high_fast    ;* Hi byte = < 1 (less than 25.6 ms), go ahead and de-code
 908D [03] 2207      4341       bhi    j_lost_sync2   ;* Minimum 51.2 mS, too slow, bail out now
 908F [04] C60102    4342      lda    IRQpL          ;* IRQpL -> Accu A
 9092 [02] A190      4343      cmp    #$90           ;* $90 = decimal 144
 9094 [03] 2307      4344      bls    w_high_fast    ;* Hi byte = 1 (decimal 256, Lo byte lower or same as 144
                     4345                            ;* period = 40 ms or less, go ahead and decode. If not
                     4346                            ;* lower or same crank is turning too slow to decode the wheel
                     4347                            ;* so bail out of here.
                     4348  
                     4349  ;******************************************************************************
                     4350  
                     4351  j_lost_sync2:
 9096 [03] 3FF6      4352      clr     lowresL     ; always reset the lowres ready for next int
 9098 [03] 3FF5      4353      clr     lowresH
                     4354  
                     4355  j_lost_sync3:
 909A [03] CC91C8    4356      jmp     lost_sync_w
                     4357  
                     4358  w_high_fast:    ;* 1us timer T2 already read at start of handler
 909D [04] C60204    4359      lda     T2CurrL
 90A0 [03] B0C7      4360      sub     T2PrevL                  ; Calculate cycle time
 90A2 [03] B7C0      4361      sta     cTimeL
 90A4 [04] C60203    4362      lda     T2CurrH
 90A7 [03] B2C6      4363      sbc     T2PrevH
 90A9 [03] B7BF      4364      sta     cTimeH
                     4365  
                     4366  
                     4367  w_decode:   ;now try to decode pattern
                     4368              ;new - are we logging teeth?
 90AB [05] 056A27    4369      brclr   toothlog,EnhancedBits5,w_dec_notlog
                     4370  
                     4371  ; we are logging so record something
 90AE [01] 8C        4372      clrh


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 34
MC68HC908GP32 User Bootloader


 90AF [04] CE01CD    4373      ldx     VE_r+PAGESIZE-2
 90B2 [03] B6BF      4374      lda     cTimeH
 90B4 [04] D70112    4375      sta     VE_r,x
 90B7 [01] 5C        4376      incx
 90B8 [03] B6C0      4377      lda     cTimeL
 90BA [04] D70112    4378      sta     VE_r,x
 90BD [01] 5C        4379      incx
 90BE [02] A3B9      4380      cpx     #PAGESIZE-4
 90C0 [03] 2510      4381      blo     wdtl
 90C2 [01] 5F        4382      clrx
 90C3 [04] C6E05A    4383      lda     numteeth_f
 90C6 [02] A117      4384      cmp     #23T                     ; hard coded lowres/highres transition (was 20T)
 90C8 [03] 2204      4385      bhi     wdth
 90CA [02] A601      4386      lda     #1              ; 1 = 0.1ms units
 90CC [03] 2001      4387      bra     wdts
                     4388  
                     4389  wdth:
 90CE [01] 4F        4390      clra                    ; 0 = 1us units
                     4391  
                     4392  wdts:
 90CF [04] C701CE    4393      sta     VE_r+PAGESIZE-1
                     4394  
                     4395  wdtl:
 90D2 [04] CF01CD    4396      stx     VE_r+PAGESIZE-2
                     4397  
                     4398  w_dec_notlog:
 90D5 [03] 3FF6      4399      clr     lowresL         ; always reset the lowres ready for next int
 90D7 [03] 3FF5      4400      clr     lowresH
                     4401  
                     4402  ; ignore first few pulses
                     4403  
 90D9 [05] 056B1E    4404      brclr   whold,EnhancedBits6,w_decode2    ; if bit 6 clr then we've done holdoff
 90DC [04] 3AE6      4405      dec     wheelcount
 90DE [03] B6E6      4406      lda     wheelcount
 90E0 [02] A43F      4407      and     #$3F               ; ignore top bits during holdoff downcount
                     4408                                 ; keeps wheelcount compatible with Neon mode
 90E2 [03] 2602      4409      bne     w_rti
 90E4 [04] 156B      4410      bclr    whold,EnhancedBits6
                     4411  
                     4412  w_rti:
 90E6 [04] C60203    4413      lda     T2CurrH
 90E9 [03] B7C6      4414      sta     T2PrevH          ; Make current value tooth last
 90EB [04] C60204    4415      lda     T2CurrL
 90EE [03] B7C7      4416      sta     T2PrevL
                     4417  
                     4418  ; this section only runs during tooth holdoff - just store last tooth into average
                     4419  
 90F0 [03] B6C0      4420      lda     cTimeL
 90F2 [03] B7F4      4421      sta     avgtoothl
 90F4 [03] B6BF      4422      lda     cTimeH
 90F6 [03] B7F3      4423      sta     avgtoothh
 90F8 [02] 8A        4424      pulh
 90F9 [07] 80        4425      rti
                     4426  
                     4427  w_decode2:
                     4428  ;NEW... don't just use previous tooth - use average instead
                     4429  
 90FA [03] B6F3      4430      lda     avgtoothh
 90FC [01] 44        4431      lsra
 90FD [03] B7C1      4432      sta     SparkTempH
 90FF [03] B6F4      4433      lda     avgtoothl
 9101 [01] 46        4434      rora
 9102 [03] B7C2      4435      sta     SparkTempL
                     4436  ; add iTimep so * 1.5 for -1 teeth
 9104 [03] B6C2      4437      lda     SparkTempL
 9106 [03] BBF4      4438      add     avgtoothl
 9108 [03] B7C2      4439      sta     SparkTempL
 910A [03] B6C1      4440      lda     SparkTempH
 910C [03] B9F3      4441      adc     avgtoothh
 910E [03] B7C1      4442      sta     SparkTempH
                     4443  
                     4444  w_comp:
                     4445  ; now compare current hires time
 9110 [03] B6BF      4446      lda     cTimeH
 9112 [03] B1C1      4447      cmp     SparkTempH
 9114 [03] 220A      4448      bhi     is_miss
 9116 [03] 250E      4449      blo     not_miss
 9118 [03] B6C0      4450      lda     cTimeL
 911A [03] B1C2      4451      cmp     SparkTempL
 911C [03] 2202      4452      bhi     is_miss
 911E [03] 2006      4453      bra     not_miss
                     4454  
                     4455  is_miss:
 9120 [03] 3FE6      4456      clr     wheelcount                    ; declare we are synced and reset counter
 9122 [04] 126B      4457      bset    wsync,EnhancedBits6
 9124 [04] 1402      4458      bset    wled,portc           ;* Synch LED on  RJH 8/11/23
                     4459  
                     4460  not_miss:
 9126 [03] B6BF      4461      lda     cTimeH
 9128 [03] B7F3      4462      sta     avgtoothh
 912A [03] B6C0      4463      lda     cTimeL
 912C [03] B7F4      4464      sta     avgtoothl
 912E [05] 036B0F    4465      brclr   wsync,EnhancedBits6,jretw  ; if non synced then wheelcount is meaningless
 9131 [04] 3CE6      4466      inc     wheelcount
 9133 [03] B6E6      4467      lda     wheelcount
 9135 [04] C1E05A    4468      cmp     numteeth_f
 9138 [03] 2303      4469      bls     not_miss_ok
 913A [03] CC91C8    4470      jmp     lost_sync_w
                     4471  
                     4472  not_miss_ok:
 913D [05] 026B03    4473      brset   wsync,EnhancedBits6,wc_op
                     4474  
                     4475  jretw:
 9140 [03] CC91BC    4476      jmp     ret_w
                     4477  
                     4478  wc_op:
                     4479  ; see if our tooth matches the user input trigger point
 9143 [03] B6E6      4480      lda     wheelcount
 9145 [04] C1E019    4481       cmp    trig1_f        ; Tooth 1 (90 degrees BTDC)  trigger point for run coila delay to on
 9148 [03] 2726      4482       beq    MatchT1
 914A [04] C1E01B    4483       cmp    trig3_f        ; Tooth 8 ( 20 degrees BTDC) trigger point for crank coila on
 914D [03] 272A      4484       beq    MatchT8
 914F [04] C1E01F    4485       cmp    trig3ret_f     ; Tooth 9 (10 degrees BTDC)  trigger point for crank coila off
 9152 [03] 2730      4486       beq    MatchT9
 9154 [04] C1E091    4487       cmp    trig5_f        ; Tooth 11 (10 degrees ATDC) trigger point for Inj1 start PW
 9157 [03] 2730      4488       beq    MatchT11
 9159 [04] C1E01A    4489       cmp    trig2_f        ; Tooth 19 (90 degrees BBDC) trigger point for run coilb delay to on
 915C [03] 2738      4490       beq    MatchT19
 915E [04] C1E01C    4491       cmp    trig4_f        ; Tooth 26 (20 degrees BBDC) trigger point for crank coilb on
 9161 [03] 273C      4492       beq    MatchT26
 9163 [04] C1E020    4493       cmp    trig4ret_f     ; Tooth 27 (10 degrees BBDC) trigger point for crank coilb off
 9166 [03] 2742      4494       beq    MatchT27
 9168 [04] C1E092    4495       cmp    trig6_f        ; Tooth 29 (10 degrees ABDC) trigger point for Inj2 start PW
 916B [03] 2742      4496       beq    MatchT29
 916D [03] CC91BC    4497      jmp    ret_w          ; No match so just make current T2 counter value tooth last and get out of here
                     4498  
                     4499  MatchT1:
 9170 [03] 3F68      4500      clr    coilsel
 9172 [04] 1068      4501      bset   coilabit,coilsel
 9174 [04] 1400      4502      bset   output2,porta           ; Tacho on
 9176 [03] CC91EE    4503      jmp    w_store2                ; Update all
                     4504  
                     4505  MatchT8:
 9179 [05] 024203    4506      brset  crank,engine,MatchT8OK  ; If not cranking just update T2 counter values last
 917C [03] CC91BC    4507      jmp    ret_w                   ; Make current T2 counter values last and get out of here
                     4508  


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 35
MC68HC908GP32 User Bootloader


                     4509  MatchT8OK:
 917F [04] 1002      4510      bset   coila,portc                      ; Cranking so energise coila and update T2 counter values last
 9181 [03] CC91BC    4511      jmp    ret_w                   ; Make current T2 counter values last and get out of here
                     4512  
                     4513  MatchT9:
 9184 [04] 1102      4514      bclr   coila,portc                      ; Cranking so de-energise coila (fire spark) and update T2 counter values last
 9186 [03] CC91BC    4515      jmp    ret_w                   ; Make current T2 counter values last and get out of here
                     4516  
                     4517  MatchT11:                          ; Make current T2 counter values last and schedule injection
 9189 [04] C60203    4518       lda    T2CurrH
 918C [03] B7C6      4519      sta    T2PrevH
 918E [04] C60204    4520      lda    T2CurrL
 9191 [03] B7C7      4521      sta    T2PrevL
 9193 [03] CC93F7    4522      jmp    SchedInj                ; Schedule injection
                     4523  
                     4524  MatchT19:
 9196 [03] 3F68      4525      clr    coilsel
 9198 [04] 1268      4526      bset   coilbbit,coilsel
 919A [04] 1400      4527      bset   output2,porta           ; Tacho on
 919C [03] CC91EE    4528      jmp    w_store2                ; Update all
                     4529  
                     4530  MatchT26:
 919F [05] 024203    4531      brset  crank,engine,MatchT26OK ; If not cranking just update time stamps
 91A2 [03] CC91BC    4532      jmp    ret_w                   ; Make current T2 counter values last and get out of here
                     4533  
                     4534  MatchT26OK:
 91A5 [04] 1202      4535      bset   coilb,portc                      ; Cranking so energise coilb and update T2 counter values last
 91A7 [03] CC91BC    4536      jmp    ret_w                   ; Make current T2 counter values last and get out of here
                     4537  
                     4538  MatchT27:
 91AA [04] 1302      4539      bclr   coilb,portc                      ; Cranking so de-energise coilb (fire spark) and update T2 counter values last
 91AC [03] CC91BC    4540       jmp    ret_w                   ; Make current T2 counter values last and get out of here
                     4541  
                     4542  MatchT29:                          ; Make current T2 counter values last and schedule injection
 91AF [04] C60203    4543      lda    T2CurrH
 91B2 [03] B7C6      4544      sta    T2PrevH
 91B4 [04] C60204    4545      lda    T2CurrL
 91B7 [03] B7C7      4546      sta    T2PrevL
 91B9 [03] CC93F7    4547      jmp    SchedInj                ; Schedule injection
                     4548  
                     4549  ret_w:                             ; Make current T2 counter values last and get out of here
 91BC [04] C60203    4550      lda     T2CurrH
 91BF [03] B7C6      4551      sta     T2PrevH
 91C1 [04] C60204    4552      lda     T2CurrL
 91C4 [03] B7C7      4553      sta     T2PrevL
 91C6 [02] 8A        4554      pulh
 91C7 [07] 80        4555      rti                            ; Return from interrupt
                     4556  
                     4557  lost_sync_w: ; we found too many teeth after the missing one, start syncing again
                     4558                               ; also do holdoff. This should be rare, but if we lost sync that
                     4559                               ; bad we'd better start all over
                     4560  
 91C8 [04] 6EC3E6    4561      mov     #WHEELINIT,wheelcount    ; was %10000000 (missing #)
 91CB [04] 136B      4562      bclr    wsync,EnhancedBits6
 91CD [04] 1502      4563      bclr    wled,portc              ;* Synch LED off  RJH 8/11/23
 91CF [04] 146B      4564      bset    whold,EnhancedBits6
                     4565  
                     4566  ; NEW
 91D1 [02] A600      4567      lda     #0
 91D3 [03] B7F3      4568      sta     avgtoothh
 91D5 [03] B7F4      4569      sta     avgtoothl
                     4570  ;NEW worth killing the dwell timers to avoid dwells starting
                     4571  
 91D7 macro          4572      TurnAllSpkOff                   ; call macro to turn off all
 91D7 [04] 1300      4573   BCLR IASC,PORTA  
 91D9 [04] 1102      4574   BCLR SLED,PORTC  
 91DB [04] 1302      4575   BCLR ALED,PORTC  
 91DD [04] 1103      4576   BCLR OUTPUT3,PORTD  
 91DF [04] 1702      4577   BCLR PIN10,PORTC  
 91E1 [04] 1503      4578   BCLR KNOCKIN,PORTD  
 91E3 [03] 3FB3      4579   CLR SPARKONLEFTAH  
 91E5 [03] 3FB4      4580   CLR SPARKONLEFTAL  
 91E7 [03] 3FB5      4581   CLR SPARKONLEFTBH  
 91E9 [03] 3FB6      4582   CLR SPARKONLEFTBL  
 91EB [03] CC91BC    4583      jmp     ret_w
                     4584  
                     4585  w_store2:
 91EE [04] 1D5F      4586      bclr    trigret,SparkBits
                     4587  
                     4588  w_store:
 91F0 [04] C60203    4589      lda     T2CurrH
 91F3 [03] B7C6      4590      sta     T2PrevH                      ; Make current value tooth last
 91F5 [04] C60204    4591      lda     T2CurrL
 91F8 [03] B7C7      4592      sta     T2PrevL
                     4593  
                     4594  *****************************************************************************
                     4595  ** When getting here we should have decoded crank signal into one pulse
                     4596  ** per ignition event so we can just drop into the standard MSnS code.
                     4597  ** A smarter implementation would use the individual teeth for more
                     4598  ** accurate timing
                     4599  *****************************************************************************
                     4600  done_decode:
                     4601  
                     4602  ;save old values
 91FA [05] 4EAEFC    4603      mov     iTimeX,iTimepX
 91FD [05] 4EAFFD    4604      mov     iTimeH,iTimepH
 9200 [05] 4EB0FE    4605      mov     iTimeL,iTimepL
                     4606  
                     4607  ;T2 read at start of DOSQUIRT
 9203 [04] C60204    4608      lda     T2CurrL
 9206 [03] B0AD      4609      sub     T2LastL                  ; Calculate cycle time
 9208 [03] B7B0      4610      sta     iTimeL          ; global var
 920A [04] C60203    4611      lda     T2CurrH
 920D [03] B2AC      4612      sbc     T2LastH
 920F [03] B7AF      4613      sta     iTimeH
 9211 [04] C60202    4614      lda     T2CurrX
 9214 [03] B2AB      4615      sbc     T2LastX
 9216 [03] B7AE      4616      sta     iTimeX
                     4617  
                     4618  ;Must check to see if iTime has gone negative. This can occur if the interrupt to increment
                     4619  ; the top byte of the timer gets missed. The roll_chk code obviously does not work correctly.
                     4620  
                     4621  ;;;;CODE TO FIX DROPOUT
                     4622  
 9218 [05] 0FAE0A    4623      brclr   7,iTimeX,noitx_err
                     4624  ; if top bit of iTimeX is set then software rollover must have got missed
                     4625  ; giving a negative time
                     4626  
 921B [04] C60202    4627      lda     T2CurrX
 921E [02] AB01      4628      add     #1     ; increment the saved "current" value of the timer
 9220 [04] C70202    4629      sta     T2CurrX
                     4630  
                     4631  ;assume value should really be zero
                     4632  
 9223 [03] 3FAE      4633      clr     iTimeX ; assume top byte is zero
                     4634  
                     4635  noitx_err:
                     4636  
                     4637  ;;;;CODE TO FIX DROPOUT
                     4638  
                     4639  *****************************************************************************
                     4640  
                     4641  miss_chk_skip:
 9225 [04] 105F      4642      bset    SparkTrigg,Sparkbits    ; IRQ triggered, but no spark yet
 9227 [04] 3CD2      4643      inc     idleCtlClock                 ; Idle PWM Clock counter
 9229 [04] C60111    4644       lda         idleDelayClock                  ; Idle PWM delay counter


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 36
MC68HC908GP32 User Bootloader


 922C [03] 2704      4645       beq         delay_done
 922E [01] 4A        4646       deca                                        ; idle seconds clock
 922F [04] C70111    4647       sta     idleDelayClock
                     4648  
                     4649  delay_done:
 9232 [03] B684      4650      lda          igncount1
 9234 [03] 260B      4651       bne     EGOBUMP             ; Only increment counters if cylinder count is zero
 9236 [04] 3C83      4652      inc      asecount                ; Increment after-start enrichment counter
                     4653  
                     4654  TPS_COUNTER:
 9238 [05] 076306    4655      brclr    taeIgnCount,feature1,EGOBUMP    ; Are we in Cycle counter mode for TPS Accel?
 923B [04] 3C81      4656      inc      tpsaclk                             ; Yes so increment counter
                     4657  
                     4658  ; Save current TPS reading in last_tps variable to compute TPSDOT in
                     4659  ; acceleration enrichment section or KPa in KPa last if in MAP dot
                     4660  
                     4661  tps_dot_on:
 923D [03] B647      4662      lda      tps
                     4663  
                     4664  Kpa_Dot_on:
 923F [03] B7D1      4665      sta      TPSlast
                     4666  
                     4667  EGOBUMP:
 9241 [04] 3C82      4668      inc       egocount                           ; Increment EGO step counter
                     4669  
                     4670  No_Ego_Cnt:
 9243 [05] 004203    4671      brset   running,engine,CYCLE_CALC        ; should always be running if we get here
 9246 [03] CC9399    4672      jmp     SKIP_CYCLE_CALC
                     4673  
                     4674  CYCLE_CALC:
                     4675  
                     4676  ; revised section new in 015d
                     4677  ; hi-res timer is only 16bit and runs at 1MHz. 1 tick = 1us
                     4678  ; so timer rollover occurs at about 65.5ms. Hence if period > 65.5ms
                     4679  ; we have to use the lo-res spark calculation i.e. use the 0.1ms
                     4680  ; routine instead of the hi-res output compare method in "SPARKTIME"
                     4681  ; 70ms equates to rpmh = $2, rpml = $BC.  Choose set point as $200 as
                     4682  ; simpler.  65ms is $28F
                     4683  ;
                     4684  
                     4685  ;022b 0 T2 is now 24 bit with the extra software byte but may slow this routine
                     4686  ;excessively if we do 24bit maths here in an interrupt handler.
                     4687  ;Stick with Magnus' 0.1ms method for now as it works.
                     4688  
                     4689  ;***********************************************************************************************
                     4690  ;
                     4691  ; RPM = CONSTANT/PERIOD
                     4692  ; Where:
                     4693  ; RPM         = Engine RPM
                     4694  ; RPM_K = 16 bit constant using .1ms clock tick (10khz)
                     4695  ;               ((10,000tickpsec*60secpmin)/(number of cyl/(stroke/2)))
                     4696  ; RPM_P = 16 bit period count between ignition events in 0.1ms
                     4697  ;               resolution
                     4698  ;   RPM_K
                     4699  ;   ----- = RPM
                     4700  ;   RPM_P
                     4701  ;
                     4702  ; 4cyl 4stroke RPMK = ((10,000*60)/2) = 300,000, $4 93E0, %0100 1001 0011 1110 0000
                     4703  ;
                     4704  ; rpmch:rpmcl is calculaed in the .1ms section of TIMERROLL after synchronisation.
                     4705  ;***********************************************************************************************
                     4706  
 9249 [02] A600      4707      lda     #0
 924B [04] C7020C    4708      sta     offsetang
 924E [04] C7020B    4709      sta     offsetstep
                     4710  
                     4711  CC_cont:
 9251 [03] B672      4712      lda     rpmch
 9253 [02] A101      4713      cmp     #$1
 9255 [03] 220A      4714      bhi     LOW_SPEED                ; rpmc > $200  slow
 9257 [03] 2510      4715      blo     HIGH_SPEED               ;      < $100  fast
 9259 [03] B673      4716      lda     rpmcl
 925B [02] A180      4717      cmp     #$80
 925D [03] 250A      4718      blo     HIGH_SPEED               ;      < $180  fast
 925F [03] 2006      4719      bra     ASIS_SPEED               ; in between leave as it was
                     4720  
                     4721  LOW_SPEED:
 9261 [04] 135F      4722      bclr    SparkHSpeed,SparkBits    ; Turn off high speed ignition
 9263 [04] 145F      4723      bset    SparkLSpeed,SparkBits    ; Turn on low speed ignition
 9265 [03] 2006      4724      bra     DELAY_CALC
                     4725  
                     4726  ASIS_SPEED:
 9267 [03] 2004      4727      bra    DELAY_CALC     ;* RJH 7/25/23
                     4728  
                     4729  VARIABLE_DELAY:
                     4730  
                     4731  HIGH_SPEED:
                     4732  
                     4733  HIGH_cont:
 9269 [04] 125F      4734      bset    SparkHSpeed,SparkBits    ; Turn on high speed ignition
 926B [04] 155F      4735      bclr    SparkLSpeed,SparkBits    ; Turn off low speed ignition
                     4736  
                     4737  DELAY_CALC:
 926D [04] C6E1B6    4738      lda     config11_f1              ; Get engine config
 9270 [03] 62        4739      nsa
 9271 [02] A40F      4740      and     #$0f                     ; Mask out cylinders  (was $07)
 9273 [01] 4C        4741      inca                                 ; Prepare loop counter
 9274 [01] 97        4742      tax                                      ; stick in into X for safe keeping
                     4743  
                     4744  ; accel/decel correction..
                     4745  ; If engine is accelerating or decelerating predict our expected next
                     4746  ; cycle time for more accurate spark control. Tom Hafner reported a big
                     4747  ; improvement with a similar method in his MegaSpark.
                     4748  ; Calc is as follows: predicted ctime = ctime + (ctime - ctime prev) =
                     4749  ; 2x ctime - ctimep
                     4750  
 9275 [05] 045F20    4751      brset   SparkLSpeed,SparkBits,dc_low
 9278 [05] 4EB0C0    4752      mov     iTimeL,cTimeL            ; Prepare to calculate with highres time
 927B [05] 4EAFBF    4753      mov     iTimeH,cTimeH
                     4754  
                     4755  ; do high speed accel/decel correction
                     4756  
 927E [03] B6FD      4757      lda     iTimepH
 9280 [03] 2604      4758      bne     hispdcorr
 9282 [03] B6FE      4759      lda     iTimepL
 9284 [03] 2730      4760      beq     ReCalcDelay                  ; if previous is zero then skip routine
                     4761  
                     4762  hispdcorr:
 9286 [04] 38C0      4763      lsl     cTimeL
 9288 [04] 39BF      4764      rol     cTimeH
 928A [03] B6C0      4765      lda     cTimeL
 928C [03] B0FE      4766      sub     iTimepL
 928E [03] B7C0      4767      sta     cTimeL
 9290 [03] B6BF      4768      lda     cTimeH
 9292 [03] B2FD      4769      sbc     iTimepH
 9294 [03] B7BF      4770      sta     cTimeH
 9296 [03] 201E      4771      bra      ReCalcDelay
                     4772  
                     4773  dc_low:
 9298 [05] 4E73C0    4774      mov     rpmcl,cTimeL             ; Prepare to calculate with lowres time
 929B [05] 4E72BF    4775      mov     rpmch,cTimeH
                     4776  
                     4777  ; do low speed accel/decel correction
 929E [03] B670      4778      lda     rpmph
 92A0 [03] 2604      4779      bne     lospdcorr
 92A2 [03] B671      4780      lda     rpmpl


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 37
MC68HC908GP32 User Bootloader


 92A4 [03] 2710      4781      beq     ReCalcDelay                  ; if previous is zero then skip routine
                     4782  
                     4783  lospdcorr:
 92A6 [04] 38C0      4784      lsl     cTimeL
 92A8 [04] 39BF      4785      rol     cTimeH
 92AA [03] B6C0      4786      lda     cTimeL
 92AC [03] B071      4787      sub     rpmpl
 92AE [03] B7C0      4788      sta     cTimeL
 92B0 [03] B6BF      4789      lda     cTimeH
 92B2 [03] B270      4790      sbc     rpmph
 92B4 [03] B7BF      4791      sta     cTimeH
                     4792  
                     4793  ReCalcDelay:
 92B6 [05] 4EC0C2    4794      mov     cTimeL,SparkTempL
 92B9 [05] 4EBFC1    4795      mov     cTimeH,SparkTempH
 92BC [03] 3FC3      4796      clr     SparkCarry
                     4797  
                     4798  ; take a copy - used later by next-cyl calcs
                     4799  
 92BE [03] B6C0      4800      lda     cTimeL
 92C0 [04] C70201    4801      sta     ctimeLcp
 92C3 [03] B6BF      4802      lda     cTimeH
 92C5 [04] C70200    4803      sta     ctimeHcp
 92C8 [01] 9F        4804      txa
                     4805  
                     4806  spk_mult_div2:
 92C9 [04] 34C3      4807      lsr     SparkCarry               ; /2
 92CB [04] 36C1      4808      ror     SparkTempH
 92CD [04] 36C2      4809      ror     SparkTempL
                     4810  
                     4811  spk_mult:               ; Calculate time for delay angle
                     4812                          ; Time for 90 deg * Angle (256=90 deg)/256
 92CF [04] C60106    4813      lda     DelayAngle
 92D2 [04] CB020C    4814      add     offsetang    ; for oddfire, zero otherwise
 92D5 [03] BEC1      4815      ldx     SparkTempH
 92D7 [05] 42        4816      mul
 92D8 [03] BFB1      4817      stx     SparkDelayH
 92DA [03] B7C3      4818      sta     SparkCarry
 92DC [04] C60106    4819      lda     DelayAngle
 92DF [04] CB020C    4820      add     offsetang    ; for oddfire, zero otherwise
 92E2 [03] BEC2      4821      ldx     SparkTempL
 92E4 [05] 42        4822      mul
 92E5 [01] 9F        4823      txa
 92E6 [03] BBC3      4824      add     SparkCarry
 92E8 [03] B7B2      4825      sta     SparkDelayL
 92EA [03] 2402      4826      bcc     NoSparkCarry
 92EC [04] 3CB1      4827      inc     SparkDelayH
                     4828  
                     4829  NoSparkCarry:
 92EE [05] 025F25    4830      brset   SparkHSpeed,SparkBits,set_spk_timer      ; High speed set timer
                     4831  
                     4832  ; low speed dwell
                     4833  ; a copy of some of Calcdwell, but simplified...uses SparkTempH/L for temporary space
                     4834  
 92F1 [03] B6B2      4835      lda     SparkDelayL
 92F3 [03] B0F7      4836      sub     dwelldms
 92F5 [03] B7C2      4837      sta     SparkTempL
 92F7 [03] B6B1      4838      lda     SparkDelayH
 92F9 [02] A200      4839      sbc     #0
 92FB [03] B7C1      4840      sta     SparkTempH
 92FD [03] 2405      4841      bcc     lsd_done
                     4842  
                     4843  ; < zero = OOOPS! set minimal period
                     4844  lsd_min:                             ; target dwell period>available period
 92FF [01] 8C        4845      clrh
 9300 [02] AE01      4846      ldx     #1                       ; turn on coil as soon as we can
 9302 [03] 2002      4847      bra     lsd_done2
                     4848  
                     4849  lsd_done:
 9304 [04] 55C1      4850      ldhx    SparkTempH
                     4851  
                     4852  lsd_done2:
 9306 [05] 006803    4853      brset   coilabit,coilsel,lsd_a
 9309 [05] 026805    4854      brset   coilbbit,coilsel,lsd_b
                     4855  
                     4856  lsd_a:
 930C [04] 35B3      4857      sthx    SparkOnLeftah            ; Store time to keep output the same
 930E [03] CC9399    4858      jmp     SKIP_CYCLE_CALC
                     4859  
                     4860  lsd_b:
 9311 [04] 35B5      4861      sthx    SparkOnLeftbh            ; Store time to keep output the same
 9313 [03] CC9399    4862      jmp     SKIP_CYCLE_CALC
                     4863  
                     4864  set_spk_timer:
                     4865  
                     4866  ; now see if we've time for dwell before spark
                     4867  ; this will work when rpm/advance are low and dwell doesn't start
                     4868  ; before trigger this doesn't leave any margin... could be trying to start
                     4869  ; dwell too soon after now and due to latency we'll miss it?
                     4870  
                     4871  ; 026g add hysteresis to hrd mode to see if it helps my "1500rpm miss"
                     4872  ; if time < 0.512ms then OFF
                     4873  ; if time > 0.768ms then ON
                     4874  ; in between follows last state
                     4875  
 9316 [03] B6B2      4876      lda     SparkDelayL
 9318 [03] B0F9      4877      sub     dwellusl
 931A [01] 97        4878      tax
 931B [03] B6B1      4879      lda     SparkDelayH
 931D [03] B2F8      4880      sbc     dwellush
 931F [03] 250E      4881      bcs     hrd_off     ; if negative then OFF
 9321 [02] A101      4882      cmp     #1
 9323 [03] 230A      4883      bls     hrd_off     ; <= .511ms so OFF
 9325 [02] A102      4884      cmp     #2
 9327 [03] 2202      4885      bhi     hrd_on      ; > 0.768ms so ON
 9329 [03] 2006      4886      bra     hrd_ck      ; in between so no change
                     4887  
                     4888  hrd_on:
 932B [04] 106B      4889      bset    hrdwon,EnhancedBits6
 932D [03] 2002      4890      bra     hrd_ck
                     4891  
                     4892  hrd_off:
 932F [04] 116B      4893      bclr    hrdwon,EnhancedBits6
                     4894  
                     4895  hrd_ck:
 9331 [05] 016B2F    4896      brclr    hrdwon,EnhancedBits6,do_set_spk   ; hrd bit off, so skip
                     4897  
                     4898  ; now want to work out the dwell delay.
                     4899  ; first work out the target time for the spark and store away
                     4900  
                     4901  dwl_ok:
 9334 [03] B6B2      4902      lda     SparkDelayL
 9336 [04] CB0204    4903      add     T2CurrL
 9339 [03] B7FB      4904      sta     SparkTargetL                 ; Store low byte in target area
 933B [03] B6B1      4905      lda     SparkDelayH
 933D [04] C90203    4906      adc     T2CurrH
 9340 [03] B7FA      4907      sta     SparkTargetH
                     4908  
                     4909  ; now calc dwell start point into SparkDelay
                     4910  
 9342 [03] B6B2      4911      lda     SparkDelayL
 9344 [03] B0F9      4912      sub     dwellusl
 9346 [03] B7B2      4913      sta     SparkDelayL                      ; now dwell delay L
 9348 [03] B6B1      4914      lda     SparkDelayH
 934A [03] B2F8      4915      sbc     dwellush
 934C [03] B7B1      4916      sta     SparkDelayH                      ; H


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 38
MC68HC908GP32 User Bootloader


 934E [04] 1869      4917      bset    indwell,EnhancedBits4    ; flag that we are doing dwell delay not spark delay
                     4918  
                     4919  ; make sure lowres dwell timers are zero to prevent early less accurate dwell
                     4920  ; change... don't reset the timer. If the timer gets there first it
                     4921  ; should be ignored, but that doesn't FFFFING work???!?!? so zero out the
                     4922  ; timers here anyway
                     4923  ;
 9350 [03] 450000    4924      ldhx    #0
 9353 [05] 006805    4925      brset   coilabit,coilsel,zd_a
 9356 [05] 026806    4926      brset   coilbbit,coilsel,zd_b
 9359 [03] 2008      4927      bra     do_set_spk                       ; how?
                     4928  
                     4929  zd_a:
 935B [04] 35B3      4930      sthx    SparkOnLeftah                ; Store time to keep output the same
 935D [03] 2004      4931      bra     do_set_spk
                     4932  
                     4933  zd_b:
 935F [04] 35B5      4934      sthx    SparkOnLeftbh                ; Store time to keep output the same
 9361 [03] 2000      4935      bra     do_set_spk
                     4936  
                     4937  do_set_spk:
 9363 [03] B6B2      4938      lda     SparkDelayL
 9365 [04] C0E022    4939       sub     latency_f
 9368 [03] B7B2      4940       sta     SparkDelayL
 936A [03] B6B1      4941       lda     SparkDelayH
 936C [02] A200      4942       sbc     #0
 936E [03] B7B1      4943       sta     SparkDelayH
 9370 [03] 2406      4944       bcc     dss2
 9372 [03] 3FB1      4945       clr     SparkDelayH
 9374 [02] A640      4946       lda     #$40
 9376 [03] 2010      4947       bra     setit2
                     4948  
                     4949  dss2:
                     4950  ; check not too soon - minimum delay of 64us
                     4951  
 9378 [03] B6B1      4952      lda     SparkDelayH
 937A [03] 260A      4953      bne     setit
 937C [03] B6B2      4954      lda     SparkDelayL
 937E [02] A140      4955      cmp     #$40
 9380 [03] 2204      4956      bhi     setit
 9382 [02] A640      4957      lda     #$40
 9384 [03] 2002      4958      bra     setit2
                     4959  
                     4960  setit:           ; Add total highres spark delay time to timer value from IRQ
                     4961                    ; start and set interrupt
 9386 [03] B6B2      4962      lda     SparkDelayL
                     4963  
                     4964  setit2:
 9388 [04] CB0204    4965      add     T2CurrL
 938B [01] 97        4966      tax                                      ; Store low byte
 938C [03] B6B1      4967      lda     SparkDelayH
 938E [04] C90203    4968      adc     T2CurrH
 9391 [03] B734      4969      sta     T2CH1H                   ; Write high byte timer output compare first
 9393 [03] BF35      4970      stx     T2CH1L                   ; Then low byte
 9395 [04] 1F33      4971      bclr    TOF,T2SC1                ; clear pending interrupt
 9397 [04] 1C33      4972      bset    TOIE,T2SC1               ; Enable timer interrupt
                     4973  
                     4974  SKIP_CYCLE_CALC:
                     4975  ; are we logging triggers?
                     4976  
 9399 [05] 076A36    4977      brclr   triglog,EnhancedBits5,w_dec_notlogt
                     4978  ; we are logging so record something
                     4979  
 939C [01] 8C        4980      clrh
 939D [04] CE01CD    4981      ldx     VE_r+PAGESIZE-2
 93A0 [05] 025F0F    4982      brset   SparkHSpeed,SparkBits,tl_high
                     4983  
                     4984  ;tl_low:
 93A3 [02] A601      4985      lda     #1
 93A5 [04] C701CE    4986      sta     VE_r+PAGESIZE-1
 93A8 [03] B672      4987      lda     rpmch
 93AA [04] D70112    4988      sta     VE_r,x
 93AD [01] 5C        4989      incx
 93AE [03] B673      4990      lda     rpmcl
 93B0 [03] 2014      4991      bra     tl_cont
                     4992  
                     4993  tl_high:
 93B2 [01] 4F        4994      clra
 93B3 [04] C701CE    4995      sta     VE_r+PAGESIZE-1
 93B6 [03] B6AF      4996      lda     iTimeH
 93B8 [03] 2602      4997      bne     tlhh
 93BA [02] A6FF      4998      lda     #$FF
                     4999  
                     5000  tlhh:
 93BC [04] D70112    5001      sta     VE_r,x
 93BF [01] 5C        5002      incx
 93C0 [03] B6B0      5003      lda     iTimeL
 93C2 [03] 2602      5004      bne     tl_cont
 93C4 [02] A6FF      5005      lda     #$FF
                     5006  
                     5007  tl_cont:
 93C6 [04] D70112    5008      sta     VE_r,x
 93C9 [01] 5C        5009      incx
 93CA [02] A3B9      5010      cpx     #PAGESIZE-4
 93CC [03] 2501      5011      blo     wdtlt
 93CE [01] 5F        5012      clrx
                     5013  
                     5014  wdtlt:
 93CF [04] CF01CD    5015      stx     VE_r+PAGESIZE-2
                     5016  
                     5017  w_dec_notlogt:
 93D2 [04] C60202    5018      lda     T2CurrX
 93D5 [03] B7AB      5019      sta     T2LastX          ; Make current value last
 93D7 [04] C60203    5020      lda     T2CurrH
 93DA [03] B7AC      5021      sta     T2LastH
 93DC [04] C60204    5022      lda     T2CurrL
 93DF [03] B7AD      5023      sta     T2LastL
 93E1 [05] 4E7270    5024      mov     rpmch,rpmph
 93E4 [05] 4E7371    5025      mov     rpmcl,rpmpl
 93E7 [03] 3F72      5026      clr     rpmch
 93E9 [03] 3F73      5027      clr     rpmcl
 93EB [03] B6E6      5028      lda     wheelcount
 93ED [02] A10B      5029       cmp     #11T
 93EF [03] 2706      5030       beq     SchedInj
 93F1 [02] A11D      5031      cmp     #29T
 93F3 [03] 2702      5032      beq     SchedInj
 93F5 [03] 2076      5033      bra     squirtDone2  ;* Only schedule injection on tooth ll and 29
                     5034  
                     5035  SchedInj:
 93F7 [04] 1000      5036      bset      fuelp,porta            ; Turn on fuel Pump
                     5037  
                     5038  ;scc_run:
 93F9 [04] 1042      5039      bset      running,engine ; Set engine running value
                     5040  
                     5041  *********** now schedule some fuel injection ************
                     5042  
                     5043  squirtCheck1:
 93FB [05] 024218    5044      brset   crank,engine,schedule1a  ; Squirt on every pulse if cranking
 93FE [04] 3C84      5045      inc     IgnCount1                ; Check to see if we are to squirt or skip
 9400 [03] B684      5046      lda     IgnCount1
 9402 [04] C1E195    5047      cmp     divider_f1
 9405 [03] 2708      5048      beq     schedule1
 9407 [02] A110      5049      cmp     #16T                     ; The maximum allowed - reset if match
 9409 [03] 2514      5050      blo     squirtDone1
 940B [03] 3F84      5051      clr     IgnCount1
 940D [03] 2010      5052      bra     squirtDone1


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 39
MC68HC908GP32 User Bootloader


                     5053  
                     5054  schedule1:
 940F [03] 3F84      5055      clr     IgnCount1
 9411 [04] 3C86      5056      inc     altcount1
 9413 [05] 008609    5057      brset   0,altcount1,squirtDone1
                     5058  
                     5059  schedule1a:
 9416 [05] 4E6E4E    5060      mov     pwcalc1,pw1
 9419 [03] 2704      5061      beq     squirtDone1              ; check for zero pulse
 941B [04] 1441      5062      bset    sched1,squirt
 941D [04] 1041      5063      bset    inj1,squirt
                     5064  
                     5065  squirtDone1:
 941F [05] 02421A    5066      brset   crank,engine,schedule2sa ; Squirt on every pulse if cranking
 9422 [04] 3C85      5067      inc     IgnCount2                ; Check to see if we are to squirt or skip
 9424 [03] B685      5068      lda     IgnCount2
 9426 [04] C1E195    5069      cmp     divider_f1
 9429 [03] 270A      5070      beq     schedule2s
 942B [03] B685      5071      lda     IgnCount2
 942D [02] A110      5072      cmp     #16T                     ; The maximum allowed - reset if match
 942F [03] 253C      5073      blo     squirtDone2
 9431 [03] 3F85      5074      clr     IgnCount2
 9433 [03] 2038      5075      bra     squirtDone2
                     5076  
                     5077  schedule2s:
 9435 [03] 3F85      5078      clr     IgnCount2
 9437 [04] 3C87      5079      inc     altcount2
 9439 [05] 018731    5080      brclr   0,altcount2,squirtDone2
                     5081  
                     5082  schedule2sa:
 943C [05] 4E6F53    5083      mov     pwcalc2,pw2
 943F [03] 272C      5084      beq     squirtDone2              ; check for zero pulse
 9441 [04] 1841      5085      bset    sched2,squirt
 9443 [04] 1241      5086      bset    inj2,squirt
 9445 [03] 2026      5087      bra     squirtDone2
                     5088  
                     5089  sc2dual:
 9447 [05] 02421A    5090      brset   crank,engine,schedule2da ; Squirt on every pulse if cranking
 944A [04] 3C85      5091      inc     IgnCount2                ; Check to see if we are to squirt or skip
 944C [03] B685      5092      lda     IgnCount2
 944E [04] C1E295    5093      cmp     divider_f2
 9451 [03] 270A      5094      beq     schedule2d
 9453 [03] B685      5095      lda     IgnCount2
 9455 [02] A110      5096      cmp     #16T                     ; The maximum allowed - reset if match
 9457 [03] 2614      5097      bne     squirtDone2
 9459 [03] 3F85      5098      clr     IgnCount2
 945B [03] 2010      5099      bra     squirtDone2
                     5100  
                     5101  schedule2d:
 945D [03] 3F85      5102      clr     IgnCount2
 945F [04] 3C87      5103      inc     altcount2
 9461 [05] 018709    5104      brclr   0,altcount2,squirtDone2
                     5105  
                     5106  schedule2da:
 9464 [05] 4E6F53    5107      mov     pwcalc2,pw2
 9467 [03] 2704      5108      beq     squirtDone2              ; check for zero pulse
 9469 [04] 1841      5109      bset    sched2,squirt
 946B [04] 1241      5110      bset    inj2,squirt
                     5111  
                     5112  squirtDone2:
 946D [02] 8A        5113      pulh
 946E [07] 80        5114      rti
                     5115  
                     5116  ***************************************************************************
                     5117  **
                     5118  ** ADC - Interrupt for ADC conversion complete
                     5119  **
                     5120  ***************************************************************************
                     5121  
                     5122  ADCDONE:
 946F [02] 8B        5123      pshh            ; Do this because processor does not stack H
 9470 [01] 8C        5124      clrh
                     5125  
                     5126  ; Store previous values for derivative
                     5127  
 9471 [03] B68E      5128      lda     adsel
 9473 [01] 97        5129      tax
 9474 [03] E644      5130      lda     map,x
 9476 [03] E777      5131      sta     lmap,x  ; Store the old value
 9478 [03] B63D      5132       lda         adr     ; Load in the new ADC reading
 947A [03] EB44      5133      add     map,x   ; Perform (map + last_map)/2 averaging (for all ADC readings) - bug fix
 947C [01] 46        5134      rora
 947D [03] E744      5135       sta         map,x       ; MAP is entry point, offset is loaded in index register
 947F [03] B68E      5136       lda     adsel
 9481 [01] 4C        5137       inca
 9482 [02] A106      5138       cmp         #$06
 9484 [03] 2601      5139       bne         ADCPTR
 9486 [01] 4F        5140       clra
                     5141  
                     5142  ADCPTR:
 9487 [03] B78E      5143       sta         adsel
 9489 [02] 8A        5144      pulh
 948A [07] 80        5145       rti
                     5146  
                     5147  ***************************************************************************
                     5148  **
                     5149  ** SCI Communications
                     5150  **
                     5151  ** Communications is established when the PC communications program sends
                     5152  ** a command character - the particular character sets the mode:
                     5153  **
                     5154  ** "A" = send all of the realtime variables via txport.
                     5155  ** "V" = send the VE table and constants via txport (128 bytes)
                     5156  ** "W"+<offset>+<newbyte> = receive new VE or constant byte value and
                     5157  **  store in offset location
                     5158  ** "X"+<offset>+<count>+<newbyte>+<newbyte>.... = receive series of new data bytes
                     5159  ** "B" = jump to flash burner routine and burn VE/constant values in RAM into flash
                     5160  ** "C" = Test communications - echo back SECL
                     5161  ** "Q" = Send over Embedded Code Revision Number (irrelevant in Extra, send zero)
                     5162  ** "S" = Signature - update every time there is a change in data format 32 bytes
                     5163  ** "T" = full code revision in text. 32 bytes
                     5164  ** "P"+<page> = load page of data from Flash to RAM
                     5165  
                     5166  ** txmode:
                     5167  **              01 = Getting realtime data
                     5168  **              02 = ?
                     5169  **              03 = Sending VE
                     5170  **              04 = sending signature
                     5171  **              05 = Getting offset VE
                     5172  **              06 = Getting data VE
                     5173  **              07 = Getting offset chunk write
                     5174  **              08 = Getting count  chunk write
                     5175  **              09 = Getting data   chunk write
                     5176  **              0A = Bootloader
                     5177  **              0B = version string
                     5178  **              0C = getting table number
                     5179  **              0D = config error message
                     5180  **              0E = format string
                     5181  ***************************************************************************
                     5182  IN_SCI_RCV:
 948B [02] 8B        5183      pshh
 948C [03] B616      5184      lda     SCS1               ; Clear the SCRF bit by reading this register
 948E [03] B68C      5185      lda     txmode             ; Check if we are in the middle of a receive new VE/constant
 9490 [04] 410515    5186      cbeqa   #$05,TXMODE_5
 9493 [04] 41061A    5187      cbeqa   #$06,TXMODE_6
 9496 [04] 410727    5188      cbeqa   #$07,TXMODE_7


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 40
MC68HC908GP32 User Bootloader


 9499 [04] 41082C    5189      cbeqa   #$08,TXMODE_8
 949C [04] 410931    5190      cbeqa   #$09,TXMODE_9
 949F [04] 410C03    5191      cbeqa   #$0C,TXMODE_C1
 94A2 [03] CC9532    5192      jmp     CHECK_TXCMD
                     5193  
                     5194  TXMODE_C1:
 94A5 [03] CC9755    5195      jmp TXMODE_C
                     5196  
                     5197  TXMODE_5:                                ; Getting offset for W command
 94A8 [05] 4E188D    5198      mov     SCDR,rxoffset
 94AB [04] 3C8C      5199      inc     txmode                   ; continue to next mode
 94AD [03] CC95F0    5200      jmp     DONE_RCV
                     5201  
                     5202  TXMODE_6:
 94B0 [05] 0C670A    5203      brset   mv_mode,EnhancedBits2,TX6_MV
 94B3 [01] 8C        5204      clrh
 94B4 [03] B618      5205      lda     SCDR
 94B6 [03] BE8D      5206      ldx     rxoffset
 94B8 [04] D70112    5207      sta     VE_r,x          ; store it in ram regardless of page
 94BB [03] 3F8C      5208      clr     txmode
                     5209  
                     5210  TX6_MV:                                          ; in MV mode, just ignore any data sent
 94BD [03] CC95F0    5211      jmp     DONE_RCV
                     5212  
                     5213  TXMODE_7:                                ; Getting offset for X command
 94C0 [05] 4E188D    5214      mov     SCDR,rxoffset
 94C3 [04] 3C8C      5215      inc     txmode                   ; continue to next mode
 94C5 [03] CC95F0    5216      jmp     DONE_RCV
                     5217  
                     5218  TXMODE_8:                                ; Getting count for X command
 94C8 [05] 4E188B    5219      mov     SCDR,txgoal              ; borrow txgoal as we aren't going to using it
 94CB [04] 3C8C      5220      inc     txmode                   ; continue to next mode
 94CD [03] CC95F0    5221      jmp     DONE_RCV
                     5222  
                     5223  TXMODE_9:
 94D0 [01] 8C        5224      clrh
 94D1 [03] B618      5225      lda     SCDR
 94D3 [03] BE8D      5226      ldx     rxoffset
 94D5 [04] D70112    5227      sta     VE_r,x          ; store it in ram regardless of page
 94D8 [04] 3C8D      5228      inc     rxoffset
 94DA [04] 3A8B      5229      dec     txgoal                   ; count down
 94DC [03] 2602      5230      bne     TXMODE_9_CONT
 94DE [03] 3F8C      5231      clr     txmode                   ; have received all bytes we expected
                     5232  
                     5233  TXMODE_9_CONT:
 94E0 [03] CC95F0    5234      jmp     DONE_RCV
                     5235  
                     5236  ;MODE_B moved up here to enable relative branches
                     5237  MODE_B:
 94E3 [04] C60105    5238      lda     page
 94E6 [02] A110      5239      cmp     #$10                    ; see if tooth logging or invalid page
 94E8 [03] 2503      5240      blo     MODE_B_OK               ; if it is then do not burn
 94EA [03] CC952D    5241      jmp     DONE_B
                     5242  
                     5243  MODE_B_OK:
 94ED [04] 1B14      5244      bclr    SCRIE,SCC2               ; turn off receive interrupt so don't re-enter
 94EF [04] 6ECC76    5245      mov     #$CC,flocker
 94F2 [05] CD98C4    5246      jsr     burnConst                ; routine disables interrupts during critical sections
 94F5 [03] 3F76      5247      clr     flocker
 94F7 [03] 3F8C      5248      clr     txmode
 94F9 [04] C60105    5249      lda     page                     ; check if page0, if so reload quick vars
 94FC [03] 2708      5250      beq     ck_page0
 94FE [04] 410326    5251      cbeqa   #3,ck_page3     ; do trigger angle / next cyl calc
 9501 [04] 410729    5252      cbeqa   #7,ck_page7     ; do rotary setting check
 9504 [03] 2027      5253      bra     DONE_B
                     5254  
                     5255  ck_page0:
                     5256  ; Set up RAM Variable - also when burning page0 search for "burning page0"
                     5257  
 9506 [04] C6E00B    5258      lda     feature1_f
 9509 [03] B763      5259      sta     feature1
 950B [04] C6E00C    5260      lda     feature2_f
 950E [03] B764      5261      sta     feature2
 9510 [04] C6E06D    5262      lda     feature7_f
 9513 [03] B765      5263      sta     feature7
 9515 [04] C6E001    5264      lda     outputpins_f
 9518 [03] B762      5265      sta     outputpins
 951A [04] C6E000    5266      lda     personality_f
 951D [03] B761      5267      sta     personality                      ; move from flash to ram
 951F [02] A61F      5268      lda     #%00011111                       ; ** Was 11111111
                     5269  
                     5270  ckp0_ddrc:
 9521 [03] B706      5271      sta     ddrc                             ; Outputs for LED
 9523 [04] 1669      5272      bset    wspk,EnhancedBits4           ; set that we are doing wasted spark
 9525 [03] 2006      5273      bra     DONE_B
                     5274  
                     5275  ck_page3:
 9527 [04] 1C69      5276      bset    invspk,EnhancedBits4    ; set inverted
                     5277  
                     5278  ckp3_i_done:
 9529 [04] 1B69      5279      bclr    nextcyl,EnhancedBits4
 952B [03] 2000      5280      bra     DONE_B
                     5281  
                     5282  ck_page7:
                     5283  
                     5284  DONE_B:
 952D [04] 1A14      5285      bset    SCRIE,SCC2                       ; re-enable receive interrupt
 952F [03] CC95F0    5286      jmp     DONE_RCV
                     5287  
                     5288  CHECK_TXCMD:
 9532 [03] B618      5289      lda     SCDR    ; Get the command byte
 9534 [04] 41413C    5290      cbeqa   #'A',MODE_A                  ; realtime vars
 9537 [04] 414221    5291      cbeqa   #'B',jMODE_B             ; All I hear is BURN
 953A [04] 414346    5292      cbeqa   #'C',MODE_C                  ; Comm test
 953D [04] 41564C    5293      cbeqa   #'V',MODE_V                  ; (VE) read page
 9540 [04] 41571B    5294      cbeqa   #'W',jMODE_W             ; Write byte
 9543 [04] 41511B    5295       cbeqa   #'Q',jMODE_Q            ; Query version
 9546 [04] 41501B    5296      cbeqa   #'P',jMODE_P             ; Page select
 9549 [04] 41211B    5297      cbeqa   #'!',jMODE_BOOT          ; bootloader
 954C [04] 41531B    5298      cbeqa   #'S',jMODE_SIGN          ; signature
 954F [04] 415226    5299      cbeqa   #'R',MODE_R                  ; Added for enhanced stuff was "a"
                     5300                                                   ; now "R" for Megatunix compatabilty
 9552 [04] 415818    5301      cbeqa   #'X',jMODE_X             ; Chunk write
 9555 [04] 415418    5302      cbeqa   #'T',jMODE_T             ; Text version
 9558 [03] CC95F0    5303      jmp     DONE_RCV
                     5304  
                     5305  jMODE_B:
 955B [03] CC94E3    5306      jmp     MODE_B
                     5307  
                     5308  jMODE_W:
 955E [03] CC95BC    5309      jmp     MODE_W
                     5310  
                     5311  jMODE_Q:
 9561 [03] CC95C8    5312      jmp     MODE_Q
                     5313  
                     5314  jMODE_P:
 9564 [03] CC95DA    5315      jmp     MODE_P
                     5316  
                     5317  jMODE_BOOT:
 9567 [03] CC95F2    5318      jmp     MODE_BOOT
                     5319  
                     5320  jMODE_SIGN:
 956A [03] CC95E1    5321      jmp     MODE_SIGN
                     5322  
                     5323  jMODE_X:
 956D [03] CC95C1    5324      jmp     MODE_X


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 41
MC68HC908GP32 User Bootloader


                     5325  
                     5326  jMODE_T:
 9570 [03] CC95D1    5327      jmp     MODE_T
                     5328  
                     5329  MODE_A:         ; Big A
 9573 [04] 6E168B    5330      mov     #$16,txgoal              ; 22T ; B&G mode ($17) For Megaview use
 9576 [03] 2005      5331      bra     MODE_AA_cont
                     5332  
                     5333  MODE_R:        ; Big R
 9578 [04] 1D67      5334      bclr    mv_mode,EnhancedBits2    ; clear MegaView mode to allow enhanced comms
 957A [04] 6E278B    5335      mov     #39T,txgoal                      ; was 32T in 021, was 36T in 021u,
                     5336                                                       ; 38T from 021x1 onwards, 023b2:39T
                     5337  
                     5338  MODE_AA_cont:
 957D [03] 3F8A      5339      clr     txcnt                    ; Send back all real-time variables
 957F [02] A601      5340      lda     #$01
 9581 [03] 2067      5341      bra     EN_XMIT
                     5342  
                     5343  MODE_C:
 9583 [03] 3F8A      5344      clr     txcnt                    ; Just send back SECL variable to test comm port
 9585 [04] 6E018B    5345      mov     #$1,txgoal
 9588 [02] A601      5346      lda     #$01
 958A [03] 205E      5347      bra     EN_XMIT
                     5348  
                     5349  MODE_V:
 958C [03] 3F8A      5350      clr     txcnt
 958E [05] 0C6724    5351      brset   mv_mode,EnhancedBits2,MODE_V_MV
 9591 [04] 6EBD8B    5352      mov     #PAGESIZE,txgoal  ; no. of bytes to send back
                     5353                                                 ; (was $7e) was 201 now 213 for 12x12 NOW 201 again:-)
 9594 [04] C60105    5354      lda     page
 9597 [04] 41F00F    5355      cbeqa   #$F0,MODE_V_F0
 959A [04] 41F110    5356      cbeqa   #$F1,MODE_V_F1
                     5357  
                     5358  ;ensure trigger/tooth loggers OFF
                     5359  
 959D [04] 156A      5360      bclr    toothlog,EnhancedBits5
 959F [04] 176A      5361      bclr    triglog,EnhancedBits5
 95A1 [04] 41F20D    5362      cbeqa   #$F2,MODE_V_F23
 95A4 [04] 41F30A    5363      cbeqa   #$F3,MODE_V_F23
 95A7 [03] 200F      5364      bra     MODE_V2
                     5365  
                     5366  MODE_V_F0:
 95A9 [04] 156A      5367      bclr    toothlog,EnhancedBits5
 95AB [03] 200B      5368      bra     MODE_V2
                     5369  
                     5370  MODE_V_F1:
 95AD [04] 176A      5371      bclr    triglog,EnhancedBits5
 95AF [03] 2007      5372      bra     MODE_V2
                     5373  
                     5374  MODE_V_F23:
 95B1 [03] 3F8B      5375      clr     txgoal    ; send back all 256 bytes (perhaps)
 95B3 [03] 2003      5376      bra     MODE_V2
                     5377  
                     5378  MODE_V_MV:
 95B5 [04] 6E7D8B    5379      mov     #$7D,txgoal  ; 125T
                     5380  
                     5381  MODE_V2:
 95B8 [02] A603      5382      lda     #$03
 95BA [03] 202E      5383      bra     EN_XMIT
                     5384  
                     5385  MODE_W:
 95BC [04] 6E058C    5386      mov     #$05,txmode
 95BF [03] 202F      5387      bra     DONE_RCV
                     5388  
                     5389  MODE_X:
 95C1 [04] 1D67      5390      bclr    mv_mode,EnhancedBits2    ; clear MegaView mode to allow enhanced comms
 95C3 [04] 6E078C    5391      mov     #$07,txmode
 95C6 [03] 2028      5392      bra     DONE_RCV
                     5393  
                     5394  MODE_Q:
 95C8 [03] 3F8A      5395      clr     txcnt                    ; Just send back SECL variable to test comm port
 95CA [04] 6E018B    5396      mov     #$1,txgoal
 95CD [02] A605      5397      lda     #$05
 95CF [03] 2019      5398      bra     EN_XMIT
                     5399  
                     5400  MODE_T:
 95D1 [03] 3F8A      5401      clr     txcnt
 95D3 [04] 6E208B    5402      mov     #$20,txgoal              ; Send 32 Chars of Text version
 95D6 [02] A60E      5403      lda     #$0E                     ; TXMode = sending format string
 95D8 [03] 2010      5404      bra     EN_XMIT
                     5405  
                     5406  MODE_P:
 95DA [04] 1D67      5407      bclr    mv_mode,EnhancedBits2    ; clear MegaView mode to allow enhanced comms
 95DC [04] 6E0C8C    5408      mov     #$0C,txmode                      ; txmode = getting page number
 95DF [03] 200F      5409      bra     DONE_RCV
                     5410  
                     5411  MODE_SIGN:                           ; Send Signature text - DJLH
 95E1 [04] 1D67      5412      bclr    mv_mode,EnhancedBits2    ; clear MegaView mode to allow enhanced comms
 95E3 [03] 3F8A      5413      clr     txcnt
 95E5 [04] 6E208B    5414      mov     #$20,txgoal              ; Send 32 Chars of Signature
 95E8 [02] A604      5415      lda     #$04                     ; TXMode = sending signature
                     5416  
                     5417  EN_XMIT:
 95EA [03] B78C      5418      sta     txmode
 95EC [04] 1614      5419      bset    TE,SCC2                  ; Enable Transmit
 95EE [04] 1E14      5420      bset    SCTIE,SCC2               ; Enable transmit interrupt
                     5421  
                     5422  DONE_RCV:
 95F0 [02] 8A        5423      pulh
 95F1 [07] 80        5424      rti
                     5425  
                     5426  MODE_BOOT:
 95F2 [03] B68C      5427      lda     txmode
 95F4 [02] A10A      5428      cmp     #$0A
 95F6 [03] 2705      5429      beq     jBootLoad
 95F8 [04] 6E0A8C    5430      mov     #$0A,txmode
 95FB [03] 20F3      5431      bra     DONE_RCV
                     5432  
                     5433  jBootLoad:
 95FD [03] CC9704    5434      jmp     BootLoad
                     5435  
                     5436  CONF_ERR:
 9600 [04] 5598      5437      ldhx    tmp5                     ; tmp5,6 contain absolute address of data
 9602 [02] F6        5438      lda     ,x
 9603 [03] 2605      5439      bne     conf_err2                ; zero is string terminator
 9605 [03] 3F8C      5440      clr     txmode
 9607 [03] CC96FC    5441      jmp     FIN_TX
                     5442  
                     5443  conf_err2:
 960A [03] B718      5444      sta     SCDR                     ; Send char
 960C [02] AF01      5445      aix     #1
 960E [04] 3598      5446      sthx    tmp5
 9610 [03] CC9702    5447      jmp     DONE_BYTE
                     5448  
                     5449  tx_done:
                     5450  ;we get here after we've sent the last byte
                     5451  
 9613 [04] 1714      5452      bclr    TE,SCC2                  ; Disable Transmit
 9615 [04] 1F14      5453      bclr    SCTIE,SCC2               ; Disable transmit interrupt
 9617 [02] 8A        5454      pulh
 9618 [07] 80        5455      rti
                     5456  
                     5457  jIN_SIGN_MODE:
 9619 [03] CC96E4    5458      jmp       IN_SIGN_MODE
                     5459  
                     5460  jIN_T_MODE:


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 42
MC68HC908GP32 User Bootloader


 961C [03] CC96E9    5461      jmp       IN_T_MODE
                     5462  
                     5463  jIN_V_MODE:
 961F [03] CC96C1    5464      jmp       IN_V_MODE
                     5465  
                     5466  *** Transmit Character Interrupt Handler ***************
                     5467  
                     5468  IN_SCI_TX:
 9622 [02] 8B        5469      pshh
 9623 [03] B616      5470      lda     SCS1                     ; Clear the SCRF bit by reading this register
 9625 [01] 8C        5471      clrh
 9626 [03] BE8A      5472      ldx     txcnt
 9628 [03] B68C      5473      lda     txmode
 962A [03] 27E7      5474      beq     tx_done
 962C [04] 410568    5475       cbeqa   #$05,IN_Q_MODEJMP
 962F [04] 4104E7    5476      cbeqa   #$04,jIN_SIGN_MODE      ; see above
 9632 [04] 410DCB    5477      cbeqa   #$0D,CONF_ERR           ; see above
 9635 [04] 410EE4    5478      cbeqa   #$0E,jIN_T_MODE         ; see above
 9638 [02] A101      5479      cmp     #$01
 963A [03] 26E3      5480      bne     jIN_V_MODE
                     5481  
                     5482  IN_A_OR_C_MODE:
                     5483  ;check for iTime sending. Now send three bytes but don't waste extra byte, only store two
                     5484  
 963C [02] A316      5485      cpx     #22T
 963E [03] 260B      5486      bne     ac_chk38
 9640 [03] B6AF      5487      lda     iTimeH
 9642 [05] 4EB057    5488      mov     iTimeL,cTimeCommL        ; Copy cycle time to comm area
 9645 [05] 4EAE56    5489      mov     iTimeX,cTimeCommH        ; otherwise it might get out of
 9648 [03] CC96F1    5490      jmp     CONT_TX                  ; sync during communication
                     5491  
                     5492  ac_chk38:
 964B [02] A326      5493      cpx     #38T
 964D [03] 2605      5494      bne     ac_chk37
 964F [03] B6CF      5495      lda     bcDC
 9651 [03] CC96F1    5496      jmp     CONT_TX
                     5497  
                     5498  ac_chk37:
 9654 [02] A325      5499      cpx     #37T
 9656 [03] 2605      5500      bne     ac_chk36
 9658 [03] B656      5501      lda     cTimeCommH  ; actually holds iTimeX
 965A [03] CC96F1    5502      jmp     CONT_TX
                     5503  
                     5504  ac_chk36:
 965D [02] A324      5505      cpx     #36T
 965F [03] 2605      5506      bne     NotTPSLAst_Yet
 9661 [03] B6D1      5507      lda     TPSlast
 9663 [03] CC96F1    5508      jmp     CONT_TX
                     5509  
                     5510  NotTPSLAst_Yet:
 9666 [02] A323      5511      cpx     #35T
 9668 [03] 2605      5512      bne     inac_cont
 966A [02] 95        5513      tsx     ; send stack ;* transfer stack pointer to index register
 966B [01] 9F        5514      txa
 966C [03] CC96F1    5515      jmp     CONT_TX
                     5516  
                     5517  inac_cont:
 966F [02] A31E      5518      cpx     #30T
 9671 [03] 223E      5519      bhi     send_ports
                     5520  
                     5521  ;Added for MV compatability with 300 & 400KPa MAP sensors
                     5522  
 9673 [02] A304      5523      cpx     #04T                     ; Are we about to send the MAP value?
 9675 [03] 2636      5524      bne     Send_Data_Normal ; No so carry on as normal
 9677 [05] 0D6733    5525      brclr   mv_mode,EnhancedBits2,Send_Data_Normal   ; Yes so are we in MV mode?
 967A [04] C6E1B6    5526      lda     config11_f1
 967D [02] A403      5527      and     #$03
 967F [04] 410205    5528      cbeqa   #2T,kpa300_reading
 9682 [04] 410314    5529      cbeqa   #3T,kpa400_reading
 9685 [03] 2026      5530      bra     send_data_normal
                     5531  
                     5532  kpa300_reading:
                     5533  ; If we are here we are using a 300KPa sensor and we have a MV connected,
                     5534  ; so send 86% of the raw map value to MV so it converts it correctly
                     5535  
 9687 [03] B6CB      5536      lda     kpa
 9689 [02] A1D9      5537      cmp     #217T
 968B [03] 221C      5538      bhi     Load_Max_Map             ; If raw map > 217 then we are
                     5539                                                   ; above 255KPa, thats the limit in MV
 968D [01] 97        5540      tax
 968E [02] A6DB      5541      lda     #219T                    ; 86% = 219 in 255 bytes
 9690 [05] 42        5542      mul
 9691 [01] 9F        5543      txa
 9692 [03] 2417      5544      bcc     Send_Fudged_Data
 9694 [01] 4C        5545      inca
 9695 [03] 2014      5546      bra     Send_Fudged_Data
                     5547  
                     5548  IN_Q_MODEJMP:
 9697 [03] 2055      5549      bra    IN_Q_MODE
                     5550  
                     5551  ; If we get here we are using a 400KPa sensor and we have a MV connected,
                     5552  ; so send 63% of the raw map value to MV
                     5553  
                     5554  KPa400_Reading:
 9699 [03] B6CB      5555      lda     kpa
 969B [02] A19F      5556      cmp     #159T
 969D [03] 220A      5557      bhi     Load_Max_Map             ; If raw map > 159 then we are
                     5558                                                   ; above 255KPa, the limit in MV
 969F [01] 97        5559      tax
 96A0 [02] A6A0      5560      lda     #160T
 96A2 [05] 42        5561      mul
 96A3 [01] 9F        5562      txa
 96A4 [03] 2405      5563      bcc     Send_Fudged_Data
 96A6 [01] 4C        5564      inca
 96A7 [03] 2002      5565      bra     Send_Fudged_Data
                     5566  
                     5567  Load_Max_Map:
 96A9 [02] A6FF      5568      lda     #255T                    ; Load in KPa limit
                     5569  
                     5570  Send_Fudged_Data:
 96AB [03] 2044      5571      bra     CONT_TX
                     5572  
                     5573  Send_Data_Normal:
 96AD [03] E640      5574      lda     secl,X
 96AF [03] 2040      5575      bra     CONT_TX
                     5576  
                     5577  send_ports:
 96B1 [01] 9F        5578      txa
 96B2 [02] A01F      5579      sub     #31T
 96B4 [01] 97        5580      tax
 96B5 [02] F6        5581      lda     porta,X                  ; load porta,b,c,d 31=a, 34=d
 96B6 [02] A302      5582      cpx     #2
 96B8 [03] 2637      5583      bne     CONT_TX
 96BA [05] 0F6434    5584      brclr   config_error,feature2,CONT_TX
 96BD [02] AA80      5585      ora     #128T   ; set top bit in portc if config error
 96BF [03] 2030      5586      bra     CONT_TX
                     5587  
                     5588  IN_V_MODE
 96C1 [04] C60105    5589      lda     page
 96C4 [04] 41F20E    5590      cbeqa   #$F2,V_f2
 96C7 [04] 41F315    5591      cbeqa   #$F3,V_f3
 96CA [05] 0C6705    5592      brset   mv_mode,EnhancedBits2,IN_V_MV
 96CD [04] D60112    5593      lda     ve_r,x                   ; get data from RAM (must have loaded a page first)
 96D0 [03] 201F      5594       bra     CONT_TX
                     5595  
                     5596  IN_V_MV:


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 43
MC68HC908GP32 User Bootloader


 96D2 [03] CC9743    5597      jmp     MV_V_EMUL
                     5598  
                     5599  V_f2:
 96D5 [02] A340      5600      cpx     #$40
 96D7 [03] 2503      5601      blo     V_f2zero
 96D9 [02] F6        5602      lda     0,x
 96DA [03] 2015      5603      bra     CONT_TX
                     5604  
                     5605  V_f2zero:
 96DC [01] 4F        5606      clra
 96DD [03] 2012      5607      bra     CONT_TX
                     5608  
                     5609  V_f3:
 96DF [04] D60100    5610      lda     $0100,x
 96E2 [03] 200D      5611      bra     CONT_TX
                     5612  
                     5613  IN_SIGN_MODE:
 96E4 [04] D69ABF    5614       lda     SIGNATURE,x
 96E7 [03] 2008      5615       bra     CONT_TX
                     5616  
                     5617  IN_T_MODE:
 96E9 [04] D69A9F    5618       lda     textversion_f,x
 96EC [03] 2003      5619       bra     CONT_TX
                     5620  
                     5621  IN_Q_MODE:
 96EE [04] D69A9E    5622       lda     REVNUM,X
                     5623  
                     5624  CONT_TX:
 96F1 [03] B718      5625      sta     SCDR                     ; Send char
 96F3 [03] B68A      5626      lda     txcnt
 96F5 [01] 4C        5627      inca                             ; Increase number of chars sent
 96F6 [03] B78A      5628      sta     txcnt
 96F8 [03] B18B      5629      cmp     txgoal                   ; Check if done
 96FA [03] 2606      5630      bne     DONE_BYTE                ; Branch if NOT finished to DONE_BYTE
                     5631  
                     5632  FIN_TX:
 96FC [03] 3F8A      5633      clr     txcnt
 96FE [03] 3F8B      5634      clr     txgoal
 9700 [03] 3F8C      5635      clr     txmode
                     5636  
                     5637  DONE_BYTE:
 9702 [02] 8A        5638      pulh
 9703 [07] 80        5639      rti
                     5640  
                     5641  BootLoad:
 9704 [04] 121D      5642      bset     IMASK,INTSCR            ; disable interrupts for IRQ (the ignition i/p)
                     5643  
                     5644  ; that should be enough to stop the engine and then keep it stalled
                     5645  ; I wouldn't recommend updating the flash with a running engine anyway
                     5646  ; stop timers, disable interrupts
                     5647  
 9706 [04] 1A20      5648      bset     TSTOP,T1SC
 9708 [04] 1D20      5649      bclr     TOIE,T1SC
 970A [04] 1A2B      5650      bset     TSTOP,T2SC
 970C [04] 1D2B      5651      bclr     TOIE,T2SC
                     5652  
                     5653  ; switch off inj1
                     5654  
 970E [04] 1803      5655      bset     inject1,portd           ; ^* * * Turn Off Injector #1 (inverted drive)
 9710 [04] 1741      5656      bclr     firing1,squirt
 9712 [04] 1541      5657      bclr     sched1,squirt
 9714 [04] 1141      5658      bclr     inj1,squirt
                     5659  
                     5660  ; switch off inj2
                     5661  
 9716 [04] 1A03      5662      bset     inject2,portd           ; ^* * * Turn Off Injector #2 (inverted drive)
 9718 [04] 1B41      5663      bclr     firing2,squirt
 971A [04] 1941      5664      bclr     sched2,squirt
 971C [04] 1341      5665      bclr     inj2,squirt
 971E [03] 3F42      5666      clr      engine              ; Engine is stalled, clear all in engine settings
 9720 [04] 1100      5667      bclr     fuelp,porta             ; Turn off fuel pump
 9722 [03] 3F72      5668      clr      rpmch
 9724 [03] 3F73      5669      clr      rpmcl
 9726 [03] 3F4E      5670      clr      pw1                        ; zero out pulsewidths
 9728 [03] 3F53      5671      clr      pw2
 972A [03] 3F4D      5672      clr      rpm
                     5673  
                     5674  ; turn spark outputs to inactive to avoid burning out coil. This will
                     5675  ; cause coils to fire, but that in unavoidable. A "non-inverted" output
                     5676  ; charges coil when signal from board is high i.e. the output pin is low.
                     5677  ; So to make inactive set these pins high
                     5678  ; if inverted set low
                     5679  
 972C macro          5680          TurnAllSpkOff                        ; macro to turn off all spark outputs
 972C [04] 1300      5681   BCLR IASC,PORTA  
 972E [04] 1102      5682   BCLR SLED,PORTC  
 9730 [04] 1302      5683   BCLR ALED,PORTC  
 9732 [04] 1103      5684   BCLR OUTPUT3,PORTD  
 9734 [04] 1702      5685   BCLR PIN10,PORTC  
 9736 [04] 1503      5686   BCLR KNOCKIN,PORTD  
 9738 [03] 3FB3      5687   CLR SPARKONLEFTAH  
 973A [03] 3FB4      5688   CLR SPARKONLEFTAL  
 973C [03] 3FB5      5689   CLR SPARKONLEFTBH  
 973E [03] 3FB6      5690   CLR SPARKONLEFTBL  
                     5691  
 9740 [03] CCFB59    5692      jmp      BootReset1
                     5693  
                     5694  MV_V_EMUL:
                     5695  ; we are in Megaview mode. Ideally we'd like to return a B&G
                     5696  ; style view of our data
                     5697  
 9743 [02] A374      5698      cpx     #116T
 9745 [03] 250A      5699      blo     V_MV2
 9747 [01] 9F        5700      txa                                       ; need to return config11,12,13 to get correct map reading
 9748 [02] AB58      5701      add     #88T                     ; B&G byte 116 is at 204 in this code
 974A [01] 97        5702      tax
 974B [04] D6E1B6    5703      lda     config11_f1,x
 974E [03] CC96F1    5704      jmp     CONT_TX
                     5705  
                     5706  V_MV2:
 9751 [01] 4F        5707      clra                             ; for now, return zero.
 9752 [03] CC96F1    5708      jmp      CONT_TX
                     5709  
                     5710  TXMODE_C:
 9755 [03] B618      5711      lda     SCDR                     ; expect 0 to 7 or $F0 or $F1
 9757 [04] C10105    5712      cmp     page                     ; check if already loaded
 975A [03] 2748      5713      beq     DONE_LOAD
 975C [04] 41F02F    5714      cbeqa   #$F0,toothl_F0
 975F [04] 41F130    5715      cbeqa   #$F1,toothl_F1
 9762 [04] 41F224    5716      cbeqa   #$F2,okpage
 9765 [04] 41F321    5717      cbeqa   #$F3,okpage
 9768 [04] 156A      5718      bclr    toothlog,EnhancedBits5  ; ensure tooth logger is off
 976A [04] 176A      5719      bclr    triglog,EnhancedBits5  ; ensure tooth logger is off
 976C [02] A10A      5720      cmp     #10T                     ; only 0-8 used in code at present
 976E [03] 2234      5721      bhi     DONE_LOAD
 9770 [01] 5F        5722      clrx
 9771 [04] C70105    5723      sta     page
 9774 [02] ABE0      5724      add     #$E0                     ; hardcoded high byte of page area $Ex00
 9776 [02] 87        5725      psha
 9777 [02] 8A        5726      pulh
 9778 [04] 1B14      5727      bclr    SCRIE,SCC2               ; turn off receive interrupt so don't re-enter
 977A [02] 9A        5728      cli                                      ; re-enable interrupts to reduce
                     5729                                               ; stumble when MT changes page
                     5730  load_table:
 977B [02] F6        5731      lda     0,x                      ; h:x
 977C [02] 8B        5732      pshh


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 44
MC68HC908GP32 User Bootloader


 977D [01] 8C        5733      clrh
 977E [04] D70112    5734      sta     VE_r,x                   ; dump into RAM. Bit of a kludge, want h=0
 9781 [02] 8A        5735      pulh
 9782 [01] 5C        5736      incx
 9783 [02] A3BE      5737      cpx     #PAGESIZE+1              ; copy 256 bytes reduced to 200 Increased to 212 for 12x12
                     5738                                               ; Back to 200 now for 022+
 9785 [03] 26F4      5739      bne     load_table
 9787 [03] 201B      5740      bra     DONE_LOAD
                     5741  
                     5742  okpage:
 9789 [04] C70105    5743      sta     page
 978C [03] 2016      5744      bra     DONE_LOAD
                     5745  
                     5746  toothl_F0:
 978E [04] 146A      5747      bset    toothlog,EnhancedBits5
 9790 [03] 2002      5748      bra     tooth_log_setup
                     5749  
                     5750  toothl_F1:
 9792 [04] 166A      5751      bset    triglog,EnhancedBits5
                     5752  
                     5753  tooth_log_setup:
 9794 [04] C70105    5754      sta     page
 9797 [04] 1B14      5755      bclr    SCRIE,SCC2
 9799 [01] 4F        5756      clra
 979A [01] 5F        5757      clrx
 979B [01] 8C        5758      clrh
                     5759  
                     5760  clear_table:
 979C [04] D70112    5761      sta     VE_r,x                   ; dump into RAM. Bit of a kludge,
 979F [01] 5C        5762      incx
 97A0 [02] A3BE      5763      cpx     #PAGESIZE+1              ; clear PAGESIZE bytes
 97A2 [03] 26F8      5764      bne     clear_table
                     5765  
                     5766  ; bytes VE_r+0 - VE_r+197 = data, VE_r+198 = counter
                     5767  
                     5768  DONE_LOAD:
 97A4 [04] 1A14      5769      bset    SCRIE,SCC2               ; re-enable receive interrupt
 97A6 [03] 3F8C      5770      clr     txmode
 97A8 [02] 8A        5771      pulh                                 ; (same as DONE_RECV)
 97A9 [07] 80        5772      rti
                     5773  
                     5774  ***************************************************************************
                     5775  **
                     5776  ** Timer 2 overflow, extends hardware timer with an extra byte in software
                     5777  **
                     5778  ***************************************************************************
                     5779  
                     5780  T2overflow:
 97AA [03] B62B      5781      lda     T2SC             ; Read interrupt
 97AC [04] 1F2B      5782      bclr    TOF,T2SC ; Reset interrupt
 97AE [04] 3CAA      5783      inc     T2CNTX          ; increment software byte
 97B0 [04] 1169      5784      bclr    roll1,EnhancedBits4    ; clear the roll-over detect bits
 97B2 [04] 1369      5785      bclr    roll2,EnhancedBits4
 97B4 [07] 80        5786      rti
                     5787  
                     5788  ***************************************************************************
                     5789  **
                     5790  ** Dummy ISR - just performs RTI
                     5791  **
                     5792  ***************************************************************************
                     5793  
                     5794  Dummy:                       ; Dummy vector - there just to keep the assembler happy
 97B5 [07] 80        5795       rti
                     5796  
                     5797  ***************************************************************************
                     5798  **
                     5799  ** Various functions/subroutines Follow
                     5800  **
                     5801  **  - Ordered Table Search
                     5802  **  - Linear Interpolation
                     5803  **  - 32 x 16 divide
                     5804  ***************************************************************************
                     5805  
                     5806  
                     5807  ***************************************************************************
                     5808  **
                     5809  ** Ordered Table Search
                     5810  **
                     5811  **  X is pointing to the start of the first value in the table
                     5812  **  tmp1:2 initially hold the start of table address, then they hold the bound values
                     5813  **  tmp3 is the end of the table (nelements - 1)
                     5814  **  tmp4 is the comparison value
                     5815  **  tmp5 is the index result - if zero then comp value is less than beginning of table, and
                     5816  **    if equal to nelements then it is rail-ed at upper end
                     5817  **
                     5818  ***************************************************************************
                     5819  tablelookup:
 97B6 [03] 3F98      5820      clr     tmp5
 97B8 [04] 5594      5821      ldhx    tmp1
 97BA [02] F6        5822      lda     ,x
 97BB [03] B795      5823      sta     tmp2
                     5824  
                     5825  REENT:
 97BD [01] 5C        5826      incx
 97BE [04] 3C98      5827      inc     tmp5
 97C0 [05] 4E9594    5828      mov     tmp2,tmp1
 97C3 [02] F6        5829      lda     ,x
 97C4 [03] B795      5830      sta     tmp2
 97C6 [03] B197      5831      cmp     tmp4
 97C8 [03] 2206      5832      bhi     GOT_ORD_NUM
 97CA [03] B698      5833      lda     tmp5
 97CC [03] B196      5834      cmp     tmp3
 97CE [03] 26ED      5835      bne     REENT
                     5836  
                     5837  GOT_ORD_NUM:
 97D0 [04] 81        5838      rts
                     5839  
                     5840  ***************************************************************************
                     5841  **
                     5842  ** Linear Interpolation - 2D
                     5843  **
                     5844  **            (y2 - y1)
                     5845  **  Y = Y1 +  --------- * (x - x1)
                     5846  **            (x2 - x1)
                     5847  **
                     5848  **   tmp1 = x1
                     5849  **   tmp2 = x2
                     5850  **   tmp3 = y1
                     5851  **   tmp4 = y2
                     5852  **   tmp5 = x
                     5853  **   tmp6 = y
                     5854  ***************************************************************************
                     5855  LININTERP:
 97D1 [03] 3F9A      5856      clr       tmp7                   ; This is the negative slope detection bit
 97D3 [05] 4E9699    5857      mov     tmp3,tmp6
                     5858  
                     5859  CHECK_LESS_THAN:
 97D6 [03] B698      5860      lda     tmp5
 97D8 [03] B194      5861      cmp     tmp1
 97DA [03] 2202      5862      bhi     CHECK_GREATER_THAN
 97DC [03] 2044      5863      bra     DONE_WITH_INTERP
                     5864  
                     5865  CHECK_GREATER_THAN:
 97DE [03] B698      5866      lda     tmp5
 97E0 [03] B195      5867      cmp     tmp2
 97E2 [03] 2505      5868      blo     DO_INTERP


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 45
MC68HC908GP32 User Bootloader


 97E4 [05] 4E9799    5869      mov     tmp4,tmp6
 97E7 [03] 2039      5870      bra     DONE_WITH_INTERP
                     5871  
                     5872  DO_INTERP:
 97E9 [05] 4E9699    5873      mov     tmp3,tmp6
 97EC [03] B695      5874      lda     tmp2
 97EE [03] B094      5875      sub     tmp1
 97F0 [03] 2730      5876      beq     DONE_WITH_INTERP
 97F2 [02] 87        5877      psha
 97F3 [03] B697      5878      lda     tmp4
 97F5 [03] B096      5879      sub     tmp3
 97F7 [03] 2403      5880       bcc         POSINTERP
 97F9 [01] 40        5881      nega
 97FA [04] 3C9A      5882      inc     tmp7
                     5883  
                     5884  POSINTERP:
 97FC [02] 87        5885      psha
 97FD [03] B698      5886      lda     tmp5
 97FF [03] B094      5887      sub     tmp1
 9801 [03] 271D      5888      beq     ZERO_SLOPE
 9803 [02] 88        5889      pulx
 9804 [05] 42        5890      mul
 9805 [02] 89        5891      pshx
 9806 [02] 8A        5892      pulh
 9807 [02] 88        5893      pulx
 9808 [07] 52        5894      div
 9809 [02] 87        5895      psha
 980A [03] B69A      5896      lda     tmp7
 980C [03] 2607      5897      bne     NEG_SLOPE
 980E [02] 86        5898      pula
 980F [03] BB96      5899      add     tmp3
 9811 [03] B799      5900      sta     tmp6
 9813 [03] 200D      5901      bra     DONE_WITH_INTERP
                     5902  
                     5903  NEG_SLOPE:
 9815 [02] 86        5904      pula
 9816 [03] B79A      5905      sta     tmp7
 9818 [03] B696      5906      lda     tmp3
 981A [03] B09A      5907      sub     tmp7
 981C [03] B799      5908      sta     tmp6
 981E [03] 2002      5909      bra     DONE_WITH_INTERP
                     5910  
                     5911  ZERO_SLOPE:
 9820 [02] 86        5912      pula                             ;clean stack
 9821 [02] 86        5913      pula                             ;clean stack
                     5914  
                     5915  DONE_WITH_INTERP:
 9822 [04] 81        5916      rts
                     5917  
                     5918  
                     5919  ********************************************************************************
                     5920  ** Multiply then divide.
                     5921  ********************************************************************************
                     5922  
                     5923  uMulAndDiv:
                     5924  
                     5925  ********************************************************************************
                     5926  ** 8 x 16 Multiply
                     5927  **
                     5928  ** 8-bit value in Accumulator, 16-bit value in tmp11-12, result overwrites
                     5929  ** 16-bit input.  Assumes result cannot overflow.
                     5930  ********************************************************************************
                     5931  
                     5932  uMul16:
 9823 [02] 87        5933      psha                             ; Save multiplier.
 9824 [03] BE9E      5934      ldx     tmp11            ; LSB of multiplicand.
 9826 [05] 42        5935      mul
 9827 [03] B79E      5936      sta     tmp11            ; LSB of result stored.
 9829 [02] 86        5937      pula                             ; Pop off multiplier.
 982A [02] 89        5938      pshx                             ; Carry on stack.
 982B [03] BE9F      5939      ldx     tmp12            ; MSB of multiplicand.
 982D [05] 42        5940      mul
 982E [04] 9EEB01    5941      add     1,SP             ; Add in carry from LSB.
 9831 [03] B79F      5942      sta     tmp12            ; MSB of result.
 9833 [02] 86        5943      pula                             ; Clear the stack.
                     5944  
                     5945  ********************************************************************************
                     5946  ** 16-bit divide by 100T
                     5947  **
                     5948  ** 16-bit value in tmp11-12 is divided by 100T.  Result is left in tmp11-12.
                     5949  ********************************************************************************
                     5950  
                     5951  uDivBy100:
 9834 [01] 8C        5952      clrh
 9835 [03] B69F      5953      lda     tmp12                    ; MSB of dividend.
 9837 [02] AE64      5954      ldx     #100T                    ; Divisor.
 9839 [07] 52        5955      div
 983A [03] B79F      5956      sta     tmp12                    ; MSB of quotient.
 983C [03] B69E      5957      lda     tmp11                    ; LSB of dividend.
 983E [07] 52        5958      div
 983F [03] B79E      5959      sta     tmp11                    ; LSB of quotient.
                     5960  
                     5961  ; See if we need to round up the quotient.
 9841 [02] 8B        5962      pshh
 9842 [02] 86        5963      pula                             ; Remainder in A.
 9843 [02] A132      5964      cmp     #50T                     ; Half of the divisor.
 9845 [03] 9306      5965      ble     uDivRoundingDone
 9847 [04] 3C9E      5966      inc     tmp11
 9849 [03] 2402      5967      bcc     uDivRoundingDone
 984B [04] 3C9F      5968      inc     tmp12
                     5969  
                     5970  uDivRoundingDone:
 984D [04] 81        5971      rts
                     5972  
                     5973  ********************************************************************************
                     5974  ********************************************************************************
                     5975  *
                     5976  *     32 / 16 Unsigned Divide
                     5977  *
                     5978  *     This routine takes the 32-bit dividend stored in INTACC1.....INTACC1+3
                     5979  *     and divides it by the 16-bit divisor stored in INTACC2:INTACC2+1.
                     5980  *     The quotient replaces the dividend and the remainder replaces the divisor.
                     5981  *
                     5982  *     Re-written a bit by JSM to eliminate stack usage and use tmp vars instead of
                     5983  *     8 bytes of reserved ram
                     5984  
                     5985  UDVD32:
                     5986  *
 984E                5987  DIVIDEND  EQU     INTACC1+2
 984E                5988  DIVISOR   EQU     INTACC2
 984E                5989  QUOTIENT  EQU     INTACC1
 984E                5990  REMAINDER EQU     INTACC1
                     5991  *
                     5992  ; only called twice in code and regs don't need preserving
 984E [02] A620      5993          LDA     #!32                 ;
 9850 [03] B79E      5994          STA     tmp11                        ; loop counter for number of shifts
 9852 [03] B698      5995          LDA     DIVISOR                      ; get divisor msb
 9854 [03] B79C      5996          STA     tmp9                 ; put divisor msb in working storage
 9856 [03] B699      5997          LDA     DIVISOR+1            ; get divisor lsb
 9858 [03] B79D      5998          STA     tmp10                        ; put divisor lsb in working storage
                     5999  *
                     6000  *     Shift all four bytes of dividend 16 bits to the right and clear
                     6001  *     both bytes of the temporary remainder location
                     6002  *
 985A [05] 4E9799    6003          MOV     DIVIDEND+1,DIVIDEND+3        ; shift dividend lsb
 985D [05] 4E9698    6004          MOV     DIVIDEND,DIVIDEND+2  ; shift 2nd byte of dividend


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 46
MC68HC908GP32 User Bootloader


 9860 [05] 4E9597    6005          MOV     DIVIDEND-1,DIVIDEND+1        ; shift 3rd byte of dividend
 9863 [05] 4E9496    6006          MOV     DIVIDEND-2,DIVIDEND  ; shift dividend msb
 9866 [03] 3F94      6007          CLR     REMAINDER            ; zero remainder msb
 9868 [03] 3F95      6008          CLR     REMAINDER+1          ; zero remainder lsb
                     6009  *
                     6010  *     Shift each byte of dividend and remainder one bit to the left
                     6011  *
 986A [03] B694      6012  SHFTLP  LDA     REMAINDER            ; get remainder msb
 986C [01] 49        6013          ROLA                         ; shift remainder msb into carry
 986D [04] 3999      6014          ROL     DIVIDEND+3           ; shift dividend lsb
 986F [04] 3998      6015          ROL     DIVIDEND+2           ; shift 2nd byte of dividend
 9871 [04] 3997      6016          ROL     DIVIDEND+1           ; shift 3rd byte of dividend
 9873 [04] 3996      6017          ROL     DIVIDEND             ; shift dividend msb
 9875 [04] 3995      6018          ROL     REMAINDER+1          ; shift remainder lsb
 9877 [04] 3994      6019          ROL     REMAINDER            ; shift remainder msb
                     6020  *
                     6021  *     Subtract both bytes of the divisor from the remainder
                     6022  *
 9879 [03] B695      6023          LDA     REMAINDER+1          ; get remainder lsb
 987B [03] B09D      6024          SUB     tmp10                        ; subtract divisor lsb from
                     6025                                       ; remainder lsb
 987D [03] B795      6026          STA     REMAINDER+1          ; store new remainder lsb
 987F [03] B694      6027          LDA     REMAINDER            ; get remainder msb
 9881 [03] B29C      6028          SBC     tmp9                 ; subtract divisor msb from
                     6029                                       ; remainder msb
 9883 [03] B794      6030          STA     REMAINDER            ; store new remainder msb
 9885 [03] B699      6031          LDA     DIVIDEND+3           ; get low byte of dividend/quotient
 9887 [02] A200      6032          SBC     #0                   ; dividend low bit holds subtract carry
 9889 [03] B799      6033          STA     DIVIDEND+3           ; store low byte of dividend/quotient
                     6034  *
                     6035  *     Check dividend/quotient lsb. If clear, set lsb of quotient to indicate
                     6036  *     successful subraction, else add both bytes of divisor back to remainder
                     6037  *
 988B [05] 019914    6038          BRCLR   0,DIVIDEND+3,SETLSB  ; check for a carry from subtraction
                     6039                                       ; and add divisor to remainder if set
 988E [03] B695      6040          LDA     REMAINDER+1          ; get remainder lsb
 9890 [03] BB9D      6041          ADD     tmp10                        ; add divisor lsb to remainder lsb
 9892 [03] B795      6042          STA     REMAINDER+1          ; store remainder lsb
 9894 [03] B694      6043          LDA     REMAINDER            ; get remainder msb
 9896 [03] B99C      6044          ADC     tmp9                 ; add divisor msb to remainder msb
 9898 [03] B794      6045          STA     REMAINDER            ; store remainder msb
 989A [03] B699      6046          LDA     DIVIDEND+3           ; get low byte of dividend
 989C [02] A900      6047          ADC     #0                   ; add carry to low bit of dividend
 989E [03] B799      6048          STA     DIVIDEND+3           ; store low byte of dividend
 98A0 [03] 2002      6049          BRA     DECRMT                       ; do next shift and subtract
                     6050  
 98A2 [04] 1099      6051  SETLSB  BSET    0,DIVIDEND+3         ; set lsb of quotient to indicate
                     6052                                       ; successive subtraction
 98A4 [05] 3B9EC3    6053  DECRMT  DBNZ    tmp11,SHFTLP         ; decrement loop counter and do next
                     6054                                       ; shift
                     6055  *
                     6056  *     Move 32-bit dividend into INTACC1.....INTACC1+3 and put 16-bit
                     6057  *     remainder in INTACC2:INTACC2+1
                     6058  *
 98A7 [03] B694      6059          LDA     REMAINDER            ; get remainder msb
 98A9 [03] B79C      6060          STA     tmp9                 ; temporarily store remainder msb
 98AB [03] B695      6061          LDA     REMAINDER+1          ; get remainder lsb
 98AD [03] B79D      6062          STA     tmp10                        ; temporarily store remainder lsb
 98AF [05] 4E9694    6063          MOV     DIVIDEND,QUOTIENT    ;
 98B2 [05] 4E9795    6064          MOV     DIVIDEND+1,QUOTIENT+1        ; shift all four bytes of quotient
 98B5 [05] 4E9896    6065          MOV     DIVIDEND+2,QUOTIENT+2        ; 16 bits to the left
 98B8 [05] 4E9997    6066          MOV     DIVIDEND+3,QUOTIENT+3        ;
 98BB [03] B69C      6067          LDA     tmp9                 ; get final remainder msb
 98BD [03] B798      6068          STA     INTACC2                      ; store final remainder msb
 98BF [03] B69D      6069          LDA     tmp10                        ; get final remainder lsb
 98C1 [03] B799      6070          STA     INTACC2+1            ; store final remainder lsb
                     6071  *
 98C3 [04] 81        6072          RTS                          ; return
                     6073  
 98C4                6074          include "burner8b.asm"
                     6075  ;*****************************************************************************
                     6076  ; Meagasquirt Flash page erase and programming routines
                     6077  ; heavily based on the routines from boot_r12.asm
                     6078  ;
                     6079  ;*****************************************************************************
                     6080  ; JSM - revised timing for 8MHz
                     6081  ; 12 Sep 04. Re-enabled interrupts during programming to avoid missing them
                     6082  ;            when burning lots of data.
                     6083  ; 24 Feb 05, took cli back out again so burner ram can be used within irqs
                     6084  ; 6 Nov 05 (026j7) Changed hardcoded page from $D0 to $E0
                     6085  ;-------------------------------------------------------------------------------
                     6086  ; burnConst: is a PCC compatible FLASH Programming Routine - I think
                     6087  ;-------------------------------------------------------------------------------
                     6088  
                     6089  burnConst:
 98C4 [03] B676      6090          lda       flocker
 98C6 [02] A1CC      6091          cmp       #$CC
 98C8 [03] 2701      6092          beq       BURN_CONT
 98CA [04] 81        6093          rts
                     6094  BURN_CONT:
 98CB [04] C60105    6095          lda     page
 98CE [02] ABE0      6096          add     #$E0                    ; hardcoded start of pages
 98D0 [02] 87        6097          psha
 98D1 [02] 8A        6098          pulh
 98D2 [01] 5F        6099          clrx
 98D3 [04] 3591      6100          sthx    burnDst
 98D5 [05] CD98FB    6101          jsr     ms_EraseFlash           ; Erase the first 128 byte block (disables ints)
                     6102  ;        cli
 98D8 [04] 5591      6103          ldhx    burnDst
 98DA [02] AF40      6104          aix     #64T
 98DC [02] AF40      6105          aix     #64T
 98DE [04] 3591      6106          sthx    burnDst
 98E0 [05] CD98FB    6107          jsr     ms_EraseFlash           ; and the second
                     6108  ;        cli
 98E3 [04] C60105    6109          lda     page
 98E6 [02] ABE0      6110          add     #$E0                    ; hardcoded start of pages
 98E8 [02] 87        6111          psha
 98E9 [02] 8A        6112          pulh
 98EA [01] 5F        6113          clrx
 98EB [04] 3591      6114          sthx    burnDst
 98ED [03] 450112    6115          ldhx    #VE_r
 98F0 [04] 358F      6116          sthx    burnSrc
                     6117  
 98F2 [02] A6C8      6118          lda     #200T                    ; burn 200 bytes (was 256) Now 212, NOW 200 for 022xxxxxx
 98F4 [03] B793      6119          sta     burncount
                     6120  
 98F6 [01] 8C        6121          clrh
 98F7 [01] 5F        6122          clrx
 98F8 [03] CC990A    6123          jmp     ms_ProgramFlash
                     6124  
                     6125  ;-------------------------------------------------------------------------------
                     6126  
                     6127  
                     6128  ;*  Single Flash Page Erase Subroutine  ======================================
                     6129  ;*
                     6130  ; This subroutine will copy the Flash Erase algorithm into RAM and execute
                     6131  ; it to erase the page starting at address pointers "burnDst"
                     6132  ;
                     6133  ms_EraseFlash:
 98FB [03] 450031    6134          ldhx    #ms_EraseRamSize                ; initialize pointer
                     6135  ms_EraseFlash1:
 98FE [04] D69918    6136          lda     ms_MassErase-1,x                ; get program from Flash
 9901 [04] D701EC    6137          sta     ram_exec-1,x                    ; copy into RAM
 9904 [03] 5BF8      6138          dbnzx   ms_EraseFlash1                  ; decrement pointer and loop back until done
 9906 [02] 9B        6139          sei
 9907 [03] CC01ED    6140          jmp     ram_exec                        ; execute Flash Mass Erase algorithm from RAM


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 47
MC68HC908GP32 User Bootloader


                     6141  
                     6142  ;*  Flash Program Subroutine  ================================================
                     6143  ;*
                     6144  ; This subroutine will copy the Flash Program algorithm into RAM and execute it
                     6145  ; to program 'burncount' bytes from the address pointed to by 'burnSrc' to the
                     6146  ; address pointed to by "burnDst"
                     6147  ;
                     6148  ms_ProgramFlash:
 990A [03] 45004A    6149          ldhx    #ms_ProgramRamSize              ; initialize pointer
                     6150  ms_ProgramFlash1:
 990D [04] D6993E    6151          lda     ms_Delay-1,x                    ; get program from Flash
 9910 [04] D701EC    6152          sta     ram_exec-1,x                    ; copy into RAM
 9913 [03] 5BF8      6153          dbnzx   ms_ProgramFlash1                ; decrement pointer and loop back until done
 9915 [02] 9B        6154          sei
 9916 [03] CC01F8    6155          jmp     {ram_exec+ms_ProgramRam}
                     6156  ;
                     6157  ;
                     6158  ;*  Flash Erase Subroutine  ==================================================
                     6159  ;*
                     6160  ;*  This subroutine performs a single Page Erase @ BurnDst
                     6161  ;*  This subroutine has been
                     6162  ;*  tuned for a bus speed of 7.3728 MHz.
                     6163  ;*  constants revised for 8MHz
                     6164  ;*  This subroutine is copied into and executed from RAM.
                     6165  ;*
                     6166  ms_MassErase:
 9919 [04] 5591      6167          ldhx    burnDst            ; initialize pointer to Flash memory address
                     6168  
                     6169  ;   Set ERASE, read the Flash Block Protect Register and write any data into Flash page.
                     6170  ;
 991B [02] A602      6171          lda     #{ERASE}                    ; set ERASE control bit
 991D [04] C7FE08    6172          sta     flcr                        ;  in Flash Control Register
 9920 [04] C6FF7E    6173          lda     flbpr                       ; read from Flash Block Protect Register
 9923 [02] F7        6174          sta     ,x                          ; write any data to address within page
                     6175  ;
                     6176  ;   Wait for >10us, then set HVEN.
                     6177  ;
 9924 [02] A601      6178          lda     #1                          ; wait
 9926 [04] AD17      6179          bsr     ms_delay                       ;  for 11.7us (now 11.1)
 9928 [02] A60A      6180          lda     #{ERASE | HVEN}             ; set HVEN control bit
 992A [04] C7FE08    6181          sta     flcr                        ;  in Flash Control Register
                     6182  ;
                     6183  ;   Wait for >1ms, then clear ERASE.
                     6184  ;
 992D [02] A669      6185          lda     #105T                        ; wait (was 100T)
 992F [04] AD0E      6186          bsr     ms_delay                       ;  for 1.005ms (now 1.012ms)
 9931 [02] A608      6187          lda     #{HVEN}                     ; clear ERASE control bit
 9933 [04] C7FE08    6188          sta     flcr                        ;  in Flash Control Register
                     6189  ;
                     6190  ;   Wait for >5us, then clear HVEN.
                     6191  ;
 9936 [02] A601      6192          lda     #1                          ; wait
 9938 [04] AD05      6193          bsr     ms_delay                       ;  for 11.7us (now 11.1)
 993A [01] 4F        6194          clra                                ; clear HVEN control bit
 993B [04] C7FE08    6195          sta     flcr                        ;  in Flash Control Register
                     6196  
 993E [04] 81        6197          rts                                 ; return
                     6198  
                     6199  
                     6200  ;*  Delay Subroutine  =======================================================================
                     6201  ;*
                     6202  ;*  This subroutine performs a simple software delay loop based upon the value passed in ACC.
                     6203  ;*  The following timing calculation applies:
                     6204  ;*
                     6205  ;*   was supposed to be  delay = ((ACC * 74) + 12) (tcyc)
                     6206  ;*   actually            delay = ((ACC * 108) + 12) (tcyc) i.e. longer/safer? delays
                     6207  ;*   now                 delay = ((ACC * 77) + 12) (tcyc)
                     6208  ;*
                     6209  ;*  Calling convention:
                     6210  ;*
                     6211  ;*      lda     data
                     6212  ;*      jsr     delay
                     6213  ;*
                     6214  ;*  Returns:    nothing
                     6215  ;*
                     6216  ;*  Changes:    ACC
                     6217  ;*
                     6218  ms_Delay:
 993F [02] 87        6219          psha                                ; [2] save outer delay loop parameter
                     6220  ms_Delay1:
 9940 [02] A617      6221          lda     #23T                         ; [2] initialize inner delay loop counter
                     6222  ms_Delay2:
 9942 [03] 4BFE      6223          dbnza   ms_Delay2                      ; [3] decrement inner delay loop counter
 9944 [06] 9E6B01F8  6224          dbnz    1,sp,ms_Delay1                 ; [6] decrement outer delay loop counter
 9948 [02] 86        6225          pula                                ; [2] deallocate local variable
 9949 [04] 81        6226          rts                                 ; [4] return
                     6227  
 994A                6228  ms_EraseRamSize:   equ     {*-ms_MassErase}
 994A                6229  ms_ProgramRam:     equ     {*-ms_Delay}
                     6230  
                     6231  ;*  Flash Program Subroutine  ===============================================================
                     6232  ;*
                     6233  ;*  This subroutine controls the Flash programming sequence.
                     6234  
                     6235  ms_FlashProgram:
                     6236  
                     6237  ms_FlashProgram1:
                     6238  
                     6239  ;   Set PGM, read the Flash Block Protect Register and write anywhere in desired Flash row.
                     6240  ;
 994A [02] A601      6241          lda     #{PGM}                      ; set PGM control bit
 994C [04] C7FE08    6242          sta     flcr                        ;  in Flash Control Register
 994F [04] C6FF7E    6243          lda     flbpr                       ; read from Flash Block Protect Register
 9952 [04] 5591      6244          ldhx    burnDst
 9954 [02] F7        6245          sta     ,x                   ; write any data to first Flash address
                     6246  ;
                     6247  ;   Wait for >10us, then set HVEN.
 9955 [02] A601      6248          lda     #1                          ; wait
 9957 [04] ADE6      6249          bsr     ms_delay                       ;  for 11.7us (11.1)
 9959 [02] A609      6250          lda     #{PGM | HVEN}               ; set HVEN control bit
 995B [04] C7FE08    6251          sta     flcr                        ;  in Flash Control Register
                     6252  ;
                     6253  ;   Wait for >5us.
 995E [02] A601      6254          lda     #1                          ; wait
 9960 [04] ADDD      6255          bsr     ms_delay                       ;  for 11.7us (11.1)
                     6256  ;
                     6257  ;   Write data to Flash and wait for 30 - 40us.
 9962 [04] 558F      6258          ldhx    burnsrc
 9964 [02] F6        6259          lda     ,x                   ; get data byte
 9965 [04] 5591      6260          ldhx    burndst
 9967 [02] F7        6261          sta     ,x                   ; write data to Flash
 9968 [02] A603      6262          lda     #3                          ; wait
 996A [04] ADD3      6263          bsr     ms_delay                       ;  for 31.7us (30.3)
                     6264  ;
                     6265  ;   Clear PGM.
 996C [02] A608      6266          lda     #{HVEN}                     ; clear PGM
 996E [04] C7FE08    6267          sta     flcr                        ;  in Flash Control Register
                     6268  ;
                     6269  ;   Wait for >5us, then clear HVEN.
 9971 [02] A601      6270          lda     #1                          ; wait
 9973 [04] ADCA      6271          bsr     ms_delay                       ;  for 11.7us (11.1)
 9975 [01] 4F        6272          clra                                ; clear HVEN control bit
 9976 [04] C7FE08    6273          sta     flcr                        ;  in Flash Control Register
                     6274  ;
                     6275  ;   Advance destination pointer and decrement data counter.
                     6276  ;


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 48
MC68HC908GP32 User Bootloader


                     6277  ms_FlashProgram2:
 9979 [04] 558F      6278          ldhx    burnsrc
 997B [02] AF01      6279          aix     #1                          ; advance source pointer
 997D [04] 358F      6280          sthx    BurnSrc
 997F [04] 5591      6281          ldhx    burndst
 9981 [02] AF01      6282          aix     #1                          ; advance destination pointer
 9983 [04] 3591      6283          sthx    BurnDst
 9985 [05] 3B93C2    6284          dbnz    burncount,ms_FlashProgram1  ; decrement counter and loop
                     6285                                              ; back if not done.
 9988 [04] 81        6286          rts                                 ; return
                     6287  
 9989                6288  ms_ProgramRamSize: equ     {*-ms_Delay}
                     6289  
                     6290  
                     6291  
                     6292  ***************************************************************************
                     6293  **
                     6294  ** Computation of Normalized Variables
                     6295  **
                     6296  **  The following is the form of the evaluation for the normalized variables:
                     6297  **
                     6298  **  (A rem A * B)
                     6299  **  -------------  = C rem C
                     6300  **      100
                     6301  **
                     6302  **  Where A = Whole part of the percentage,
                     6303  **        rem A = Remainder of A from previous calculation (range 0 to 99)
                     6304  **        B = Percentage multiplied (this always has a zero remainder)
                     6305  **        C = Whole part of result
                     6306  **        rem C = remainder of result
                     6307  **
                     6308  **
                     6309  **  Calculation is preformed by the following method:
                     6310  **
                     6311  **     |(A * B) + (rem A * B)|
                     6312  **     |          -----------|
                     6313  **     |              100    |
                     6314  **     ----------------------- = C rem C
                     6315  **             100
                     6316  **
                     6317  **
                     6318  **   Inputs:  tmp10 = A
                     6319  **            tmp11 = rem A
                     6320  **            tmp12 = B
                     6321  **
                     6322  **   Outputs: tmp10 = C
                     6323  **            tmp11 = rem C
                     6324  **            tmp13 = high order part of (A rem A) * B
                     6325  **            tmp14 = low order part of (A rem A) * B
                     6326  **
                     6327  ***************************************************************************
                     6328  Supernorm:
 9989 [03] B69D      6329       lda     tmp10                       ; A
 998B [01] 97        6330      tax
 998C [03] B69F      6331      lda     tmp12                    ; B
 998E [05] 42        6332      mul
 998F [03] BFA0      6333      stx     tmp13                    ; High order of A * B
 9991 [03] B7A1      6334      sta     tmp14                    ; Low order of A * B
 9993 [03] B69E      6335      lda     tmp11                    ; rem A
 9995 [01] 97        6336      tax
 9996 [03] B69F      6337      lda     tmp12                    ; B
 9998 [05] 42        6338      mul
 9999 [02] 89        6339      pshx
 999A [02] 8A        6340      pulh
 999B [02] AE64      6341      ldx     #$64                     ; 100
 999D [07] 52        6342      div
 999E [03] B9A1      6343      adc     tmp14                    ; Add to lower part
 99A0 [03] B7A1      6344      sta     tmp14                    ; Store back
 99A2 [03] 2402      6345      bcc     Roundrem         ; Branch is no carry occurred
 99A4 [04] 3CA0      6346      inc     tmp13                    ; Increment high-order part because
                     6347                                               ; an overflow occurred in add
                     6348  Roundrem:
 99A6 [02] 8B        6349      pshh
 99A7 [02] 86        6350      pula
 99A8 [02] A132      6351      cmp     #$32                     ; Round if division remainder is greater than 50
 99AA [03] 930A      6352      ble     FinalNorm
 99AC [03] B6A1      6353      lda     tmp14
 99AE [02] A901      6354      adc     #$01
 99B0 [03] B7A1      6355      sta     tmp14
 99B2 [03] 2402      6356      bcc     FinalNorm
 99B4 [04] 3CA0      6357      inc     tmp13
                     6358  
                     6359  FinalNorm:
 99B6 [03] B6A0      6360      lda     tmp13
 99B8 [02] 87        6361      psha
 99B9 [02] 8A        6362      pulh
 99BA [03] B6A1      6363      lda     tmp14
 99BC [02] AE64      6364      ldx     #$64                     ; 100
 99BE [07] 52        6365      div
 99BF [03] 251A      6366      bcs     RailCalc
 99C1 [03] B79D      6367      sta     tmp10
 99C3 [02] 8B        6368      pshh
 99C4 [02] 86        6369      pula
 99C5 [03] B79E      6370      sta     tmp11
 99C7 [02] A132      6371      cmp     #$32                     ; Round if division remainder is greater than 50
 99C9 [03] 9313      6372      ble     ExitSN
 99CB [03] B69E      6373      lda     tmp11
 99CD [02] A901      6374      adc     #$01
 99CF [03] B79E      6375      sta     tmp11
 99D1 [03] 240B      6376      bcc     ExitSN
 99D3 [03] B69D      6377      lda     tmp10
 99D5 [02] AB01      6378      add     #$01
 99D7 [03] B79D      6379      sta     tmp10
 99D9 [03] 2603      6380      bne     ExitSN
                     6381  
                     6382  RailCalc:
 99DB [04] 6EFF9D    6383      mov     #$FF,tmp10               ; Rail value if rollover
                     6384  
                     6385  ExitSN:
 99DE [04] 81        6386      rts
                     6387  
                     6388  ******************************************************************************
                     6389  **    8x8 Target AFR Tables                            P Ringwood          ***
                     6390  **    AFR Table 1 is for VE table 1   AFR Table 2 is for VE table 3        ***
                     6391  ******************************************************************************
                     6392  
                     6393  AFR1_Targets:
 99DF [03] B682      6394      lda     EGOcount         ; Are we about to check the ego?
 99E1 [04] C1E191    6395      cmp     EGOcountcmp_f
 99E4 [03] 2701      6396      beq     Do_Targets               ; If yes then get the target from the table
                     6397  
                     6398  No_AFR_ForVE1:
 99E6 [04] 81        6399      rts                                      ; If No then return, this saves wasting time.
                     6400  
                     6401  Do_Targets:                              ; VE 1 Targets from AFR Table 1
 99E7 [05] 0B650D    6402      brclr   TPSTargetAFR,feature7,NO_TPS_SetAFR1     ; Have we selected
                     6403                                                   ; to go to targets above tps setpoint?
 99EA [03] B647      6404      lda     tps
 99EC [04] C1E079    6405      cmp     AFRTarTPS_f
 99EF [03] 2206      6406      bhi     NO_TPS_SetAFR1           ; If tps higher than setpoint then do tables
 99F1 [04] C6E1BB    6407      lda     O2targetV_f                  ; If not load in target from enrichments page
 99F4 [03] B759      6408      sta     afrTarget
 99F6 [04] 81        6409      rts
                     6410  
                     6411  NO_TPS_SetAFR1:
 99F7 [01] 8C        6412      clrh


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 49
MC68HC908GP32 User Bootloader


 99F8 [01] 5F        6413      clrx
 99F9 [03] B6CB      6414      lda     kpa                 ; Normal Speed density
 99FB [03] 2000      6415      bra     AFR1_STEP_1
                     6416  
                     6417  AFR1_STEP_1:
 99FD [03] B7DB      6418      sta     kpa_n
 99FF [03] 45E648    6419      ldhx    #KPARANGEAFR_f1
 9A02 [04] 3594      6420      sthx    tmp1
 9A04 [02] A607      6421      lda     #$07                     ; 8x8
 9A06 [03] B796      6422      sta     tmp3
 9A08 [03] B6DB      6423      lda     kpa_n
 9A0A [03] B797      6424      sta     tmp4
 9A0C [05] CD97B6    6425      jsr     tableLookup
 9A0F [03] B694      6426      lda     tmp1
 9A11 [03] B695      6427      lda     tmp2
 9A13 [05] 4E989B    6428      mov     tmp5,tmp8                ; Index
 9A16 [05] 4E949C    6429      mov     tmp1,tmp9                ; X1
 9A19 [05] 4E959D    6430      mov     tmp2,tmp10               ; X2
                     6431  
                     6432  AFR1_STEP_2:
 9A1C [03] 45E640    6433      ldhx    #RPMRANGEAFR_f1
 9A1F [04] 3594      6434      sthx    tmp1
 9A21 [04] 6E0796    6435      mov     #$07,tmp3                ; 8x8
 9A24 [05] 4E4D97    6436      mov     rpm,tmp4
 9A27 [05] CD97B6    6437      jsr     tableLookup
 9A2A [05] 4E989E    6438      mov     tmp5,tmp11               ; Index
 9A2D [05] 4E94A0    6439      mov     tmp1,tmp13               ; X1
 9A30 [05] 4E95A1    6440      mov     tmp2,tmp14               ; X2
                     6441  
                     6442  AFR1_STEP_3:
 9A33 [01] 8C        6443      clrh
 9A34 [02] AE08      6444      ldx     #$08                     ; 8x8
 9A36 [03] B69B      6445      lda     tmp8
 9A38 [01] 4A        6446      deca
 9A39 [05] 42        6447      mul
 9A3A [03] BB9E      6448      add     tmp11
 9A3C [01] 4A        6449      deca
 9A3D [01] 97        6450      tax
 9A3E macro          6451      AFR1X
 9A3E [04] C60105    6452   LDA PAGE  
 9A41 [02] A106      6453   CMP #06T  
 9A43 [03] 2605      6454   BNE VE6XF  
 9A45 [04] D60112    6455   LDA VE_R,X  
 9A48 [03] 2003      6456   BRA VE6XC  
                     6457  VE6XF:  
 9A4A [04] D6E600    6458   LDA AFR_F1,X  
                     6459  VE6XC:  
 9A4D [03] B7A2      6460      sta     tmp15
 9A4F [01] 5C        6461      incx
 9A50 macro          6462      AFR1X
 9A50 [04] C60105    6463   LDA PAGE  
 9A53 [02] A106      6464   CMP #06T  
 9A55 [03] 2605      6465   BNE VE6XF  
 9A57 [04] D60112    6466   LDA VE_R,X  
 9A5A [03] 2003      6467   BRA VE6XC  
                     6468  VE6XF:  
 9A5C [04] D6E600    6469   LDA AFR_F1,X  
                     6470  VE6XC:  
 9A5F [03] B7A3      6471      sta     tmp16
 9A61 [02] AE08      6472      ldx     #$08                     ; 8x8
 9A63 [03] B69B      6473      lda     tmp8
 9A65 [05] 42        6474      mul
 9A66 [03] BB9E      6475      add     tmp11
 9A68 [01] 4A        6476      deca
 9A69 [01] 97        6477      tax
 9A6A macro          6478      AFR1X
 9A6A [04] C60105    6479   LDA PAGE  
 9A6D [02] A106      6480   CMP #06T  
 9A6F [03] 2605      6481   BNE VE6XF  
 9A71 [04] D60112    6482   LDA VE_R,X  
 9A74 [03] 2003      6483   BRA VE6XC  
                     6484  VE6XF:  
 9A76 [04] D6E600    6485   LDA AFR_F1,X  
                     6486  VE6XC:  
 9A79 [03] B7A4      6487      sta     tmp17
 9A7B [01] 5C        6488      incx
 9A7C macro          6489      AFR1X
 9A7C [04] C60105    6490   LDA PAGE  
 9A7F [02] A106      6491   CMP #06T  
 9A81 [03] 2605      6492   BNE VE6XF  
 9A83 [04] D60112    6493   LDA VE_R,X  
 9A86 [03] 2003      6494   BRA VE6XC  
                     6495  VE6XF:  
 9A88 [04] D6E600    6496   LDA AFR_F1,X  
                     6497  VE6XC:  
 9A8B [03] B7A5      6498      sta     tmp18
 9A8D [05] CD8B00    6499      jsr     VE_STEP_4
 9A90 [05] 4E9959    6500      mov     tmp6,afrTarget
 9A93 [04] 81        6501      rts
                     6502  
                     6503  ;------------------------------------------------------------------
                     6504  ;    ; Constants not possible to burn
                     6505  
                     6506  ; This is used to set the bin coolant range for WWU
                     6507  
                     6508  WWURANGE:
 9A94      00        6509          db      0T
 9A95      14        6510          db      20T
 9A96      28        6511          db      40T
 9A97      3C        6512          db      60T
 9A98      50        6513          db      80T
 9A99      64        6514          db      100T
 9A9A      78        6515          db      120T
 9A9B      8C        6516          db      140T
 9A9C      AA        6517          db      170T
 9A9D      C8        6518          db      200T
                     6519  
                     6520  
 9A9E      00        6521  REVNUM:          db      00T                 ; not used, always zero
 9A9F      4D53312F  6522  textversion_f:   db   'MS1/Extra rev 029y4 MexACVW3****' ; full code release
           45787472 
           61207265 
           76203032 
           39793420 
           4D657841 
           43565733 
           2A2A2A2A 
 9ABF      4D53312F  6523  Signature:       db   'MS1/Extra format 029y3 *********' ; data format for
           45787472 
           6120666F 
           726D6174 
           20303239 
           7933202A 
           2A2A2A2A 
           2A2A2A2A 
                     6524                   ; ini file matching, ONLY change this if the data format changed.
                     6525  ; must be 32 chars    '12345678901234567890123456789012' ; (may change to 20)
                     6526  rpmdotrate:
 9ADF      03        6527          db      3T                   ; 3,000 rpm delta
 9AE0      04        6528          db      4T                   ; 4,000
 9AE1      06        6529          db      6T                   ; 6,000
 9AE2      0A        6530          db      10T                  ; 10,000
                     6531  sliprate:
 9AE3      05        6532          db      05T                  ; 5% slip from driven wheels
 9AE4      0F        6533          db      15T                  ; 15%
 9AE5      1E        6534          db      30T                  ; 30%


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 50
MC68HC908GP32 User Bootloader


 9AE6      46        6535          db      70T                  ; 70%
                     6536  
                     6537  end_of_main:   ; check this var to ensure it does not exceed $DFFF
                     6538  
                     6539  ;------------------------------------------------------------------
                     6540  
 FAC3                6541          org     $FAC3                        ; start of bootloader-defined
                     6542                                       ; jump table/vector
 FAC3      12        6543          db      $12                  ; scbr regi init value
 FAC4      01        6544          db      %00000001            ; config1
 FAC5      01        6545          db      %00000001            ; config2
 FAC6      8128      6546          dw      start                        ; megasquirt code start
 FAC8      FB00      6547          dw      $FB00                        ; bootloader start
                     6548  
                     6549  ; Vector table
                     6550  ;    org     vec_timebase
                     6551  
 FACA      CC        6552          db      $CC
 FACB      97B5      6553       dw      Dummy                   ; Timebase
 FACD      CC        6554          db      $CC
 FACE      946F      6555       dw      ADCDONE                 ; ADC Conversion Complete
 FAD0      CC        6556          db      $CC
 FAD1      97B5      6557       dw      Dummy                   ; Keyboard pin
 FAD3      CC        6558          db      $CC
 FAD4      9622      6559       dw      IN_SCI_TX               ; SCI transmission complete/
                     6560                                       ; transmitter empty
 FAD6      CC        6561          db      $CC
 FAD7      948B      6562       dw      IN_SCI_RCV              ; SCI input idle/receiver full
 FAD9      CC        6563          db      $CC
 FADA      97B5      6564       dw      Dummy                   ; SCI parity/framing/noise/
                     6565                                       ; receiver_overrun error
 FADC      CC        6566          db      $CC
 FADD      97B5      6567       dw      Dummy                   ; SPI Transmitter empty
 FADF      CC        6568          db      $CC
 FAE0      97B5      6569       dw      Dummy                   ; SPI mode/overflow/receiver full
 FAE2      CC        6570          db      $CC
 FAE3      97AA      6571       dw      T2Overflow              ; TIM2 overflow
 FAE5      CC        6572          db      $CC
 FAE6      8FCE      6573       dw      SPARKTIME               ; TIM2 Ch1
 FAE8      CC        6574          db      $CC
 FAE9      8CC0      6575       dw      TIMERROLL               ; TIM2 Ch 0
 FAEB      CC        6576          db      $CC
 FAEC      97B5      6577       dw      Dummy                   ; TIM1 overflow
 FAEE      CC        6578          db      $CC
 FAEF      97B5      6579       dw      Dummy                   ; TIM1 Ch1
 FAF1      CC        6580          db      $CC
 FAF2      97B5      6581       dw      Dummy                   ; TIM Ch0
 FAF4      CC        6582          db      $CC
 FAF5      97B5      6583       dw      Dummy                   ; CGM
 FAF7      CC        6584          db      $CC
 FAF8      904B      6585       dw      DOSQUIRT                ; IRQ
 FAFA      CC        6586          db      $CC
 FAFB      97B5      6587       dw      Dummy                   ; SWI
 FAFD      CC        6588          db      $CC
 FAFE      8128      6589       dw      Start
                     6590  
                     6591  
                     6592  ;------------------------------------------------------------------
                     6593  ; Lookup Tables
 F000                6594          org     $F000
                     6595  
 F000                6596          include "barofactor4250.inc"
                     6597  BAROFAC4250: ;% correction
 F000      64        6598          DB      100T     ; x=000;=0.000v;=100KPA;=sensor failure
 F001      8E        6599          DB      142T     ; x=001;=0.020v;=11KPA
 F002      8E        6600          DB      142T     ; x=002;=0.039v;=12KPA
 F003      8E        6601          DB      142T     ; x=003;=0.059v;=13KPA
 F004      8D        6602          DB      141T     ; x=004;=0.078v;=14KPA
 F005      8D        6603          DB      141T     ; x=005;=0.098v;=15KPA
 F006      8C        6604          DB      140T     ; x=006;=0.118v;=16KPA
 F007      8C        6605          DB      140T     ; x=007;=0.137v;=17KPA
 F008      8B        6606          DB      139T     ; x=008;=0.157v;=18KPA
 F009      8B        6607          DB      139T     ; x=009;=0.176v;=19KPA
 F00A      8A        6608          DB      138T     ; x=010;=0.196v;=20KPA
 F00B      8A        6609          DB      138T     ; x=011;=0.216v;=21KPA
 F00C      89        6610          DB      137T     ; x=012;=0.235v;=22KPA
 F00D      89        6611          DB      137T     ; x=013;=0.255v;=23KPA
 F00E      88        6612          DB      136T     ; x=014;=0.275v;=24KPA
 F00F      88        6613          DB      136T     ; x=015;=0.294v;=25KPA
 F010      88        6614          DB      136T     ; x=016;=0.314v;=26KPA
 F011      87        6615          DB      135T     ; x=017;=0.333v;=27KPA
 F012      87        6616          DB      135T     ; x=018;=0.353v;=28KPA
 F013      86        6617          DB      134T     ; x=019;=0.373v;=29KPA
 F014      86        6618          DB      134T     ; x=020;=0.392v;=30KPA
 F015      85        6619          DB      133T     ; x=021;=0.412v;=31KPA
 F016      85        6620          DB      133T     ; x=022;=0.431v;=32KPA
 F017      84        6621          DB      132T     ; x=023;=0.451v;=33KPA
 F018      84        6622          DB      132T     ; x=024;=0.471v;=34KPA
 F019      83        6623          DB      131T     ; x=025;=0.490v;=35KPA
 F01A      83        6624          DB      131T     ; x=026;=0.510v;=35KPA
 F01B      82        6625          DB      130T     ; x=027;=0.529v;=36KPA
 F01C      82        6626          DB      130T     ; x=028;=0.549v;=37KPA
 F01D      82        6627          DB      130T     ; x=029;=0.569v;=38KPA
 F01E      81        6628          DB      129T     ; x=030;=0.588v;=39KPA
 F01F      81        6629          DB      129T     ; x=031;=0.608v;=40KPA
 F020      80        6630          DB      128T     ; x=032;=0.627v;=41KPA
 F021      80        6631          DB      128T     ; x=033;=0.647v;=42KPA
 F022      7F        6632          DB      127T     ; x=034;=0.667v;=43KPA
 F023      7F        6633          DB      127T     ; x=035;=0.686v;=44KPA
 F024      7E        6634          DB      126T     ; x=036;=0.706v;=45KPA
 F025      7E        6635          DB      126T     ; x=037;=0.725v;=46KPA
 F026      7D        6636          DB      125T     ; x=038;=0.745v;=47KPA
 F027      7D        6637          DB      125T     ; x=039;=0.765v;=48KPA
 F028      7C        6638          DB      124T     ; x=040;=0.784v;=49KPA
 F029      7C        6639          DB      124T     ; x=041;=0.804v;=50KPA
 F02A      7C        6640          DB      124T     ; x=042;=0.824v;=51KPA
 F02B      7B        6641          DB      123T     ; x=043;=0.843v;=52KPA
 F02C      7B        6642          DB      123T     ; x=044;=0.863v;=53KPA
 F02D      7A        6643          DB      122T     ; x=045;=0.882v;=54KPA
 F02E      7A        6644          DB      122T     ; x=046;=0.902v;=55KPA
 F02F      79        6645          DB      121T     ; x=047;=0.922v;=56KPA
 F030      79        6646          DB      121T     ; x=048;=0.941v;=57KPA
 F031      78        6647          DB      120T     ; x=049;=0.961v;=58KPA
 F032      78        6648          DB      120T     ; x=050;=0.980v;=59KPA
 F033      77        6649          DB      119T     ; x=051;=1.000v;=60KPA
 F034      77        6650          DB      119T     ; x=052;=1.020v;=61KPA
 F035      76        6651          DB      118T     ; x=053;=1.039v;=62KPA
 F036      76        6652          DB      118T     ; x=054;=1.059v;=63KPA
 F037      76        6653          DB      118T     ; x=055;=1.078v;=64KPA
 F038      75        6654          DB      117T     ; x=056;=1.096v;=65KPA
 F039      75        6655          DB      117T     ; x=057;=1.118v;=66KPA
 F03A      74        6656          DB      116T     ; x=058;=1.137v;=67KPA
 F03B      74        6657          DB      116T     ; x=059;=1.157v;=68KPA
 F03C      73        6658          DB      115T     ; x=060;=1.176v;=69KPA
 F03D      73        6659          DB      115T     ; x=061;=1,196v;=70KPA
 F03E      72        6660          DB      114T     ; x=062;=1,216v;=71KPA
 F03F      72        6661          DB      114T     ; x=063;=1.235v;=72KPA
 F040      71        6662          DB      113T     ; x=064;=1.255v;=73KPA
 F041      71        6663          DB      113T     ; x=065;=1.275v;=74KPA
 F042      70        6664          DB      112T     ; x=066;=1.294v;=75KPA
 F043      70        6665          DB      112T     ; x=067;=1.314v;=76KPA
 F044      70        6666          DB      112T     ; x=068;=1.333v;=77KPA
 F045      6F        6667          DB      111T     ; x=069;=1.353v;=78KPA
 F046      6F        6668          DB      111T     ; x=070;=1.373v;=79KPA
 F047      6E        6669          DB      110T     ; x=071;=1.392v;=80KPA
 F048      6E        6670          DB      110T     ; x=072;=1.412v;=81KPA


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 51
MC68HC908GP32 User Bootloader


 F049      6D        6671          DB      109T     ; x=073;=1.431v;=82KPA
 F04A      6D        6672          DB      109T     ; x=074;=1.451v;=83KPA
 F04B      6C        6673          DB      108T     ; x=075;=1.471v;=84KPA
 F04C      6C        6674          DB      108T     ; x=076;=1.490v;=85KPA
 F04D      6B        6675          DB      107T     ; x=077;=1.510v;=85KPA
 F04E      6B        6676          DB      107T     ; x=078;=1.529v;=86KPA
 F04F      6A        6677          DB      106T     ; x=079;=1.549v;=87KPA
 F050      6A        6678          DB      106T     ; x=080;=1.569v;=88KPA
 F051      6A        6679          DB      106T     ; x=081;=1.588v;=89KPA
 F052      69        6680          DB      105T     ; x=082;=1.608v;=90KPA
 F053      69        6681          DB      105T     ; x=083;=1.627v;=91KPA
 F054      68        6682          DB      104T     ; x=084;=1.647v;=92KPA
 F055      68        6683          DB      104T     ; x=085;=1.667v;=93KPA
 F056      67        6684          DB      103T     ; x=086;=1.686v;=94KPA
 F057      67        6685          DB      103T     ; x=087;=1.706v;=95KPA
 F058      66        6686          DB      102T     ; x=088;=1.725v;=96KPA
 F059      66        6687          DB      102T     ; x=089;=1.745v;=97KPA
 F05A      65        6688          DB      101T     ; x=090;=1.765v;=98KPA
 F05B      65        6689          DB      101T     ; x=091;=1.784v;=99KPA
 F05C      64        6690          DB      100T     ; x=092;=1.804v;=100KPA
 F05D      64        6691          DB      100T     ; x=093;=1.824v;=101KPA
 F05E      64        6692          DB      100T     ; x=094;=1.843v;=102KPA
 F05F      63        6693          DB      99T      ; x=095;=1.863v;=103KPA
 F060      63        6694          DB      99T      ; x=096;=1.882v;=104KPA
 F061      62        6695          DB      98T      ; x=097;=1.902v;=105KPA
 F062      62        6696          DB      98T      ; x=098;=1.922v;=106KPA
 F063      61        6697          DB      97T      ; x=099;=1.941v;=107KPA
 F064      61        6698          DB      97T      ; x=100;=1.961v;=108KPA
 F065      60        6699          DB      96T      ; x=101;=1.980v;=109KPA
 F066      60        6700          DB      96T      ; x=102;=2.000v;=110KPA
 F067      5F        6701          DB      95T      ; x=103;=2.020v;=111KPA
 F068      5F        6702          DB      95T      ; x=104;=2.039v;=112KPA
 F069      5E        6703          DB      94T      ; x=105;=2.059v;=113KPA
 F06A      5E        6704          DB      94T      ; x=106;=2.078v;=114KPA
 F06B      5E        6705          DB      94T      ; x=107;=2.098v;=115KPA
 F06C      5D        6706          DB      93T      ; x=108;=2.118v;=116KPA
 F06D      5D        6707          DB      93T      ; x=109;=2.137v;=117KPA
 F06E      5C        6708          DB      92T      ; x=110;=2.157v;=118KPA
 F06F      5C        6709          DB      92T      ; x=111;=2.176v;=119KPA
 F070      5B        6710          DB      91T      ; x=112;=2.196v;=120KPA
 F071      5B        6711          DB      91T      ; x=113;=2.216v;=121KPA
 F072      5A        6712          DB      90T      ; x=114;=2.235v;=122KPA
 F073      5A        6713          DB      90T      ; x=115;=2.255v;=123KPA
 F074      59        6714          DB      89T      ; x=116;=2.275v;=124KPA
 F075      59        6715          DB      89T      ; x=117;=2.294v;=125KPA
 F076      58        6716          DB      88T      ; x=118;=2.314v;=126KPA
 F077      58        6717          DB      88T      ; x=119;=2.333v;=127KPA
 F078      58        6718          DB      88T      ; x=120;=2.353v;=128KPA
 F079      57        6719          DB      87T      ; x=121;=2.373v;=129KPA
 F07A      57        6720          DB      87T      ; x=122;=2.392v;=130KPA
 F07B      56        6721          DB      86T      ; x=123;=2.412v;=131KPA
 F07C      56        6722          DB      86T      ; x=124;=2.431v;=132KPA
 F07D      55        6723          DB      85T      ; x=125;=2.451v;=133KPA
 F07E      55        6724          DB      85T      ; x=126;=2.471v;=134KPA
 F07F      54        6725          DB      84T      ; x=127;=2.490v;=135KPA
 F080      54        6726          DB      84T      ; x=128;=2.510v;=135KPA
 F081      53        6727          DB      83T      ; x=129;=2.529v;=136KPA
 F082      53        6728          DB      83T      ; x=130;=2.549v;=137KPA
 F083      52        6729          DB      82T      ; x=131;=2.569v;=138KPA
 F084      52        6730          DB      82T      ; x=132;=2.588v;=139KPA
 F085      52        6731          DB      82T      ; x=133;=2.608v;=140KPA
 F086      51        6732          DB      81T      ; x=134;=2.627v;=141KPA
 F087      51        6733          DB      81T      ; x=135;=2.647v;=142KPA
 F088      50        6734          DB      80T      ; x=136;=2.667v;=143KPA
 F089      50        6735          DB      80T      ; x=137;=2.686v;=144KPA
 F08A      4F        6736          DB      79T      ; x=138;=2.706v;=145KPA
 F08B      4F        6737          DB      79T      ; x=139;=2.725v;=146KPA
 F08C      4E        6738          DB      78T      ; x=140;=2.745v;=147KPA
 F08D      4E        6739          DB      78T      ; x=141;=2.765v;=148KPA
 F08E      4D        6740          DB      77T      ; x=142;=2.784v;=149KPA
 F08F      4D        6741          DB      77T      ; x=143;=2.804v;=150KPA
 F090      4C        6742          DB      76T      ; x=144;=0.824v;=151KPA
 F091      4C        6743          DB      76T      ; x=145;=2.843v;=152KPA
 F092      4C        6744          DB      76T      ; x=146;=2.863v;=153KPA
 F093      4B        6745          DB      75T      ; x=147;=2.882v;=154KPA
 F094      4B        6746          DB      75T      ; x=148;=2.902v;=155KPA
 F095      4A        6747          DB      74T      ; x=149;=2.922v;=156KPA
 F096      4A        6748          DB      74T      ; x=150;=2.941v;=157KPA
 F097      49        6749          DB      73T      ; x=151;=2.961v;=158KPA
 F098      49        6750          DB      73T      ; x=152;=2.980v;=159KPA
 F099      48        6751          DB      72T      ; x=153;=3.000v;=160KPA
 F09A      48        6752          DB      72T      ; x=154;=3.020v;=161KPA
 F09B      47        6753          DB      71T      ; x=155;=3.039v;=162KPA
 F09C      47        6754          DB      71T      ; x=156;=3.059v;=163KPA
 F09D      46        6755          DB      70T      ; x=157;=3.078v;=164KPA
 F09E      46        6756          DB      70T      ; x=158;=3.098v;=165KPA
 F09F      46        6757          DB      70T      ; x=159;=3.118v;=166KPA
 F0A0      45        6758          DB      69T      ; x=160;=3.137v;=167KPA
 F0A1      45        6759          DB      69T      ; x=161;=3.157v;=168KPA
 F0A2      44        6760          DB      68T      ; x=162;=3.176v;=169KPA
 F0A3      44        6761          DB      68T      ; x=163;=3.196v;=170KPA
 F0A4      43        6762          DB      67T      ; x=164;=3.216v;=171KPA
 F0A5      43        6763          DB      67T      ; x=165;=3.235v;=172KPA
 F0A6      42        6764          DB      66T      ; x=166;=3.255v;=173KPA
 F0A7      42        6765          DB      66T      ; x=167;=3.275v;=174KPA
 F0A8      41        6766          DB      65T      ; x=168;=3.294v;=175KPA
 F0A9      41        6767          DB      65T      ; x=169;=3.314v;=176KPA
 F0AA      40        6768          DB      64T      ; x=170;=3.333v;=177KPA
 F0AB      40        6769          DB      64T      ; x=171;=3.353v;=178KPA
 F0AC      40        6770          DB      64T      ; x=172;=3.373v;=179KPA
 F0AD      3F        6771          DB      63T      ; x=173;=3.392v;=180KPA
 F0AE      3F        6772          DB      63T      ; x=174;=3.412v;=181KPA
 F0AF      3E        6773          DB      62T      ; x=175;=3.431v;=1823KPA
 F0B0      3E        6774          DB      62T      ; x=176;=3.451v;=183KPA
 F0B1      3D        6775          DB      61T      ; x=177;=3.471v;=184KPA
 F0B2      3D        6776          DB      61T      ; x=178;=3.490v;=185KPA
 F0B3      3C        6777          DB      60T      ; x=179;=3.510v;=185KPA
 F0B4      3C        6778          DB      60T      ; x=180;=3.529v;=186KPA
 F0B5      3B        6779          DB      59T      ; x=181;=3.549v;=187KPa
 F0B6      3B        6780          DB      59T      ; x=182;=3.569v;=188KPA
 F0B7      3A        6781          DB      58T      ; x=183;=3.588v;=189KPA
 F0B8      3A        6782          DB      58T      ; x=184;=3.608v;=190KPA
 F0B9      3A        6783          DB      58T      ; x=185;=3.627v;=191KPA
 F0BA      39        6784          DB      57T      ; x=186;=3.647v;=192KPA
 F0BB      39        6785          DB      57T      ; x=187;=3.667v;=193KPA
 F0BC      38        6786          DB      56T      ; x=188;=3.686v;=194KPA
 F0BD      38        6787          DB      56T      ; x=189;=3.706v;=195KPA
 F0BE      37        6788          DB      55T      ; x=190;=3.725v;=196KPA
 F0BF      37        6789          DB      55T      ; x=191;=3.745v;=197KPA
 F0C0      36        6790          DB      54T      ; x=192;=3.765v;=198KPA
 F0C1      36        6791          DB      54T      ; x=193;=3.784v;=199KPA
 F0C2      35        6792          DB      53T      ; x=194;=3.804v;=200KPA
 F0C3      35        6793          DB      53T      ; x=195;=3.824v;=201KPA
 F0C4      34        6794          DB      52T      ; x=196;=3.843v;=202KPA
 F0C5      34        6795          DB      52T      ; x=197;=3.863v;=203KPA
 F0C6      34        6796          DB      52T      ; x=198;=3.882v;=204KPA
 F0C7      33        6797          DB      51T      ; x=199;=3.902v;=205KPA
 F0C8      33        6798          DB      51T      ; x=200;=3.922v;=206KPA
 F0C9      32        6799          DB      50T      ; x=201;=3.941v;=207KPA
 F0CA      32        6800          DB      50T      ; x=202;=3.961v;=208KPA
 F0CB      31        6801          DB      49T      ; x=203;=3.980v;=209KPA
 F0CC      31        6802          DB      49T      ; x=204;=4.000v;=210KPA
 F0CD      30        6803          DB      48T      ; x=205;=4.020v;=211KPA
 F0CE      30        6804          DB      48T      ; x=206;=4.039v;=212KPA
 F0CF      2F        6805          DB      47T      ; x=207;=4.059v;=213KPA
 F0D0      2F        6806          DB      47T      ; x=208;=4.078v;=214KPA


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 52
MC68HC908GP32 User Bootloader


 F0D1      2E        6807          DB      46T      ; x=209;=4.098v;=215KPA
 F0D2      2E        6808          DB      46T      ; x=210;=4.118v;=216KPA
 F0D3      2E        6809          DB      46T      ; x=211;=4.137v;=217KPA
 F0D4      2D        6810          DB      45T      ; x=212;=4.157v;=218KPA
 F0D5      2D        6811          DB      45T      ; x=213;=4.176v;=219KPA
 F0D6      2C        6812          DB      44T      ; x=214;=4.196v;=220KPA
 F0D7      2C        6813          DB      44T      ; x=215;=4.216v;=221KPA
 F0D8      2B        6814          DB      43T      ; x=216;=4.235v;=222KPA
 F0D9      2B        6815          DB      43T      ; x=217;=4.255v;=223KPA
 F0DA      2A        6816          DB      42T      ; x=218;=4.275v;=224KPA
 F0DB      2A        6817          DB      42T      ; x=219;=4.294v;=225KPA
 F0DC      29        6818          DB      41T      ; x=220;=4.314v;=226KPA
 F0DD      29        6819          DB      41T      ; x=221;=4.333v;=227KPA
 F0DE      28        6820          DB      40T      ; x=222;=4.353v;=228KPA
 F0DF      28        6821          DB      40T      ; x=223;=4.373v;=229KPA
 F0E0      28        6822          DB      40T      ; x=224;=4.392v;=230KPA
 F0E1      27        6823          DB      39T      ; x=225;=4.412v;=231KPA
 F0E2      27        6824          DB      39T      ; x=226;=4.431v;=232KPA
 F0E3      26        6825          DB      38T      ; x=227;=4.451v;=233KPA
 F0E4      26        6826          DB      38T      ; x=228;=4.471v;=234KPA
 F0E5      25        6827          DB      37T      ; x=229;=4.490v;=235KPA
 F0E6      25        6828          DB      37T      ; x=230;=4.510v;=235KPA
 F0E7      24        6829          DB      36T      ; x=231;=4.529v;=236KPA
 F0E8      24        6830          DB      36T      ; x=232;=4.549v;=237KPA
 F0E9      23        6831          DB      35T      ; x=233;=4.569v;=238KPA
 F0EA      23        6832          DB      35T      ; x=234;=4.588v;=239KPA
 F0EB      22        6833          DB      34T      ; x=235;=4.608v;=240KPA
 F0EC      22        6834          DB      34T      ; x=236;=4.627v;=241KPA
 F0ED      22        6835          DB      34T      ; x=237;=4.647v;=242KPA
 F0EE      21        6836          DB      33T      ; x=238;=4.667v;=243KPA
 F0EF      21        6837          DB      33T      ; x=239;=4.686v;=244KPA
 F0F0      20        6838          DB      32T      ; x=240;=4.706v;=245KPA
 F0F1      20        6839          DB      32T      ; x=241;=4.725v;=246KPA
 F0F2      1F        6840          DB      31T      ; x=242;=4.745v;=247KPA
 F0F3      1F        6841          DB      31T      ; x=243;=4.765v;=248KPA
 F0F4      1E        6842          DB      30T      ; x=244;=4.784v;=249KPA
 F0F5      1E        6843          DB      30T      ; x=245;=4.804v;=250KPA
 F0F6      1D        6844          DB      29T      ; x=246;=4.824v;=251KPA
 F0F7      1D        6845          DB      29T      ; x=247;=4.843v;=252KPA
 F0F8      1C        6846          DB      28T      ; x=248;=4.863v;=253KPA
 F0F9      1C        6847          DB      28T      ; x=249;=4.882v;=254KPA
 F0FA      1C        6848          DB      28T      ; x=250;=4.902v;=255KPA
 F0FB      1B        6849          DB      27T      ; x=251;=4.922v;=256KPA
 F0FC      1B        6850          DB      27T      ; x=252;=4.941v;=257KPA
 F0FD      1A        6851          DB      26T      ; x=253;=4.961v;=258KPA
 F0FE      1A        6852          DB      26T      ; x=254;=4.980v;=259KPA
 F0FF      64        6853          DB      100T     ; x=255;=5.000v;=100KPA;=sensor fail
 F100                6854          include "kpafactor4250.inc"
                     6855  KPAFACTOR4250:
 F100      64        6856          DB      100T     ; x=000;=0.000v;sensor failure
 F101      0B        6857          DB      11T      ; x=001;=0.020v
 F102      0C        6858          DB      12T      ; x=002;=0.039v
 F103      0D        6859          DB      13T      ; x=003;=0.059v
 F104      0E        6860          DB      14T      ; x=004;=0.078v
 F105      0F        6861          DB      15T      ; x=005;=0.098v
 F106      10        6862          DB      16T      ; x=006;=0.118v
 F107      11        6863          DB      17T      ; x=007;=0.137v
 F108      12        6864          DB      18T      ; x=008;=0.157v
 F109      13        6865          DB      19T      ; x=009;=0.176v
 F10A      14        6866          DB      20T      ; x=010;=0.196v
 F10B      15        6867          DB      21T      ; x=011;=0.216v
 F10C      16        6868          DB      22T      ; x=012;=0.235v
 F10D      17        6869          DB      23T      ; x=013;=0.255v
 F10E      18        6870          DB      24T      ; x=014;=0.275v
 F10F      19        6871          DB      25T      ; x=015;=0.294v
 F110      1A        6872          DB      26T      ; x=016;=0.314v
 F111      1B        6873          DB      27T      ; x=017;=0.333v
 F112      1C        6874          DB      28T      ; x=018;=0.353v
 F113      1D        6875          DB      29T      ; x=019;=0.373v
 F114      1E        6876          DB      30T      ; x=020;=0.392v
 F115      1F        6877          DB      31T      ; x=021;=0.412v
 F116      20        6878          DB      32T      ; x=022;=0.431v
 F117      21        6879          DB      33T      ; x=023;=0.451v
 F118      22        6880          DB      34T      ; x=024;=0.471v
 F119      23        6881          DB      35T      ; x=025;=0.490v
 F11A      23        6882          DB      35T      ; x=026;=0.510v
 F11B      24        6883          DB      36T      ; x=027;=0.529v
 F11C      25        6884          DB      37T      ; x=028;=0.549v
 F11D      26        6885          DB      38T      ; x=029;=0.569v
 F11E      27        6886          DB      39T      ; x=030;=0.588v
 F11F      28        6887          DB      40T      ; x=031;=0.608v
 F120      29        6888          DB      41T      ; x=032;=0.627v
 F121      2A        6889          DB      42T      ; x=033;=0.647v
 F122      2B        6890          DB      43T      ; x=034;=0.667v
 F123      2C        6891          DB      44T      ; x=035;=0.686v
 F124      2D        6892          DB      45T      ; x=036;=0.706v
 F125      2E        6893          DB      46T      ; x=037;=0.725v
 F126      2F        6894          DB      47T      ; x=038;=0.745v
 F127      30        6895          DB      48T      ; x=039;=0.765v
 F128      31        6896          DB      49T      ; x=040;=0.784v
 F129      32        6897          DB      50T      ; x=041;=0.804v
 F12A      33        6898          DB      51T      ; x=042;=0.824v
 F12B      34        6899          DB      52T      ; x=043;=0.843v
 F12C      35        6900          DB      53T      ; x=044;=0.863v
 F12D      36        6901          DB      54T      ; x=045;=0.882v
 F12E      37        6902          DB      55T      ; x=046;=0.902v
 F12F      38        6903          DB      56T      ; x=047;=0.922v
 F130      39        6904          DB      57T      ; x=048;=0.941v
 F131      3A        6905          DB      58T      ; x=049;=0.961v
 F132      3B        6906          DB      59T      ; x=050;=0.980v
 F133      3C        6907          DB      60T      ; x=051;=1.000v
 F134      3D        6908          DB      61T      ; x=052;=1.020v
 F135      3E        6909          DB      62T      ; x=053;=1.039v
 F136      3F        6910          DB      63T      ; x=054;=1.059v
 F137      40        6911          DB      64T      ; x=055;=1.078v
 F138      41        6912          DB      65T      ; x=056;=1.096v
 F139      42        6913          DB      66T      ; x=057;=1.118v
 F13A      43        6914          DB      67T      ; x=058;=1.137v
 F13B      44        6915          DB      68T      ; x=059;=1.157v
 F13C      45        6916          DB      69T      ; x=060;=1.176v
 F13D      46        6917          DB      70T      ; x=061;=1,196v
 F13E      47        6918          DB      71T      ; x=062;=1,216v
 F13F      48        6919          DB      72T      ; x=063;=1.235v
 F140      49        6920          DB      73T      ; x=064;=1.255v
 F141      4A        6921          DB      74T      ; x=065;=1.275v
 F142      4B        6922          DB      75T      ; x=066;=1.294v
 F143      4C        6923          DB      76T      ; x=067;=1.314v
 F144      4D        6924          DB      77T      ; x=068;=1.333v
 F145      4E        6925          DB      78T      ; x=069;=1.353v
 F146      4F        6926          DB      79T      ; x=070;=1.373v
 F147      50        6927          DB      80T      ; x=071;=1.392v
 F148      51        6928          DB      81T      ; x=072;=1.412v
 F149      52        6929          DB      82T      ; x=073;=1.431v
 F14A      53        6930          DB      83T      ; x=074;=1.451v
 F14B      54        6931          DB      84T      ; x=075;=1.471v
 F14C      55        6932          DB      85T      ; x=076;=1.490v
 F14D      55        6933          DB      85T      ; x=077;=1.510v
 F14E      56        6934          DB      86T      ; x=078;=1.529v
 F14F      57        6935          DB      87T      ; x=079;=1.549v
 F150      58        6936          DB      88T      ; x=080;=1.569v
 F151      59        6937          DB      89T      ; x=081;=1.588v
 F152      5A        6938          DB      90T      ; x=082;=1.608v
 F153      5B        6939          DB      91T      ; x=083;=1.627v
 F154      5C        6940          DB      92T      ; x=084;=1.647v
 F155      5D        6941          DB      93T      ; x=085;=1.667v
 F156      5E        6942          DB      94T      ; x=086;=1.686v


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 53
MC68HC908GP32 User Bootloader


 F157      5F        6943          DB      95T      ; x=087;=1.706v
 F158      60        6944          DB      96T      ; x=088;=1.725v
 F159      61        6945          DB      97T      ; x=089;=1.745v
 F15A      62        6946          DB      98T      ; x=090;=1.765v
 F15B      63        6947          DB      99T      ; x=091;=1.784v
 F15C      64        6948          DB      100T     ; x=092;=1.804v
 F15D      65        6949          DB      101T     ; x=093;=1.824v
 F15E      66        6950          DB      102T     ; x=094;=1.843v
 F15F      67        6951          DB      103T     ; x=095;=1.863v
 F160      68        6952          DB      104T     ; x=096;=1.882v
 F161      69        6953          DB      105T     ; x=097;=1.902v
 F162      6A        6954          DB      106T     ; x=098;=1.922v
 F163      6B        6955          DB      107T     ; x=099;=1.941v
 F164      6C        6956          DB      108T     ; x=100;=1.961v
 F165      6D        6957          DB      109T     ; x=101;=1.980v
 F166      6E        6958          DB      110T     ; x=102;=2.000v
 F167      6F        6959          DB      111T     ; x=103;=2.020v
 F168      70        6960          DB      112T     ; x=104;=2.039v
 F169      71        6961          DB      113T     ; x=105;=2.059v
 F16A      72        6962          DB      114T     ; x=106;=2.078v
 F16B      73        6963          DB      115T     ; x=107;=2.098v
 F16C      74        6964          DB      116T     ; x=108;=2.118v
 F16D      75        6965          DB      117T     ; x=109;=2.137v
 F16E      76        6966          DB      118T     ; x=110;=2.157v
 F16F      77        6967          DB      119T     ; x=111;=2.176v
 F170      78        6968          DB      120T     ; x=112;=2.196v
 F171      79        6969          DB      121T     ; x=113;=2.216v
 F172      7A        6970          DB      122T     ; x=114;=2.235v
 F173      7B        6971          DB      123T     ; x=115;=2.255v
 F174      7C        6972          DB      124T     ; x=116;=2.275v
 F175      7D        6973          DB      125T     ; x=117;=2.294v
 F176      7E        6974          DB      126T     ; x=118;=2.314v
 F177      7F        6975          DB      127T     ; x=119;=2.333v
 F178      80        6976          DB      128T     ; x=120;=2.353v
 F179      81        6977          DB      129T     ; x=121;=2.373v
 F17A      82        6978          DB      130T     ; x=122;=2.392v
 F17B      83        6979          DB      131T     ; x=123;=2.412v
 F17C      84        6980          DB      132T     ; x=124;=2.431v
 F17D      85        6981          DB      133T     ; x=125;=2.451v
 F17E      86        6982          DB      134T     ; x=126;=2.471v
 F17F      87        6983          DB      135T     ; x=127;=2.490v
 F180      87        6984          DB      135T     ; x=128;=2.510v
 F181      88        6985          DB      136T     ; x=129;=2.529v
 F182      89        6986          DB      137T     ; x=130,=2.549v
 F183      8A        6987          DB      138T     ; x=131;=2.569v
 F184      8B        6988          DB      139T     ; x=132;=2.588v
 F185      8C        6989          DB      140T     ; x=133;=2.608v
 F186      8D        6990          DB      141T     ; x=134;=2.627v
 F187      8E        6991          DB      142T     ; x=135;=2.647v
 F188      8F        6992          DB      143T     ; x=136;=2.667v
 F189      90        6993          DB      144T     ; x=137;=2.686v
 F18A      91        6994          DB      145T     ; x=138;=2.706v
 F18B      92        6995          DB      146T     ; x=139;=2.725v
 F18C      93        6996          DB      147T     ; x=140;=2.745v
 F18D      94        6997          DB      148T     ; x=141;=2.765v
 F18E      95        6998          DB      149T     ; x=142;=2.784v
 F18F      96        6999          DB      150T     ; x=143;=2.804v
 F190      97        7000          DB      151T     ; x=144;=0.824v
 F191      98        7001          DB      152T     ; x=145;=2.843v
 F192      99        7002          DB      153T     ; x=146;=2.863v
 F193      9A        7003          DB      154T     ; x=147;=2.882v
 F194      9B        7004          DB      155T     ; x=148;=2.902v
 F195      9C        7005          DB      156T     ; x=149;=2.922v
 F196      9D        7006          DB      157T     ; x=150;=2.941v
 F197      9E        7007          DB      158T     ; x=151;=2.961v
 F198      9F        7008          DB      159T     ; x=152;=2.980v
 F199      A0        7009          DB      160T     ; x=153;=3.000v
 F19A      A1        7010          DB      161T     ; x=154;=3.020v
 F19B      A2        7011          DB      162T     ; x=155;=3.039v
 F19C      A3        7012          DB      163T     ; x=156;=3.059v
 F19D      A4        7013          DB      164T     ; x=157;=3.078v
 F19E      A5        7014          DB      165T     ; x=158;=3.098v
 F19F      A6        7015          DB      166T     ; x=159;=3.118v
 F1A0      A7        7016          DB      167T     ; x=160;=3.137v
 F1A1      A8        7017          DB      168T     ; x=161;=3.157v
 F1A2      A9        7018          DB      169T     ; x=162;=3.176v
 F1A3      AA        7019          DB      170T     ; x=163;=3.196v
 F1A4      AB        7020          DB      171T     ; x=164;=3.216v
 F1A5      AC        7021          DB      172T     ; x=165;=3.235v
 F1A6      AD        7022          DB      173T     ; x=166;=3.255v
 F1A7      AE        7023          DB      174T     ; x=167;=3.275v
 F1A8      AF        7024          DB      175T     ; x=168;=3.294v
 F1A9      B0        7025          DB      176T     ; x=169;=3.314v
 F1AA      B1        7026          DB      177T     ; x=170;=3.333v
 F1AB      B2        7027          DB      178T     ; x=171;=3.353v
 F1AC      B3        7028          DB      179T     ; x=172;=3.373v
 F1AD      B4        7029          DB      180T     ; x=173;=3.392v
 F1AE      B5        7030          DB      181T     ; x=174;=3.412v
 F1AF      B6        7031          DB      182T     ; x=175;=3.431v
 F1B0      B7        7032          DB      183T     ; x=176;=3.451v
 F1B1      B8        7033          DB      184T     ; x=177;=3.471v
 F1B2      B9        7034          DB      185T     ; x=178;=3.490v
 F1B3      B9        7035          DB      185T     ; x=179;=3.510v
 F1B4      BA        7036          DB      186T     ; x=180;=3.529v
 F1B5      BB        7037          DB      187T     ; x=181;=3.549v
 F1B6      BC        7038          DB      188T     ; x=182;=3.569v
 F1B7      BD        7039          DB      189T     ; x=183;=3.588v
 F1B8      BE        7040          DB      190T     ; x=184;=3.608v
 F1B9      BF        7041          DB      191T     ; x=185;=3.627v
 F1BA      C0        7042          DB      192T     ; x=186;=3.647v
 F1BB      C1        7043          DB      193T     ; x=187;=3.667v
 F1BC      C2        7044          DB      194T     ; x=188;=3.686v
 F1BD      C3        7045          DB      195T     ; x=189;=3.706v
 F1BE      C4        7046          DB      196T     ; x=190;=3.725v
 F1BF      C5        7047          DB      197T     ; x=191;=3.745v
 F1C0      C6        7048          DB      198T     ; x=192;=3.765v
 F1C1      C7        7049          DB      199T     ; x=193;=3.784v
 F1C2      C8        7050          DB      200T     ; x=194;=3.804v
 F1C3      C9        7051          DB      201T     ; x=195;=3.824v
 F1C4      CA        7052          DB      202T     ; x=196;=3.843v
 F1C5      CB        7053          DB      203T     ; x=197;=3.863v
 F1C6      CC        7054          DB      204T     ; x=198;=3.882v
 F1C7      CD        7055          DB      205T     ; x=199;=3.902v
 F1C8      CE        7056          DB      206T     ; x=200;=3.922v
 F1C9      CF        7057          DB      207T     ; x=201;=3.941v
 F1CA      D0        7058          DB      208T     ; x=202;=3.961v
 F1CB      D1        7059          DB      209T     ; x=203;=3.980v
 F1CC      D2        7060          DB      210T     ; x=204;=4.000v
 F1CD      D3        7061          DB      211T     ; x=205;=4.020v
 F1CE      D4        7062          DB      212T     ; x=206;=4.039v
 F1CF      D5        7063          DB      213T     ; x=207;=4.059v
 F1D0      D6        7064          DB      214T     ; x=208;=4.078v
 F1D1      D7        7065          DB      215T     ; x=209;=4.098v
 F1D2      D8        7066          DB      216T     ; x=210;=4.118v
 F1D3      D9        7067          DB      217T     ; x=211;=4.137v
 F1D4      DA        7068          DB      218T     ; x=212;=4.157v
 F1D5      DB        7069          DB      219T     ; x=213;=4.176v
 F1D6      DC        7070          DB      220T     ; x=214;=4.196v
 F1D7      DD        7071          DB      221T     ; x=215;=4.216v
 F1D8      DE        7072          DB      222T     ; x=216;=4.235v
 F1D9      DF        7073          DB      223T     ; x=217;=4.255v
 F1DA      E0        7074          DB      224T     ; x=218;=4.275v
 F1DB      E1        7075          DB      225T     ; x=219;=4.294v
 F1DC      E2        7076          DB      226T     ; x=220;=4.314v
 F1DD      E3        7077          DB      227T     ; x=221;=4.333v
 F1DE      E4        7078          DB      228T     ; x=222;=4.353v


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 54
MC68HC908GP32 User Bootloader


 F1DF      E5        7079          DB      229T     ; x=223;=4.373v
 F1E0      E6        7080          DB      230T     ; x=224;=4.392v
 F1E1      E7        7081          DB      231T     ; x=225;=4.412v
 F1E2      E8        7082          DB      232T     ; x=226;=4.431v
 F1E3      E9        7083          DB      233T     ; x=227;=4.451v
 F1E4      EA        7084          DB      234T     ; x=228;=4.471v
 F1E5      EB        7085          DB      235T     ; x=229;=4.490v
 F1E6      EB        7086          DB      235T     ; x=230;=4.510v
 F1E7      EC        7087          DB      236T     ; x=231;=4.529v
 F1E8      ED        7088          DB      237T     ; x=232;=4.549v
 F1E9      EE        7089          DB      238T     ; x=233;=4.569v
 F1EA      EF        7090          DB      239T     ; x=234;=4.588v
 F1EB      F0        7091          DB      240T     ; x=235;=4.608v
 F1EC      F1        7092          DB      241T     ; x=236;=4.627v
 F1ED      F2        7093          DB      242T     ; x=237;=4.647v
 F1EE      F3        7094          DB      243T     ; x=238;=4.667v
 F1EF      F4        7095          DB      244T     ; x=239;=4.686v
 F1F0      F5        7096          DB      245T     ; x=240;=4.706v
 F1F1      F6        7097          DB      246T     ; x=241;=4.725v
 F1F2      F7        7098          DB      247T     ; x=242;=4.745v
 F1F3      F8        7099          DB      248T     ; x=243;=4.765v
 F1F4      F9        7100          DB      249T     ; x=244;=4.784v
 F1F5      FA        7101          DB      250T     ; x=245;=4.804v
 F1F6      FB        7102          DB      251T     ; x=246;=4.824v
 F1F7      FC        7103          DB      252T     ; x=247;=4.843v
 F1F8      FD        7104          DB      253T     ; x=248;=4.863v
 F1F9      FE        7105          DB      254T     ; x=249;=4.882v
 F1FA      FF        7106          DB      255T     ; x=250;=4.902v
 F1FB      FF        7107          DB      255T     ; x=251;=4.922v
 F1FC      FF        7108          DB      255T     ; x=252;=4.941v
 F1FD      FF        7109          DB      255T     ; x=253;=4.961v
 F1FE      FF        7110          DB      255T     ; x=254;=4.980v
 F1FF      64        7111          DB      100T     ; x=255;=5.000v;sensor failure
 F200                7112          include "thermfactor.inc"
                     7113  ; Generated manually by Robert Hiebert 10/03/22
                     7114  ; VW NTC12 # 1HM 906 501 IAT sensor
                     7115  ; VW NTC2 # ATV 906 161 2 Engine Temperature Sensor
                     7116  
                     7117  ; Computed Steinhart-Hart coefficients: 
                     7118  ; A = 0.0012516891022418901 
                     7119  ; B = .0002681094876698
                     7120  ; C = 1.2909966438108778e-7
                     7121  
                     7122  ; 14 deg F = 9300 Ohm
                     7123  ; 68 deg F = 2500 Ohm
                     7124  ; 176 deg F = 330 Ohm
                     7125  ; Use 2490 1% Bias resistor
                     7126  
                     7127  ; R1 = 2490
                     7128  ; R2 = (Vout*R1(/(5-Vout)
                     7129  
                     7130  THERMFACTOR:                                                                 
                     7131  
                     7132  ;    Deg F+40    Deg F       Deg C   ADC     Vout    R2 (Ohms)               
 F200      DC        7133   DB  220T    ;       180                     0       Sensor failure use 180 deg F                    
 F201      FF        7134   DB  255T    ;       502.6   261.4   1       0.020   10              
 F202      FF        7135   DB  255T    ;       414.8   212.7   2       0.039   20              
 F203      FF        7136   DB  255T    ;       370.3   188.0   3       0.059   30              
 F204      FF        7137   DB  255T    ;       341.3   171.8   4       0.078   40              
 F205      FF        7138   DB  255T    ;       320.1   160.0   5       0.098   50              
 F206      FF        7139   DB  255T    ;       303.6   150.9   6       0.118   60              
 F207      FF        7140   DB  255T    ;       290.1   143.4   7       0.137   70              
 F208      FF        7141   DB  255T    ;       277.8   136.5   8       0.157   81              
 F209      FF        7142   DB  255T    ;       268.2   131.2   9       0.176   91              
 F20A      FF        7143   DB  255T    ;       259         126.1       10      0.196   102             
 F20B      FF        7144   DB  255T    ;       251.7   122.0   11      0.216   112             
 F20C      FF        7145   DB  255T    ;       244.5   118.0   12      0.235   123             
 F20D      FF        7146   DB  255T    ;       238         114.4       13      0.255   134             
 F20E      FF        7147   DB  255T    ;       232.1   111.2   14      0.275   145             
 F20F      FF        7148   DB  255T    ;       226.8   108.2   15      0.294   156             
 F210      FF        7149   DB  255T    ;       221.8   105.5   16      0.314   167             
 F211      FF        7150   DB  255T    ;       217.3   102.9   17      0.333   178             
 F212      FD        7151   DB  253T    ;       213         100.6       18      0.353   189             
 F213      F9        7152   DB  249T    ;       209.1   98.4    19      0.373   200             
 F214      F5        7153   DB  245T    ;       205.1   96.2    20      0.392   212             
 F215      F2        7154   DB  242T    ;       201.7   94.3    21      0.412   223             
 F216      EE        7155   DB  238T    ;       198.1   92.3    22      0.431   235             
 F217      EB        7156   DB  235T    ;       194.8   90.4    23      0.451   247             
 F218      E8        7157   DB  232T    ;       191.6   88.7    24      0.471   259             
 F219      E5        7158   DB  229T    ;       188.7   87.0    25      0.490   271             
 F21A      E2        7159   DB  226T    ;       185.8   85.5    26      0.510   283             
 F21B      DF        7160   DB  223T    ;       183.1   84.0    27      0.529   295             
 F21C      DD        7161   DB  221T    ;       180.6   82.5    28      0.549   307             
 F21D      DA        7162   DB  218T    ;       177.9   81.1    29      0.569   320             
 F21E      D8        7163   DB  216T    ;       175.6   79.8    30      0.588   332             
 F21F      D5        7164   DB  213T    ;       173.2   78.4    31      0.608   345             
 F220      D3        7165   DB  211T    ;       171         77.2        32      0.627   357             
 F221      D1        7166   DB  209T    ;       168.9   76.0    33      0.647   370             
 F222      CF        7167   DB  207T    ;       166.7   74.8    34      0.667   383             
 F223      CD        7168   DB  205T    ;       164.7   73.7    35      0.686   396             
 F224      CB        7169   DB  203T    ;       162.7   72.6    36      0.706   409             
 F225      C9        7170   DB  201T    ;       160.8   71.5    37      0.725   423             
 F226      C7        7171   DB  199T    ;       158.9   70.5    38      0.745   436             
 F227      C5        7172   DB  197T    ;       157         69.4        39      0.765   450             
 F228      C3        7173   DB  195T    ;       155.3   68.5    40      0.784   463             
 F229      C2        7174   DB  194T    ;       153.5   67.5    41      0.804   477             
 F22A      C0        7175   DB  192T    ;       151.8   66.6    42      0.824   491             
 F22B      BE        7176   DB  190T    ;       150.2   65.6    43      0.843   505             
 F22C      BD        7177   DB  189T    ;       148.6   64.8    44      0.863   519             
 F22D      BB        7178   DB  187T    ;       146.9   63.8    45      0.882   534             
 F22E      B9        7179   DB  185T    ;       145.4   63.0    46      0.902   548             
 F22F      B8        7180   DB  184T    ;       143.9   62.1    47      0.922   563             
 F230      B6        7181   DB  182T    ;       142.4   61.4    48      0.941   577             
 F231      B5        7182   DB  181T    ;       141         60.5        49      0.961   592             
 F232      B4        7183   DB  180T    ;       139.6   59.8    50      0.980   607             
 F233      B2        7184   DB  178T    ;       138.1   58.9    51      1.000   623             
 F234      B1        7185   DB  177T    ;       136.7   58.2    52      1.020   638             
 F235      AF        7186   DB  175T    ;       135.4   57.5    53      1.039   653             
 F236      AE        7187   DB  174T    ;       134.1   56.7    54      1.059   669              
 F237      AD        7188   DB  173T    ;       132.8   56.0    55      1.078   685             
 F238      AC        7189   DB  172T    ;       131.5   55.3    56      1.098   701             
 F239      AA        7190   DB  170T    ;       130.3   54.6    57      1.118   717             
 F23A      A9        7191   DB  169T    ;       129         53.9        58      1.137   733             
 F23B      A8        7192   DB  168T    ;       127.8   53.2    59      1.157   750             
 F23C      A7        7193   DB  167T    ;       126.6   52.6    60      1.176   766             
 F23D      A5        7194   DB  165T    ;       125.4   51.9    61      1.196   783             
 F23E      A4        7195   DB  164T    ;       124.3   51.3    62      1.216   800             
 F23F      A3        7196   DB  163T    ;       123.1   50.6    63      1.235   817             
 F240      A2        7197   DB  162T    ;       122         50.0        64      1.255   834             
 F241      A1        7198   DB  161T    ;       120.9   49.4    65      1.275   852             
 F242      A0        7199   DB  160T    ;       119.8   48.8    66      1.294   870             
 F243      9F        7200   DB  159T    ;       118.8   48.2    67      1.314   887             
 F244      9E        7201   DB  158T    ;       117.7   47.6    68      1.333   905             
 F245      9D        7202   DB  157T    ;       116.6   47.0    69      1.353   924             
 F246      9C        7203   DB  156T    ;       115.6   46.4    70      1.373   942             
 F247      9B        7204   DB  155T    ;       114.5   45.8    71      1.392   961             
 F248      9A        7205   DB  154T    ;       113.5   45.3    72      1.412   980             
 F249      99        7206   DB  153T    ;       112.5   44.7    73      1.431   999             
 F24A      98        7207   DB  152T    ;       111.5   44.2    74      1.451   1018            
 F24B      97        7208   DB  151T    ;       110.5   43.6    75      1.471   1038            
 F24C      96        7209   DB  150T    ;       109.6   43.1    76      1.490   1057            
 F24D      95        7210   DB  149T    ;       108.6   42.6    77      1.510   1077            
 F24E      94        7211   DB  148T    ;       107.6   42.0    78      1.529   1097            
 F24F      93        7212   DB  147T    ;       106.7   41.5    79      1.549   1118            
 F250      92        7213   DB  146T    ;       105.8   41.0    80      1.569   1138            
 F251      91        7214   DB  145T    ;       104.8   40.5    81      1.588   1159            


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 55
MC68HC908GP32 User Bootloader


 F252      90        7215   DB  144T    ;       103.9   40.0    82      1.608   1180            
 F253      8F        7216   DB  143T    ;       103         39.4        83      1.627   1202            
 F254      8E        7217   DB  142T    ;       102.1   39.0    84      1.647   1223            
 F255      8D        7218   DB  141T    ;       101.2   38.5    85      1.667   1245            
 F256      8C        7219   DB  140T    ;       100.3   38.0    86      1.686   1267            
 F257      8C        7220   DB  140T    ;       99.5    37.5    87      1.706   1289            
 F258      8B        7221   DB  139T    ;       98.6    37.0    88      1.725   1312            
 F259      8A        7222   DB  138T    ;       97.7    36.5    89      1.745   1335            
 F25A      89        7223   DB  137T    ;       96.9    36.0    90      1.765   1358            
 F25B      88        7224   DB  136T    ;       96          35.6        91      1.784   1382            
 F25C      87        7225   DB  135T    ;       95.2    35.1    92      1.804   1405            
 F25D      86        7226   DB  134T    ;       94.4    34.6    93      1.824   1429            
 F25E      86        7227   DB  134T    ;       93.5    34.2    94      1.843   1454            
 F25F      85        7228   DB  133T    ;       92.7    33.7    95      1.863   1478            
 F260      84        7229   DB  132T    ;       91.9    33.3    96      1.882   1503            
 F261      83        7230   DB  131T    ;       91          32.8        97      1.902   1529            
 F262      82        7231   DB  130T    ;       90.3    32.4    98      1.922   1554            
 F263      82        7232   DB  130T    ;       89.5    31.9    99      1.941   1580            
 F264      81        7233   DB  129T    ;       88.7    31.5    100     1.961   1606            
 F265      80        7234   DB  128T    ;       87.9    31.0    101     1.980   1633            
 F266      7F        7235   DB  127T    ;       87.1    30.6    102     2.000   1660            
 F267      7E        7236   DB  126T    ;       86.3    30.2    103     2.020   1687            
 F268      7E        7237   DB  126T    ;       85.5    29.7    104     2.039   1715            
 F269      7D        7238   DB  125T    ;       84.7    29.3    105     2.059   1743            
 F26A      7C        7239   DB  124T    ;       84          28.9        106     2.078   1771            
 F26B      7B        7240   DB  123T    ;       83.2    28.4    107     2.098   1800            
 F26C      7A        7241   DB  122T    ;       82.4    28.0    108     2.118   1829            
 F26D      7A        7242   DB  122T    ;       81.7    27.6    109     2.137   1859            
 F26E      79        7243   DB  121T    ;       80.9    27.2    110     2.157   1889            
 F26F      78        7244   DB  120T    ;       80.2    26.8    111     2.176   1919            
 F270      77        7245   DB  119T    ;       79.4    26.3    112     2.196   1950            
 F271      77        7246   DB  119T    ;       78.7    25.9    113     2.216   1981            
 F272      76        7247   DB  118T    ;       77.9    25.5    114     2.235   2013            
 F273      75        7248   DB  117T    ;       77.2    25.1    115     2.255   2045            
 F274      75        7249   DB  117T    ;       76.5    24.7    116     2.275   2078            
 F275      74        7250   DB  116T    ;       75.7    24.3    117     2.294   2111            
 F276      73        7251   DB  115T    ;       75          23.9        118     2.314   2145             
 F277      72        7252   DB  114T    ;       74.3    23.5    119     2.333   2179            
 F278      72        7253   DB  114T    ;       73.6    23.0    120     2.353   2213            
 F279      71        7254   DB  113T    ;       72.8    22.7    121     2.373   2248            
 F27A      70        7255   DB  112T    ;       72.1    22.3    122     2.392   2284            
 F27B      6F        7256   DB  111T    ;       71.4    21.9    123     2.412   2320            
 F27C      6F        7257   DB  111T    ;       70.7    21.5    124     2.431   2357            
 F27D      6E        7258   DB  110T    ;       70          21.0        125     2.451   2394            
 F27E      6D        7259   DB  109T    ;       69.3    20.7    126     2.471   2432            
 F27F      6D        7260   DB  109T    ;       68.5    20.3    127     2.490   2471            
 F280      6C        7261   DB  108T    ;       67.8    19.9    128     2.510   2510            
 F281      6B        7262   DB  107T    ;       67.2    19.5    129     2.529   2549            
 F282      6A        7263   DB  106T    ;       66.4    19.1    130     2.549   2590            
 F283      6A        7264   DB  106T    ;       65.7    18.7    131     2.569   2631            
 F284      69        7265   DB  105T    ;       65          18.3        132     2.588   2672            
 F285      68        7266   DB  104T    ;       64.3    17.9    133     2.608   2715            
 F286      68        7267   DB  104T    ;       63.6    17.6    134     2.627   2758            
 F287      67        7268   DB  103T    ;       62.9    17.2    135     2.647   2801            
 F288      66        7269   DB  102T    ;       62.2    16.8    136     2.667   2846            
 F289      66        7270   DB  102T    ;       61.5    16.4    137     2.686   2891            
 F28A      65        7271   DB  101T    ;       60.8    16.0    138     2.706   2937            
 F28B      64        7272   DB  100T    ;       60.1    15.6    139     2.725   2984            
 F28C      63        7273   DB  99T         ;   59.4    15.2    140     2.745   3031            
 F28D      63        7274   DB  99T         ;   58.7    14.8    141     2.765   3080            
 F28E      62        7275   DB  98T         ;   58              14.4    142     2.784   3129            
 F28F      61        7276   DB  97T         ;   57.3    14.1    143     2.804   3179            
 F290      61        7277   DB  97T         ;   56.7    13.7    144     2.824   3230            
 F291      60        7278   DB  96T         ;   56              13.3    145     2.843   3282            
 F292      5F        7279   DB  95T         ;   55.3    12.9    146     2.863   3335            
 F293      5F        7280   DB  95T         ;   54.6    12.5    147     2.882   3389            
 F294      5E        7281   DB  94T         ;   53.9    12.2    148     2.902   3444            
 F295      5D        7282   DB  93T         ;   53.2    11.8    149     2.922   3500            
 F296      5D        7283   DB  93T         ;   52.5    11.4    150     2.941   3557            
 F297      5C        7284   DB  92T         ;   51.8    11.0    151     2.961   3615            
 F298      5B        7285   DB  91T             ;       51.1    10.6    152     2.980   3675            
 F299      5A        7286   DB  90T             ;       50.4    10.2    153     3.000   3735            
 F29A      5A        7287   DB  90T             ;       49.7    9.8             154     3.020   3797            
 F29B      59        7288   DB  89T             ;       49              9.5             155     3.039   3860            
 F29C      58        7289   DB  88T             ;       48.3    9.1             156     3.059   3924            
 F29D      58        7290   DB  88T             ;       47.6    8.7             157     3.078   3989            
 F29E      57        7291   DB  87T             ;       46.9    8.3             158     3.098   4056            
 F29F      56        7292   DB  86T             ;       46.2    7.9             159     3.118   4124            
 F2A0      56        7293   DB  86T             ;       45.5    7.5             160     3.137   4194            
 F2A1      55        7294   DB  85T             ;       44.8    7.1             161     3.157   4265            
 F2A2      54        7295   DB  84T             ;       44.1    6.7             162     3.176   4337            
 F2A3      53        7296   DB  83T             ;       43.4    6.3             163     3.196   4412            
 F2A4      53        7297   DB  83T             ;       42.7    5.9             164     3.216   4487            
 F2A5      52        7298   DB  82T             ;       42              5.6             165     3.235   4565            
 F2A6      51        7299   DB  81T             ;       41.3    5.2             166     3.255   4644            
 F2A7      51        7300   DB  81T             ;       40.6    4.8             167     3.275   4725            
 F2A8      50        7301   DB  80T             ;       39.9    4.4             168     3.294   4808            
 F2A9      4F        7302   DB  79T             ;       39.1    4.0             169     3.314   4893            
 F2AA      4E        7303   DB  78T             ;       38.4    3.6             170     3.333   4980            
 F2AB      4E        7304   DB  78T             ;       37.7    3.2             171     3.353   5069            
 F2AC      4D        7305   DB  77T             ;       37              2.8             172     3.373   5160            
 F2AD      4C        7306   DB  76T             ;       36.2    2.4             173     3.392   5253            
 F2AE      4C        7307   DB  76T             ;       35.5    2.0             174     3.412   5349            
 F2AF      4B        7308   DB  75T             ;       34.8    1.5             175     3.431   5447            
 F2B0      4A        7309   DB  74T             ;       34.1    1.1             176     3.451   5547            
 F2B1      49        7310   DB  73T             ;       33.3    1.0             177     3.471   5650            
 F2B2      49        7311   DB  73T             ;       32.6    0.3             178     3.490   5756            
 F2B3      48        7312   DB  72T             ;       31.8    -0.1    179     3.510   5865            
 F2B4      47        7313   DB  71T             ;       31.1    -0.5    180     3.529   5976            
 F2B5      46        7314   DB  70T             ;       30.3    -0.9    181     3.549   6090            
 F2B6      46        7315   DB  70T             ;       29.6    -1.4    182     3.569   6208            
 F2B7      45        7316   DB  69T             ;       28.8    -1.8    183     3.588   6329            
 F2B8      44        7317   DB  68T             ;       28              -2.2    184     3.608   6453            
 F2B9      43        7318   DB  67T             ;       27.3    -2.6    185     3.627   6581            
 F2BA      43        7319   DB  67T             ;       26.5    -3.1    186     3.647   6712            
 F2BB      42        7320   DB  66T             ;       25.7    -3.5    187     3.667   6848            
 F2BC      41        7321   DB  65T             ;       24.9    -3.9    188     3.686   6987            
 F2BD      40        7322   DB  64T             ;       24.1    -4.4    189     3.706   7130            
 F2BE      3F        7323   DB  63T             ;       23.3    -4.8    190     3.725   7278            
 F2BF      3F        7324   DB  63T             ;       22.5    -5.3    191     3.745   7431            
 F2C0      3E        7325   DB  62T             ;       21.7    -5.7    192     3.765   7589            
 F2C1      3D        7326   DB  61T             ;       20.9    -6.2    193     3.784   7751            
 F2C2      3C        7327   DB  60T             ;       20.1    -6.6    194     3.804   7919            
 F2C3      3B        7328   DB  59T             ;       19.3    -7.1    195     3.824   8093            
 F2C4      3A        7329   DB  58T             ;       18.4    -7.5    196     3.843   8272            
 F2C5      3A        7330   DB  58T             ;       17.6    -8.0    197     3.863   8457            
 F2C6      39        7331   DB  57T             ;       16.7    -8.5    198     3.882   8649            
 F2C7      38        7332   DB  56T             ;       15.9    -9.0    199     3.902   8848            
 F2C8      37        7333   DB  55T             ;       15              -9.4    200     3.922   9055            
 F2C9      36        7334   DB  54T             ;       14.1    -9.9    201     3.941   9268            
 F2CA      35        7335   DB  53T             ;       13.2    -10.4   202     3.961   9490            
 F2CB      34        7336   DB  52T             ;       12.3    -10.9   203     3.980   9721            
 F2CC      33        7337   DB  51T             ;       11.4    -11.4   204     4.000   9960            
 F2CD      33        7338   DB  51T             ;       10.5    -11.9   205     4.020   10209           
 F2CE      32        7339   DB  50T             ;       9.6             -12.4   206     4.039   10468           
 F2CF      31        7340   DB  49T             ;       8.7             -13.0   207     4.059   10738           
 F2D0      30        7341   DB  48T             ;       7.7             -13.5   208     4.078   11020           
 F2D1      2F        7342   DB  47T             ;       6.8             -14.0   209     4.098   11313           
 F2D2      2E        7343   DB  46T             ;       5.8             -14.6   210     4.118   11620           
 F2D3      2D        7344   DB  45T             ;       4.8             -15.1   211     4.137   11941           
 F2D4      2C        7345   DB  44T             ;       3.8             -15.7   212     4.157   12276           
 F2D5      2B        7346   DB  43T             ;       2.8             -16.2   213     4.176   12628           
 F2D6      2A        7347   DB  42T             ;       1.7             -16.8   214     4.196   12997           
 F2D7      29        7348   DB  41T             ;       0.7             -17.4   215     4.216   13384           
 F2D8      28        7349   DB  40T             ;       -0.4    -18.0   216     4.235   13791           
 F2D9      27        7350   DB  39T             ;       -1.5    -18.6   217     4.255   14219           


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 56
MC68HC908GP32 User Bootloader


 F2DA      25        7351   DB  37T             ;       -2.6    -19.2   218     4.275   14671           
 F2DB      24        7352   DB  36T             ;       -3.7    -19.8   219     4.294   15148           
 F2DC      23        7353   DB  35T             ;       -4.8    -20.5   220     4.314   15651           
 F2DD      22        7354   DB  34T             ;       -6              -21.1   221     4.333   16185           
 F2DE      21        7355   DB  33T             ;       -7.2    -21.8   222     4.353   16751           
 F2DF      20        7356   DB  32T             ;       -8.4    -22.5   223     4.373   17352           
 F2E0      1E        7357   DB  30T             ;       -9.7    -23.1   224     4.392   17992           
 F2E1      1D        7358   DB  29T             ;       -10.9   -23.9   225     4.412   18675           
 F2E2      1C        7359   DB  28T             ;       -12.2   -24.6   226     4.431   19405           
 F2E3      1A        7360   DB  26T             ;       -13.6   -25.3   227     4.451   20187           
 F2E4      19        7361   DB  25T             ;       -15             -26.1   228     4.471   21027           
 F2E5      18        7362   DB  24T             ;       -16.4   -26.9   229     4.490   21931           
 F2E6      16        7363   DB  22T             ;       -17.8   -27.7   230     4.510   22908           
 F2E7      15        7364   DB  21T             ;       -19.3   -28.5   231     4.529   23966           
 F2E8      13        7365   DB  19T             ;       -20.9   -29.4   232     4.549   25117           
 F2E9      12        7366   DB  18T             ;       -22.5   -30.3   233     4.569   26371           
 F2EA      10        7367   DB  16T             ;       -24.1   -31.2   234     4.588   27746           
 F2EB      0E        7368   DB  14T             ;       -25.9   -32.1   235     4.608   29258           
 F2EC      0C        7369   DB  12T             ;       -27.7   -33.1   236     4.627   30928           
 F2ED      0B        7370   DB  11T             ;       -29.5   -34.2   237     4.647   32785           
 F2EE      09        7371   DB  9T              ;       -31.5   -35.3   238     4.667   34860           
 F2EF      07        7372   DB  7T              ;       -33.5   -36.4   239     4.686   37194           
 F2F0      04        7373   DB  4T              ;       -35.6   -37.6   240     4.706   39840           
 F2F1      02        7374   DB  2T              ;       -37.9   -38.8   241     4.725   42864           
 F2F2      00        7375   DB  0T              ;       -40.3   -40.2   242     4.745   46352           
 F2F3      00        7376   DB  0T              ;       -42.9   -41.6   243     4.765   50423           
 F2F4      00        7377   DB  0T              ;       -45.6   -43.1   244     4.784   55233           
 F2F5      00        7378   DB  0T              ;       -48.6   -44.8   245     4.804   61005           
 F2F6      00        7379   DB  0T              ;       -51.8   -46.6   246     4.824   68060           
 F2F7      00        7380   DB  0T              ;       -55.3   -48.1   247     4.843   76879           
 F2F8      00        7381   DB  0T              ;       -59.3   -50.7   248     4.863   88217           
 F2F9      00        7382   DB  0T              ;       -63.7   -53.2   249     4.882   103335          
 F2FA      00        7383   DB  0T              ;       -68.8   -56.0   250     4.902   124500          
 F2FB      00        7384   DB  0T              ;       -75             -59.4   251     4.922   156247          
 F2FC      00        7385   DB  0T              ;       -82.6   -63.7   252     4.941   209160          
 F2FD      00        7386   DB  0T              ;       -92.9   -69.4   253     4.961   314985          
 F2FE      00        7387   DB  0T              ;       -109.5  -78.6   254     4.980   632460          
 F2FF      DC        7388   DB  220T    ;        180                    255     Sensor failure , use 180 deg F                  
                     7389  
 F300                7390          include "airdenfactor.inc"
                     7391  ; Generated manually by Robert Hiebert 10/03/22
                     7392  ; VW NTC12 # 1HM 906 501 IAT sensor
                     7393  ; VW NTC2 # ATV 906 161 2 Engine Temperature Sensor
                     7394  
                     7395  ; Computed Steinhart-Hart coefficients: 
                     7396  ; A = 0.0012516891022418901 
                     7397  ; B = .0002681094876698
                     7398  ; C = 1.2909966438108778e-7
                     7399  
                     7400  ; 14 deg F = 9300 Ohm
                     7401  ; 68 deg F = 2500 Ohm
                     7402  ; 176 deg F = 330 Ohm
                     7403  ; Use 2490 1% Bias resistor
                     7404  
                     7405  ; R1 = 2490
                     7406  ; R2 = (Vout*R1(/(5-Vout)
                     7407  
                     7408  AIRDENFACTOR:                                                                        
                     7409  
                     7410  ;    %    Deg F      Deg C   ADC     Vout    R2 (Ohms)               
 F300      64        7411   DB  100T ;                          0       Sensor failure use 100%                 
 F301      4B        7412   DB  75T     ;       502.6   261.4   1       0.020   10              
 F302      4B        7413   DB  75T     ;       414.8   212.7   2       0.039   20              
 F303      4B        7414   DB  75T     ;       370.3   188.0   3       0.059   30              
 F304      4B        7415   DB  75T     ;       341.3   171.8   4       0.078   40              
 F305      4B        7416   DB  75T     ;       320.1   160.0   5       0.098   50              
 F306      4B        7417   DB  75T     ;       303.6   150.9   6       0.118   60              
 F307      4B        7418   DB  75T     ;       290.1   143.4   7       0.137   70              
 F308      4B        7419   DB  75T     ;       277.8   136.5   8       0.157   81              
 F309      4B        7420   DB  75T     ;       268.2   131.2   9       0.176   91              
 F30A      4B        7421   DB  75T     ;       259         126.1       10      0.196   102             
 F30B      4B        7422   DB  75T     ;       251.7   122.0   11      0.216   112             
 F30C      4B        7423   DB  75T     ;       244.5   118.0   12      0.235   123             
 F30D      4C        7424   DB  76T     ;       238         114.4       13      0.255   134             
 F30E      4D        7425   DB  77T     ;       232.1   111.2   14      0.275   145             
 F30F      4D        7426   DB  77T     ;       226.8   108.2   15      0.294   156             
 F310      4E        7427   DB  78T     ;       221.8   105.5   16      0.314   167             
 F311      4E        7428   DB  78T     ;       217.3   102.9   17      0.333   178             
 F312      4F        7429   DB  79T     ;       213         100.6       18      0.353   189             
 F313      4F        7430   DB  79T     ;       209.1   98.4    19      0.373   200             
 F314      50        7431   DB  80T     ;       205.1   96.2    20      0.392   212             
 F315      50        7432   DB  80T     ;       201.7   94.3    21      0.412   223             
 F316      50        7433   DB  80T     ;       198.1   92.3    22      0.431   235             
 F317      51        7434   DB  81T     ;       194.8   90.4    23      0.451   247             
 F318      51        7435   DB  81T     ;       191.6   88.7    24      0.471   259             
 F319      52        7436   DB  82T     ;       188.7   87.0    25      0.490   271             
 F31A      52        7437   DB  82T     ;       185.8   85.5    26      0.510   283             
 F31B      52        7438   DB  82T     ;       183.1   84.0    27      0.529   295             
 F31C      53        7439   DB  83T     ;       180.6   82.5    28      0.549   307             
 F31D      53        7440   DB  83T     ;       177.9   81.1    29      0.569   320             
 F31E      53        7441   DB  83T     ;       175.6   79.8    30      0.588   332             
 F31F      54        7442   DB  84T     ;       173.2   78.4    31      0.608   345             
 F320      54        7443   DB  84T     ;       171         77.2        32      0.627   357             
 F321      54        7444   DB  84T     ;       168.9   76.0    33      0.647   370             
 F322      54        7445   DB  84T     ;       166.7   74.8    34      0.667   383             
 F323      55        7446   DB  85T     ;       164.7   73.7    35      0.686   396             
 F324      55        7447   DB  85T     ;       162.7   72.6    36      0.706   409             
 F325      55        7448   DB  85T     ;       160.8   71.5    37      0.725   423             
 F326      55        7449   DB  85T     ;       158.9   70.5    38      0.745   436             
 F327      56        7450   DB  86T     ;       157         69.4        39      0.765   450             
 F328      56        7451   DB  86T     ;       155.3   68.5    40      0.784   463             
 F329      56        7452   DB  86T     ;       153.5   67.5    41      0.804   477             
 F32A      56        7453   DB  86T     ;       151.8   66.6    42      0.824   491             
 F32B      57        7454   DB  87T     ;       150.2   65.6    43      0.843   505             
 F32C      57        7455   DB  87T     ;       148.6   64.8    44      0.863   519             
 F32D      57        7456   DB  87T     ;       146.9   63.8    45      0.882   534             
 F32E      57        7457   DB  87T     ;       145.4   63.0    46      0.902   548             
 F32F      57        7458   DB  87T     ;       143.9   62.1    47      0.922   563             
 F330      58        7459   DB  88T     ;       142.4   61.4    48      0.941   577             
 F331      58        7460   DB  88T     ;       141         60.5        49      0.961   592             
 F332      58        7461   DB  88T     ;       139.6   59.8    50      0.980   607             
 F333      58        7462   DB  88T     ;       138.1   58.9    51      1.000   623             
 F334      58        7463   DB  88T     ;       136.7   58.2    52      1.020   638             
 F335      59        7464   DB  89T     ;       135.4   57.5    53      1.039   653             
 F336      59        7465   DB  89T     ;       134.1   56.7    54      1.059   669              
 F337      59        7466   DB  89T     ;       132.8   56.0    55      1.078   685             
 F338      59        7467   DB  89T     ;       131.5   55.3    56      1.098   701             
 F339      59        7468   DB  89T     ;       130.3   54.6    57      1.118   717             
 F33A      5A        7469   DB  90T     ;       129         53.9        58      1.137   733             
 F33B      5A        7470   DB  90T     ;       127.8   53.2    59      1.157   750             
 F33C      5A        7471   DB  90T     ;       126.6   52.6    60      1.176   766             
 F33D      5A        7472   DB  90T     ;       125.4   51.9    61      1.196   783             
 F33E      5A        7473   DB  90T     ;       124.3   51.3    62      1.216   800             
 F33F      5B        7474   DB  91T     ;       123.1   50.6    63      1.235   817             
 F340      5B        7475   DB  91T     ;       122         50.0        64      1.255   834             
 F341      5B        7476   DB  91T     ;       120.9   49.4    65      1.275   852             
 F342      5B        7477   DB  91T     ;       119.8   48.8    66      1.294   870             
 F343      5B        7478   DB  91T     ;       118.8   48.2    67      1.314   887             
 F344      5B        7479   DB  91T     ;       117.7   47.6    68      1.333   905             
 F345      5C        7480   DB  92T     ;       116.6   47.0    69      1.353   924             
 F346      5C        7481   DB  92T     ;       115.6   46.4    70      1.373   942             
 F347      5C        7482   DB  92T     ;       114.5   45.8    71      1.392   961             
 F348      5C        7483   DB  92T     ;       113.5   45.3    72      1.412   980             
 F349      5C        7484   DB  92T     ;       112.5   44.7    73      1.431   999             
 F34A      5C        7485   DB  92T     ;       111.5   44.2    74      1.451   1018            
 F34B      5D        7486   DB  93T     ;       110.5   43.6    75      1.471   1038            


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 57
MC68HC908GP32 User Bootloader


 F34C      5D        7487   DB  93T     ;       109.6   43.1    76      1.490   1057            
 F34D      5D        7488   DB  93T     ;       108.6   42.6    77      1.510   1077            
 F34E      5D        7489   DB  93T     ;       107.6   42.0    78      1.529   1097            
 F34F      5D        7490   DB  93T     ;       106.7   41.5    79      1.549   1118            
 F350      5D        7491   DB  93T     ;       105.8   41.0    80      1.569   1138            
 F351      5E        7492   DB  94T     ;       104.8   40.5    81      1.588   1159            
 F352      5E        7493   DB  94T     ;       103.9   40.0    82      1.608   1180            
 F353      5E        7494   DB  94T     ;       103         39.4        83      1.627   1202            
 F354      5E        7495   DB  94T     ;       102.1   39.0    84      1.647   1223            
 F355      5E        7496   DB  94T     ;       101.2   38.5    85      1.667   1245            
 F356      5E        7497   DB  94T     ;       100.3   38.0    86      1.686   1267            
 F357      5E        7498   DB  94T     ;       99.5    37.5    87      1.706   1289            
 F358      5F        7499   DB  95T     ;       98.6    37.0    88      1.725   1312            
 F359      5F        7500   DB  95T     ;       97.7    36.5    89      1.745   1335            
 F35A      5F        7501   DB  95T     ;       96.9    36.0    90      1.765   1358            
 F35B      5F        7502   DB  95T     ;       96          35.6        91      1.784   1382            
 F35C      5F        7503   DB  95T     ;       95.2    35.1    92      1.804   1405            
 F35D      5F        7504   DB  95T     ;       94.4    34.6    93      1.824   1429            
 F35E      5F        7505   DB  95T     ;       93.5    34.2    94      1.843   1454            
 F35F      60        7506   DB  96T     ;       92.7    33.7    95      1.863   1478            
 F360      60        7507   DB  96T     ;       91.9    33.3    96      1.882   1503            
 F361      60        7508   DB  96T     ;       91          32.8        97      1.902   1529            
 F362      60        7509   DB  96T     ;       90.3    32.4    98      1.922   1554            
 F363      60        7510   DB  96T     ;       89.5    31.9    99      1.941   1580            
 F364      60        7511   DB  96T     ;       88.7    31.5    100     1.961   1606            
 F365      60        7512   DB  96T     ;       87.9    31.0    101     1.980   1633            
 F366      61        7513   DB  97T     ;       87.1    30.6    102     2.000   1660            
 F367      61        7514   DB  97T     ;       86.3    30.2    103     2.020   1687            
 F368      61        7515   DB  97T     ;       85.5    29.7    104     2.039   1715            
 F369      61        7516   DB  97T     ;       84.7    29.3    105     2.059   1743            
 F36A      61        7517   DB  97T     ;       84          28.9        106     2.078   1771            
 F36B      61        7518   DB  97T     ;       83.2    28.4    107     2.098   1800            
 F36C      61        7519   DB  97T     ;       82.4    28.0    108     2.118   1829            
 F36D      62        7520   DB  98T     ;       81.7    27.6    109     2.137   1859            
 F36E      62        7521   DB  98T     ;       80.9    27.2    110     2.157   1889            
 F36F      62        7522   DB  98T     ;       80.2    26.8    111     2.176   1919            
 F370      62        7523   DB  98T     ;       79.4    26.3    112     2.196   1950            
 F371      62        7524   DB  98T     ;       78.7    25.9    113     2.216   1981            
 F372      62        7525   DB  98T     ;       77.9    25.5    114     2.235   2013            
 F373      62        7526   DB  98T     ;       77.2    25.1    115     2.255   2045            
 F374      63        7527   DB  99T     ;       76.5    24.7    116     2.275   2078            
 F375      63        7528   DB  99T     ;       75.7    24.3    117     2.294   2111            
 F376      63        7529   DB  99T     ;       75          23.9        118     2.314   2145             
 F377      63        7530   DB  99T     ;       74.3    23.5    119     2.333   2179            
 F378      63        7531   DB  99T     ;       73.6    23.0    120     2.353   2213            
 F379      63        7532   DB  99T     ;       72.8    22.7    121     2.373   2248            
 F37A      63        7533   DB  99T     ;       72.1    22.3    122     2.392   2284            
 F37B      63        7534   DB  99T     ;       71.4    21.9    123     2.412   2320            
 F37C      64        7535   DB  100T    ;       70.7    21.5    124     2.431   2357            
 F37D      64        7536   DB  100T    ;       70          21.0        125     2.451   2394            
 F37E      64        7537   DB  100T    ;       69.3    20.7    126     2.471   2432            
 F37F      64        7538   DB  100T    ;       68.5    20.3    127     2.490   2471            
 F380      64        7539   DB  100T    ;       67.8    19.9    128     2.510   2510            
 F381      64        7540   DB  100T    ;       67.2    19.5    129     2.529   2549            
 F382      64        7541   DB  100T    ;       66.4    19.1    130     2.549   2590            
 F383      64        7542   DB  100T    ;       65.7    18.7    131     2.569   2631            
 F384      65        7543   DB  101T    ;       65          18.3        132     2.588   2672            
 F385      65        7544   DB  101T    ;       64.3    17.9    133     2.608   2715            
 F386      65        7545   DB  101T    ;       63.6    17.6    134     2.627   2758            
 F387      65        7546   DB  101T    ;       62.9    17.2    135     2.647   2801            
 F388      65        7547   DB  101T    ;       62.2    16.8    136     2.667   2846            
 F389      65        7548   DB  101T    ;       61.5    16.4    137     2.686   2891            
 F38A      65        7549   DB  101T    ;       60.8    16.0    138     2.706   2937            
 F38B      65        7550   DB  101T    ;       60.1    15.6    139     2.725   2984            
 F38C      66        7551   DB  102T        ;   59.4    15.2    140     2.745   3031            
 F38D      66        7552   DB  102T        ;   58.7    14.8    141     2.765   3080            
 F38E      66        7553   DB  102T        ;   58              14.4    142     2.784   3129            
 F38F      66        7554   DB  102T        ;   57.3    14.1    143     2.804   3179            
 F390      66        7555   DB  102T        ;   56.7    13.7    144     2.824   3230            
 F391      66        7556   DB  102T        ;   56              13.3    145     2.843   3282            
 F392      66        7557   DB  102T        ;   55.3    12.9    146     2.863   3335            
 F393      67        7558   DB  103T        ;   54.6    12.5    147     2.882   3389            
 F394      67        7559   DB  103T        ;   53.9    12.2    148     2.902   3444            
 F395      67        7560   DB  103T        ;   53.2    11.8    149     2.922   3500            
 F396      67        7561   DB  103T        ;   52.5    11.4    150     2.941   3557            
 F397      67        7562   DB  103T        ;   51.8    11.0    151     2.961   3615            
 F398      67        7563   DB  103T            ;       51.1    10.6    152     2.980   3675            
 F399      67        7564   DB  103T            ;       50.4    10.2    153     3.000   3735            
 F39A      68        7565   DB  104T            ;       49.7    9.8             154     3.020   3797            
 F39B      68        7566   DB  104T            ;       49              9.5             155     3.039   3860            
 F39C      68        7567   DB  104T            ;       48.3    9.1             156     3.059   3924            
 F39D      68        7568   DB  104T            ;       47.6    8.7             157     3.078   3989            
 F39E      68        7569   DB  104T            ;       46.9    8.3             158     3.098   4056            
 F39F      68        7570   DB  104T            ;       46.2    7.9             159     3.118   4124            
 F3A0      68        7571   DB  104T            ;       45.5    7.5             160     3.137   4194            
 F3A1      69        7572   DB  105T            ;       44.8    7.1             161     3.157   4265            
 F3A2      69        7573   DB  105T            ;       44.1    6.7             162     3.176   4337            
 F3A3      69        7574   DB  105T            ;       43.4    6.3             163     3.196   4412            
 F3A4      69        7575   DB  105T            ;       42.7    5.9             164     3.216   4487            
 F3A5      69        7576   DB  105T            ;       42              5.6             165     3.235   4565            
 F3A6      69        7577   DB  105T            ;       41.3    5.2             166     3.255   4644            
 F3A7      6A        7578   DB  106T            ;       40.6    4.8             167     3.275   4725            
 F3A8      6A        7579   DB  106T            ;       39.9    4.4             168     3.294   4808            
 F3A9      6A        7580   DB  106T            ;       39.1    4.0             169     3.314   4893            
 F3AA      6A        7581   DB  106T            ;       38.4    3.6             170     3.333   4980            
 F3AB      6A        7582   DB  106T            ;       37.7    3.2             171     3.353   5069            
 F3AC      6A        7583   DB  106T            ;       37              2.8             172     3.373   5160            
 F3AD      6A        7584   DB  106T            ;       36.2    2.4             173     3.392   5253            
 F3AE      6B        7585   DB  107T            ;       35.5    2.0             174     3.412   5349            
 F3AF      6B        7586   DB  107T            ;       34.8    1.5             175     3.431   5447            
 F3B0      6B        7587   DB  107T            ;       34.1    1.1             176     3.451   5547            
 F3B1      6B        7588   DB  107T            ;       33.3    1.0             177     3.471   5650            
 F3B2      6B        7589   DB  107T            ;       32.6    0.3             178     3.490   5756            
 F3B3      6B        7590   DB  107T            ;       31.8    -0.1    179     3.510   5865            
 F3B4      6C        7591   DB  108T            ;       31.1    -0.5    180     3.529   5976            
 F3B5      6C        7592   DB  108T            ;       30.3    -0.9    181     3.549   6090            
 F3B6      6C        7593   DB  108T            ;       29.6    -1.4    182     3.569   6208            
 F3B7      6C        7594   DB  108T            ;       28.8    -1.8    183     3.588   6329            
 F3B8      6C        7595   DB  108T            ;       28              -2.2    184     3.608   6453            
 F3B9      6C        7596   DB  108T            ;       27.3    -2.6    185     3.627   6581            
 F3BA      6D        7597   DB  109T            ;       26.5    -3.1    186     3.647   6712            
 F3BB      6D        7598   DB  109T            ;       25.7    -3.5    187     3.667   6848            
 F3BC      6D        7599   DB  109T            ;       24.9    -3.9    188     3.686   6987            
 F3BD      6D        7600   DB  109T            ;       24.1    -4.4    189     3.706   7130            
 F3BE      6D        7601   DB  109T            ;       23.3    -4.8    190     3.725   7278            
 F3BF      6E        7602   DB  110T            ;       22.5    -5.3    191     3.745   7431            
 F3C0      6E        7603   DB  110T            ;       21.7    -5.7    192     3.765   7589            
 F3C1      6E        7604   DB  110T            ;       20.9    -6.2    193     3.784   7751            
 F3C2      6E        7605   DB  110T            ;       20.1    -6.6    194     3.804   7919            
 F3C3      6E        7606   DB  110T            ;       19.3    -7.1    195     3.824   8093            
 F3C4      6F        7607   DB  111T            ;       18.4    -7.5    196     3.843   8272            
 F3C5      6F        7608   DB  111T            ;       17.6    -8.0    197     3.863   8457            
 F3C6      6F        7609   DB  111T            ;       16.7    -8.5    198     3.882   8649            
 F3C7      6F        7610   DB  111T            ;       15.9    -9.0    199     3.902   8848            
 F3C8      6F        7611   DB  111T            ;       15              -9.4    200     3.922   9055            
 F3C9      70        7612   DB  112T            ;       14.1    -9.9    201     3.941   9268            
 F3CA      70        7613   DB  112T            ;       13.2    -10.4   202     3.961   9490            
 F3CB      70        7614   DB  112T            ;       12.3    -10.9   203     3.980   9721            
 F3CC      70        7615   DB  112T            ;       11.4    -11.4   204     4.000   9960            
 F3CD      70        7616   DB  112T            ;       10.5    -11.9   205     4.020   10209           
 F3CE      71        7617   DB  113T            ;       9.6             -12.4   206     4.039   10468           
 F3CF      71        7618   DB  113T            ;       8.7             -13.0   207     4.059   10738           
 F3D0      71        7619   DB  113T            ;       7.7             -13.5   208     4.078   11020           
 F3D1      71        7620   DB  113T            ;       6.8             -14.0   209     4.098   11313           
 F3D2      72        7621   DB  114T            ;       5.8             -14.6   210     4.118   11620           
 F3D3      72        7622   DB  114T            ;       4.8             -15.1   211     4.137   11941           


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 58
MC68HC908GP32 User Bootloader


 F3D4      72        7623   DB  114T            ;       3.8             -15.7   212     4.157   12276           
 F3D5      72        7624   DB  114T            ;       2.8             -16.2   213     4.176   12628           
 F3D6      73        7625   DB  115T            ;       1.7             -16.8   214     4.196   12997           
 F3D7      73        7626   DB  115T            ;       0.7             -17.4   215     4.216   13384           
 F3D8      73        7627   DB  115T            ;       -0.4    -18.0   216     4.235   13791           
 F3D9      73        7628   DB  115T            ;       -1.5    -18.6   217     4.255   14219           
 F3DA      74        7629   DB  116T            ;       -2.6    -19.2   218     4.275   14671           
 F3DB      74        7630   DB  116T            ;       -3.7    -19.8   219     4.294   15148           
 F3DC      74        7631   DB  116T            ;       -4.8    -20.5   220     4.314   15651           
 F3DD      74        7632   DB  116T            ;       -6              -21.1   221     4.333   16185           
 F3DE      75        7633   DB  117T            ;       -7.2    -21.8   222     4.353   16751           
 F3DF      75        7634   DB  117T            ;       -8.4    -22.5   223     4.373   17352           
 F3E0      75        7635   DB  117T            ;       -9.7    -23.1   224     4.392   17992           
 F3E1      76        7636   DB  118T            ;       -10.9   -23.9   225     4.412   18675           
 F3E2      76        7637   DB  118T            ;       -12.2   -24.6   226     4.431   19405           
 F3E3      77        7638   DB  119T            ;       -13.6   -25.3   227     4.451   20187           
 F3E4      77        7639   DB  119T            ;       -15             -26.1   228     4.471   21027           
 F3E5      77        7640   DB  119T            ;       -16.4   -26.9   229     4.490   21931           
 F3E6      78        7641   DB  120T            ;       -17.8   -27.7   230     4.510   22908           
 F3E7      78        7642   DB  120T            ;       -19.3   -28.5   231     4.529   23966           
 F3E8      79        7643   DB  121T            ;       -20.9   -29.4   232     4.549   25117           
 F3E9      79        7644   DB  121T            ;       -22.5   -30.3   233     4.569   26371           
 F3EA      79        7645   DB  121T            ;       -24.1   -31.2   234     4.588   27746           
 F3EB      7A        7646   DB  122T            ;       -25.9   -32.1   235     4.608   29258           
 F3EC      7A        7647   DB  122T            ;       -27.7   -33.1   236     4.627   30928           
 F3ED      7B        7648   DB  123T            ;       -29.5   -34.2   237     4.647   32785           
 F3EE      7B        7649   DB  123T            ;       -31.5   -35.3   238     4.667   34860           
 F3EF      7C        7650   DB  124T            ;       -33.5   -36.4   239     4.686   37194           
 F3F0      7C        7651   DB  124T            ;       -35.6   -37.6   240     4.706   39840           
 F3F1      7D        7652   DB  125T            ;       -37.9   -38.8   241     4.725   42864           
 F3F2      7E        7653   DB  126T            ;       -40.3   -40.2   242     4.745   46352           
 F3F3      7E        7654   DB  126T            ;       -42.9   -41.6   243     4.765   50423           
 F3F4      7E        7655   DB  126T            ;       -45.6   -43.1   244     4.784   55233           
 F3F5      7E        7656   DB  126T            ;       -48.6   -44.8   245     4.804   61005           
 F3F6      7E        7657   DB  126T            ;       -51.8   -46.6   246     4.824   68060           
 F3F7      7E        7658   DB  126T            ;       -55.3   -48.1   247     4.843   76879           
 F3F8      7E        7659   DB  126T            ;       -59.3   -50.7   248     4.863   88217           
 F3F9      7E        7660   DB  126T            ;       -63.7   -53.2   249     4.882   103335          
 F3FA      7E        7661   DB  126T            ;       -68.8   -56.0   250     4.902   124500          
 F3FB      7E        7662   DB  126T            ;       -75             -59.4   251     4.922   156247          
 F3FC      7E        7663   DB  126T            ;       -82.6   -63.7   252     4.941   209160          
 F3FD      7E        7664   DB  126T            ;       -92.9   -69.4   253     4.961   314985          
 F3FE      7E        7665   DB  126T            ;       -109.5  -78.6   254     4.980   632460          
 F3FF      64        7666   DB  100T        ;                               255 Sensor failure , use 100%               
                     7667  
                     7668  
                     7669  ;------------------------------------------------------------------
 E000                7670         org     $E000
                     7671  ; Tables, copied into RAM on demand
                     7672  ; Most functions will primarily work from the flash copy
                     7673  ; 8 Pages in total
                     7674  
                     7675  flash_table0:  ; config variables
                     7676  
 E000      04        7677  personality_f   db      %00000100    ; Only 1 allowed to be set unless in
                     7678                                       ; EDIS or WHEEL mode, if all are set
                     7679                                       ; to 0 then thats fuel only (std MS)!
                     7680  ;MSNS           equ      1    Megasquirtnspark (TS msnsCyl)
                     7681  ;MSNEON         equ      2    MS neon decoder (TS neonCrank)
                     7682  ;WHEEL          equ      4    generalised decoder 36-1, 60-2 etc (TS wheelon)
                     7683  ;WHEEL2         equ      8    If in WHEEL mode then WHEEL2 is 0 = -1  1 = -2 (TS onetwo)
                     7684  ;EDIS           equ      $10  edis (TS edis)
                     7685  ;DUALEDIS       equ      $20  if in EDIS mode then this allows two edis
                     7686  ;                             modules (for edis4 on V8, edis6 on V12)
                     7687  ;TFI            equ      $40  Ford TFI system (TS tfi)
                     7688  ;HEI7           equ      $80  GM 7 pin HEI (TS hei7)
                     7689  
 E001      32        7690  outputpins_f    db      %00110010
                     7691  ;               bits=    76543210
                     7692  ;               equ 1       FIDLE for Idle Air Valve || spark output (as per MSnS) (TS fidleUse)
                     7693  ;               equ 2       LED17 for squirt led     || coila output (TS LED17Use)
                     7694  ;             (TS led18Use)(TS led182Use)
                     7695  ;                   bit 2    bit 3
                     7696  ;                  LED18_2   LED18    function
                     7697  ;                    0         0       wled
                     7698  ;                    0         1       irq
                     7699  ;                    1         0       output4 or fan control (see bit 6)
                     7700  ;                    1         1       spark c
                     7701  
                     7702  ;REUSE_LED19    equ $10     LED19 for accel led || coilb output (TS LED19Use)
                     7703  ;X2_FAN         equ $20     X2 = water Inj pulsed out || fan control (TS X2use)
                     7704  ;                           ** Please note: Water inj uses X2 to pulse output, X3 will still
                     7705  ;                           come on with water inj or NOS depending on which is on
                     7706  ;
                     7707  ;LED18_FAN      equ $40     LED18 output4 || fan control
                     7708  ;                           ** only allowed if bit 2 = 1 and bit 3 = 0
                     7709  ;Mulitplex Ign  equ $80     NORMAL || toyota DLI ignition (TS toy_dli)
                     7710  ; multiplex
                     7711  
 E002      F0        7712  SRevLimRPM       db      240T; Standard RPM limit for spark retard (rpm*100) (TS SoftRevLim)
 E003      38        7713  SRevLimAngle db      56T     ; Spark retard for above +10 degrees (TS SoftLimRetard)
                     7714                                           ; 10 = 10 + 10 i.e. -10 start point.
                     7715                                           ; So 56T = 10BTDC )
 E004      32        7716  SRevLimHTime db      50T     ; Time in 1/10Sec in Soft limit till (TS SoftLimMax)
                     7717                                           ; hard limit cuts in *0.1
 E005      0A        7718  SRevLimCTime db      10T     ; NOT USED
 E006      FA        7719  RevLimit_f       db      250T; Hard Rev limiter (rpm*100) (TS HardRevLim)
 E007      00        7720  Out1Lim                  db      0T  ; Output1 On point in RAW except for
                     7721                                           ; TEMPS then its in F -40, so 200F switch
                     7722                                           ; on point = 240F
                     7723  
 E008      00        7724  Out1Source       db      0T  ; Output 1 source, index from secl, (TS out1src)
                     7725                                           ; Standard Out1source
                     7726                                           ; This is secl + val up to 30 (ego2 correction)
                     7727                                           ; 31 = Traction control  >31 is not valid as
                     7728                                           ; this is from RAM
                     7729  
 E009      00        7730  Out2Lim                  db      0T  ; Output 2 limit As out1Lim
                     7731  
 E00A      00        7732  Out2Source       db      0T  ; Same as Out1Source (TS out2src)
                     7733  
 E00B      48        7734  feature1_f       db      %01001000
                     7735  ;wd_2trig       equ 1        wheel decoder 2nd trigger i/p - new in 023c9 (TS wd_2trig)
                     7736  ;               spare
                     7737  ;whlsim         equ 4        Wheel simulator          off      on (TS whlsim)
                     7738  ;taeIgnCount equ 8        Acceleration Timer    Seconds^ || Engine Cycles (TS taeIgnCount)
                     7739  ; NOT USE       equ $10      NOT USED NOW 023
                     7740  ;hybridAlphaN        equ $20      Hybrid Alpha N           OFF^ || OFF (TS hybridAN)
                     7741  ;CrankingPW2 equ $40      Fire PW2 during Cranking?   YES^ || NO (TS inj2cr)
                     7742  ;Nitrous         equ $80      Nitrous system              OFF || ON (TS nitrousUse)
                     7743                                                         ;NOT allowed with W Inj
                     7744  
 E00C      00        7745  feature2_f       db      %00000000  ; more features
                     7746  ;BoostControl        equ 1        Boost Controller           OFF || ON (TS boostUse)
                     7747  ;ShiftLight      equ 2        Shift Lights               OFF || ON (TS shiftUse)
                     7748  ;LaunchControl       equ 4        launch Control             OFF || ON (TS launchUse)
                     7749  ;wasPWMidle      equ 8
                     7750  ;                            only if outputpins_f bit 1 = 0
                     7751  ;out3sparkd      equ $10      Output 3             Output 3  || Spark D (TS out3sparkd)
                     7752  ;min_dwell       equ $20
                     7753  ;dwellduty50 equ $40
                     7754  ;config_error        equ $80    this is only set if non-sense combination
                     7755  ;                          of options - don't run.
                     7756  
 E00D      04        7757  whlsimcnt       db      04T ; How many outputs when simulating wheel (TS whlsimcnt)
 E00E      03        7758  bcFreqDiv_f      db      3T  ; Solenoid PW rate BITS 0 1 and 2 used :


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 59
MC68HC908GP32 User Bootloader


                     7759                                           ; "INVALID","39.0 Hz","19.5 Hz","13.0 Hz",
                     7760                                           ; "9.8 Hz","7.8 Hz","6.5 Hz","5.6 Hz"
 E00F      0A        7761  bcUpdate_f       db      10T ; Boost Controller Update Rate in mS
                     7762                                   ; (10min   255max)
 E010      40        7763  bcPgain_f        db      64T ; B Controller P Gain % (0-100% = 0-255 in
                     7764                                           ; MS so MT value displayed = MS*0.3922)
 E011      05        7765  bcDgain_f        db      5T  ; Boost Controller D Gain % (0-100% = 0-255
                     7766                                           ; in MS so MT value displayed = MS*0.3922)
 E012      3A        7767  ShiftLo_f        db      58T ; Shift light LED start point (rpm*100)
 E013      3C        7768  ShiftHi_f        db      60T ; Shift Light Final point (RPM * 100)
 E014      28        7769  LaunchLimit_f   db      40T  ; Hard limit for Launch control (rpm*100)
 E015      0B        7770  edisms_f         db      11T ; max rpm for EDIS multi-spark (rpm*100)
 E016      A0        7771  NosClt_f         db      160T; Nitrous System Min Coolant Temp Minimum
                     7772                                           ; point of coolant for NOS to enable in (F-40)
 E017      1E        7773  NosRpm_f         db      30T ; Nitrous System Min RPM * 100, 3000rpm is
                     7774                                           ; minimum allowed  (23)
 E018      3C        7775  NosRpmMax_f      db      60T ; Nitrous Max RPM *100 (used for
                     7776                                           ; interpolating and cutting nos)
                     7777  
 E019      01        7778  Trig1_f                  db       1T  ; wheel decoding (TS trig1)
 E01A      13        7779  Trig2_f                  db       19T ;  "             (TS trig2)
 E01B      08        7780  Trig3_f                  db       8T  ;  "             (TS trig3)
 E01C      1A        7781  Trig4_f                  db       26T ;  "             (TS trig4)
 E01D      00        7782  Trig1ret_f       db       0T  ;  "             (TS trig1ret)
 E01E      00        7783  Trig2ret_f       db       0T  ;  "             (TS trig2ret)
 E01F      09        7784  Trig3ret_f       db       9T  ;  "             (TS trig3ret)
 E020      1B        7785  Trig4ret_f       db       27T ;  "             (TS trig4ret)
                     7786  
 E021      61        7787  DTmode_f         db      %01100001   ; DualTable control
                     7788  ;                    equ $10          Normal single table mode ^   || Dual Table Mode
                     7789  ;                    equ $20          Gamma E correction OFF for PW1 || Gamma E ON^
                     7790  ;                    equ $40          Gamma E correction OFF for PW2 || Gamma E ON^
 E022                7791  alt_i2t2        equ %00010000  ; inj2: 0 = t1, 1 = t2
 E022                7792  alt_i1ge        equ %00100000  ; (TS inj1g)
 E022                7793  alt_i2ge        equ %01000000  ; (TS inj2g)
 E022                7794  trig2fallb      equ 1          ; 0 = rising edge trigger, 1 = falling edge
 E022                7795  trig2risefallb  equ 2          ; 0 = rising or falling, 1 = rise and falling edge
                     7796  
 E022      00        7797  latency_f       db        0T    ; "known" latency in spark input to output (TS latency)
 E023      00        7798  spare1_2_f      db        0T
 E024      00        7799  spare1_3_f      db        0T
 E025      00        7800  spare1_4_f      db        0T
 E026      00        7801  spare1_5_f      db        0T
                     7802  
 E027      FF        7803  EgoLimitKPa_f        db      255T  ; MAP KPa Point to change Ego +- limit (39) (TS EgoLimKPA)
 E028      05        7804  EgoLim2_f        db      05T   ; New Ego limit when MAP KPa above (TS EgoLim2)
                     7805                                             ; EgoLimitKPa_f
 E029      1E        7806  LC_Throttle_f        db      30T       ; Throttle position in RAW data for launch
                     7807                                             ; control mode
 E02A      2A        7808  LC_LimAngle_f        db      42T       ; Launch control soft limiter angle
                     7809                                             ; *0.352   -28.4     -10 to 45 allowed
 E02B      23        7810  LC_Soft_Rpm_f        db      35T       ; Launch Soft Limit RPM (43)
 E02C      00        7811  Over_B_P_f       db      0T    ; Over boost Protection KPa setpoint
                     7812                                             ; <100 = no boost protection
 E02D      03        7813  SparkCutNum_f        db      3T        ; Rev Limiter Hard cut spark cut number to (TS HCutSpark)
                     7814                                             ; remove sparks from SparkCutBase_f
                     7815  
 E02E      B1        7816  feature3_f       db      %10110001  ; (46)
 E02F                7817  KPaTpsOpenb     equ 1          ; (TS OLoopEgo)
 E02F                7818  VarLaunchb      equ 2
 E02F                7819  CltIatIgnitionb equ 4          ; (TS CltAdv)
 E02F                7820  WaterInjb       equ 8
 E02F                7821  Fuel_SparkHardb equ $10        ; Fuel or Spark cut for Rev limiter
 E02F                7822  FuelSparkCutb   equ $20        ; Fuel or spark cut for Rev limiter
 E02F                7823  KnockDetb       equ $40        ; (TS KnockOn)
 E02F                7824  TargetAFRb      equ $80        ; (TS AfrTar)
                     7825  
 E02F      B4        7826  cltAdvance_f db      180T    ; Advance ignition whilst temp below this value F -40
 E030      1B        7827  cltDeg_f         db      27T     ; Add 1 degree of advance for this value(F)
                     7828                                               ; below cltAdvance_f, so if
                     7829                                               ; cltAdvance_f=120(80F) and cltDeg_f=20 then
                     7830                                  ; at 10F advance will be 80-10/20= 3.5
 E031      0F        7831  maxAdvAng_f      db      15T     ; Limit in degrees of advance for coolant
                     7832                                               ; related advance so it doesnt add loads of
                     7833                                               ; advance when very cold *0.352
 E032      12        7834  iatDeg_f         db      18T     ; Iat Temp for 1 degree of retard related
                     7835                                               ; to IAT, exactly the same as cltDeg_f but
                     7836                                               ; retard rather than advance and
                     7837                                  ; IAT rather that CLT. F
 E033      4B        7838  kpaRetard_f      db      75T     ; Apply the IAT related retard when above
                     7839                                               ; this KPa, to stop retard at tickover
 E034      C8        7840  iatDanger_f      db      200T    ; Iat Temp to start Retard F -40
 E035      37        7841  KnockRpmL_f      db      55T     ; Knock sensor max rpm RPM*100 (53)
 E036      0F        7842  KnockRpmLL_f db      15T     ; Knock sensor min rpm RPM*100
 E037      FF        7843  KnockKpaL_f      db      255T    ; knock sensor max KPa
 E038      06        7844  KnockRet1_f      db      06T     ; First Retard amount for knock system *0.352
 E039      03        7845  KnockRet2_f      db      03T     ; Subsequent Retard amount *0.352
 E03A      03        7846  KnockAdv_f       db      03T     ; Advance amount for knock system *0.352
 E03B      0F        7847  KnockMax_f       db      15T     ; Max Allowable retard *0.352
 E03C      01        7848  KnockTim_f       db      01T     ; Timer for steps of knock advance / retard
                     7849                                               ; to be applied in Seconds 1
 E03D      64        7850  iatpoint_f       db      100T    ; Water Inj IAT setpoint point F -40 (61)
 E03E      78        7851  wateripoint_f        db      120T    ; Water Injection KPa setpoint
 E03F      23        7852  wateriRpm_f      db      35T     ; Water Injection RPM setpoint RPM*100
 E040      78        7853  kpaO2_f                  db      120T    ; KPa Open loop setpoint for no O2 correction (TS KpaOn)
 E041      FF        7854  tpsO2_f                  db      255T    ; TPS Open Loop setpoint for no O2 correction Raw ADC (TS tpsOn)
                     7855  
 E042      00        7856  feature4_f       db      %00000000; Another feature bit for enhanced (66)
 E043                7857  miss2ndb        equ 1           ; Missing tooth AND 2nd trigger
 E043                7858  InvertOutOneb   equ 2
 E043                7859  InvertOutTwob   equ 4
 E043                7860  multisparkb     equ 8           ; EDIS multi-spark
 E043                7861  KPaDotBoostb    equ $10
 E043                7862  DtNosb          equ $20         ; If DT which Bank do we add NOS PW to (Bank1=0 Bank2=1)
 E043                7863  OverRunOnb      equ $40         ; (TS OverRunC)
 E043                7864  KpaDotSetb      equ $80         ; (TS AccDecEnrich)
                     7865  
 E043      C8        7866  NosTps_f         db      200T    ; Nitrous System Min TPS RAW ADC
 E044      32        7867  NosAngle_f       db      50T     ; Nitrous System Angle to remove from
                     7868                                               ; ignition *0.352 (68)
 E045      0C        7869  NosFuelLo_f      db      12T     ; Nitrous Pulse Width to add to fuel at
                     7870                                               ; 3000 rpm *0.1 in mSec this is for
                     7871                                               ; additional fuel for NOS
 E046      03        7872  NosFuelHi_f      db      03T     ; Nitrous Pulse Width to add to fuel at
                     7873                                               ; NosRpmMax_f *0.1 in mSec
 E047      11        7874  ORunRpm_f        db      17T     ; Max RPM for Over run fuel cut *100
 E048      14        7875  ORunKpa_f        db      20T     ; Over run fuel cut when below kpa
 E049      05        7876  ORunTPS_f        db      05T     ; Over run when throttle position lower than this RAW ADC (73)
 E04A      EA        7877  EfanOnTemp_f db      234T    ; X2 or LED 17 electric fan output on temp (TS efanontemp)
                     7878                                               ; F-40
 E04B      B9        7879  EfanOffTemp_f        db      185T    ; X2 or LED 17 electric fan output off temp (TS efanofftemp)
                     7880                                               ; F-40
                     7881  
 E04C      33        7882  feature5_f       db      %00110011  ; Yet another feature bit (76)
 E04D                7883  Fuel_SparkHLCb  equ 1       ; Fuel or Spark cut for Launch (TS HcutType)
 E04D                7884  FuelSparkLCb    equ 2       ; Fuel or Spark cut for Launch (TS HcutType)
 E04D                7885  stagedb:        equ 4       ; Roger Enns Staged Mode   xxxx00xx = Staged Off  xxxx01xx = RPM Based (TS IStagedMode)
 E04D                7886  stagedModeb:    equ 8       ; Roger Enns Staged Mode   xxxx10xx = MAP Based   xxxx11xx = TPS Based
 E04D                7887  stagedeither:   equ $0c     ; either staging
 E04D                7888  BoostCutb:      equ $10     ; Over boost Cut type, option2 or spark cut (TS OvrBCutBNum)
 E04D                7889  BoostCut2b:     equ $20     ; Option2 for Over boost Cut type, fuel only or both fuel and spark  (TS OvrBCutBNum)
 E04D                7890  NosLagSystemb:  equ $40     ; Nos Anti-lag System used
 E04D                7891  SparkTable2b:   equ $80     ; Second Spark Table (ST STTable2On)
                     7892  
                     7893  
 E04D      03        7894  SparkCutNLC_f        db      03T     ; Launch control spark cut, this is the (TS HCutLCSpark)


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 60
MC68HC908GP32 User Bootloader


                     7895                                           ; amount of sparks to remove from
                     7896                                           ; SparkCutBase_f when in Launch hard cut
 E04E      06        7897  SparkCutBase_f       db      06T     ; Base number to cut sparks from MS (TS SparkCutBase)
                     7898                                           ; = MT value - 1
 E04F      FF        7899  SCALEFAC_f       db      255T; Scaling factor for STAGED INJECTION MODE
                     7900                                           ; (prim flow/total flow*100) 255=100% 123=50%
 E050      19        7901  STGTRANS_f       db      25T ; Staged transition point, rpm*100, kpa,
                     7902                                           ; or tps raw adc depending on staging
                     7903                                           ; method selected (See feature5_f bits 3-4)
 E051      03        7904  STGDELTA_f       db      03T ; Staged operation off at (STGTRANS-STGDELTA)
                     7905                                           ; so this is raw data as STGTRANS
 E052      74        7906  BarroHi_f        db      116T; Barometric Correction Max Limit in KPa (82) (TS BarroHi)
 E053      43        7907  BarroLow_f       db      67T ; Barometric Correction Lower Limit in KPa (TS BarroLow)
 E054      03        7908  SparkCutBNum_f       db      03T     ; Number of sparks to remove from BASE value
                     7909                                           ; when Over Boost
 E055      50        7910  NosLowKpa_f      db      80T ; Minimum KPa to fire Nos Anti-lag
 E056      78        7911  NosHiKpa_f       db      120T; Maximum KPa to fire Nos Anti-lag,
                     7912                                           ; Anti-lag will switch off when this is reached
 E057      00        7913  Spark2Delay_f        db      00T     ; Delay for Spark Table 2 to come in when
                     7914                                           ; input received. *0.1   1/10Sec
 E058      00        7915  Out1UpLim_f      db      00T ; Output 1 top limit for window, so output1
                     7916                                           ; will go off above this value unless its 0
                     7917                                           ; then its ignored
 E059      00        7918  Out2UpLim_f      db      00T ; Output 2 top limit for window (89)
 E05A      24        7919  NumTeeth_f       db      36T ; Number of teeth for wheel decoder (TS numteeth)
 E05B      1E        7920  MAPThresh_f      db      30T ; MAP dot threshold for Accel Decel
                     7921                                           ; Enrichments *10 (KPa/Sec)
                     7922  
 E05C      08        7923  feature6_f       db      %00001000  ; More feature bits (92)
 E05D                7924  VETable3b       equ 1       ; Use VE table 3 (TS UseVE3)
 E05D                7925  TargetAFR3b     equ 2       ; Use Target AFR for VE3
 E05D                7926  falsetrigb      equ 4       ; 0=Enable false trigger protection, 1=disable    ;* (TS falsetrig_dis not used)
 E05D                7927  wheel_oldb      equ 8       ; 0= new(025) wheel decoder or 1=old(024s9) style ;* (TS wheel_old)
 E05D                7928  dualdizzyb      equ $10     ; (TS dualdizzy)
 E05D                7929  TractionCb      equ $20     ; Traction control system on (TS TractionOn)
 E05D                7930  BoostDirb       equ $40     ; Direction for boost control output
 E05D                7931  NoDecelBoostb   equ $80     ; No decelleration when in boost (TS DecelBoost)
                     7932  
 E05D      00        7933  VE3Delay_f       db      00T ; Delay for VE Table 3 to come in when
                     7934                                           ; input received. *0.1   1/10Sec
                     7935  RPMrate_f:
 E05E      00        7936                   db      00T ; Fuel enrichment in mSec for 3000RPM/Sec
                     7937                                           ; increase or 5% slip if in VSS mode *0.1
 E05F      64        7938                       db     100T     ; Fuel enrichment in mSec for 4000RPM/Sec
                     7939                                           ; increase or 15% slip if in VSS mode *0.1
 E060      96        7940                       db     150T     ; Fuel enrichment in mSec for 6000RPM/Sec
                     7941                                           ; increase or 30% slip if in VSS mode *0.1 (96)
 E061      C8        7942                       db     200T     ; Fuel enrichment in mSec for 10000RPM/Sec
                     7943                                           ; increase or 70% slip if in VSS mode *0.1
                     7944  
 E062      02        7945  RPMthresh_f      db      2T  ; Threshhold for RPM change for traction (TS RPMThresh)
                     7946                                           ; (rpm * 1000) because it checks every 1/10
                     7947                                           ; sec and rpm = rpm*100. So 2 = 2000RPM/Sec
                     7948                                           ; threshold
                     7949  TractDeg_f:
 E063      00        7950                   db      00T ; Ignition retard in Degrees for 3000RPM/Sec
                     7951                                           ; increase or 5% slip if in VSS mode *0.352
 E064      38        7952                   db      56T ; Ignition retard in Degrees for 4000RPM/Sec
                     7953                                           ; increase or 15% slip if in VSS mode *0.352
 E065      38        7954                   db      56T ; Ignition retard in Degrees for 6000RPM/Sec
                     7955                                           ; increase or 30% slip if in VSS mode *0.352
 E066      55        7956                   db      85T ; Ignition retard in Degrees for 10000RPM/Sec
                     7957                                           ; increase or 70% slip if in VSS mode *0.352(102)
                     7958  TractSpark_f:
 E067      00        7959                   db      00T ; Spark Cut from Base number for 3000RPM/Sec
                     7960                                           ; increase or 5% slip if in VSS mode MAX
                     7961                                           ; ALLOWED 5
 E068      00        7962                   db      00T ; Spark Cut from Base number for 4000RPM/Sec
                     7963                                           ; increase or 15% slip if in VSS mode
 E069      01        7964                   db      01T ; Spark Cut from Base number for 6000RPM/Sec
                     7965                                           ; increase or 30% slip if in VSS mode
 E06A      02        7966                   db      02T ; Spark Cut from Base number for 10000RPM/Sec
                     7967                                           ; increase or 70% slip if in VSS mode (106)
                     7968  
 E06B      00        7969  BoostKnock_f db      00T     ; Boost to remove from controller target when
                     7970                                           ; Knock detected (PSI) so value of MS 1 = 7KPa
 E06C      1E        7971  BoostKnMax_f db      30T     ; Max Boost to remove when knocking in PSI so
                     7972                                           ; send 1 to MS this is 7KPa inside the code
                     7973  
 E06D      02        7974  feature7_f       db      %00000010  ; More feature bits     (109)
                     7975  ;029g changed to enable dwell by default
                     7976  ;TractionNos equ 1   Turn Nos off in Traction Control if traction lost,
                     7977                        ; only if Traction oN TractionCb:feature6 bit 6
                     7978  ;dwellcont       equ 2   Real (crude) dwell control (TS dwellcont)
                     7979  ;TCcycleSec      equ 4   Hold traction settings for cycles || untill rpm
                     7980                                     ; stable for 0.1S only if Traction ON
                     7981                                     ; see TractionCb:feature6 bit 6
                     7982  ;WheelSensor equ 8   Traction control    RPM Based || VSS (TS TractMode)
                     7983                                     ; only if Traction ON
                     7984                                     ; see TractionCb:feature6 bit 6
                     7985  ;AlphaTarAFR equ $10  speed density for target afr tables || Alpha-N (TS KpaTPSTar)
                     7986                                     ; only if Target AFR tables ON
                     7987                                     ; see TargetAFRb:feature3 bit 8
                     7988  ;TPSTargetAFR        equ $20    0=  Use Target AFR all the while || 1=Only when (TS TPSTar)
                     7989                                     ; TPS above AFRTarTPS_f  if Target AFR
                     7990                                     ; tables ON
                     7991                                     ; see TargetAFRb:feature3 bit 8
                     7992  ;spare               equ $40
                     7993  ;spare               equ $80
                     7994  
 E06E      2D        7995  dwellcrank_f db       45T ; cranking dwell in 0.1ms (TS dwellcrank)(NOT USED)
 E06F      1E        7996  dwellrun_f       db       30T ; running  dwell in 0.1ms  (111) (TS dwellrun)
                     7997  
                     7998  TractCycle_f:
 E070      03        7999                   db      03T ; Engine cycles to hold enrichment /
                     8000                                           ; spark cut / retard for 3000RPM/Sec increase
                     8001                                           ; or 5% slip if in VSS mode
 E071      05        8002                   db      05T ; Engine cycles to hold enrichment /
                     8003                                           ; spark cut / retard for 4000RPM/Sec increase
                     8004                                           ; or 15% slip if in VSS mode
 E072      08        8005                   db      08T ; Engine cycles to hold enrichment /
                     8006                                           ; spark cut / retard for 6000RPM/Sec increase
                     8007                                           ; or 30% slip if in VSS mode
 E073      0C        8008                   db      12T ; Engine cycles to hold enrichment /
                     8009                                           ; spark cut / retard for 15000RPM/Sec increase
                     8010                                           ; or 70% slip if in VSS mode
                     8011  
 E074      40        8012  feature8_f       db      %01000000  ; More feature bits (116)
                     8013  ;spare 1
                     8014  ;spare 2
 E075                8015  BoostTable3b:   equ 4      ; Use boost table 3 when switch table input on
 E075                8016  spkeopb         equ 8      ; Enable spark E output (instead of shiftlight)(TS spkeop)
 E075                8017  spkfopb         equ $10    ; Enable spark F output (instead of knock in)(TS spkfop)
 E075                8018  DecelMAPb:      equ $20    ; Use MAP for Decel
 E075                8019  InterpAcelb:    equ $40    ; Interpole the accel enrichments down to a setpoint (TS DecayAccel)
 E075                8020  Out1_Out3b:     equ $80    ; Output3 only if output1 is on. (TS Out3_Out1)
                     8021  
 E075      00        8022  UDSpeedLo_f      db       00T ; Min speed from the Undriven wheel for
                     8023                                            ;traction to work at. Volts *0.0196  5V=255
 E076      FF        8024  UDSpeedLim_f db      255T ; Max speed from the Undriven wheel for
                     8025                                            ; traction to work at. Volts *0.0196  5V=255
 E077      7D        8026  TCScaleFac_f db      125T ; Difference factor for speed inputs from
                     8027                                            ; driven and undriven inputs
                     8028                                            ; (255=100%) *0.39216
 E078      19        8029  TCSlipFac_f      db      25T  ; Slip allowed between wheel sensors at low
                     8030                                            ; speed (255=100%) *0.39216


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 61
MC68HC908GP32 User Bootloader


 E079      FF        8031  AFRTarTPS_f      db      255T ; TPS setpoint to go over to switch to target
                     8032                                            ; afr tables in RAW ADC (121)
 E07A      00        8033  spare1          db      00T
 E07B      05        8034  TCSlipFacH_f db       5T      ; Slip allowed between wheel sensors at
                     8035                                            ; high speed (255=100%) *0.39216
 E07C      FF        8036  LC_flatsel_f db      255T ; rpm above which arms flat shift mode
 E07D      FF        8037  bc_max_diff      db      255T ; Boost Controller max Difference in KPa
 E07E      00        8038  Out1Hys_f        db      00T  ; Hysterisis for Output1 in Raw ADC (126)
 E07F      00        8039  Out2Hys_f        db      00T  ; Hysterisis for Output2 in Raw ADC
 E080      37        8040  LC_flatlim      db      55T  ; flat shift revlimit
 E081      FF        8041  DecelKpa_f       db      255T ; No Decel enrichment above this value in
                     8042                                            ; KPa (129)
 E082      00        8043  OverRunT_f       db      00T  ; Over Run Timer before enabling over run
                     8044                                            ; in Seconds *1
 E083      FF        8045  BarCorr300_f db      255T ; Correction factor for KPA Factor for
                     8046                                            ; 300KPa sensor and 400KPa sensors only.
                     8047                                            ; 255=100% *0.39216
                     8048                                            ; (24%=GM300 28%=6300A Series and
                     8049                                            ; 78%= 6400A series)
                     8050  
 E084      00        8051  Out3Source_f db      00T     ; Same as Out1Source (TS out3src bits0:4)
                     8052  
 E085      00        8053  Out3Lim_f        db      00T ; Output 3 On/Off Limit as per standard MSnS (TS out3lim)
 E086      00        8054  TimerOut3_f      db      00T ; Output 3 OFF delay timer in Seconds (134) *1 (TS out3Timer)
 E087      00        8055  iatBoostSt_f db      00T     ; Start point for boost reduction related to
                     8056                                           ; IAT when using Boost controller F -40
 E088      00        8057  iatBoost_f       db      00T ; Amount of IAT to remove 1 PSI from boost
                     8058                                           ; controller F, same theory as cltDeg_f
 E089      00        8059  tpsBooIAT_f      db      00T ; TPS point to start removing boost from
                     8060                                           ; boost controller in RAW ADC
                     8061  
 E08A      00        8062  Out4Source_f db      00T     ; Same as Out1Source
                     8063  
 E08B      00        8064  Out4Lim_f        db      00T ; Output 4 On/Off Limit as per MSnS
 E08C      00        8065  LC_f_slim_f      db      00T ; Retard timing above this rpm in flat shift mode
 E08D      00        8066  LC_f_limangle_f      db      00T     ; Retard timing to this in flat shift mode
 E08E      00        8067  spare3_f         db      00T ;   ** SPARE **
 E08F      05        8068  mindischg_f      db      05T ; minimum discharge period for dwell (TS mindischg)
                     8069                                           ; control in mSec *0.1
                     8070  
                     8071  ;pwm idle was here
                     8072  
 E090      04        8073  tachconf_f      db      4T  ; tach output config (159) (TS tachconf tachconf bits0:2)tachconfdiv bit7
 E091      0B        8074  Trig5_f                  db      11T ; wheel decoding (160) (TS trig5)
 E092      1D        8075  Trig6_f                  db      29T ;  "                   (TS trig6)
 E093      00        8076  Trig5ret_f       db      0T  ;  "                   (TS trig5ret)
 E094      00        8077  Trig6ret_f       db      0T  ;  "                   (TS trig6ret)
                     8078  
                     8079  
                     8080  RPMbasedrate_f:
 E095      05        8081                   db      05T ; These next 4 are for adding AE based on engine rpm
 E096      14        8082                  db       20T ; This is the actual engine rpm settings
 E097      23        8083                   db      35T ;
 E098      37        8084                   db      55T ; (167)
 E099      01        8085  RPMAQ_f2        db      01T ; Amount of fuel to add for 1st area of rpm based AE
 E09A      0A        8086                  db      10T ; Fuel for 2nd rpm area
 E09B      0F        8087                  db      15T ; Fuel for 3rd
 E09C      14        8088  RPMAQL_f2:      db      20T ; Fuel for 4th (171)
                     8089  
 E09D      00        8090  n2odel_launch_f: db     00T ; delay from launch to nitrous activation
 E09E      00        8091  n2odel_flat_f:   db     00T ; delay from flat shift to nitrous activation
 E09F      00        8092  n2oholdon_f:     db     00T ; how long do extra nitrous fuel and retard hold on
                     8093  
 E0A0      00        8094  xxKPaCorr300_f  db      00T ; KPa correction factor for 400/300KPa sensor (175)
                     8095  
                     8096  
                     8097  tpsdotrate:
 E0A1      0A        8098                   db      10T ; These next 4 are delta points for TPSdot
                     8099                                           ; V/Sec
                     8100                                           ; these were hard coded points, now users can
                     8101                                           ; select what values
                     8102                                           ; they want where. *0.1960784 MAX=25.5
 E0A2      27        8103                   db      39T ; So 40 = 0.8V/0.1Sec or 8V/Sec as we check it
                     8104                                           ; every 0.1Sec
 E0A3      4E        8105                   db      78T ;
 E0A4      96        8106                   db      150T; (179)
                     8107  mapdotrate_f:
 E0A5      05        8108                   db      05T ; These next 4 are delta points for MAPdot
                     8109                                           ; KPa/Sec *10 so 255=2550KPa/Sec as we check it
                     8110                                           ; every 0.1Sec
 E0A6      0A        8111                  db       10T ;
 E0A7      0F        8112                   db      15T ;
 E0A8      19        8113                   db      25T ; (183)
                     8114  MAPAQ_f:
 E0A9      14        8115                   db      20T ; Enrichment to add in mSec for first Delta
                     8116                                           ; mapdotrate_f when in MAPdot mode *0.1
                     8117                                           ; these are all interpoled values)
 E0AA      32        8118                   db      50T ; Enrichment to add in mSec for second Delta
                     8119                                           ; mapdotrate_f when in MAPdot mode *0.1
 E0AB      69        8120                   db      105T; Enrichment to add in mSec for third Delta
                     8121                                           ; mapdotrate_f when in MAPdot mode *0.1
 E0AC      96        8122                   db      150T; Enrichment to add in mSec for fourth Delta
                     8123                                           ; mapdotrate_f when in MAPdot mode *0.1 (187)
                     8124  TPSAQ_f1:
 E0AD      14        8125                   db      20T ; Enrichment to add in mSec for first Delta
                     8126                                         ; tpsdotrate_f when in TPSdot mode *0.1
 E0AE      32        8127                   db      50T ; Enrichment to add in mSec for second Delta
                     8128                                           ; tpsdotrate_f when in TPSdot mode *0.1
 E0AF      69        8129                   db      105T; Enrichment to add in mSec for third Delta ;
                     8130                                           ; tpsdotrate_f when in TPSdot mode *0.1
 E0B0      96        8131                   db      150T; Enrichment to add in mSec for fourth Delta ;
                     8132                                           ; tpsdotrate_f when in TPSdot mode *0.1
                     8133  
 E0B1      5A        8134  TPSACOLD_f1      db      90T ; TPSACOLD (ms to add in when cold) *0.1 (TS taeCold4)
 E0B2      03        8135  TPSTHRESH_f1 db      03T     ; TPSTHRESH for Accel enrichment when in (TS tpsThresh)
                     8136                                           ; TPS mode *0.1953125
 E0B3      02        8137  TPSASYNC_f1      db      02T ; TPSASYNC (accel enrich time in 1/10 (TS taeTime4)
                     8138                                           ; second increments) or in Enfgine Cycles.
 E0B4      64        8139  TPSDQ_f1         db      100T; TPSDQ   (195) (TS tdePct4) (TS taeColdM4)
 E0B5      64        8140  ACMULT_f1        db      100T; Cold ACCELMULT
 E0B6      64        8141  OverRunClt_f1        db      100T; No Over run fuel cut when below this
                     8142                                           ; coolant temp F-40 (197)
 E0B7      00        8143  AccelDecay_f db       00T; This is the value in mS that the Accel
                     8144                                           ; enrichment will end up at when the timer
                     8145                                           ; has run. *0.1
                     8146  
 E0B8      00        8147  feature9_f       db  %00000000       ;  (199)
 E0B9                8148  CrankPWTableb:  equ 1       ; Use cranking PW Table
 E0B9                8149  ASETableb:      equ 2       ; After start enrichment use table
 E0B9                8150  NoAccelASEb:    equ 4       ; No Accel Enrich during After start enrichment
 E0B9                8151  BaroCorConstb:  equ 8       ; If Alpha-n Mode then do we use MAP for Baro cor constantly.
 E0B9                8152  RpmAEBased:     equ $10     ; RPM Based Accel Enrichment (TS RPMBasedAE)
 E0B9                8153  MassAirFlwb:    equ $20     ; Using Mass AirFlow meter instead of a MAP sensor. (TS AFMUse)
 E0B9                8154  NoAirFactorb:   equ $40     ; If using MAF do we use Air Density in fueling cals?
 E0B9                8155  ConsBarCorb:    equ $80     ; Constant Bar Cor using MAP on X7 (TS ConsBaroCor)
                     8156  
 E0B9      64        8157  Pambient_f:     db  100T    ; raw byte value ambient pressure for boost control
                     8158  
                     8159  ;NOTE! do not add any more data to table 0. Any more and stack may collide when in RAM.
                     8160  ;ends at $E0C8
                     8161  ;In 025x1 VE_r=$0106, so end of ram copy of data is $0106+$C8 = $1CE
                     8162  ; lowest observed stack was $1DB, leaving $D (13) bytes free.
                     8163  ; Will reserve 10 more bytes in .h for 025y, but that's it unless these data pages get
                     8164  ; reduced.
                     8165  ; That should make VE_r = $110 highest.
                     8166  


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 62
MC68HC908GP32 User Bootloader


                     8167  flash_table0_end:                ;marker for easy lookup in lst file
                     8168  
 E100                8169          org     $E100
                     8170  flash_table1:           ; FUEL 1   12x12 Total Bytes = 144
                     8171  VE_f1:
 E100      2A292927  8172       db      42T,41T,41T,39T,41T,42T,42T,42T,42T,42T,42T,42T ; VE(0,0-11)
           292A2A2A 
           2A2A2A2A 
 E10C      2B2B2A27  8173       db      43T,43T,42T,39T,41T,42T,42T,42T,42T,42T,42T,42T ; VE (1,0-11)
           292A2A2A 
           2A2A2A2A 
 E118      2E2D2C2C  8174       db      46T,45T,44T,44T,44T,44T,44T,45T,46T,46T,46T,46T ; VE (2,0-11)
           2C2C2C2D 
           2E2E2E2E 
 E124      3A352E2E  8175       db      58T,53T,46T,46T,47T,48T,49T,49T,49T,49T,49T,49T ; VE (3,0-11)
           2F303131 
           31313131 
 E130      4A3D3533  8176       db      74T,61T,53T,51T,52T,53T,55T,56T,57T,58T,59T,59T ; VE (4,0-11)
           34353738 
           393A3B3B 
 E13C      523F3734  8177       db      82T,63T,55T,52T,53T,55T,56T,57T,59T,59T,60T,60T ; VE (5,0-11)
           35373839 
           3B3B3C3C 
 E148      52443B38  8178       db      82T,68T,59T,56T,57T,59T,60T,63T,63T,63T,63T,63T ; VE (6,0-11)
           393B3C3F 
           3F3F3F3F 
 E154      524A3F3A  8179       db      82T,74T,63T,58T,59T,60T,62T,63T,63T,63T,63T,63T ; VE (7,0-11)
           3B3C3E3F 
           3F3F3F3F 
 E160      524D4242  8180       db      82T,77T,66T,66T,66T,67T,68T,66T,63T,63T,63T,63T ; VE (8,0-11)
           42434442 
           3F3F3F3F 
 E16C      53545656  8181       db      83T,84T,86T,86T,86T,85T,84T,85T,89T,90T,95T,100T ; VE (9,0-11)
           56555455 
           595A5F64 
 E178      53545758  8182       db      83T,84T,87T,88T,89T,91T,92T,94T,94T,94T,96T,100T ; VE (10,0-11)
           595B5C5E 
           5E5E6064 
 E184      54545758  8183       db      84T,84T,87T,88T,89T,91T,92T,94T,96T,97T,98T,100T ; VE (11,0-11)
           595B5C5E 
           60616264 
                     8184  
 E190      C8        8185  EGOTEMP_f        db      200T; EGOTEMP (TS egoTemp1)
 E191      10        8186  EGOCOUNTCMP_f        db      16T     ; EGOCOUNTCMP (TS egoCount1)
 E192      00        8187  EGODELTA_f       db      0T  ; EGODELTA (TS egoDelta1)
 E193      0F        8188  EGOLIMIT_f       db      15T ; EGOLIMIT (TS egoLimit1)
 E194      68        8189  REQ_FUEL_f1      db      104T; REQFUEL (148) (TS reqFuel1)
 E195      04        8190  DIVIDER_f1       db      4T  ; DIVIDER (TS divider1)
 E196      01        8191  Alternate_f1 db      1T      ; alternate or simult (single table ONLY)(TS alternate1)
 E197      09        8192  INJOPEN_f1       db      9T  ; INJOPEN (TS injOpen)
 E198      00        8193  INJOCFUEL_f1 db      0T      ; INJOCFUEL  NOT USED NOW !!!!!
                     8194                                           ; Kept to fill hole
 E199      4B        8195  INJPWM_f1        db      75T ; INJPWM
 E19A      FF        8196  INJPWMT_f1       db      255T; INJPWMT
 E19B      14        8197  BATTFAC_f1       db      20T ; BATTFAC (TS battFac1)
 E19C      05        8198  rpmk_f1                  db      $05 ; RPMK[0]
 E19D      DC        8199                       db      $DC     ; RPMK[1]
                     8200  RPMRANGEVE_f1:
 E19E      05        8201                   db      5T  ; RPMRANGEVE[0]                             ;* 158 Tuner Studio rpmBins1
 E19F      09        8202                   db      9T  ; RPMRANGEVE[1]                             ;* 159
 E1A0      0C        8203                   db      12T ; RPMRANGEVE[2]                             ;* 160
 E1A1      10        8204                   db      16T ; RPMRANGEVE[3]                             ;* 161
 E1A2      14        8205                   db      20T ; RPMRANGEVE[4]                             ;* 162
 E1A3      17        8206                   db      23T ; RPMRANGEVE[5]                             ;* 163
 E1A4      1B        8207                   db      27T ; RPMRANGEVE[6]                             ;* 164
 E1A5      1E        8208                   db      30T ; RPMRANGEVE[7]                             ;* 165
 E1A6      22        8209                   db      34T ; RPMRANGEVE[8]                             ;* 166
 E1A7      26        8210                   db      38T ; RPMRANGEVE[9]                             ;* 167
 E1A8      29        8211                   db      41T ; RPMRANGEVE[10]                            ;* 168
 E1A9      2D        8212                   db      45T ; RPMRANGEVE[11]
                     8213  KPARANGEVE_f1:
 E1AA      14        8214                   db      20T ; KPARANGEVE[0]                             ;* 170 Tuner Studio mapBins1
 E1AB      1B        8215                   db      27T ; KPARANGEVE[1]                             ;* 171
 E1AC      23        8216                   db      35T ; KPARANGEVE[2]                             ;* 172
 E1AD      2A        8217                       db      42T     ; KPARANGEVE[3]                             ;* 173
 E1AE      31        8218                   db      49T ; KPARANGEVE[4]                             ;* 174
 E1AF      38        8219                   db      56T ; KPARANGEVE[5]                             ;* 175
 E1B0      40        8220                   db      64T ; KPARANGEVE[6]                             ;* 176
 E1B1      47        8221                   db      71T ; KPARANGEVE[7]                             ;* 177
 E1B2      4E        8222                   db      78T ; KPARANGEVE[8]                             ;* 178
 E1B3      55        8223                   db      85T ; KPARANGEVE[9]                             ;* 179
 E1B4      5D        8224                   db      93T ; KPARANGEVE[10]                            ;* 180
 E1B5      64        8225                   db      100T; KPARANGEVE[11]                            ;* 181
                     8226  
                     8227  
 E1B6      31        8228  config11_f1      db      49T ; Config11 (originally 113T for 8 cyl) (182)TS Config1 (= %00110001, $31, 49T)
                     8229  ;  Bit 0-1 = MAP Type
                     8230  ;            00 = MPX4115AP
                     8231  ;            01 = MPX4250AP
                     8232  ;            10 = MPXH6300A
                     8233  ;            11 = MPXH6400A
                     8234  ;  Bit 2   = Engine Stroke
                     8235  ;            0 = Four Stroke
                     8236  ;            1 = Two Stroke
                     8237  ;  Bit 3   = Injection Type - NOT USED!
                     8238  ;            0 = Port Injection
                     8239  ;            1 = Throttle Body
                     8240  ;  Bit 4-7 = Number of Cylinders
                     8241  ;            0000 = 1 cylinder
                     8242  ;            0001 = 2 cylinders
                     8243  ;            0010 = 3 cylinders
                     8244  ;            0011 = 4 cylinders
                     8245  ;            0100 = 5 cylinder
                     8246  ;            0101 = 6 cylinders
                     8247  ;            0110 = 7 cylinders
                     8248  ;            0111 = 8 cylinders
                     8249  ;            1000 = 9 cylinders
                     8250  ;            1001 = 10 cylinders
                     8251  ;            1010 = 11 cylinders
                     8252  ;            1011 = 12 cylinders
                     8253  ;* TS mapSensor1 bit0 (= 0)
                     8254  ;* TS mapType1 bit0:1 (= 1 (250 KPA))
                     8255  ;* TS twoStroke1 bit2 (= 0 Four_Stroke)
                     8256  ;* bit3 Not Used (= 0)
                     8257  ;* TS nCylinders1 bit4 (= 1 Four Cyl)
                     8258  ;* TS nCylinders1 bit5 (= 1 Four Cyl)
                     8259  ;* TS nCylinders1 bit6 (= 0)
                     8260  ;* TS nCylinders1 bit7 (= 0)
 E1B7      3A        8261  config12_f1      db      58T ; Config12 (originally 112T for 8 injectors)TS Config2 (= %00111010, $3A, 58T)
                     8262  ;  Bit 0-1 = COOL Sensor Type
                     8263  ;            00 = GM
                     8264  ;            01 = User-defined
                     8265  ;            10 = User-defined
                     8266  ;            11 = User-Defined
                     8267  ;  Bit 2-3 = MAT Sensor Type
                     8268  ;            00 = GM
                     8269  ;            01 = Undefined
                     8270  ;            10 = Undefined
                     8271  ;            11 = Undefined
                     8272  ;  Bit 4-7 = Number of Injectors
                     8273  ;            0000 = 1 Injector
                     8274  ;            0001 = 2 Injectors
                     8275  ;            0010 = 3 Injectors
                     8276  ;            0011 = 4 Injectors
                     8277  ;            0100 = 5 Injectors
                     8278  ;            0101 = 6 Injectors


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 63
MC68HC908GP32 User Bootloader


                     8279  ;            0110 = 7 Injectors
                     8280  ;            0111 = 8 Injectors
                     8281  ;            1000 = 9 Injectors
                     8282  ;            1001 = 10 Injectors
                     8283  ;            1010 = 11 Injectors
                     8284  ;            1011 = 12 Injectors
                     8285  ;* TS cltType1 bit0 (= 0 unknown1)
                     8286  ;* TS cltType1 bit1 (= 1 unknown2)
                     8287  ;* TS matType1 bit2 (= 0 unknown1)
                     8288  ;* TS matType1 bit3 (= 1 unknown2)
                     8289  ;* TS nInjectors1 bit4 (= 1 Four Cyl)
                     8290  ;* TS nInjectors1 bit5 (= 1 Four Cyl)
                     8291  ;* TS nInjectors1 bit6 (= 0)
                     8292  ;* TS nInjectors1 bit7 (= 0)
 E1B8      0A        8293  config13_f1      db      10T ; Config13 (TS Config3 (= %00001010, $A, 10T))
                     8294  ;  Bit 0   = Odd-fire averaging
                     8295  ;            0 = Normal
                     8296  ;            1 = Odd-Fire
                     8297  ;  Bit 1   = O2 Sensor Type
                     8298  ;            0 = Narrow-band (single wire 14.7 stoch)
                     8299  ;            1 = DIY-WB (Stoch = 2.5V, reverse slope)
                     8300  ;  Bit 2   = Control Stategy
                     8301  ;            0 = Speed-Density
                     8302  ;            1 = Alpha-N
                     8303  ;  Bit 3   = Barometer Correction
                     8304  ;            0 = Enrichment Off (set to 100%)
                     8305  ;            1 = Enrichment On
                     8306  ;* TS engineType1 bit0 (= 0 Even Fire
                     8307  ;* TS egoType1 bit1    (= 1 Wide Band)
                     8308  ;* TS algorithm1 bit2  (= 0 Speed Density)
                     8309  ;* TS baroCorr1 bit3   (= 1 Barocor on)
                     8310  ;* bit4 Not Used (= 0)
                     8311  ;* bit5 Not Used (= 0)
                     8312  ;* bit6 Not Used (= 0)
                     8313  ;* bit7 Not Used (= 0)
                     8314  
 E1B9      3C        8315  EGOrpm_f         db      60T ; RPMOXLIMIT (TS egoRPM1)
 E1BA      EA        8316  FASTIDLEbg_f db      234T;
 E1BB      1A        8317  O2targetV_f      db      26T ; VOLTOXTARGET (187) (TS egoSwitch1)
 E1BC      00        8318  feature14_f1    db      %00000000  ; (188)  ; allows EGOigncount to be on page1 (TS egoIgnCount)
 E1BD                8319  egoIgnCountb equ 1       ;EGO Step Counter         mSecs || Ignition Pulses^
                     8320  
                     8321  flash_table1_end:
                     8322  
 E200                8323          org     $E200
                     8324  flash_table2:           ; FUEL 2 - For PW2 when in Dual Table mode, if not
                     8325                       ; in DT mode then this whole page is ignored
                     8326  VE_f2:           ; 12x12 Total Bytes = 144
 E200      2728292C  8327       db      39T,40T,41T,44T,44T,44T,45T,45T,45T,46T,47T,50T ; VE (0,0-11)
           2C2C2D2D 
           2D2E2F32 
 E20C      2F2F3333  8328       db      47T,47T,51T,51T,50T,50T,50T,50T,51T,55T,56T,60T ; VE (1,0-11)
           32323232 
           3337383C 
 E218      2F2F3333  8329       db      47T,47T,51T,51T,50T,50T,50T,50T,51T,55T,56T,60T ; VE (2,0-11)
           32323232 
           3337383C 
 E224      34373739  8330      db      52T,55T,55T,57T,60T,61T,61T,65T,67T,70T,72T,75T ; VE (3,0-11)
           3C3D3D41 
           4346484B 
 E230      34373739  8331      db      52T,55T,55T,57T,60T,61T,61T,65T,67T,70T,72T,75T ; VE (4,0-11)
           3C3D3D41 
           4346484B 
 E23C      3B3C3C41  8332      db      59T,60T,60T,65T,66T,70T,70T,70T,72T,74T,77T,80T ; VE (5,0-11)
           42464646 
           484A4D50 
 E248      3D3F4141  8333      db      61T,63T,65T,65T,68T,70T,72T,75T,77T,80T,84T,85T ; VE (6,0-11)
           4446484B 
           4D505455 
 E254      4148484A  8334      db      65T,72T,72T,74T,74T,75T,75T,77T,79T,83T,89T,90T ; VE (7,0-11)
           4A4B4B4D 
           4F53595A 
 E260      464A4A4B  8335      db      70T,74T,74T,75T,75T,77T,77T,78T,82T,86T,95T,95T ; VE (8,0-11)
           4B4D4D4E 
           52565F5F 
 E26C      464A4A4B  8336      db      70T,74T,74T,75T,75T,77T,77T,78T,82T,86T,95T,95T ; VE (9,0-11)
           4B4D4D4E 
           52565F5F 
 E278      4B4D4F49  8337      db      75T,77T,79T,73T,82T,82T,82T,85T,87T,89T,99T,100T; VE (10,0-11)
           52525255 
           57596364 
 E284      4B4D4F49  8338      db      75T,77T,79T,73T,82T,82T,82T,85T,87T,89T,99T,100T; VE (11,0-11)
           52525255 
           57596364 
                     8339  
 E290      C8        8340  EGOtemp_f2       db      200T; For second O2 sensor (feature12_f2)
 E291      10        8341  EGOCOUNTCMP_f2       db      16T     ; NOT USED
 E292      01        8342  EGOdelta_f2      db      1T  ; For second O2 sensor (feature12_f2) (146)
 E293      0A        8343  EGOlimit_f2      db      10T ; For second O2 sensor (feature12_f2)
 E294      9B        8344  REQ_FUEL_f2      db      155T; (148)
 E295      04        8345  Divider_f2       db      4T
 E296      00        8346  Alternate_f2 db      0T      ; NOT USED
 E297      0A        8347  InjOpen_f2       db      10T
 E298      00        8348  InjOCFuel_f2 db      0T      ; NOT USED NOW !!!!! Kept to fill hole
 E299      64        8349  INJPWM_f2        db      100T
 E29A      FF        8350  INJPWMT_f2       db      255T
 E29B      0C        8351  BATTFAC_f2       db      12T ; (155)
                     8352  rpmk_f2:                     ; type=byte  entries=2  total bytes=2
 E29C      05DC      8353                   db      $05,$DC             ; (156,157)
                     8354  RPMRANGEVE_f2:                   ; type=byte  entries=8  total bytes=8
 E29E      050A0F14  8355                   db      5T,10T,15T,20T,28T,36T,44T,52T,55T,60T,65T,70T
           1C242C34 
           373C4146 
                     8356  KPARANGEVE_f2:              ; type=byte  entries=8  total bytes=8
 E2AA      141E2832  8357                   db      20T,30T,40T,50T,60T,75T,90T,100T,110T,120T,130T,140T
           3C4B5A64 
           6E78828C 
                     8358  config11_f2:
 E2B6      71        8359  config21_f       db      113T        ; NOT USED by code, but MT??(182)
                     8360  config12_f2:
 E2B7      70        8361  config22_f       db      112T       ; NOT USED
                     8362  config13_f2:
 E2B8      00        8363  config23_f       db      %00000000       ; (184)
                     8364  ;               equ $02   Narrow Band   |  Wide Band   Note: DT bank 2 only (second O2 sensor type)
                     8365                                                                ;(feature12_f2)
                     8366  ;               equ $04   Speed Density |  Alpha N     Note: DT bank 2 only
                     8367  
 E2B9      0D        8368  EGOrpm_f2        db      13T ; RPMOXLIMIT for second O2 sensor if used (feature12_f2)
 E2BA      00        8369                           db      0   ; not used
 E2BB      1A        8370  O2targetV_f2 db      26T     ; VOLTOXTARGET for second O2 sensor if used (feature12_f2)
                     8371  
 E2BC      00        8372  feature12_f2    db      %00000000  ; (188)
 E2BD                8373  SecondO2b        equ 1
                     8374                                           ; Mode (DTmode_f bit 4)???
                     8375  
                     8376  flash_table2_end:
                     8377  
 E300                8378          org     $E300
                     8379  flash_table3:                ; SPARK Table 1
                     8380  ST_f1:                               ; (ST - 28.4) * .352 = Degrees BTDC
 E300      555B5E63  8381       db    85T,91T,94T,99T,105T,111T,114T,116T,122T,122T,122T,122T ;(0,0-11)
           696F7274 
           7A7A7A7A 
 E30C      555B5E63  8382       db    85T,91T,94T,99T,105T,111T,114T,116T,122T,122T,122T,122T ;(1,0-11)
           696F7274 
           7A7A7A7A 


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 64
MC68HC908GP32 User Bootloader


 E318      555B5E63  8383       db    85T,91T,94T,99T,105T,111T,114T,116T,122T,122T,122T,122T ;(2,0-11)
           696F7274 
           7A7A7A7A 
 E324      555B5E63  8384       db    85T,91T,94T,99T,105T,111T,114T,116T,122T,122T,122T,122T ;(3,0-11)
           696F7274 
           7A7A7A7A 
 E330      555B5E63  8385       db    85T,91T,94T,99T,105T,111T,114T,116T,122T,122T,122T,122T ;(4,0-11)
           696F7274 
           7A7A7A7A 
 E33C      5255585E  8386       db    82T,85T,88T,94T,99T,102T,108T,114T,119T,119T,119T,119T  ;(5,0-11)
           63666C72 
           77777777 
 E348      4D525258  8387       db    77T,82T,82T,88T,94T,99T,105T,108T,114T,114T,114T,114T   ;(6,0-11)
           5E63696C 
           72727272 
 E354      4A4D4D52  8388       db    74T,77T,77T,82T,88T,94T,99T,105T,111T,111T,111T,111T    ;(7,0-11)
           585E6369 
           6F6F6F6F 
 E360      44474A50  8389       db    68T,71T,74T,80T,85T,88T,94T,102T,108T,108T,108T,108T    ;(8,0-11)
           55585E66 
           6C6C6C6C 
 E36C      4141444A  8390       db    65T,65T,68T,74T,80T,82T,88T,99T,105T,105T,105T,105T     ;(9,0-11)
           50525863 
           69696969 
 E378      3E3E3E44  8391       db    62T,62T,62T,68T,74T,80T,85T,94T,99T,99T,99T,99T         ;(a,0-11)
           4A50555E 
           63636363 
 E384      3939393E  8392       db    57T,57T,57T,62T,68T,74T,80T,91T,97T,97T,97T,97T         ;(b,0-11) (143)
           444A505B 
           61616161 
                     8393  
                     8394  RPMRANGEST_f1:
 E390      05090C10  8395       db      05T,09T,12T,16T,20T,23T,27T,30T,34T,38T,41T,45T
           14171B1E 
           2226292D 
                     8396                               ; RPMRANGEST[0-11]
                     8397  
                     8398  KPARANGEST_f1:
 E39C      141B232A  8399       db      20T,27T,35T,42T,49T,56T,64T,71T,78T,85T,93T,100T  ; (last byte 167)
           31384047 
           4E555D64 
                     8400                               ; KPARANGEST[0-b]
                     8401  
                     8402  ;; org $d3a8  ; stick them up out of the way at known values
 E3A8      FD        8403  TriggAngle_f db      253T; TriggAngle (60 deg)     (168)  *0.352  ;* Tuner Studio TrigAng = 253 (253 * .352 = 89 degrees)
 E3A9      00        8404  FixedAngle_f db      0T      ; FixedAngle   *0.352  -28.4   min -10 Max 80 (TS FixAng)
                     8405                                           ; THIS MUST BE -10 (0) for non fixed angle
 E3AA      01        8406  TrimAngle_f      db      1T  ; TrimAngle (NOT cleared on startup)  *0.352 (TS Trim)
 E3AB      38        8407  CrankAngle_f db      56T     ; Cranking advance (10deg)  *0.352 -28.4 Tuner Studio CrankAng = 56 (56 - 28.4 = 27.6 * .352 = 9.71 (10 degrees)
                     8408                                           ;  min -10 max 80
 E3AC      00        8409  SparkHoldCyc_f       db      0T      ; SparkHoldCyc (hold spark x cycles on  ;* Tuner Studio IgHold = 0
                     8410                                           ; stall and restart)
 E3AD      0C        8411  SparkConfig1_f       db   %00001100  ; SparkConfig1 (Normal trigger, trigger
                     8412                                           ; return based low speed spark) Standard MSnS
                     8413                              ; 029g changed default, was %00000100 for non-inverted spark output after re-flash
                     8414  ;Sparkconfig1 equates
 E3AE                8415  M_SC1LngTrg     equ     $01 ; Spark config 1 (0) Long trigger +22.5 (TS Trig_plus)
 E3AE                8416  M_SC1XLngTrg    equ     $02 ; Spark config 1 (1) Extra Long trigger +45 (TS Trig_plus)
 E3AE                8417  M_SC1TimCrnk    equ     $04 ; Spark config 1 (2) Time based cranking (not trigger return) (TS TrigCrank)
 E3AE                8418  M_SC1InvSpark   equ     $08 ; Spark config 1 (3) Invert spark output (TS iginv)
 E3AE                8419  M_SC1oddfire    equ     $10 ; Spark config 1 (4) Oddfire ignition (TS oddfire)
                     8420  
 E3AE      00        8421  IdleAdvance_f        db          0T  ; IdleAdvance *0.342 -28.4 min -10 max 80 (ST IdleAdv0
 E3AF      00        8422  IdleTPSThresh_f      db          0T  ; below this TPS value idle advance (ST IdleAdvTPS)
 E3B0      00        8423  IdleRPMThresh_f      db          0T  ; below this RPM value idle advance (0 disables) (ST IdleAdvRPM)
 E3B1      00        8424  IdleCLTThresh_f db       0T  ; below this CLT value don't use idle advance (ST IdleAdvClt)
 E3B2      01        8425  IdleDelayTime_f db       1T  ; wait this long before using the idle advance (ST IdleDelayTime)
                     8426  
 E3B3      19        8427  StgCycles_f      db      25T ; gradually bring on secondary injectors over
                     8428                                           ; this many ignition events
                     8429  
 E3B4      00        8430  Stg2ndParmKPA_f db      0T  ; Staged 2nd parameter kPa value
                     8431  
 E3B5      00        8432  Stg2ndParmDlt_f db      0T  ; staged 2nd parameter delta
                     8433  
 E3B6      00        8434  spare3_182      db      0T  ; spare byte as demo
 E3B7      00        8435  spare3_183      db      0T  ; spare byte as demo
 E3B8      00        8436  spare3_184      db      0T  ; spare byte as demo
                     8437  
                     8438  flash_table3_end:
                     8439  
 E400                8440          org     $E400
                     8441  flash_table4:                   ; Spark Table 2, used when input switched
                     8442                               ; low if selected
                     8443  ST_f2:                               ; *0.352  -28.4   Min -10 Max 80
 E400      35353A46  8444       db    53T,53T,58T,70T,90T,119T,131T,131T,131T,131T,131T,131T ;(0,0-11)
           5A778383 
           83838383 
 E40C      35353A46  8445       db    53T,53T,58T,70T,87T,113T,119T,119T,119T,119T,119T,119T ;(1,0-11)
           57717777 
           77777777 
 E418      3A3A4046  8446       db    58T,58T,64T,70T,84T,107T,113T,113T,113T,113T,113T,113T ;(2,0-11)
           546B7171 
           71717171 
 E424      3A3A4046  8447       db    58T,58T,64T,70T,81T,104T,107T,107T,107T,107T,107T,107T ;(3,0-11)
           51686B6B 
           6B6B6B6B 
 E430      3A3A4046  8448       db    58T,58T,64T,70T,81T,93T,101T,101T,101T,101T,101T,101T  ;(4,0-11)
           515D6565 
           65656565 
 E43C      3A3A4046  8449       db    58T,58T,64T,70T,81T,93T,101T,101T,101T,101T,101T,101T  ;(5,0-11)
           515D6565 
           65656565 
 E448      3A3A4046  8450       db    58T,58T,64T,70T,81T,93T,101T,101T,101T,101T,101T,101T  ;(6,0-11)
           515D6565 
           65656565 
 E454      3A3A4046  8451       db    58T,58T,64T,70T,81T,93T,101T,101T,101T,101T,101T,101T  ;(7,0-11)
           515D6565 
           65656565 
 E460      3A3A3D43  8452       db    58T,58T,61T,67T,78T,90T,98T,98T,98T,98T,98T,98T        ;(8,0-11)
           4E5A6262 
           62626262 
 E46C      3A3A3A40  8453       db    58T,58T,58T,64T,75T,87T,95T,95T,95T,95T,95T,95T        ;(9,0-11)
           4B575F5F 
           5F5F5F5F 
 E478      3A3A373D  8454       db    58T,58T,55T,61T,72T,84T,92T,92T,92T,92T,92T,92T        ;(a,0-11)
           48545C5C 
           5C5C5C5C 
 E484      3A3A333A  8455       db    58T,58T,51T,58T,69T,81T,81T,81T,81T,81T,81T,81T        ;(b,0-11)
           45515151 
           51515151 
                     8456  
                     8457  RPMRANGEST_f2:
 E490      05070D14  8458      db      05T,07T,13T,20T,30T,40T,50T,60T,61T,62T,63T,64T
           1E28323C 
           3D3E3F40 
                     8459                               ; RPMRANGEST[0-b]
                     8460  
                     8461  KPARANGEST_f2:
 E49C      1E28323C  8462      db      30T,40T,50T,60T,70T,80T,90T,100T,110T,120T,130T,140T
           46505A64 
           6E78828C 
                     8463  
                     8464  flash_table4_end:
                     8465  
 E500                8466          org     $E500


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 65
MC68HC908GP32 User Bootloader


                     8467  flash_table5:    ; FUEL Table 3 (VE3) used when input switched low if selected
                     8468  VE_f3:
 E500      2728292C  8469       db      39T,40T,41T,44T,44T,44T,45T,45T,45T,46T,47T,50T ; VE (0,0-11)
           2C2C2D2D 
           2D2E2F32 
 E50C      2F2F3333  8470       db      47T,47T,51T,51T,50T,50T,50T,50T,51T,55T,56T,60T ; VE (1,0-11)
           32323232 
           3337383C 
 E518      2F2F3333  8471       db      47T,47T,51T,51T,50T,50T,50T,50T,51T,55T,56T,60T ; VE (2,0-11)
           32323232 
           3337383C 
 E524      34373739  8472       db      52T,55T,55T,57T,60T,61T,61T,65T,67T,70T,72T,75T ; VE (3,0-11)
           3C3D3D41 
           4346484B 
 E530      34373739  8473       db      52T,55T,55T,57T,60T,61T,61T,65T,67T,70T,72T,75T ; VE (4,0-11)
           3C3D3D41 
           4346484B 
 E53C      3B3C3C41  8474       db      59T,60T,60T,65T,66T,70T,70T,70T,72T,74T,77T,80T ; VE (5,0-11)
           42464646 
           484A4D50 
 E548      3D3F4141  8475       db      61T,63T,65T,65T,68T,70T,72T,75T,77T,80T,84T,85T ; VE (6,0-11)
           4446484B 
           4D505455 
 E554      4148484A  8476       db      65T,72T,72T,74T,74T,75T,75T,77T,79T,83T,89T,90T ; VE (7,0-11)
           4A4B4B4D 
           4F53595A 
 E560      464A4A4B  8477       db      70T,74T,74T,75T,75T,77T,77T,78T,82T,86T,95T,95T ; VE (8,0-11)
           4B4D4D4E 
           52565F5F 
 E56C      464A4A4B  8478       db      70T,74T,74T,75T,75T,77T,77T,78T,82T,86T,95T,95T ; VE (9,0-11)
           4B4D4D4E 
           52565F5F 
 E578      4B4D4F49  8479       db      75T,77T,79T,73T,82T,82T,82T,85T,87T,89T,99T,100T; VE (10,0-11)
           52525255 
           57596364 
 E584      4B4D4F49  8480       db      75T,77T,79T,73T,82T,82T,82T,85T,87T,89T,99T,100T; VE (11,0-11)
           52525255 
           57596364 
                     8481  RPMRANGEVE_f3:
 E590      05        8482       db      5T      ; RPMRANGEVE[0] (144)
 E591      0A        8483       db      10T     ; RPMRANGEVE[1]
 E592      0F        8484       db      15T     ; RPMRANGEVE[2]
 E593      14        8485       db      20T     ; RPMRANGEVE[3]
 E594      1C        8486       db      28T     ; RPMRANGEVE[4]
 E595      24        8487       db      36T     ; RPMRANGEVE[5]
 E596      2C        8488       db      44T     ; RPMRANGEVE[6]
 E597      34        8489       db      52T     ; RPMRANGEVE[7]
 E598      37        8490       db      55T     ; RPMRANGEVE[8]
 E599      3C        8491       db      60T     ; RPMRANGEVE[9]
 E59A      3E        8492       db      62T     ; RPMRANGEVE[10]
 E59B      41        8493       db      65T     ; RPMRANGEVE[11]
                     8494  KPARANGEVE_f3:
 E59C      14        8495      db      20T      ; KPARANGEVE[0] (156)
 E59D      1E        8496       db      30T     ; KPARANGEVE[1]
 E59E      28        8497       db      40T     ; KPARANGEVE[2]
 E59F      32        8498       db      50T     ; KPARANGEVE[3]
 E5A0      3C        8499       db      60T     ; KPARANGEVE[4]
 E5A1      4B        8500       db      75T     ; KPARANGEVE[5]
 E5A2      5A        8501       db      90T     ; KPARANGEVE[6]
 E5A3      64        8502       db      100T; KPARANGEVE[7]
 E5A4      6E        8503       db      110T; KPARANGEVE[8]
 E5A5      78        8504       db      120T; KPARANGEVE[9]
 E5A6      82        8505       db      130T; KPARANGEVE[10]
 E5A7      96        8506       db      150T   ; KPARANGEVE[11]
                     8507  
                     8508  ASEVTbl_f:
 E5A8      1E        8509       db      30T     ; -40F This is the ASE table, only used if
                     8510                           ; $02 set in feature9_f     (168)
 E5A9      14        8511       db      20T     ; -20F  this is in percentage *1 so 30 = 30%
 E5AA      0F        8512       db      15T     ; 0F
 E5AB      0C        8513       db      12T     ; 20F
 E5AC      0A        8514       db      10T     ; 40F
 E5AD      09        8515       db       9T     ; 60F
 E5AE      08        8516       db       8T     ; 80F
 E5AF      07        8517       db       7T     ; 100F
 E5B0      06        8518       db       6T     ; 130F
 E5B1      05        8519       db       5T     ; 160F   (177)
                     8520  
 E5B2      FA        8521  AWC_f1        db      250T; After Start Warmup Time (TS ASETime)
 E5B3      00        8522  feature10_f5 db      %00000000  ; (179)
 E5B4                8523  aseIgnCountb equ 1       ;  AFTER START Enrichment Seconds || Engine Cycles^ (TS aseIgnCount)
 E5B4                8524  ASEHoldb:    equ 2       ; Hold ASE from decaying for a period of time determined by TimFixASE_f  (TS ASEFixDE)
 E5B4                8525  MAPHoldb:    equ 4       ; Fix MAP value during Fixed ASE timer (TS VEFixAASE)
                     8526  
                     8527  
 E5B4      05        8528  TimFixASE_f  db     5T   ; Amount of time or cycles to hold ase to fixed value (180)
                     8529                           ; rather than decay to 0 % over the timer
 E5B5      55        8530  CltFixASE_f  db     85T  ; Coolant temp setpoint to use Fixed value ASE
 E5B6      3C        8531  MAPFixASE_f  db     60T  ; If in fixed MAP mode then hold MAP at this value during fixed ASE time
                     8532  
                     8533  ;NOTE! do not add any more data to table 5. Any more and stack may collide when in RAM.
                     8534  flash_table5_end:
                     8535  
 E600                8536          org     $E600
                     8537  flash_table6:                ; AFR Table 1 - 8x8 AFR targets for VE table 1
                     8538  AFR_f1:                          ; This is in RAW ADC so 255 = 5V from O2 sensor
 E600      8282A0A0  8539       db      130T,130T,160T,160T,160T,160T,160T,160T; AFR (0,0-7)      ;* 0 Tuner Studio afrBins1
           A0A0A0A0 
 E608      8282A0A0  8540       db      130T,130T,160T,160T,160T,160T,160T,160T; AFR (1,0-7)
           A0A0A0A0 
 E610      8282A0A0  8541       db      130T,130T,160T,160T,160T,160T,160T,160T; AFR (2,0-7)
           A0A0A0A0 
 E618      8282A0A0  8542       db      130T,130T,160T,160T,160T,160T,160T,160T; AFR (3,0-7)
           A0A0A0A0 
 E620      8282A0A0  8543       db      130T,130T,160T,160T,160T,160T,160T,160T; AFR (4,0-7)
           A0A0A0A0 
 E628      82829695  8544       db      130T,130T,150T,149T,144T,144T,144T,144T; AFR (5,0-7)
           90909090 
 E630      82828C8A  8545       db      130T,130T,140T,138T,132T,132T,132T,132T; AFR (6,0-7)
           84848484 
 E638      8282827F  8546       db      130T,130T,130T,127T,125T,125T,125T,125T; AFR (7,0-7)
           7D7D7D7D 
                     8547  
                     8548  RPMRANGEAFR_f1:
 E640      05        8549       db      5T          ; RPMRANGEAFR1[0]                            ;* 64 Tuner Studio rpmBins6
 E641      0B        8550       db      11T         ; RPMRANGEAFR1[1]
 E642      10        8551       db      16T         ; RPMRANGEAFR1[2]
 E643      16        8552       db      22T         ; RPMRANGEAFR1[3]
 E644      1C        8553       db      28T          ; RPMRANGEAFR1[4]
 E645      22        8554       db      34T         ; RPMRANGEAFR1[5]
 E646      27        8555       db      39T         ; RPMRANGEAFR1[6]
 E647      2D        8556       db      45T         ; RPMRANGEAFR1[7]
                     8557  KPARANGEAFR_f1:
 E648      14        8558       db      20T         ; KPARANGEAFR1[0]                            ;* 72 Tuner Studio mapBins6
 E649      1F        8559       db      31T         ; KPARANGEAFR1[1]
 E64A      2B        8560       db      43T         ; KPARANGEAFR1[2]
 E64B      36        8561       db      54T         ; KPARANGEAFR1[3]
 E64C      41        8562       db      65T         ; KPARANGEAFR1[4]
 E64D      4D        8563       db      77T         ; KPARANGEAFR1[5]
 E64E      58        8564       db      88T         ; KPARANGEAFR1[6]
 E64F      64        8565       db      100T    ; KPARANGEAFR1[7]
                     8566  
                     8567                               ; AFR Table 2 - 8x8 AFR targets for VE table 3
                     8568                               ; (VE3) used when input switched low if selected
                     8569  
                     8570  AFR_f2:                      ; This is in RAW ADC so 255 = 5V from O2 sensor


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 66
MC68HC908GP32 User Bootloader


 E650      93939393  8571       db      147T,147T,147T,147T,147T,147T,147T,147T; AFR (0,0-7)
           93939393 
 E658      93939393  8572       db      147T,147T,147T,147T,147T,147T,147T,147T; AFR (1,0-7)
           93939393 
 E660      93939393  8573       db      147T,147T,147T,147T,147T,147T,147T,147T; AFR (2,0-7)
           93939393 
 E668      93939393  8574       db      147T,147T,147T,147T,147T,147T,147T,147T; AFR (3,0-7)
           93939393 
 E670      82828282  8575       db      130T,130T,130T,130T,130T,130T,130T,130T; AFR (4,0-7)
           82828282 
 E678      7D7D7D7D  8576       db      125T,125T,125T,125T,125T,125T,125T,125T; AFR (5,0-7)
           7D7D7D7D 
 E680      7D7D7D7D  8577       db      125T,125T,125T,125T,125T,125T,125T,125T; AFR (6,0-7)
           7D7D7D7D 
 E688      78787878  8578       db      120T,120T,120T,120T,120T,120T,120T,120T; AFR (7,0-7)
           78787878 
                     8579  
                     8580  RPMRANGEAFR_f2:
 E690      05        8581       db      5T      ; RPMRANGEAF2[0]
 E691      0A        8582       db      10T     ; RPMRANGEAF2[1]
 E692      0F        8583       db      15T     ; RPMRANGEAF2[2]
 E693      14        8584       db      20T     ; RPMRANGEAF2[3]
 E694      1C        8585       db      28T     ; RPMRANGEAF2[4]
 E695      24        8586       db      36T     ; RPMRANGEAF2[5]
 E696      32        8587       db      50T     ; RPMRANGEAF2[6]
 E697      3C        8588       db      60T     ; RPMRANGEAF2[7]
                     8589  KPARANGEAFR_f2:
 E698      0F        8590       db      15T     ; KPARANGEAF2[0]
 E699      1E        8591       db      30T     ; KPARANGEAF2[1]
 E69A      32        8592       db      50T     ; KPARANGEAF2[2]
 E69B      3C        8593       db      60T     ; KPARANGEAF2[3]
 E69C      5A        8594       db      90T     ; KPARANGEAF2[4]
 E69D      64        8595       db      100T; KPARANGEAF2[5]
 E69E      6E        8596       db      110T; KPARANGEAF2[6]
 E69F      96        8597       db      150T; KPARANGEAF2[7]
                     8598  
                     8599  ;2nd stage of nitrous
 E6A0      FF        8600  Nos2Rpm_f    db    255T  ; rpm starts at
 E6A1      FF        8601  Nos2RpmMax_f db    255T  ; rpm ends st
 E6A2      00        8602  Nos2delay_f  db    0T    ; delay after stage 1
 E6A3      00        8603  Nos2Angle_f  db    0T    ; retard
 E6A4      00        8604  Nos2PWLo_f   db    0T    ; +pw at low rpm
 E6A5      00        8605  Nos2PWHi_f   db    0T    ; +pw at max rpm
                     8606  
                     8607  ;oddfire wheel decoder bits - very experimental
 E6A6      00        8608  outaoffs_f  db     0T    ; offset in steps
                     8609  ;bit0 = 0, 22.5   ignore for now
                     8610  ;bit1 = 0, 45     use 0 or 45 or 90 only
                     8611  ;bit2 = 0, 90
 E6A7      00        8612  outaoffv_f  db    0T    ; 0-45deg variable offset
 E6A8      00        8613  outboffs_f  db    0T
 E6A9      00        8614  outboffv_f  db    0T
 E6AA      00        8615  outcoffs_f  db    0T
 E6AB      00        8616  outcoffv_f  db    0T
 E6AC      00        8617  outdoffs_f  db    0T
 E6AD      00        8618  outdoffv_f  db    0T
 E6AE      00        8619  outeoffs_f  db    0T
 E6AF      00        8620  outeoffv_f  db    0T
 E6B0      00        8621  outfoffs_f  db    0T
 E6B1      00        8622  outfoffv_f  db    0T
                     8623  
                     8624  flash_table6_end:
                     8625  
                     8626  
 E700                8627                  org     $E700
                     8628  flash_table7:
                     8629  
                     8630  ;boost controller, kpa target rpm vs tps  6x6
                     8631  bc_kpa_f:
 E700      64646464  8632       db      100T,100T,100T,100T,100T,100T
           6464 
 E706      64787878  8633       db      100T,120T,120T,120T,120T,120T
           7878 
 E70C      64787878  8634       db      100T,120T,120T,120T,120T,120T
           7878 
 E712      64787878  8635       db      100T,120T,120T,120T,120T,120T
           7878 
 E718      64787878  8636       db      100T,120T,120T,120T,120T,120T
           7878 
 E71E      64787878  8637       db      100T,120T,120T,120T,120T,120T
           7878 
                     8638  
                     8639  RPMRANGEbc_f:
 E724      0A141E28  8640       db      10T,20T,30T,40T,50T,70T   ; RPMRANGEbc[0-5]
           3246 
                     8641  TPSRANGEbc_f:
 E72A      334D667F  8642       db      51T,77T,102T,127T,179T,230T   ; TPSRANGEbc[0-5]
           B3E6 
                     8643  
                     8644  ;boost controller, duty cycle target rpm vs tps
                     8645  
                     8646  bc_dc_f:
 E730      32323232  8647       db      50T,50T,50T,50T,50T,50T
           3232 
 E736      32323232  8648       db      50T,50T,50T,50T,50T,50T
           3232 
 E73C      32323232  8649       db      50T,50T,50T,50T,50T,50T
           3232 
 E742      32323232  8650       db      50T,50T,50T,50T,50T,50T
           3232 
 E748      32323232  8651       db      50T,50T,50T,50T,50T,50T
           3232 
 E74E      32323232  8652       db      50T,50T,50T,50T,50T,50T
           3232 
                     8653  
                     8654  RPMRANGEbc_f2:
 E754      0A141E28  8655       db      10T,20T,30T,40T,50T,70T   ; RPMRANGEbc[0-5]
           3246 
                     8656  TPSRANGEbc_f2:
 E75A      334D667F  8657       db      51T,77T,102T,127T,179T,230T   ; TPSRANGEbc[0-5]
           B3E6 
                     8658  
                     8659  
                     8660  ; Second boost target table, switched over on input if selected.
                     8661  bc3_kpa_f:
 E760      64646464  8662       db      100T,100T,100T,100T,100T,100T
           6464 
 E766      64787878  8663       db      100T,120T,120T,120T,120T,120T
           7878 
 E76C      64787878  8664       db      100T,120T,120T,120T,120T,120T
           7878 
 E772      64787878  8665       db      100T,120T,120T,120T,120T,120T
           7878 
 E778      64787878  8666       db      100T,120T,120T,120T,120T,120T
           7878 
 E77E      64787878  8667       db      100T,120T,120T,120T,120T,120T
           7878 
                     8668  
                     8669  RPMRANGE3bc_f:
 E784      0A141E28  8670       db      10T,20T,30T,40T,50T,70T   ; RPMRANGE2bc[0-5]
           3246 
                     8671  TPSRANGE3bc_f:
 E78A      334D667F  8672      db      51T,77T,102T,127T,179T,230T   ; TPSRANGE2bc[0-5]
           B3E6 
                     8673  
                     8674  


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 67
MC68HC908GP32 User Bootloader


                     8675  flash_table7_end:
                     8676  
                     8677  
 E800                8678                  org     $E800
                     8679  flash_table8:
 E800      32        8680  idle_dc_lo       db      50T ; Idle duty cycle at lower temp for 2-wire (TC idle_dc_lo)
                     8681                                           ; Fielding Idle control *1  MIn = 0 Max = 100
 E801      19        8682  idlePeriod_f db      25T ; idle period in ignition events
 E802      32        8683  idlecrankdc_f        db      50T ; cranking idle dc kg (TS idlecrankdc)
 E803      01        8684  idledelayclock_f db       01T ; idle dashpot settling delay kg
                     8685  
 E804      2D        8686  idledashdc_f db      45T ; dashpot default duty
 E805      1B        8687  idlemindc_f      db      27T ; minimum duty cycle
                     8688  
 E806      00        8689  idle_dc_hi      db      00T ; rmd Idle duty cycle at upper temp for 2-wire (warmup) (TS idle_dc_hi)
 E807      03        8690  ictlrpm1_f      db      3T   ; idle deviation rpmx10 kg
 E808      0A        8691  ictlrpm2_f      db      10T  ; idle deviation rpmx10 kg
 E809      03        8692  Ideadbnd_f      db      03T  ; idle deadband range kg
 E80A      00        8693  Idashdelay_f    db      0T   ; AIC closure delay ign events kg
 E80B      64        8694  idlefreq_f      db      100T; rmd  (TS idlefreq)
                     8695  
 E80C      0A        8696  idlestartclk_f  db      10T  ; startup decay timer ign events kg
 E80D      0A        8697  idlePeriod2_f   db      10T ; rmd
 E80E      0F        8698  irestorerpm_f   db      15T ; rmd
 E80F      00        8699  idleclosedc_f   db      0T  ; rmd (015)
                     8700  
 E810      03        8701  feature13_f     db      3T
 E811                8702  PWMidleb        equ    $01  ; pwm idle on vs B&G on/off (TS pwmIdle)
 E811                8703  idle_warmupb    equ    $02  ; pwm idle warmup open loop (TS pwmidlewhen)
 E811                8704  idle_clb        equ    $04  ; pwm idle closed loop       (TS pwmidlewhen)
 E811                8705  cltMAPb:        equ    $08  ; Use Correction table in the Air Density factor
 E811                8706  CltMATCheckb:   equ    $10  ; Correction table MAT or IAT based
                     8707  
 E811      69        8708  FASTIDLEtemp_f       db      105T; Feilding 2-Wire Idle control Fast Idle (TS fastIdleTemp)
                     8709                                           ; lower temperature F -40
 E812      C8        8710  slowIdleTemp_f       db      200T; Feilding 2-Wire Idle control Slow Idle (TS slowIdleTemp)
                     8711                                           ; upper temperature F -40
 E813      6E        8712  fastIdle_f       db      110T; Fast Idle RPM (RPM*10 100-2550 rpm range)
 E814      41        8713  slowIdle_f       db       65T; Slow Idle RPM (RPM*10 100-2550 rpm range)
 E815      1E        8714  idleThresh_f db       30T; TPS Raw value for Idle mode to kick in.
                     8715  
 E816      B4        8716  WWU_f1       db      180T    ; WWU (-40 F) (22)
 E817      B4        8717           db      180T        ; WWU (-20 F)
 E818      A0        8718           db      160T        ; WWU (0 F)
 E819      96        8719           db      150T        ; WWU (20 F)
 E81A      87        8720           db      135T        ; WWU (40 F)
 E81B      7D        8721           db      125T        ; WWU (60 F)
 E81C      71        8722           db      113T        ; WWU (80 F)
 E81D      6C        8723           db      108T        ; WWU (100 F)
 E81E      66        8724           db      102T        ; WWU (130 F)
 E81F      64        8725           db      100T        ; WWU (160 F)
                     8726  
                     8727  ; This is the cranking Table so users can select a interpolated value of
                     8728  ; cranking PW the same as Warmup
                     8729  
                     8730  CrankPWs_f:
 E820      B4        8731       db      180T    ; -40F (32)
 E821      78        8732       db      120T    ; -20F
 E822      50        8733       db      80T         ; 0F
 E823      3C        8734       db      60T         ; 20F
 E824      37        8735       db      55T         ; 40F
 E825      32        8736       db      50T         ; 60F
 E826      2D        8737       db      45T         ; 80F
 E827      28        8738       db      40T         ; 100F
 E828      23        8739       db      35T         ; 130F
 E829      1E        8740       db      30T         ; 160F
                     8741  
 E82A      11        8742  feature11_f4   db  %00010001       ; (42)
 E82B                8743  AlwaysPrimeb:     equ 1    ; Only fire pump if Prime pulse ON | Prime pump every time (TS AlwaysPrime)
 E82B                8744  PrimeLateb        equ 2    ; Fire prime pulse after 2 seconds (TS PrimeLate)
 E82B                8745  PrimeTwiceb       equ 4    ; Fire the Prime Pulses Twice (TS PrimeLate)
 E82B                8746  NoPrimePb:        equ 8    ; Use Priming Table or Use Prime Pulse(TS PrimeTBox)
 E82B                8747  cltcrankb:        equ $10  ; use coolant temp for crank pulsewidth (TS crankpwip)
 E82B                8748  matcrankb:        equ $20  ; use inlet air temp for crank pulsewidth. Both means average (TS crankpwip)
 E82B                8749  ExCrFuelb:        equ $40  ; Look at TPS to see if we trigger extra fuel during cranking? (TS ExFuelCrank)
                     8750  
 E82B      03        8751  CrankRPM_f       db      3T  ; Maximum RPM for cranking (rpm*100) (TS CrankRPM)
 E82C      F3        8752  tpsflood_f       db      243T; Throttle position for floodclear mode in (TS tpsflood)
                     8753                                           ; RAW ADC
 E82D      04        8754  primePulse_f    db      04T ; prime pulse if not using table (feature11_f4 $8) *023
 E82E      00        8755  ExtraCrFu_f     db      00T ; Extra cranking fuel multiplier (feature11_f4 $40) (46)
                     8756  
                     8757  cltMATcorr_f:               ;
 E82F      64        8758                  db      100T; 7 positions for CLT related correction to          (47)
 E830      64        8759                  db      100T; IAT Air Density Correction 110 = correction * 110%
 E831      64        8760                  db      100T
 E832      64        8761                  db      100T
 E833      64        8762                  db      100T
 E834      64        8763                  db      100T
 E835      64        8764                  db      100T; (53)
                     8765  
 E836      0A        8766  RPMReduLo_f     db      10T     ; lowest rpm to reduce correction by (54)
 E837      1E        8767  RPMReduHi_f     db      30T    ; Highest rpm when correction is back to normal
                     8768  
                     8769  CltMATRange:
 E838      C8        8770                  db      200T     ; 160F   User defined Temp settings for Clt Related Air Dens (56)
 E839      CF        8771                  db      207T    ; etc.
 E83A      D8        8772                  db      216T    ;
 E83B      E1        8773                  db      225T    ;
 E83C      EA        8774                  db      234T    ;
 E83D      F3        8775                  db      243T    ;
 E83E      FC        8776                  db      252T    ; 212F (62)
                     8777  
                     8778  ;rotary leading trailing split timing 6x6 table
                     8779  split_f:   ; (63)
 E83F      1D585858  8780       db      29T,88T,88T,88T,88T,88T
           5858 
 E845      1D494949  8781       db      29T,73T,73T,73T,73T,73T
           4949 
 E84B      1D3A3A3A  8782       db      29T,58T,58T,58T,58T,58T
           3A3A 
 E851      1D2B2B2B  8783       db      29T,43T,43T,43T,43T,43T
           2B2B 
 E857      1D1D1D1D  8784       db      29T,29T,29T,29T,29T,29T
           1D1D 
 E85D      19191919  8785       db      25T,25T,25T,25T,25T,25T
           1919 
                     8786  
                     8787  RPMRANGEsplit_f: ;(99)
 E863      06081E28  8788       db      6T,8T,30T,40T,50T,70T   ; RPMRANGE2bc[0-5]
           3246 
                     8789  KPARANGEsplit_f: ;(105)
 E869      28323C50  8790      db      40T,50T,60T,80T,105T,106T   ; TPSRANGE2bc[0-5]
           696A 
 E86F      00        8791  p8feat1_f:     db     0T       ; a page8 config byte (111)
 E870                8792  rotary2b       equ    1        ; enable/disable twin rotor mode for BIT
                     8793  
 E870      00        8794  fixedsplit_f:  db     0T       ; fixed split for testing like Fixed in spark (112)
                     8795  
                     8796  
                     8797  flash_table8_end:
                     8798  
                     8799  ms_rf_end_f:
                     8800  
 E871                8801          include "boot_r12.asm"
                     8802  ;=====================================


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 68
MC68HC908GP32 User Bootloader


                     8803  ; MEGASQUIRT BOOTLOADER VERSION - Dec 2001
                     8804  ;
                     8805  ; Mods by Bruce Bowling
                     8806  ;
                     8807  ; Corrected bug in BootReset 5
                     8808  ;
                     8809  ;=====================================
                     8810  
                     8811  ;********************************************************************************************
                     8812  ;*                                                                                          *
                     8813  ;*  Bootloader - MC68HC908GP32                                                              *
                     8814  ;*                                                          Copyright (c) Motorola, 2001    *
                     8815  ;*                                                                                          *
                     8816  ;********************************************************************************************
                     8817  ;*                                                                                          *
                     8818  ;*  This file provides the low level assembly bootloader routine.                           *
                     8819  ;*  This program has been specially tailored towards the MC68HC908GP32.                     *
                     8820  ;*                                                                                          *
                     8821  ;********************************************************************************************
                     8822  ;*                                                                                          *
                     8823  ;*  File name:          boot.asm                        Current Release Level:      1.1     *
                     8824  ;*  Last Edit Date:     07-Jun-01                       Classification:             ES      *
                     8825  ;*                                                                                          *
                     8826  ;*  Include Files:      gp32.equ            : MC68HC908GP32 MCU definitions                 *
                     8827  ;*                                                                                          *
                     8828  ;*  Assembler:          P&E's CASM08Z                   Version:    3.16                    *
                     8829  ;*                                                                                          *
                     8830  ;*  Target:             MC68HC908GP32                                                       *
                     8831  ;*                                                                                          *
                     8832  ;*  Documentation:      MC68HC908GP32/H  Rev 3                                              *
                     8833  ;*                      Motorola Microcontroller Technical Data                             *
                     8834  ;*                                                                                          *
                     8835  ;********************************************************************************************
                     8836  ;*                                                                                          *
                     8837  ;*  Author:             DHJ Klotz                                                           *
                     8838  ;*  First Release:      26-Feb-00                                                           *
                     8839  ;*                                                                                          *
                     8840  ;*  Update History:                                                                         *
                     8841  ;*                                                                                          *
                     8842  ;*  Rev     Date       Author  Description of Change                                        *
                     8843  ;*  ------  ---------  ------  -----------------------------------------------------------  *
                     8844  ;*  ES 1.0  26-Feb-00  DHJK    Initial release for HC908 Seminar 2000.                      *
                     8845  ;*  ES 1.1  07-Jun-01  DHJK    Improved functionality for Application Note.                 *
                     8846  ;*                                                                                          *
                     8847  ;********************************************************************************************
                     8848  ;*                                                                                          *
                     8849  ;*  Notes:                                                                                  *
                     8850  ;*    - In order to minimize overall program size, subroutines are position within the      *
                     8851  ;*      core bootloader routine.  Although this can make the program somewhat difficult     *
                     8852  ;*      to read and follow, it permits the use of relative branch opcodes.  Most of         *
                     8853  ;*      these subroutines can be called from an external application program.               *
                     8854  ;*                                                                                          *
                     8855  ;********************************************************************************************
                     8856  ;*                                                                                          *
                     8857  ;*    Motorola reserves the right to make changes without further notice to any product     *
                     8858  ;*    herein to improve reliability, function, or design.  Motorola does not assume any     *
                     8859  ;*    liability arising out of the application or use of any product, circuit, or software  *
                     8860  ;*    described herein; neither does it convey any license under its patent rights nor the  *
                     8861  ;*    rights of others.  Motorola products are not designed, intended, or authorized for    *
                     8862  ;*    use as components in systems intended for surgical implant into the body, or other    *
                     8863  ;*    applications intended to support life, or for any other application in which the      *
                     8864  ;*    failure of the Motorola product could create a situation where personal injury or     *
                     8865  ;*    death may occur.  Should Buyer purchase or use Motorola products for any such         *
                     8866  ;*    intended or unauthorized application, Buyer shall indemnify and hold Motorola and     *
                     8867  ;*    its officers, employees, subsidiaries, affiliates, and distributors harmless against  *
                     8868  ;*    all claims, costs, damages, and expenses, and reasonable attorney fees arising out    *
                     8869  ;*    of, directly or indirectly, any claim of personal injury or death associated with     *
                     8870  ;*    such unintended or unauthorized use, even if such claim alleges that Motorola was     *
                     8871  ;*    negligent regarding the design or manufacture of the part.                            *
                     8872  ;*                                                                                          *
                     8873  ;*    Motorola and the Motorola logo are registered trademarks of Motorola Ltd.             *
                     8874  ;*                                                                                          *
                     8875  ;********************************************************************************************
                     8876  
                     8877  ;*  Microcontroller Peripheral Equates  *****************************************************
                     8878  ;*
                     8879  
                     8880  ; uncomment out if standalone
 E871                8881          list
                     8882  
                     8883  
                     8884  ;*  Flash Memory Specifics  =================================================================


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 69
MC68HC908GP32 User Bootloader


                     8885  ;*
 E871                8886  boot_start:     equ     $FB00               ; starting address of protected Bootloader
 E871                8887  flash_protect:  equ     {boot_start>7&$FF}  ; Flash Block Protect Register value
 E871                8888  flash_page:     equ     128                 ; Flash Erase Page size
 E871                8889  flash_row:      equ     64                  ; Flash Program Row size
 E871                8890  flash_erased:   equ     $FF                 ; Flash erased state
                     8891  
                     8892  
                     8893  ;*  RAM Utilization  ========================================================================
                     8894  ;*
 0040                8895          org     ram_start                   ; begining of RAM
                     8896  
 0040                8897  count:          ds      1                   ; 0040:     => data counter
 0041                8898  temp_sp:        ds      2                   ; 0041:0042 => temporary Stack Pointer storage
 0043                8899  flash_first:    ds      2                   ; 0043:0044 => first Flash reprogram address
 0045                8900  flash_last:     ds      2                   ; 0045:0046 => last Flash reprogram address + 1
                     8901  
 0047                8902  ram_exec:       equ     $01ED               ; start of executable RAM space
                     8903  
                     8904  
                     8905  ;*  Bootloader Customization Parameters  ====================================================
                     8906  ;*
 0047                8907  user_scbr:      equ     boot_start-61       ; FAC3      => SCBR register
 0047                8908  init_scbr:      equ     $12                 ;   default set SCI for 9600 kbaud
                     8909  
 0047                8910  user_config1:   equ     boot_start-60       ; FAC4      => CONFIG1 register
 0047                8911  init_config1:   equ     %00000001           ;   default CONFIG1
                     8912  
 0047                8913  user_config2:   equ     boot_start-59       ; FAC5      => CONFIG2 register
 0047                8914  init_config2:   equ     %00000001           ;   default CONFIG2
                     8915  
 0047                8916  user_first:     equ     boot_start-58       ; FAC6:FAC7 => 1st application address
 0047                8917  init_first:     equ     rom_start           ;   default first Flash address
                     8918  
 0047                8919  user_last:      equ     boot_start-56       ; FAC8:FAC9 => last application address
 0047                8920  init_last:      equ     boot_start          ;   default last Flash address
                     8921  
                     8922  
                     8923  ;*  Application Program Jump Vector Table  ==================================================
                     8924  ;*
                     8925                                              ; FACA      => "JMP ext" instruction (opcode $CC)
 0047                8926  user_timebase:  equ     boot_start-54       ; FACB:FACC => user Timebase jump vector
                     8927  
                     8928                                              ; FACD      => "JMP ext" instruction (opcode $CC)
 0047                8929  user_ADC:       equ     boot_start-51       ; FACE:FACF => user ADC jump vector
                     8930  
                     8931                                              ; FAD0      => "JMP ext" instruction (opcode $CC)
 0047                8932  user_keyboard:  equ     boot_start-48       ; FAD1:FAD2 => user Keyboard jump vector
                     8933  
                     8934                                              ; FAD3      => "JMP ext" instruction (opcode $CC)
 0047                8935  user_SCItx:     equ     boot_start-45       ; FAD4:FAD5 => user SCI transmit jump vector
                     8936  
                     8937                                              ; FAD6      => "JMP ext" instruction (opcode $CC)
 0047                8938  user_SCIrx:     equ     boot_start-42       ; FAD7:FAD8 => user SCI receive jump vector
                     8939  
                     8940                                              ; FAD9      => "JMP ext" instruction (opcode $CC)
 0047                8941  user_SCIerr:    equ     boot_start-39       ; FADA:FADB => user SCI error jump vector
                     8942  
                     8943                                              ; FADC      => "JMP ext" instruction (opcode $CC)
 0047                8944  user_SPItx:     equ     boot_start-36       ; FADD:FADE => user SPI transmit jump vector
                     8945  
                     8946                                              ; FADF      => "JMP ext" instruction (opcode $CC)
 0047                8947  user_SPIrx:     equ     boot_start-33       ; FAE0:FAE1 => user SPI receive jump vector
                     8948  
                     8949                                              ; FAE2      => "JMP ext" instruction (opcode $CC)
 0047                8950  user_Tim2Ov:    equ     boot_start-30       ; FAE3:FAE4 => user Timer 2 overflow jump vector
                     8951  
                     8952                                              ; FAE5      => "JMP ext" instruction (opcode $CC)
 0047                8953  user_Tim2Ch1:   equ     boot_start-27       ; FAE6:FAE7 => user Timer 2 channel 1 jump vector
                     8954  
                     8955                                              ; FAE8      => "JMP ext" instruction (opcode $CC)
 0047                8956  user_Tim2Ch0:   equ     boot_start-24       ; FAE9:FAEA => user Timer 2 channel 0 jump vector
                     8957  
                     8958                                              ; FAEB      => "JMP ext" instruction (opcode $CC)
 0047                8959  user_Tim1Ov:    equ     boot_start-21       ; FAEC:FAED => user Timer 1 oveflow jump vector
                     8960  
                     8961                                              ; FAEE      => "JMP ext" instruction (opcode $CC)
 0047                8962  user_Tim1Ch1:   equ     boot_start-18       ; FAEF:FAF0 => user Timer 1 channel 1 jump vector
                     8963  
                     8964                                              ; FAF1      => "JMP ext" instruction (opcode $CC)
 0047                8965  user_Tim1Ch0:   equ     boot_start-15       ; FAF2:FAF3 => user Timer 1 channel 0 jump vector
                     8966  


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 70
MC68HC908GP32 User Bootloader


                     8967                                              ; FAF4      => "JMP ext" instruction (opcode $CC)
 0047                8968  user_PLL:       equ     boot_start-12       ; FAF5:FAF6 => user PLL jump vector
                     8969  
                     8970                                              ; FAF7      => "JMP ext" instruction (opcode $CC)
 0047                8971  user_IRQ:       equ     boot_start-9        ; FAF8:FAF9 => user IRQ jump vector
                     8972  
                     8973                                              ; FAFA      => "JMP ext" instruction (opcode $CC)
 0047                8974  user_SWI:       equ     boot_start-6        ; FAFB:FAFC => user SWI jump vector
                     8975  
                     8976                                              ; FAFD      => "JMP ext" instruction (opcode $CC)
 0047                8977  user_reset:     equ     boot_start-3        ; FAFE:FAFF => user Reset interrupt jump vector
                     8978  
                     8979  
                     8980  ;*  Bootloader Program  *********************************************************************
                     8981  ;*
                     8982  
 0047                8983  init_stack:     equ     ram_exec-1          ; initialize stack pointer to before RAM routine
                     8984  ;
 0047                8985  init_scc1:      equ     %01000000           ; enable SCI, 8-bits, no parity, 1 stop
 0047                8986  init_scc2:      equ     %00001100           ; no interupts, receiver and transmitter enabled
                     8987  
 FB00                8988          org     boot_start                  ; beginning of code
                     8989  
                     8990  
                     8991  ;*  CGM Parameter Tables  ===================================================================
                     8992  ;*
                     8993  ;*  The following CGM parameter tables are placed here so that they are easy to access via
                     8994  ;*  external application programs.
                     8995  ;*
                     8996  ;*  7.3728 MHz bus frequency parameters (located at address "boot_start").
                     8997  ;*
                     8998  bus7372800:
 FB00      02        8999          db      $02                         ; P & E
 FB01      C0        9000          db      $C0                         ; L
 FB02      03        9001          db      $03                         ; N msb
 FB03      84        9002          db      $84                         ; N lsb
                     9003  
                     9004  ;*  8.003584 MHz bus frequency parameters (located at address "boot_start+4").
                     9005  ;*
                     9006  bus8003584:
 FB04      02        9007          db      $02                         ; P & E
 FB05      D0        9008          db      $D0                         ; L
 FB06      03        9009          db      $03                         ; N msb
 FB07      D1        9010          db      $D1                         ; N lsb
                     9011  
                     9012  
                     9013  ;*  Power-on Reset  =========================================================================
                     9014  ;* MODIFIED FOR MEGASQUIRT - Initialization code here
                     9015  ;*
                     9016  
                     9017  BootReset:
 FB08 [01] 4F        9018          clra
 FB09 [04] C7FFFF    9019          sta     copctl
 FB0C [04] 6E011E    9020          mov     #%00000001,config2
 FB0F [04] 6E011F    9021          mov     #%00000001,config1
 FB12 [03] 450240    9022          ldhx    #ram_last+1
 FB15 [02] 94        9023          txs
                     9024  
 FB16 [03] 45FB00    9025          ldhx    #bus7372800                 ; point to 7.3728 MHz parameters
 FB19 [04] AD22      9026          bsr     PLLset                      ; change bus speed
                     9027  
 FB1B [02] A600      9028          lda      #%00000000
 FB1D [03] B705      9029          sta      ddrb                       ; ADC Channels - inputs
                     9030  
 FB1F [02] A670      9031          lda     #%01110000                  ; Set up ADC for divide by 8 and internal clock
 FB21 [03] B73E      9032          sta     adclk
 FB23 [02] A604      9033          lda     #%00000100                  ; No interrupt, channel AD4 selected
 FB25 [03] B73C      9034          sta     adscr
 FB27 [05] 0F3CFD    9035          brclr   coco,adscr,*                ; wait until conversion complete
                     9036  
 FB2A [03] B63D      9037          lda     adr
 FB2C [02] A105      9038          cmp     #$05                        ; Check for low voltage on divider
 FB2E [03] 2529      9039          blo     BootReset1                  ; enter bootloader if low voltage
                     9040  
                     9041  ;
                     9042  ;   Test application reset vector.
                     9043  ;
 FB30 [04] C6FAFE    9044          lda     user_reset+1                ; get the MSB of the user reset vector
 FB33 [02] A1FF      9045          cmp     #flash_erased               ; check if it's erased
 FB35 [03] 2722      9046          beq     BootReset1                  ; enter bootloader if erased
 FB37 [03] 20C4      9047          bra     user_reset                  ; else, jump to user reset jump vector
                     9048  


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 71
MC68HC908GP32 User Bootloader


                     9049  
                     9050  ;*  External CGM PLL Bus Frequency Change Subroutine  =======================================
                     9051  ;*
                     9052  ;*  This subroutine will program the CGM PLL to change the bus frequency in accordance with
                     9053  ;*  the data being pointed to by X:A (which is a common implementation for pointer parameter
                     9054  ;*  passing used by HC08 C compilers).
                     9055  ;*
                     9056  ;*  C function prototype:
                     9057  ;*
                     9058  ;*      void CGMChange (char parameters*);
                     9059  ;*
                     9060  ;*  Calling convention:
                     9061  ;*
                     9062  ;*      ldx     #{parameters>8}             ; get CGM parameter table address msb
                     9063  ;*      lda     #{parameters&$FF}           ; get CGM parameter table address lsb
                     9064  ;*      jsr     CGMChange                   ; go change the bus speed
                     9065  ;*
                     9066  ;*  Returns:    nothing
                     9067  ;*
                     9068  ;*  Changes:    H:X
                     9069  ;*
                     9070  CGMChange:
 FB39 [02] 87        9071          psha                                ; save pointer lsb on stack
 FB3A [02] 89        9072          pshx                                ; save pointer msb on stack
 FB3B [02] 8A        9073          pulh                                ; initialize
 FB3C [02] 88        9074          pulx                                ;  H:X points to data array
                     9075  
                     9076  
                     9077  ;*  Internal CGM PLL Bus Frequency Change Subroutine  =======================================
                     9078  ;*
                     9079  ;*  This subroutine will program the CGM PLL to change the bus frequency in accordance with
                     9080  ;*  the data being pointed to by H:X.
                     9081  ;*
                     9082  ;*  Calling convention:
                     9083  ;*
                     9084  ;*      ldhx    #parameters                 ; point to CGM parameter table
                     9085  ;*      jsr     PLLset                      ; go change the bus speed
                     9086  ;*
                     9087  ;*  Returns:    nothing
                     9088  ;*
                     9089  ;*  Changes:    H:X
                     9090  ;*
                     9091  PLLset:
 FB3D [04] 1936      9092          bclr    BCS,pctl                    ; select external reference as base clock
 FB3F [04] 1B36      9093          bclr    PLLON,pctl                  ; turn off PLL
 FB41 [04] 7E36      9094          mov     x+,pctl                     ; program P & E
 FB43 [04] 7E3A      9095          mov     x+,pmrs                     ; program L
 FB45 [04] 7E38      9096          mov     x+,pmsh                     ; program N msb
 FB47 [04] 7E39      9097          mov     x+,pmsl                     ; program N lsb
 FB49 [04] 1E37      9098          bset    AUTO,pbwc                   ; enable automatic bandwidth control
 FB4B [04] 1A36      9099          bset    PLLON,pctl                  ; turn on PLL
                     9100  PLLwait:
 FB4D [05] 0D37FD    9101          brclr   LOCK,pbwc,PLLwait           ; wait for PLL to lock (Note: won't simulate)
 FB50 [04] 1836      9102          bset    BCS,pctl                    ; select VCO as base clock
 FB52 [04] 81        9103          rts                                 ; return
                     9104  
                     9105  
                     9106  ;*  PutChar Subroutine  =====================================================================
                     9107  ;*
                     9108  ;*  This subroutine will output the character passed in ACC to the SCI.
                     9109  ;*
                     9110  ;*  C function prototype:
                     9111  ;*
                     9112  ;*      void PutChar (char data);
                     9113  ;*
                     9114  ;*  Calling convention:
                     9115  ;*
                     9116  ;*      lda     data                        ; get character
                     9117  ;*      jsr     PutChar                     ; go output it
                     9118  ;*
                     9119  ;*  Returns:    nothing
                     9120  ;*
                     9121  ;*  Changes:    nothing
                     9122  ;*
                     9123  PutChar:
 FB53 [05] 0F16FD    9124          brclr   SCTE,scs1,PutChar           ; wait until SCI transmitter is empty
 FB56 [03] B718      9125          sta     scdr                        ; output character to the SCI
 FB58 [04] 81        9126          rts                                 ; return
                     9127  
                     9128  
                     9129  ;*  Power-on Reset Bootloader Entry  ========================================================
                     9130  ;*


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 72
MC68HC908GP32 User Bootloader


                     9131  ;*  This is where the Bootloader starts from power-on reset.
                     9132  ;*
                     9133  BootReset1:
                     9134  ;
                     9135  ;   Initialize the PLL CGM for 7.3728 MHz bus speed from 32.768 kHz crystal.
                     9136  ;
                     9137  ;        ldhx    #bus7372800                 ; point to 7.3728 MHz parameters
                     9138  ;        bsr     PLLset                      ; change bus speed
                     9139  ;
                     9140  ;   Copy user Flash parameters into RAM.
                     9141  ;
 FB59 [03] 45FAC3    9142          ldhx    #user_scbr                  ; point to first parameter
 FB5C [04] 7E40      9143          mov     x+,count                    ; copy user SCI baud rate
 FB5E [04] 7E41      9144          mov     x+,temp_sp                  ; copy user Configuration Register 1
 FB60 [04] 7E42      9145          mov     x+,temp_sp+1                ; copy user Configuration Register 2
 FB62 [04] 7E43      9146          mov     x+,flash_first              ; copy first user Flash address MSB
 FB64 [04] 7E44      9147          mov     x+,flash_first+1            ; copy first user Flash address LSB
 FB66 [04] 7E45      9148          mov     x+,flash_last               ; copy last user Flash address MSB
 FB68 [04] 7E46      9149          mov     x+,flash_last+1             ; copy last user Flash address LSB
 FB6A [03] 450040    9150          ldhx    #count                      ; point to first parameter, now saved in RAM
 FB6D [02] 94        9151          txs                                 ; use SP to point to parameter list in RAM
                     9152  ;
                     9153  ;   Test the user SCI baud rate.  The user can override the default baud rate.
                     9154  ;
 FB6E [02] 86        9155          pula                                ; get user SCBR initial data
 FB6F [02] A1FF      9156          cmp     #flash_erased               ; check if it's erased
 FB71 [03] 2602      9157          bne     BootReset2                  ; skip if not
 FB73 [02] A612      9158          lda     #init_scbr                  ; else, force default value
                     9159  BootReset2:
 FB75 [03] B740      9160          sta     count                       ; save initial SCI baud rate
                     9161  ;
                     9162  ;   Program the write-once configuration registers.  The user can override the defaults.
                     9163  ;
 FB77 [02] 86        9164          pula                                ; get user Configuration Register 1 initial data
 FB78 [02] A1FF      9165          cmp     #flash_erased               ; check if it's erased
 FB7A [03] 2602      9166          bne     BootReset3                  ; skip if not
 FB7C [02] A601      9167          lda     #init_config1               ; else, force default value
                     9168  BootReset3:
 FB7E [03] B71F      9169          sta     config1                     ; initialize Configuration Register 1
                     9170  ;
 FB80 [02] 86        9171          pula                                ; get user Configuration Register 2 initial data
 FB81 [02] A1FF      9172          cmp     #flash_erased               ; check if it's erased
 FB83 [03] 2602      9173          bne     BootReset4                  ; skip if not
 FB85 [02] A601      9174          lda     #init_config2               ; else, force default value
                     9175  BootReset4:
 FB87 [03] B71E      9176          sta     config2                     ; initialize Configuration Register 2
                     9177  ;
                     9178  ;   Program the first and last user Flash addresses.  The user can override the defaults.
                     9179  ;
 FB89 [02] 88        9180          pulx                                ; get first user Flash address LSB
 FB8A [02] 8A        9181          pulh                                ; get first user Flash address MSB
 FB8B [03] 65FFFF    9182          cphx    #$FFFF                      ; check if it's erased
 FB8E [03] 2608      9183          bne     BootReset5                  ; skip if not
 FB90 [02] A600      9184          lda     #{init_first&$FF}           ; else, get default first user address LSB
 FB92 [02] 87        9185          psha                                ;  save it
 FB93 [02] A680      9186          lda     #{init_first>8}             ;  and get default first user address MSB
 FB95 [02] 87        9187          psha                                ;  save it
 FB96 [02] A702      9188          ais     #2                          ; move stack pointer back
                     9189  ;
                     9190  BootReset5:
 FB98 [02] 88        9191          pulx                                ; get last user Flash address LSB
 FB99 [02] 8A        9192          pulh                                ; get last user Flash address MSB
 FB9A [03] 65FFFF    9193          cphx    #$FFFF                      ; check if it's erased
 FB9D [03] 2606      9194          bne     BootReset6                  ; skip if not
                     9195  ;        ldx     #{init_last&$FF}            ; else, get default last user address LSB
 FB9F [02] A600      9196          lda     #{init_last&$FF}            ; else, get default last user address LSB
 FBA1 [02] 87        9197          psha                                ;  save it
 FBA2 [02] A6FB      9198          lda     #{init_last>8}              ;  and get default last user address MSB
 FBA4 [02] 87        9199          psha                                ;  save it
                     9200  BootReset6:
                     9201  
                     9202  
                     9203  ;*  User Bootloader Entry  ==================================================================
                     9204  ;*
                     9205  ;*  The user can launch the bootloader from here.
                     9206  ;*
                     9207  BootResetUser:
 FBA5 [02] 9B        9208          sei                                 ; disable all interrupts
 FBA6 [04] C7FFFF    9209          sta     copctl                      ; clear the COP counter
 FBA9 [03] 4501ED    9210          ldhx    #init_stack+1               ; initialize
 FBAC [02] 94        9211          txs                                 ;  the stack pointer
                     9212  ;


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 73
MC68HC908GP32 User Bootloader


                     9213  ;   Initialize the PLL CGM for 7.3728 MHz bus speed from 32.768 kHz crystal.
                     9214  ;
 FBAD [03] 45FB00    9215          ldhx    #bus7372800                 ; point to 7.3728 MHz parameters
 FBB0 [04] AD8B      9216          bsr     PLLset                      ; change bus speed
                     9217  ;
                     9218  ;   Take over and initialize the SCI.  The user can override the default baud rate.
                     9219  ;
 FBB2 [05] 4E4019    9220          mov     count,scbr                  ; initialize SCI baud rate
 FBB5 [04] 6E4013    9221          mov     #init_scc1,scc1             ; initialize SCI Control Register 1
 FBB8 [04] 6E0C14    9222          mov     #init_scc2,scc2             ; initialize SCI Control Register 2
                     9223  
                     9224  
                     9225  ;*  Main Bootloader Control Loop  ==========================================================
                     9226  ;*
                     9227  ;*  Bootloader program supports the following commands:
                     9228  ;*
                     9229  ;*      'X'  = Exit and execute user program via user reset vector
                     9230  ;*      'P'  = Program Flash via S-Records
                     9231  ;*      'W'  = Erase Flash (Wipe)
                     9232  ;*      'U'  = Upgrade Flash by erasing all user space, then programming via S-Records
                     9233  ;*      'H'  = Help
                     9234  ;*      '?'  = Help
                     9235  ;*
                     9236  ;*  Note: avoid using 'A' - 'F', as these are valid S-Record characters that could get
                     9237  ;*        misinterpreted.
                     9238  ;*
 FBBB                9239  cmd_exit:       equ     'X'                 ; Exit command
 FBBB                9240  cmd_program:    equ     'P'                 ; Program Flash command
 FBBB                9241  cmd_erase:      equ     'W'                 ; Erase Flash command (Wipe)
 FBBB                9242  cmd_upgrade:    equ     'U'                 ; Upgrade Flash command
 FBBB                9243  cmd_help:       equ     'H'                 ; Help command
 FBBB                9244  cmd_help1:      equ     $1F                 ; '?' = alternate Help command
                     9245  ;
                     9246  Boot:
 FBBB [03] 45FD88    9247          ldhx    #msg_hello                  ; point to hello message
 FBBE [04] AD38      9248          bsr     PrintString                 ; output it
 FBC0 [05] CDFC6A    9249          jsr     GetChar                     ; get a character from the SCI
 FBC3 [02] A10D      9250          cmp     #ascii_CR                   ; check for ASCII carriage return
 FBC5 [03] 27F4      9251          beq     Boot                        ; just loop back if so
 FBC7 [04] AD8A      9252          bsr     PutChar                     ; else, echo character back
 FBC9 [02] A4DF      9253          and     #$DF                        ; convert to uppercase
                     9254  
                     9255  
                     9256  ;*  Execute User Program Command Check  =====================================================
                     9257  ;*
 FBCB [02] A158      9258          cmp     #cmd_exit                   ; check for Exit command
 FBCD [03] 2611      9259          bne     Boot2                       ; skip if not
 FBCF [04] C6FAFE    9260          lda     user_reset+1                ; else, get the MSB of the user reset vector
 FBD2 [02] A1FF      9261          cmp     #flash_erased               ; check if it's erased
 FBD4 [03] 2703      9262          beq     Boot1                       ; skip if not
 FBD6 [03] CCFAFD    9263          jmp     user_reset                  ; else, jump to user reset jump vector
                     9264  ;
                     9265  ;   Remain in the Bootloader if the MSB of the User Reset Jump Vector is erased.
                     9266  ;
                     9267  Boot1:
 FBD9 [03] 45FDE0    9268          ldhx    #msg_noreset                ; point to error message
 FBDC [04] AD1A      9269          bsr     PrintString                 ; output it
 FBDE [03] 20DB      9270          bra     Boot                        ; jump back to top
                     9271  
                     9272  
                     9273  ;*  Erase Flash Command Check  ==============================================================
                     9274  ;*
                     9275  Boot2:
 FBE0 [02] A157      9276          cmp     #cmd_erase                  ; check for Erase Flash command
 FBE2 [03] 2618      9277          bne     Boot3                       ; skip if not
 FBE4 [04] AD76      9278          bsr     EraseFlash                  ; else, go erase Flash
                     9279  ;
                     9280  ;   Common Bootloader command completion points.
                     9281  ;
                     9282  BootDone:
 FBE6 [03] 45FDB4    9283          ldhx    #msg_complete               ; point to operation complete message
                     9284  BootDone1:
 FBE9 [04] AD0D      9285          bsr     PrintString                 ; output it
                     9286  BootDone2:
 FBEB [03] 20CE      9287          bra     Boot                        ; jump back to top
                     9288  
                     9289  
                     9290  ;*  External PutString Subroutine  ==========================================================
                     9291  ;*
                     9292  ;*  This subroutine will output the null terminated string pointed to by X:A (which is a
                     9293  ;*  common implementation for pointer parameter passing used by HC08 C compilers) to the SCI.
                     9294  ;*


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 74
MC68HC908GP32 User Bootloader


                     9295  ;*  C function prototype:
                     9296  ;*
                     9297  ;*      void PutString (char string*);
                     9298  ;*
                     9299  ;*  Calling convention:
                     9300  ;*
                     9301  ;*      ldx     #{string>8}                 ; get CGM parameter table address msb
                     9302  ;*      lda     #{string&$FF}               ; get CGM parameter table address lsb
                     9303  ;*      jsr     PutString                   ; go change the bus speed
                     9304  ;*
                     9305  ;*  Returns:    nothing
                     9306  ;*
                     9307  ;*  Changes:    H:X
                     9308  ;*
                     9309  PutString:
 FBED [02] 87        9310          psha                                ; save pointer lsb on stack
 FBEE [02] 89        9311          pshx                                ; save pointer msb on stack
 FBEF [02] 8A        9312          pulh                                ; initialize
 FBF0 [02] 88        9313          pulx                                ;  H:X points to data array
 FBF1 [03] 2005      9314          bra     PrintString                 ; go output string
                     9315  
                     9316  
                     9317  ;*  PrintString Subroutine  =================================================================
                     9318  ;*
                     9319  ;*  This subroutine will output the null teminated string pointed to by H:X to the SCI.
                     9320  ;*
                     9321  ;*  Calling convention:
                     9322  ;*
                     9323  ;*      ldhx    #string                     ; point to start of string
                     9324  ;*      jsr     PrintString                 ; go output it
                     9325  ;*
                     9326  ;*  Returns:    nothing
                     9327  ;*
                     9328  ;*  Changes:    H:X
                     9329  ;*
                     9330  PrintString1:
 FBF3 [05] 0F16FD    9331          brclr   SCTE,scs1,PrintString1      ; wait until SCI transmitter is empty
 FBF6 [04] 7E18      9332          mov     x+,scdr                     ; output character to the SCI and advance pointer
                     9333  PrintString:
 FBF8 [02] 7D        9334          tst     ,x                          ; test string character
 FBF9 [03] 26F8      9335          bne     PrintString1                ; loop back if not null
 FBFB [04] 81        9336          rts                                 ; else, return
                     9337  
                     9338  
                     9339  ;*  Program Flash Command Check  ============================================================
                     9340  ;*
                     9341  Boot3:
 FBFC [02] A150      9342          cmp     #cmd_program                ; check for Program Flash command
 FBFE [03] 264A      9343          bne     Boot4                       ; skip if not
                     9344  ;
 FC00 [04] AD02      9345          bsr     BootProg                    ; go accept S19 records and program the Flash
 FC02 [03] 20B7      9346          bra     Boot                        ; return to top of control loop
                     9347  
                     9348  
                     9349  ;*  Program Flash Subroutine  ===============================================================
                     9350  ;*
                     9351  ;*  This subroutine will copy the Flash Program algorithm into RAM and execute it in
                     9352  ;*  conjunction with the S19 record retrieval to program the required Flash pages between
                     9353  ;*  address pointers "flash_first" and "flash_last".
                     9354  ;*
                     9355  ;*  Calling convention:
                     9356  ;*
                     9357  ;*      jsr     BootProg                    ; retrieve S19 records and program Flash
                     9358  ;*
                     9359  ;*  Returns:    nothing
                     9360  ;*
                     9361  ;*  Changes:    everything
                     9362  ;*
                     9363  BootProg:
 FC04 [03] 45004F    9364          ldhx    #ProgramRamSize             ; initialize pointer
                     9365  BootProg1:
 FC07 [04] D6FD38    9366          lda     Delay-1,x                   ; get program from Flash
 FC0A [04] D701EC    9367          sta     ram_exec-1,x                ; copy into RAM
 FC0D [03] 5BF8      9368          dbnzx   BootProg1                   ; decrement pointer and loop back until done
 FC0F [03] 45FDBF    9369          ldhx    #msg_waiting                ; point to waiting message
 FC12 [04] ADE4      9370          bsr     PrintString                 ; output it
                     9371  ;
                     9372  ;   Get S-Record from host.
                     9373  ;
                     9374  BootProg2:
 FC14 [02] 95        9375          tsx                                 ; get the Stack Pointer
 FC15 [04] 3541      9376          sthx    temp_sp                     ; save it temporarily


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 75
MC68HC908GP32 User Bootloader


 FC17 [02] A7DC      9377          ais     #-36                        ; allocate stack space for data
 FC19 [04] AD58      9378          bsr     GetSRec                     ; get an S-Record
 FC1B [03] 2625      9379          bne     BootProg5                   ; indicate error if S-Record is invalid
 FC1D [02] 86        9380          pula                                ; get S-Record type
 FC1E [02] A130      9381          cmp     #'0'                        ; check for text header record type
 FC20 [03] 270B      9382          beq     BootProg3                   ; ignore and get next record
 FC22 [02] A139      9383          cmp     #'9'                        ; check for end record type
 FC24 [03] 270B      9384          beq     BootProg4                   ; indicate operation complete
 FC26 [02] A131      9385          cmp     #'1'                        ; check for data record type
 FC28 [03] 2618      9386          bne     BootProg5                   ; indicate error if S-Record is invalid
                     9387  ;
                     9388  ;   Program Flash.
                     9389  ;
 FC2A [05] CD01F8    9390          jsr     {ram_exec+ProgramRam}       ; execute Program Flash algorithm from RAM
                     9391  BootProg3:
 FC2D [02] A723      9392          ais     #35                         ; deallocate stack space
 FC2F [03] 20E3      9393          bra     BootProg2                   ; loop back for next S-Record
                     9394  ;
                     9395  BootProg4:
 FC31 [02] A723      9396          ais     #35                         ; deallocate stack space
 FC33 [05] 0B16B0    9397          brclr   SCRF,scs1,BootDone          ; skip if SCI receiver is empty
 FC36 [04] AD32      9398          bsr     GetChar                     ; else, clear last ASCII carriage return from SCI
 FC38 [05] 0B16AB    9399          brclr   SCRF,scs1,BootDone          ; skip if SCI receiver is empty
 FC3B [04] AD2D      9400          bsr     GetChar                     ; else, clear last ASCII line feed from the SCI
 FC3D [03] 45FDB4    9401          ldhx    #msg_complete               ; point to operation complete message
 FC40 [03] 2005      9402          bra     BootProg6                   ; go output it
                     9403  ;
                     9404  BootProg5:
 FC42 [02] A724      9405          ais     #36                         ; deallocate stack space
 FC44 [03] 45FDCE    9406          ldhx    #msg_error                  ; point to error message
                     9407  BootProg6:
 FC47 [04] ADAF      9408          bsr     PrintString                 ; output it
 FC49 [04] 81        9409          rts                                 ; return
                     9410  
                     9411  
                     9412  ;*  Upgrade Flash Command Check  ============================================================
                     9413  ;*
                     9414  Boot4:
 FC4A [02] A155      9415          cmp     #cmd_upgrade                ; check for Upgrade Flash command
 FC4C [03] 2670      9416          bne     Boot5                       ; skip if not
                     9417  ;
 FC4E [03] 458000    9418          ldhx    #init_first                 ; force
 FC51 [04] 3543      9419          sthx    flash_first                 ;  first Flash address
 FC53 [03] 45FB00    9420          ldhx    #init_last                  ; force
 FC56 [04] 3545      9421          sthx    flash_last                  ;  last Flash address
 FC58 [04] AD02      9422          bsr     EraseFlash                  ; go erase Flash
 FC5A [03] 20A8      9423          bra     BootProg                    ; go program Flash
                     9424  
                     9425  
                     9426  ;*  Multiple Flash Page Erase Subroutine  ===================================================
                     9427  ;*
                     9428  ;*  This subroutine will copy the Flash Erase algorithm into RAM and execute it to erase
                     9429  ;*  all pages between address pointers "flash_first" and "flash_last".
                     9430  ;*
                     9431  ;*  Calling convention:
                     9432  ;*
                     9433  ;*      ldhx    #init_first                 ; initialize
                     9434  ;*      sthx    flash_first                 ;  first Flash address
                     9435  ;*      ldhx    #init_last                  ; initialize
                     9436  ;*      sthx    flash_last                  ;  last Flash address
                     9437  ;*      jsr     EraseFlash                  ; go erase flash
                     9438  ;*
                     9439  ;*  Returns:    nothing
                     9440  ;*
                     9441  ;*  Changes:    everything
                     9442  ;*
                     9443  EraseFlash:
 FC5C [03] 45003B    9444          ldhx    #EraseRamSize               ; initialize pointer
                     9445  EraseFlash1:
 FC5F [04] D6FD08    9446          lda     MassErase-1,x               ; get program from Flash
 FC62 [04] D701EC    9447          sta     ram_exec-1,x                ; copy into RAM
 FC65 [03] 5BF8      9448          dbnzx   EraseFlash1                 ; decrement pointer and loop back until done
 FC67 [03] CC01ED    9449          jmp     ram_exec                    ; execute Flash Mass Erase algorithm from RAM
                     9450  
                     9451  
                     9452  ;*  GetChar Subroutine  =====================================================================
                     9453  ;*
                     9454  ;*  This subroutine will wait forever for a character to be received by the SCI and then
                     9455  ;*  returns with that character in ACC.  No error checking is performed.  Note that this
                     9456  ;*  is the primary loop where the COP counter is cleared.
                     9457  ;*
                     9458  ;*  C function prototype:


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 76
MC68HC908GP32 User Bootloader


                     9459  ;*
                     9460  ;*      char GetChar (void);
                     9461  ;*
                     9462  ;*  Calling convention:
                     9463  ;*
                     9464  ;*      jsr     GetChar                     ; get a character from the SCI
                     9465  ;*
                     9466  ;*  Returns:
                     9467  ;*      ACC= data
                     9468  ;*
                     9469  GetChar:
 FC6A [04] C7FFFF    9470          sta     copctl                      ; clear the COP counter
 FC6D [05] 0B16FA    9471          brclr   SCRF,scs1,GetChar           ; wait forever until SCI receiver is full
 FC70 [03] B618      9472          lda     scdr                        ; get data
 FC72 [04] 81        9473          rts                                 ; return
                     9474  
                     9475  
                     9476  ;*  GetSRec Subroutine  =====================================================================
                     9477  ;*
                     9478  ;*  This subroutine will retrieve data in S19 record format via the SCI.
                     9479  ;*
                     9480  ;*  Calling convention:
                     9481  ;*
                     9482  ;*      ais     #-buffer_length             ; allocate stack space for data
                     9483  ;*      jsr     GetSRec                     ; go get S-record data
                     9484  ;*
                     9485  ;*  Returns:    CCRZ= 1 if valid S-Record retrieved.  Otherwise, CCRZ= 0.
                     9486  ;*              S-Record Type at SP+1     (1 byte)
                     9487  ;*              S-Record Size at SP+2     (1 byte)
                     9488  ;*              S-Record Address at SP+3  (2 bytes)
                     9489  ;*              S-Record Data at SP+5     (up to 32 bytes, typically)
                     9490  ;*
                     9491  ;*              |                |    <-sp (after local space allocation)
                     9492  ;*      H:X->   | SRecCount      |
                     9493  ;*              | SRecChkSum     |    <-sp (when called)
                     9494  ;*              | ReturnAddr msb |
                     9495  ;*              | ReturnAddr lsb |    <-sp (upon return)
                     9496  ;*              | SRecType       |
                     9497  ;*              | SRecSize       |
                     9498  ;*      H:X->   | SRecAddr msb   |
                     9499  ;*              | SRecAddr lsb   |
                     9500  ;*              | SRecData 00    |
                     9501  ;*              | SRecData 01    |  etc..
                     9502  ;*
                     9503  ;*  Changes:    everything
                     9504  ;*
 FC73                9505  SRecCount:      equ     1                   ; stack pointer offset for S-Record Counter
 FC73                9506  SRecChkSum:     equ     2                   ; stack pointer offset for S-Record Check Sum
 FC73                9507  SRecType:       equ     5                   ; stack pointer offset for S-Record Type
 FC73                9508  SRecSize:       equ     6                   ; stack pointer offset for S-Record Size
 FC73                9509  SRecAddr:       equ     7                   ; stack pointer offset for S-Record Address
 FC73                9510  SRedData:       equ     8                   ; stack pointer offset for S-Record Data
                     9511  ;
                     9512  GetSRec:
 FC73 [02] A7FE      9513          ais     #-2                         ; allocate local variable space
 FC75 [04] 9E6F06    9514          clr     SRecSize,sp                 ; initialize S-Record size
                     9515  GetSRec1:
 FC78 [04] ADF0      9516          bsr     GetChar                     ; get a character from the SCI
 FC7A [02] A10D      9517          cmp     #ascii_CR                   ; check for ASCII carriage return
 FC7C [03] 2602      9518          bne     GetSRec1a                   ; just loop back if so
 FC7E [02] A60A      9519          lda     #ascii_LF                   ; get ASCII line feed
                     9520  GetSRec1a:
 FC80 [02] A153      9521          cmp     #'S'                        ; check for start of record character
 FC82 [03] 26F4      9522          bne     GetSRec1                    ; loop back if not
 FC84 [04] ADE4      9523          bsr     GetChar                     ; else, get next character from the SCI
 FC86 [02] A130      9524          cmp     #'0'                        ; check for header record type
 FC88 [03] 27EE      9525          beq     GetSRec1                    ; loop back if so
 FC8A [02] A139      9526          cmp     #'9'                        ; else, check for end record type
 FC8C [03] 2704      9527          beq     GetSRec2                    ; continue if so
 FC8E [02] A131      9528          cmp     #'1'                        ; else, check for data record type
 FC90 [03] 26E6      9529          bne     GetSRec1                    ; loop back if not
                     9530  GetSRec2:
 FC92 [04] 9EE705    9531          sta     SRecType,sp                 ; save S-Record type
 FC95 [04] AD3B      9532          bsr     GetHexByte                  ; get the S-Record length
 FC97 [03] 2622      9533          bne     GetSRec4                    ; exit if not a valid hex byte
 FC99 [04] 9EE701    9534          sta     SRecCount,sp                ; initialize S-Record counter
 FC9C [04] 9EE702    9535          sta     SRecChkSum,sp               ; initialize S-Record check sum
 FC9F [02] A003      9536          sub     #3                          ; adjust for address and checksum
 FCA1 [04] 9EE706    9537          sta     SRecSize,sp                 ; save S-Record size
 FCA4 [02] 95        9538          tsx                                 ; use H:X as data stack frame pointer
 FCA5 [02] AF06      9539          aix     #{SRecAddr-1}               ; adjust so pointer starts at S-Record Address
                     9540  GetSRec3:


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 77
MC68HC908GP32 User Bootloader


 FCA7 [04] AD29      9541          bsr     GetHexByte                  ; get next S-Record hex byte
 FCA9 [03] 2610      9542          bne     GetSRec4                    ; exit if not a valid hex byte
 FCAB [02] F7        9543          sta     ,x                          ; save data in stack frame
 FCAC [04] 9EEB02    9544          add     SRecChkSum,sp               ; add data to check sum
 FCAF [04] 9EE702    9545          sta     SRecChkSum,sp               ; save new check sum
 FCB2 [02] AF01      9546          aix     #1                          ; move data stack frame pointer
 FCB4 [06] 9E6B01EF  9547          dbnz    SRecCount,sp,GetSRec3       ; loop back until all data has been received
 FCB8 [05] 9E6C02    9548          inc     SRecChkSum,sp               ; final calculation zeros check sum if it's okay
                     9549  GetSRec4:
 FCBB [02] A702      9550          ais     #2                          ; deallocate local variables
 FCBD [04] 81        9551          rts                                 ; return
                     9552  
                     9553  
                     9554  ;*  Help Command Response  ==================================================================
                     9555  ;*
                     9556  Boot5:
 FCBE [02] A148      9557          cmp     #cmd_help                   ; check for Help command
 FCC0 [03] 2704      9558          beq     Boot6                       ; continue if so
 FCC2 [02] A11F      9559          cmp     #cmd_help1                  ; check for alternate Help command
 FCC4 [03] 2606      9560          bne     Boot7                       ; skip if not
                     9561  boot6:
 FCC6 [03] 45FD90    9562          ldhx    #msg_help                   ; point to Help command message
 FCC9 [03] CCFBE9    9563          jmp     BootDone1                   ; go output it
                     9564  
                     9565  
                     9566  ;*  Unknown Command Response  ===============================================================
                     9567  ;*
                     9568  Boot7:
 FCCC [03] 45FDD7    9569          ldhx    #msg_what                   ; point to unknown command message
 FCCF [03] CCFBE9    9570          jmp     BootDone1                   ; go output it
                     9571  
                     9572  
                     9573  ;*  GetHexByte Subroutine  ==================================================================
                     9574  ;*
                     9575  ;*  This subroutine retrieves two ASCII bytes via the SCI and converts (packs) them into one
                     9576  ;*  hex byte, which is returned in ACC.
                     9577  ;*
                     9578  ;*  Calling convention:
                     9579  ;*
                     9580  ;*      jsr     GetHexByte
                     9581  ;*
                     9582  ;*  Returns:    CCRZ= 1 if valid hex byte retrieved.  Otherwise, CCRZ= 0.
                     9583  ;*              ACC= data
                     9584  ;*
                     9585  ;*  Changes:    ACC
                     9586  ;*
                     9587  GetHexByte:
 FCD2 [04] AD96      9588          bsr     GetChar                     ; get msb character from the SCI
 FCD4 [04] AD20      9589          bsr     IsHex                       ; check if valid ASCII hex character
 FCD6 [03] 2614      9590          bne     GetHexByte2                 ; exit if not
 FCD8 [04] AD13      9591          bsr     ToHex                       ; convert ASCII hex character to hex value
 FCDA [03] 62        9592          nsa                                 ; swap lower nibble up
 FCDB [02] 87        9593          psha                                ; save temporarily
 FCDC [05] CDFC6A    9594          jsr     GetChar                     ; get lsb character from the SCI
 FCDF [04] AD15      9595          bsr     IsHex                       ; check if valid ASCII hex character
 FCE1 [03] 2607      9596          bne     GetHexByte1                 ; exit if not
 FCE3 [04] AD08      9597          bsr     ToHex                       ; convert ASCII hex character to hex value
 FCE5 [04] 9EEB01    9598          add     1,sp                        ; combine msb and lsb nibbles
 FCE8 [02] A500      9599          bit     #0                          ; CCRZ= 1
                     9600  GetHexByte1:
 FCEA [02] A701      9601          ais     #1                          ; deallocate local variable
                     9602  GetHexByte2:
 FCEC [04] 81        9603          rts                                 ; return
                     9604  
                     9605  
                     9606  ;*  ToHex Subroutine  =======================================================================
                     9607  ;*
                     9608  ;*  This subroutine converts the ASCII hex value passed in ACC to a binary hex value.
                     9609  ;*
                     9610  ;*  Calling convention:
                     9611  ;*
                     9612  ;*      lda     data
                     9613  ;*      jsr     ToHex
                     9614  ;*
                     9615  ;*  Returns:    ACC= data.
                     9616  ;*
                     9617  ;*  Changes:    ACC
                     9618  ;*
                     9619  ToHex:
 FCED [02] A030      9620          sub     #'0'                        ; adjust first by subtracting '0'
 FCEF [02] A109      9621          cmp     #9                          ; check if value was between '0' to '9'
 FCF1 [03] 2302      9622          bls     ToHex1                      ; exit if so


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 78
MC68HC908GP32 User Bootloader


 FCF3 [02] A007      9623          sub     #7                          ; else, adjust for value between 'A' to 'F'
                     9624  ToHex1:
 FCF5 [04] 81        9625          rts                                 ; return
                     9626  
                     9627  
                     9628  ;*  IsHex Subroutine  =======================================================================
                     9629  ;*
                     9630  ;*  This subroutine checks if the value passed in ACC is a valid ASCII hex character within
                     9631  ;*  within the ranges of '0' to '9' or 'A' to 'F'.  Note that the range 'a' to 'f' is not
                     9632  ;*  checked.
                     9633  ;*
                     9634  ;*  Calling convention:
                     9635  ;*
                     9636  ;*      lda     data
                     9637  ;*      jsr     IsHex
                     9638  ;*
                     9639  ;*  Returns:    CCRZ= 1 if data is a valid hex character.  Otherwise, CCRZ= 0.
                     9640  ;*
                     9641  ;*  Changes:    nothing
                     9642  ;*
                     9643  IsHex:
 FCF6 [02] A130      9644          cmp     #'0'                        ; check value against '0'
 FCF8 [03] 250E      9645          blo     IsntHex                     ; not hex if lower
 FCFA [02] A139      9646          cmp     #'9'                        ; check value against '9'
 FCFC [03] 2308      9647          bls     IsHex1                      ; is hex if lower
 FCFE [02] A141      9648          cmp     #'A'                        ; check value against 'A'
 FD00 [03] 2506      9649          blo     IsntHex                     ; not hex if lower
 FD02 [02] A146      9650          cmp     #'F'                        ; check value against 'F'
 FD04 [03] 2202      9651          bhi     IsntHex                     ; not hex if higher
                     9652  IsHex1:
 FD06 [02] A500      9653          bit     #0                          ; CCRZ= 1
                     9654  IsntHex:
 FD08 [04] 81        9655          rts                                 ; return
                     9656  
                     9657  
                     9658  ;*  Flash Mass Erase Subroutine  ============================================================
                     9659  ;*
                     9660  ;*  This subroutine performs multiple Page Erase operations in order to erase the application
                     9661  ;*  space Flash memory between "flash_first" and "flash_last".  This subroutine has been
                     9662  ;*  tuned for a bus speed of 7.3728 MHz.
                     9663  ;*  This subroutine is copied into and executed from RAM.
                     9664  ;*
                     9665  MassErase:
 FD09 [04] 5545      9666          ldhx    flash_last                  ; initialize pointer to last Flash memory address
 FD0B [03] 2023      9667          bra     MassErase2                  ; go move pointer before erasing Flash
                     9668  MassErase1:
                     9669  ;
                     9670  ;   Set ERASE, read the Flash Block Protect Register and write any data into Flash page.
                     9671  ;
 FD0D [02] A602      9672          lda     #{ERASE}                    ; set ERASE control bit
 FD0F [04] C7FE08    9673          sta     flcr                        ;  in Flash Control Register
 FD12 [04] C6FF7E    9674          lda     flbpr                       ; read from Flash Block Protect Register
 FD15 [02] F7        9675          sta     ,x                          ; write any data to address within page
                     9676  ;
                     9677  ;   Wait for >10us, then set HVEN.
                     9678  ;
 FD16 [02] A601      9679          lda     #1                          ; wait
 FD18 [04] AD1F      9680          bsr     delay                       ;  for 11.7us
 FD1A [02] A60A      9681          lda     #{ERASE | HVEN}             ; set HVEN control bit
 FD1C [04] C7FE08    9682          sta     flcr                        ;  in Flash Control Register
                     9683  ;
                     9684  ;   Wait for >1ms, then clear ERASE.
                     9685  ;
 FD1F [02] A664      9686          lda     #100                        ; wait
 FD21 [04] AD16      9687          bsr     delay                       ;  for 1.005ms
 FD23 [02] A608      9688          lda     #{HVEN}                     ; clear ERASE control bit
 FD25 [04] C7FE08    9689          sta     flcr                        ;  in Flash Control Register
                     9690  ;
                     9691  ;   Wait for >5us, then clear HVEN.
                     9692  ;
 FD28 [02] A601      9693          lda     #1                          ; wait
 FD2A [04] AD0D      9694          bsr     delay                       ;  for 11.7us
 FD2C [01] 4F        9695          clra                                ; clear HVEN control bit
 FD2D [04] C7FE08    9696          sta     flcr                        ;  in Flash Control Register
                     9697  ;
                     9698  ;   Advance pointer and repeat until finished.
                     9699  ;
                     9700  MassErase2:
 FD30 [02] AFC0      9701          aix     #-64                        ; move pointer back
 FD32 [02] AFC0      9702          aix     #-64                        ;  by one complete erase page
 FD34 [04] 7543      9703          cphx    flash_first                 ; check if finished
 FD36 [03] 22D5      9704          bhi     MassErase1                  ; loop back if not


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 79
MC68HC908GP32 User Bootloader


                     9705  ;
 FD38 [04] 81        9706          rts                                 ; return
                     9707  
                     9708  
                     9709  ;*  Delay Subroutine  =======================================================================
                     9710  ;*
                     9711  ;*  This subroutine performs a simple software delay loop based upon the value passed in ACC.
                     9712  ;*  The following timing calculation applies:
                     9713  ;*
                     9714  ;*              delay = ((ACC * 74) + 12) (tcyc)
                     9715  ;*
                     9716  ;*  Calling convention:
                     9717  ;*
                     9718  ;*      lda     data
                     9719  ;*      jsr     delay
                     9720  ;*
                     9721  ;*  Returns:    nothing
                     9722  ;*
                     9723  ;*  Changes:    ACC
                     9724  ;*
                     9725  Delay:
 FD39 [02] 87        9726          psha                                ; [2] save outer delay loop parameter
                     9727  Delay1:
 FD3A [02] A616      9728          lda     #22                         ; [2] initialize inner delay loop counter
                     9729  Delay2:
 FD3C [03] 4BFE      9730          dbnza   Delay2                      ; [3] decrement inner delay loop counter
 FD3E [06] 9E6B01F8  9731          dbnz    1,sp,Delay1                 ; [6] decrement outer delay loop counter
 FD42 [02] 86        9732          pula                                ; [2] deallocate local variable
 FD43 [04] 81        9733          rts                                 ; [4] return
                     9734  
 FD44                9735  EraseRamSize:   equ     {*-MassErase}
 FD44                9736  ProgramRam:     equ     {*-Delay}
                     9737  
                     9738  
                     9739  ;*  Flash Program Subroutine  ===============================================================
                     9740  ;*
                     9741  ;*  This subroutine controls the Flash programming sequence.  A stack frame data block is
                     9742  ;*  passed to it in the format shown below.  This subroutine has been tuned for a bus speed
                     9743  ;*  of 7.3728 MHz.
                     9744  ;*  This subroutine is copied into and executed from RAM.
                     9745  ;*
                     9746  ;*              |                |    <-sp (when called)
                     9747  ;*              | ReturnAddr msb |
                     9748  ;*              | ReturnAddr lsb |    <-sp (upon return)
                     9749  ;*              | SRecSize       |
                     9750  ;*              | SRecAddr msb   |
                     9751  ;*              | SRecAddr lsb   |
                     9752  ;*              | SRecData 00    |
                     9753  ;*              | SRecData 01    |  etc..
                     9754  ;*
                     9755  FlashProgram:
 FD44 [02] 95        9756          tsx                                 ; get the Stack Pointer
 FD45 [04] 3541      9757          sthx    temp_sp                     ; save it temporarily
                     9758  ;
                     9759  ;   Get S-Record size and use the Stack Pointer as the data source pointer.
                     9760  ;
 FD47 [02] A702      9761          ais     #2                          ; SP points to SRecSize
 FD49 [02] 86        9762          pula                                ; get SRecSize
 FD4A [03] B740      9763          sta     count                       ; save it temporarily
                     9764  ;
                     9765  ;   Establish H:X as the destination pointer.
                     9766  ;
 FD4C [02] 8A        9767          pulh                                ; get destination address msb
 FD4D [02] 88        9768          pulx                                ; get destination address lsb
                     9769  
                     9770  FlashProgram1:
 FD4E [04] 7543      9771          cphx    flash_first                 ; check against minimum address
 FD50 [03] 252D      9772          blo     FlashProgram2               ; skip if lower
 FD52 [04] 7545      9773          cphx    flash_last                  ; check against maximum address
 FD54 [03] 2429      9774          bhs     FlashProgram2               ; skip if the same or higher
                     9775  ;
                     9776  ;   Set PGM, read the Flash Block Protect Register and write anywhere in desired Flash row.
                     9777  ;
 FD56 [02] A601      9778          lda     #{PGM}                      ; set PGM control bit
 FD58 [04] C7FE08    9779          sta     flcr                        ;  in Flash Control Register
 FD5B [04] C6FF7E    9780          lda     flbpr                       ; read from Flash Block Protect Register
 FD5E [02] F7        9781          sta     ,x                          ; write any data to first Flash address
                     9782  ;
                     9783  ;   Wait for >10us, then set HVEN.
                     9784  ;
 FD5F [02] A601      9785          lda     #1                          ; wait
 FD61 [04] ADD6      9786          bsr     delay                       ;  for 11.7us


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 80
MC68HC908GP32 User Bootloader


 FD63 [02] A609      9787          lda     #{PGM | HVEN}               ; set HVEN control bit
 FD65 [04] C7FE08    9788          sta     flcr                        ;  in Flash Control Register
                     9789  ;
                     9790  ;   Wait for >5us.
                     9791  ;
 FD68 [02] A601      9792          lda     #1                          ; wait
 FD6A [04] ADCD      9793          bsr     delay                       ;  for 11.7us
                     9794  ;
                     9795  ;   Write data to Flash and wait for 30 - 40us.
                     9796  ;
 FD6C [02] 86        9797          pula                                ; get S-Record data
 FD6D [02] F7        9798          sta     ,x                          ; write data to Flash
 FD6E [02] A603      9799          lda     #3                          ; wait
 FD70 [04] ADC7      9800          bsr     delay                       ;  for 31.7us
                     9801  ;
                     9802  ;   Clear PGM.
                     9803  ;
 FD72 [02] A608      9804          lda     #{HVEN}                     ; clear PGM
 FD74 [04] C7FE08    9805          sta     flcr                        ;  in Flash Control Register
                     9806  ;
                     9807  ;   Wait for >5us, then clear HVEN.
                     9808  ;
 FD77 [02] A601      9809          lda     #1                          ; wait
 FD79 [04] ADBE      9810          bsr     delay                       ;  for 11.7us
 FD7B [01] 4F        9811          clra                                ; clear HVEN control bit
 FD7C [04] C7FE08    9812          sta     flcr                        ;  in Flash Control Register
                     9813  ;
                     9814  ;   Advance destination pointer and data counter.
                     9815  ;
                     9816  FlashProgram2:
 FD7F [02] AF01      9817          aix     #1                          ; advance destination pointer
 FD81 [05] 3B40CA    9818          dbnz    count,FlashProgram1         ; decrement counter and loop back if not done.
                     9819  ;
 FD84 [04] 5541      9820          ldhx    temp_sp                     ; restore
 FD86 [02] 94        9821          txs                                 ;  Stack Pointer
 FD87 [04] 81        9822          rts                                 ; return
                     9823  
 FD88                9824  ProgramRamSize: equ     {*-Delay}
                     9825  
                     9826  
                     9827  ;*  Messages  ===================================================================================
                     9828  ;*
 FD88                9829  ascii_CR:       equ     $0D                 ; ASCII carriage return
 FD88                9830  ascii_LF:       equ     $0A                 ; ASCII line feed
                     9831  ;
 FD88      0D0A426F  9832  msg_hello:      db      ascii_CR,ascii_LF,'Boot>',0
           6F743E00 
 FD90      20202850  9833  msg_help:       db      '  (P)rogram (W)ipe (U)pgrade e(X)it',0
           29726F67 
           72616D20 
           28572969 
           70652028 
           55297067 
           72616465 
           20652858 
           29697400 
                     9834  ;
 FDB4      2020436F  9835  msg_complete:   db      '  Complete',0
           6D706C65 
           746500 
 FDBF      202D2077  9836  msg_waiting:    db      ' - waiting ...',0
           61697469 
           6E67202E 
           2E2E00 
 FDCE      202D2065  9837  msg_error:      db      ' - error',0
           72726F72 
           00 
 FDD7      202D2077  9838  msg_what:       db      ' - what?',0
           6861743F 
           00 
 FDE0      202D2052  9839  msg_noreset:    db      ' - Reset Vector Invalid',0
           65736574 
           20566563 
           746F7220 
           496E7661 
           6C696400 
                     9840  
                     9841  ;
                     9842  ;   Last location not to exceed $FDFF
                     9843  ;
                     9844  BootEnd:
                     9845  


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 81
MC68HC908GP32 User Bootloader


                     9846  
                     9847  ;*  Vectors  ************************************************************************************
                     9848  ;*
 FFDC                9849          org     vec_timebase                ; Timebase vector
 FFDC      FACA      9850          dw      user_timebase
 FFDE                9851          org     vec_adc                     ; ADC vector
 FFDE      FACD      9852          dw      user_ADC
 FFE0                9853          org     vec_kbd                     ; Keyboard vector
 FFE0      FAD0      9854          dw      user_keyboard
 FFE2                9855          org     vec_scitx                   ; SCI transmit vector
 FFE2      FAD3      9856          dw      user_SCItx
 FFE4                9857          org     vec_scirx                   ; SCI receive vector
 FFE4      FAD6      9858          dw      user_SCIrx
 FFE6                9859          org     vec_scierr                  ; SCI error vector
 FFE6      FAD9      9860          dw      user_SCIerr
 FFE8                9861          org     vec_spitx                   ; SPI transmit vector
 FFE8      FADC      9862          dw      user_SPItx
 FFEA                9863          org     vec_spirx                   ; SPI receive vector
 FFEA      FADF      9864          dw      user_SPIrx
 FFEC                9865          org     vec_tim2ov                  ; Timer 2 overflow vector
 FFEC      FAE2      9866          dw      user_Tim2Ov
 FFEE                9867          org     vec_tim2ch1                 ; Timer 2 channel 1 vector
 FFEE      FAE5      9868          dw      user_Tim2Ch1
 FFF0                9869          org     vec_tim2ch0                 ; Timer 2 channel 0 vector
 FFF0      FAE8      9870          dw      user_Tim2Ch0
 FFF2                9871          org     vec_tim1ov                  ; Timer 1 oveflow vector
 FFF2      FAEB      9872          dw      user_Tim1Ov
 FFF4                9873          org     vec_tim1ch1                 ; Timer 1 channel 1 vector
 FFF4      FAEE      9874          dw      user_Tim1Ch1
 FFF6                9875          org     vec_tim1ch0                 ; Timer 1 channel 0 vector
 FFF6      FAF1      9876          dw      user_Tim1Ch0
 FFF8                9877          org     vec_pll                     ; PLL vector
 FFF8      FAF4      9878          dw      user_PLL
 FFFA                9879          org     vec_irq                     ; IRQ vector
 FFFA      FAF7      9880          dw      user_IRQ
 FFFC                9881          org     vec_swi                     ; SWI vector
 FFFC      FAFA      9882          dw      user_SWI
 FFFE                9883          org     vec_reset                   ; Reset vector
 FFFE      FB08      9884          dw      BootReset
                     9885  
                     9886  
                     9887  ;*  Flash Block Protect Register  ***************************************************************
                     9888  ;*
 FF7E                9889          org     flbpr
 FF7E      F6        9890          db      flash_protect
                     9891  
 FF7F                9892          end
                     9893  ;check in the .lst file for how big the flash areas are by searching the variable list
                     9894  ;for the following. Do NOT exceed $C2 per table or stack corruption is likely
 FF7F                9895  flash_0_size        equ {flash_table0_end-flash_table0}
 FF7F                9896  flash_1_size        equ {flash_table1_end-flash_table1}
 FF7F                9897  flash_2_size        equ {flash_table2_end-flash_table2}
 FF7F                9898  flash_3_size        equ {flash_table3_end-flash_table3}
 FF7F                9899  flash_4_size        equ {flash_table4_end-flash_table4}
 FF7F                9900  flash_5_size        equ {flash_table5_end-flash_table5}
 FF7F                9901  flash_6_size        equ {flash_table6_end-flash_table6}
 FF7F                9902  flash_7_size        equ {flash_table7_end-flash_table7}
 FF7F                9903  flash_8_size        equ {flash_table8_end-flash_table8}
                     9904  
                     9905  ******************************************************************************
                     9906  **                           Real Time variables sent out on RS232 port
                     9907  **                               "R" command = all 39 Bytes
                     9908  **                               "A" command = first 22 Bytes
                     9909  ******************************************************************************
                     9910  * Revised by DJA to start from 0, makes more sense
                     9911  **
                     9912  **  0    secl
                     9913  **  1    squirt
                     9914  **  2    engine
                     9915  **  3    baroADC
                     9916  **  4    mapADC
                     9917  **  5    matADC
                     9918  **  6    cltADC
                     9919  **  7    tpsADC
                     9920  **  8    batADC
                     9921  **  9    egoADC
                     9922  **  10   egoCorrection
                     9923  **  11   airCorrection
                     9924  **  12   warmupEnrich
                     9925  **  13   rpm100
                     9926  **  14   pulseWidth1
                     9927  **  15   accelEnrich


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 82
MC68HC908GP32 User Bootloader


                     9928  **  16   baroCorrection
                     9929  **  17   gammaEnrich
                     9930  **  18   veCurr1
                     9931  **  19   pulseWidth2
                     9932  **  20   veCurr2
                     9933  **  21   idleDC
                     9934  **
                     9935  **  End of "A" command RT Variables for MegaView compatability
                     9936  **
                     9937  **  22/23 cTime             16 bit cycle timer.
                     9938  **  24    advance           Spark Gauge *0.352 -28.7     Min -10   Max 80
                     9939  **  25    afrtarget         Raw ADC target that MS is trying to reach
                     9940  **                       from the target table or switch point  255 = 5V.
                     9941  **  26    fuelADC           Raw ADC from X7 (second O2 or fuel pressure or
                     9942  **                       VSS sensor)
                     9943  **  27    egtADC            Raw ADC from X6 If EGT then temp in
                     9944  **                       F = egtADC*7.15625
                     9945  **                       C = egtADC*3.90625 if
                     9946  **                       VSS Volts = egtADC*0.019
                     9947  **  28    CltIatAngle       Spark Angle added or removed for IAT CLT temp.
                     9948  **                       Angle = MS value*0.352
                     9949  **                       (Angle < 45 ? Angle : -90 + Angle)
                     9950  **  29    KnockAngle        Spark Angle removed due to Knock System
                     9951  **                       *0.352
                     9952  **  30    egoCorrection2    Same as egocorrection, but this is for second
                     9953  **                       O2 sensor when fitted
                     9954  **  31    porta             Porta raw value for displaying the I/O state
                     9955  **  32    portb             Portb raw value for displaying the I/O state
                     9956  **  33    portc             Portc raw value for displaying the I/O state
                     9957  **  34    portd             Portd raw value for displaying the I/O state
                     9958  **  35    stackL            Low byte of stack for test purposes only, no
                     9959  **                       use to users.
                     9960  **  36    tpsLast           TPS/MAP last value for MT Accel Wizard, so we
                     9961  **                       have last and current values to give a gauge of dot
                     9962  **  37    iTimeX
                     9963  **  38    bcDC
                     9964  ****************************************************************************
 FF7F                9965       end
                     9966   

 Symbol Table 

AACOK            85B6
ACCELDECAY_F     E0B7
ACCH             00C8
ACCL             00C9
ACC_DONE_LED     8602
ACK              0002
ACKK             0002
ACMULT_F1        E0B5
ACQ              0005
AC_CHK36         965D
AC_CHK37         9654
AC_CHK38         964B
ADCDONE          946F
ADCH0            0000
ADCH1            0001
ADCH2            0002
ADCH3            0003
ADCH4            0004
ADCLK            003E
ADCO             0005
ADCPTR           9487
ADICLK           0004
ADIV0            0005
ADIV1            0006
ADIV2            0007
ADR              003D
ADSCR            003C
ADSEL            008E
ADVANCING        0007
AECARRY_ONAE     8647
AE_CHK           85DC
AE_COMP_SHOOT_AM 8608
AE_SET           85F2
AFR1_STEP_1      99FD
AFR1_STEP_2      9A1C
AFR1_STEP_3      9A33
AFR1_TARGETS     99DF
AFRTARGET        0059
AFRTARTPS_F      E079
AFR_F1           E600


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 83
MC68HC908GP32 User Bootloader


AFR_F2           E650
AFTERAFRSET      8744
AIEN             0006
AIRCOR           004B
AIRDENFACTOR     F300
AIRTEMP          0107
ALED             0001
ALL_ASECOUNT     85AB
ALPHATARAFR      0004
ALTCOUNT1        0086
ALTCOUNT2        0087
ALTERNATE_F1     E196
ALTERNATE_F2     E296
ALTERNATE_R      01A8
ALT_I1GE         0020
ALT_I2GE         0040
ALT_I2T2         0010
ALWAYSPRIMEB     0001
ASCII_CR         000D
ASCII_LF         000A
ASECOUNT         0083
ASEHOLDB         0002
ASEIGNCOUNTB     0001
ASETABLEB        0002
ASEVTBL_F        E5A8
ASIS_SPEED       9267
AUTO             0007
AVGTOOTHH        00F3
AVGTOOTHL        00F4
AVGTTH12H        0209
AVGTTH12L        020A
AVGTTH14H        0207
AVGTTH14L        0208
AWC_F1           E5B2
BARCORR300_F     E083
BARO             0043
BAROCOR          0050
BAROCORCONSTB    0008
BAROFAC4250      F000
BARO_LO_CHECK    83A4
BARROHI_F        E052
BARROLOW_F       E053
BATT             0048
BATTFAC_F1       E19B
BATTFAC_F2       E29B
BATTFAC_R        01AD
BATT_CORR_CALC   8838
BATT_CORR_PW     8839
BC3_KPA_F        E760
BCACTCLOCK       00D4
BCCTLCLOCK       00D5
BCDC             00CF
BCDGAIN_F        E011
BCFE             0007
BCFREQDIV_F      E00E
BCPGAIN_F        E010
BCS              0004
BCTABLEUSE       0006
BCUPDATE_F       E00F
BC_DC_F          E730
BC_KPA_F         E700
BC_MAX_DIFF      E07D
BEND_OF_BARO     8393
BKF              0001
BLSSD            8D2A
BOOSTCONTROL     0000
BOOSTCUT2B       0020
BOOSTCUTB        0010
BOOSTDIRB        0040
BOOSTKNMAX_F     E06C
BOOSTKNOCK_F     E06B
BOOSTP           0003
BOOSTTABLE3B     0004
BOOT             FBBB
BOOT1            FBD9
BOOT2            FBE0
BOOT3            FBFC
BOOT4            FC4A
BOOT5            FCBE
BOOT6            FCC6
BOOT7            FCCC
BOOTDONE         FBE6


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 84
MC68HC908GP32 User Bootloader


BOOTDONE1        FBE9
BOOTDONE2        FBEB
BOOTEND          FDF8
BOOTLOAD         9704
BOOTPROG         FC04
BOOTPROG1        FC07
BOOTPROG2        FC14
BOOTPROG3        FC2D
BOOTPROG4        FC31
BOOTPROG5        FC42
BOOTPROG6        FC47
BOOTRESET        FB08
BOOTRESET1       FB59
BOOTRESET2       FB75
BOOTRESET3       FB7E
BOOTRESET4       FB87
BOOTRESET5       FB98
BOOTRESET6       FBA5
BOOTRESETUSER    FBA5
BOOT_START       FB00
BOTH_TABLE1      886E
BRKA             0006
BRKE             0007
BRKH             FE09
BRKL             FE0A
BRKSCR           FE0B
BURNCONST        98C4
BURNCOUNT        0093
BURNDST          0091
BURNSRC          008F
BURN_CONT        98CB
BUS7372800       FB00
BUS8003584       FB04
B_ENABLE         8E75
B_INJFC2         8D86
C13_BC           0008
C13_CS           0004
C13_O2           0002
C13_OF           0001
CALCGAMMAE       8517
CALCPWS          8455
CALCRPM          83D7
CALCRUNNINGPARAM 838D
CALC_DELAY       89A8
CALC_FINAL       8859
CALC_FINAL1DONE  886B
CANT_CRANK       0003
CANT_DELAY       0004
CANT_OFF         8F8B
CANT_SET         8F87
CARRY_ON_TEA     8666
CC_CONT          9251
CD1_START        8BF8
CD_1RAIL         8C2E
CD_1STORE        8C31
CD_2             8C33
CGMCHANGE        FB39
CHECKBIT         0001
CHECKDECELT      8707
CHECKREVSOK      8886
CHECKRPMSETTINGS 8874
CHECK_GREATER_TH 97DE
CHECK_LESS_THAN  97D6
CHECK_MMS        8F01
CHECK_RPM        8E60
CHECK_SPARK_LATE 8D43
CHECK_SP_ADD     8997
CHECK_TXCMD      9532
CHKHOLD          8D66
CHKROLL_END      8A96
CHK_DONE_1       8DC6
CHK_DONE_2       8DFE
CHK_DONE_2JMP    8DDA
CHK_O2_LAG       8757
CHK_RE_ENABLE    8E69
CHK_ROLL         8A88
CHXF             0007
CHXIE            0006
CHXMAX           0000
CKDN2            8E0C
CKP0_DDRC        9521
CKP3_I_DONE      9529


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 85
MC68HC908GP32 User Bootloader


CK_PAGE0         9506
CK_PAGE3         9527
CK_PAGE7         952D
CLEARRAM         8148
CLEAR_DECEL      86F0
CLEAR_TABLE      979C
CLT              0046
CLTADVANCE_F     E02F
CLTCRANKB        0010
CLTDEG_F         E030
CLTFIXASE_F      E5B5
CLTIATANGLE      005C
CLTIATIGNITIONB  0004
CLTMAPB          0008
CLTMATCHECKB     0010
CLTMATCORR_F     E82F
CLTMATRANGE      E838
CMD_ERASE        0057
CMD_EXIT         0058
CMD_HELP         0048
CMD_HELP1        001F
CMD_PROGRAM      0050
CMD_UPGRADE      0055
CN_END:000F      8D3F
CN_END:0014      9039
COCO             0007
COILA            0000
COILABIT         0000
COILB            0001
COILBBIT         0001
COILCBIT         0002
COILDBIT         0003
COILEBIT         0004
COILERR          0004
COILFBIT         0005
COILSEL          0068
CONFIG1          001F
CONFIG11_F1      E1B6
CONFIG11_F2      E2B6
CONFIG11_R       01D4
CONFIG12_F1      E1B7
CONFIG12_F2      E2B7
CONFIG12_R       01D5
CONFIG13_F1      E1B8
CONFIG13_F2      E2B8
CONFIG13_R       01D6
CONFIG2          001E
CONFIG21_F       E2B6
CONFIG22_F       E2B7
CONFIG23_F       E2B8
CONFIG_ERROR     0007
CONF_ERR         9600
CONF_ERR2        960A
CONSBARCORB      0080
CONT_TX          96F1
COOLANT          00CC
COP              0005
COPCTL           FFFF
COUNT            0040
CPHA             0003
CPOL             0004
CRANK            0001
CRANKANGLE_F     E3AB
CRANKANGLE_R     01BD
CRANKDWELL       8B8D
CRANKINGDONE     8AF5
CRANKINGMODE     8AB4
CRANKINGMODEPRIM 8AB7
CRANKINGPW       8ACA
CRANKINGPW2      0006
CRANKIT          845F
CRANKPWS_F       E820
CRANKPWTABLEB    0001
CRANKRPM_F       E82B
CRANK_PWM        8A2C
CTIMECOMMH       0056
CTIMECOMML       0057
CTIMEH           00BF
CTIMEHCP         0200
CTIMEL           00C0
CTIMELCP         0201
CTODIV           0007


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 86
MC68HC908GP32 User Bootloader


CTODIVB          0080
CURRTTH14H       0205
CURRTTH14L       0206
CUTCHANNELS      8878
CYCLE_CALC       9249
DC_LOW           9298
DDRA             0004
DDRB             0005
DDRC             0006
DDRD             0007
DDRE             000C
DECAY_ACCEL      0088
DECAY_AE_AW      8693
DECELKPA_F       E081
DECELMAPB        0020
DECODE_WHEEL     9067
DECRMT           98A4
DEC_ACCEL        85D3
DELAY            FD39
DELAY1           FD3A
DELAY2           FD3C
DELAYANGLE       0106
DELAY_CALC       926D
DELAY_DONE       9232
DIVIDEND         0096
DIVIDER_F1       E195
DIVIDER_F2       E295
DIVIDER_R        01A7
DIVISOR          0098
DMARE            0005
DMATE            0004
DODWELL          8D1A
DONEBAROCORR     83B8
DONEKPA          83BF
DONE_B           952D
DONE_BYTE        9702
DONE_DECODE      91FA
DONE_LOAD        97A4
DONE_RCV         95F0
DONE_WITH_INTERP 9822
DONT_RESETCNT    8D26
DONT_RESETCNT2   9024
DORPMCALC        83E1
DOSPARKLSPEED    8D71
DOSQUIRT         904B
DO_BARO          83AC
DO_DWELL_US      8B9D
DO_INTERP        97E9
DO_KPA4250       83BC
DO_OVERRUN       89EA
DO_SET_SPK       9363
DO_TARGETS       99E7
DO_THE_EGO       8769
DSLSA:000F       8D37
DSLSA:0014       9031
DSLSB:000F       8D3B
DSLSB:0014       9035
DSS2             9378
DTMODE_F         E021
DTNOSB           0020
DUALDIZZYB       0010
DUALEDIS         0005
DUMMY            97B5
DWELLCD          0003
DWELLCONT        0001
DWELLCRANK_F     E06E
DWELLDELAY1      00E7
DWELLDELAY2      00E9
DWELLDELAY3      00EB
DWELLDELAY4      00ED
DWELLDELAY5      00EF
DWELLDELAY6      00F1
DWELLDMS         00F7
DWELLDUTY50      0006
DWELLRUN_F       E06F
DWELLTF          8B59
DWELLTMPH        0096
DWELLTMPHAC      00A8
DWELLTMPHMS      009C
DWELLTMPHOP      0099
DWELLTMPHP       00A0
DWELLTMPL        0097


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 87
MC68HC908GP32 User Bootloader


DWELLTMPLAC      00A9
DWELLTMPLMS      009D
DWELLTMPLOP      009A
DWELLTMPLP       00A1
DWELLTMPX        0095
DWELLTMPXAC      00A7
DWELLTMPXMS      009B
DWELLTMPXOP      0098
DWELLTMPXP       009F
DWELLTV          8B53
DWELLUSH         00F8
DWELLUSL         00F9
DWELL_CORR       8B90
DWELL_LIM:000B   8C23
DWELL_LIM:000E   8CB4
DWLLDEND:000B    8C18
DWLLDEND:000E    8CA9
DWLNWCHK:000D    8C79
DWLNWOK:000D     8C8D
DWLNWRAIL:000D   8C84
DWL_OK           9334
EDIS             0004
EDISMS_F         E015
EFANOFFTEMP_F    E04B
EFANONTEMP_F     E04A
EGO              0049
EGOALL_DONE      87C3
EGOALL_DONEJMP   8767
EGOBUMP          9241
EGOCORR          004A
EGOCORR2         005E
EGOCOUNT         0082
EGOCOUNTCMP_F    E191
EGOCOUNTCMP_F2   E291
EGOCOUNTCMP_R    01A3
EGODELTA_F       E192
EGODELTA_F2      E292
EGODELTA_R       01A4
EGOIGNCOUNTB     0001
EGOLIM2_F        E028
EGOLIMITKPA_F    E027
EGOLIMIT_F       E193
EGOLIMIT_F2      E293
EGOLIMIT_R       01A5
EGOLIM_DONE      8785
EGORPM_F         E1B9
EGORPM_F2        E2B9
EGOTEMP_F        E190
EGOTEMP_F2       E290
EGOTEMP_R        01A2
EGO_CALC         871F
EGO_DONE         87BF
EGTADC           005B
ELSXA            0002
ELSXB            0003
ENABLE_THE_IRQ   8EFF
END100TH         8F39
END_OF_BARO      83BA
END_OF_MAIN      9AE7
ENGINE           0042
ENHANCEDBITS     0066
ENHANCEDBITS2    0067
ENHANCEDBITS4    0069
ENHANCEDBITS5    006A
ENHANCEDBITS6    006B
ENSCI            0006
EN_XMIT          95EA
ERASE            0002
ERASEFLASH       FC5C
ERASEFLASH1      FC5F
ERASERAMSIZE     003B
ERRIE            0006
EXCRFUELB        0040
EXITSN           99DE
EXTRACRFU_F      E82E
EXTRAFUELCRANK   8AC8
FALSETRIGB       0004
FASTIDLEBG_F     E1BA
FASTIDLETEMP_F   E811
FASTIDLE_F       E813
FASTIDLE_R       01D8
FC_END:0010      8D86


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 88
MC68HC908GP32 User Bootloader


FC_END:0012      8FF1
FE               0001
FEATURE1         0063
FEATURE10_F5     E5B3
FEATURE11_F4     E82A
FEATURE12_F2     E2BC
FEATURE13_F      E810
FEATURE14_F1     E1BC
FEATURE1_F       E00B
FEATURE2         0064
FEATURE2_F       E00C
FEATURE3_F       E02E
FEATURE4_F       E042
FEATURE5_F       E04C
FEATURE6_F       E05C
FEATURE7         0065
FEATURE7_F       E06D
FEATURE8_F       E074
FEATURE9_F       E0B8
FEIE             0001
FINALNORM        99B6
FIN_TX           96FC
FIRING1          0003
FIRING2          0005
FIXEDANGLE_F     E3A9
FIXEDANGLE_R     01BB
FIXEDSPLIT_F     E870
FIXED_FL         889B
FLASHPROGRAM     FD44
FLASHPROGRAM1    FD4E
FLASHPROGRAM2    FD7F
FLASH_0_SIZE     00BA
FLASH_1_SIZE     00BD
FLASH_2_SIZE     00BD
FLASH_3_SIZE     00B9
FLASH_4_SIZE     00A8
FLASH_5_SIZE     00B7
FLASH_6_SIZE     00B2
FLASH_7_SIZE     0090
FLASH_8_SIZE     0071
FLASH_ERASED     00FF
FLASH_FIRST      0043
FLASH_LAST       0045
FLASH_PAGE       0080
FLASH_PROTECT    00F6
FLASH_ROW        0040
FLASH_TABLE0     E000
FLASH_TABLE0_END E0BA
FLASH_TABLE1     E100
FLASH_TABLE1_END E1BD
FLASH_TABLE2     E200
FLASH_TABLE2_END E2BD
FLASH_TABLE3     E300
FLASH_TABLE3_END E3B9
FLASH_TABLE4     E400
FLASH_TABLE4_END E4A8
FLASH_TABLE5     E500
FLASH_TABLE5_END E5B7
FLASH_TABLE6     E600
FLASH_TABLE6_END E6B2
FLASH_TABLE7     E700
FLASH_TABLE7_END E790
FLASH_TABLE8     E800
FLASH_TABLE8_END E871
FLBPR            FF7E
FLCR             FE08
FLOCKER          0076
FLOODCLEAR       8AC4
FUELP            0000
FUELSPARKCUTB    0020
FUELSPARKLCB     0002
FUEL_SPARKHARDB  0010
FUEL_SPARKHLCB   0001
FXDASEDONE       0007
FXR_C            889E
GAMMAE           0051
GETCHAR          FC6A
GETHEXBYTE       FCD2
GETHEXBYTE1      FCEA
GETHEXBYTE2      FCEC
GETSREC          FC73
GETSREC1         FC78


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 89
MC68HC908GP32 User Bootloader


GETSREC1A        FC80
GETSREC2         FC92
GETSREC3         FCA7
GETSREC4         FCBB
GETUSC100        9072
GOT_ORD_NUM      97D0
HEI7             0007
HEI7_SPD         8B62
HIGHER_ACCEL     86B9
HIGHER_ACJMP     868F
HIGH_CONT        9269
HIGH_SPEED       9269
HIRES_DWELL      901A
HISPDCORR        9286
HRDWON           0000
HRD_CK           9331
HRD_OFF          932F
HRD_ON           932B
HVEN             0008
HYBRIDALPHAN     0005
IASC             0001
IATBOOSTST_F     E087
IATBOOST_F       E088
IATDANGER_F      E034
IATDEG_F         E032
IATPOINT_F       E03D
ICTLRPM1_F       E807
ICTLRPM2_F       E808
IDASHBIT         0006
IDASHDELAY_F     E80A
IDEADBND_F       E809
IDLADVHLD        010F
IDLE             0004
IDLEACTCHECK     8E4B
IDLEACTCLOCK     00D3
IDLEACTDONE      8E60
IDLEACTOFF       8E5E
IDLEACTON        8E5A
IDLEACTUATOR     8E33
IDLEADJUST       89F2
IDLEADVANCE_F    E3AE
IDLEADVTIMEOK    0004
IDLECLOSEDC_F    E80F
IDLECLTTHRESH_F  E3B1
IDLECRANKDC_F    E802
IDLECTLCLOCK     00D2
IDLEDASHDC_F     E804
IDLEDC           0055
IDLEDELAYCLOCK   0111
IDLEDELAYCLOCK_F E803
IDLEDELAYTIME_F  E3B2
IDLEFREQ_F       E80B
IDLELASTDC       00CD
IDLEMINDC_F      E805
IDLEON           0007
IDLEPERIOD2_F    E80D
IDLEPERIOD_F     E801
IDLEPWM          89F2
IDLERPM          0110
IDLERPMTHRESH_F  E3B0
IDLESTARTCLK_F   E80C
IDLETARGET       00CE
IDLETHRESH_F     E815
IDLETPSTHRESH_F  E3AF
IDLE_CLB         0004
IDLE_CLOSEDLOOP  8A70
IDLE_DC_HI       E806
IDLE_DC_LO       E800
IDLE_DONE        8A72
IDLE_DONEJMP1    8A29
IDLE_DONEJMP2    8A6D
IDLE_LOOPCOLD    8A09
IDLE_OPENLOOP    89FB
IDLE_WARMUPB     0002
IGNCOUNT1        0084
IGNCOUNT2        0085
ILAD             0003
ILIE             0004
ILOP             0004
ILSOA:0010       8D7E
ILSOA:0012       8FE9
ILSOB:0010       8D82


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 90
MC68HC908GP32 User Bootloader


ILSOB:0012       8FED
ILTY             0002
IMASK            0001
IMASKK           0001
INAC_CONT        966F
INCRPMER         8E81
INCRPM_CRANK     8E9A
INDWELL          0004
INIT_CONFIG1     0001
INIT_CONFIG2     0001
INIT_CRANG       830E
INIT_FIRST       8000
INIT_LAST        FB00
INIT_SCBR        0012
INIT_SCC1        0040
INIT_SCC2        000C
INIT_STACK       01EC
INIT_WHEEL       8323
INJ1             0000
INJ2             0001
INJ2DONE         8E33
INJECT1          0004
INJECT2          0005
INJF1            8D8C
INJF2            8D8F
INJF3            8D92
INJF3JMP         8DC4
INJOCFUEL_F1     E198
INJOCFUEL_F2     E298
INJOCFUEL_R      01AA
INJOPEN_F1       E197
INJOPEN_F2       E297
INJOPEN_R        01A9
INJPWMT_F1       E19A
INJPWMT_F2       E29A
INJPWMT_R        01AC
INJPWM_F1        E199
INJPWM_F2        E299
INJPWM_R         01AB
INJ_FIRE_CTL     8D89
INT1             FE04
INT2             FE05
INT3             FE06
INTACC1          0094
INTACC2          0098
INTERPACELB      0040
INTKBIER         001B
INTKBSCR         001A
INTSCR           001D
INT_RAM          01ED
INVERTOUTONEB    0002
INVERTOUTTWOB    0004
INVSPK           0006
IN_A_OR_C_MODE   963C
IN_Q_MODE        96EE
IN_Q_MODEJMP     9697
IN_SCI_RCV       948B
IN_SCI_TX        9622
IN_SIGN_MODE     96E4
IN_T_MODE        96E9
IN_V_MODE        96C1
IN_V_MV          96D2
IRESTORERPM_F    E80E
IRQF             0003
IRQPH            0101
IRQPL            0102
IRQTIME          0007
IRQ_SPARK        8D64
IRQ_SPARK_NEON   8D6A
ISHEX            FCF6
ISHEX1           FD06
ISNTHEX          FD08
ISTARTBIT        0007
IS_MISS          9120
ITIMEH           00AF
ITIMEL           00B0
ITIMEPH          00FD
ITIMEPL          00FE
ITIMEPX          00FC
ITIMEX           00AE
ITMP00           01ED
ITMP01           01EE


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 91
MC68HC908GP32 User Bootloader


ITMP02           01EF
ITMP03           01F0
ITMP04           01F1
ITMP05           01F2
ITMP06           01F3
ITMP07           01F4
ITMP08           01F5
ITMP09           01F6
ITMP0A           01F7
ITMP0B           01F8
ITMP0C           01F9
ITMP0D           01FA
ITMP0E           01FB
ITMP0F           01FC
ITMP10           01FD
ITMP11           01FE
ITMP12           01FF
ITMP13           0200
ITMP14           0201
ITMP15           0202
ITMP16           0203
ITMP17           0204
ITMP18           0205
ITMP19           0206
ITMP1A           0207
ITMP1B           0208
ITMP1C           0209
ITMP1D           020A
ITMP1E           020B
ITMP1F           020C
ITMPCOMM         020D
JBOOTLOAD        95FD
JCHECK_MMS       8E97
JINJ_FIRE_CTL    8D61
JIN_SIGN_MODE    9619
JIN_T_MODE       961C
JIN_V_MODE       961F
JMODE_B          955B
JMODE_BOOT       9567
JMODE_P          9564
JMODE_Q          9561
JMODE_SIGN       956A
JMODE_T          9570
JMODE_W          955E
JMODE_X          956D
JRETW            9140
JWUE_DONE        856A
J_CSL            8D13
J_HIRES_DWELL    8FCB
J_LOST_SYNC2     9096
J_LOST_SYNC3     909A
KBIE0            0000
KBIE1            0001
KBIE2            0002
KBIE3            0003
KBIE4            0004
KBIE5            0005
KBIE6            0006
KBIE7            0007
KEYF             0003
KNOCKADV         00DA
KNOCKADV_F       E03A
KNOCKANGLE       005D
KNOCKDETB        0040
KNOCKIN          0002
KNOCKKPAL_F      E037
KNOCKMAX_F       E03B
KNOCKRET1_F      E038
KNOCKRET2_F      E039
KNOCKRPMLL_F     E036
KNOCKRPML_F      E035
KNOCKTIMLFT      00D9
KNOCKTIM_F       E03C
KPA              00CB
KPA300_READING   9687
KPA400_READING   9699
KPADOTBOOSTB     0010
KPADOTSETB       0080
KPAFACTOR4250    F100
KPALAST          00D0
KPAO2_F          E040
KPARANGEAFR_F1   E648


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 92
MC68HC908GP32 User Bootloader


KPARANGEAFR_F2   E698
KPARANGESPLIT_F  E869
KPARANGEST_F1    E39C
KPARANGEST_F2    E49C
KPARANGEST_R     01AE
KPARANGEVE_F1    E1AA
KPARANGEVE_F2    E2AA
KPARANGEVE_F3    E59C
KPARANGEVE_R     01C2
KPARETARD_F      E033
KPASCALE300      0042
KPASCALE400      00A7
KPATPSOPENB      0001
KPA_DOT_ON       923F
KPA_N            00DB
LATENCY_F        E022
LAUNCH           0003
LAUNCHCONTROL    0002
LAUNCHLIMIT_F    E014
LAUNCHON         0006
LBATT            007B
LCLT             0079
LC_FLATLIM       E080
LC_FLATSEL_F     E07C
LC_FS            0005
LC_F_LIMANGLE_F  E08D
LC_F_SLIM_F      E08C
LC_LIMANGLE_F    E02A
LC_SOFT_RPM_F    E02B
LC_THROTTLE_F    E029
LD_VE_1DONE      87F5
LED18_FAN        0006
LEGO             007C
LININTERP        97D1
LIX              0098
LIX1             0094
LIX2             0095
LIY              0099
LIY1             0096
LIY2             0097
LMAP             0077
LMAT             0078
LOADCONTRIBDONE  8802
LOAD_MAX_MAP     96A9
LOAD_TABLE       977B
LOCK             0006
LONGER_DELAY     8A6A
LOOPS            0007
LOSPDCORR        92A6
LOST_SYNC_W      91C8
LOWRESH          00F5
LOWRESL          00F6
LOWSPDSPK        8D17
LOW_SPEED        9261
LSD_A            930C
LSD_B            9311
LSD_DONE         9304
LSD_DONE2        9306
LSD_MIN          92FF
LSSPK_DONE       8D3F
LSSPK_INV        8D2C
LTPS             007A
LVI              0001
LVIOUT           0007
LVISR            FE0C
M                0004
MAP              0044
MAPAEN           0006
MAPAQ_F          E0A9
MAPDOTRATE_F     E0A5
MAPFIXASE_F      E5B6
MAPHOLDB         0004
MAPTHRESH_F      E05B
MASS             0004
MASSAIRFLWB      0020
MASSERASE        FD09
MASSERASE1       FD0D
MASSERASE2       FD30
MAT              0045
MATCHT1          9170
MATCHT11         9189
MATCHT19         9196


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 93
MC68HC908GP32 User Bootloader


MATCHT26         919F
MATCHT26OK       91A5
MATCHT27         91AA
MATCHT29         91AF
MATCHT8          9179
MATCHT8OK        917F
MATCHT9          9184
MATCRANKB        0020
MAXADVANG_F      E031
MAXPULSE         8867
MAX_DWELL        8B9B
MBFF             8853
MINDISCHG_F      E08F
MIN_DWELL        0005
MISC_SPARK       8B5F
MISS2NDB         0001
MISS_CHK_SKIP    9225
MISS_TPS         865A
MMS              007D
MMSDIV           00E3
MODE             0000
MODEK            0000
MODE_A           9573
MODE_AA_CONT     957D
MODE_B           94E3
MODE_BOOT        95F2
MODE_B_OK        94ED
MODE_C           9583
MODE_P           95DA
MODE_Q           95C8
MODE_R           9578
MODE_SIGN        95E1
MODE_T           95D1
MODE_V           958C
MODE_V2          95B8
MODE_V_F0        95A9
MODE_V_F1        95AD
MODE_V_F23       95B1
MODE_V_MV        95B5
MODE_W           95BC
MODE_X           95C1
MODF             0004
MODFEN           0002
MODRST           0002
MS               007E
MSDONE           8F17
MSEC             8F0B
MSG_COMPLETE     FDB4
MSG_ERROR        FDCE
MSG_HELLO        FD88
MSG_HELP         FD90
MSG_NORESET      FDE0
MSG_WAITING      FDBF
MSG_WHAT         FDD7
MSNEON           0001
MSNS             0000
MSXA             0004
MSXB             0005
MS_DELAY         993F
MS_DELAY1        9940
MS_DELAY2        9942
MS_DWELL         8BA8
MS_ERASEFLASH    98FB
MS_ERASEFLASH1   98FE
MS_ERASERAMSIZE  0031
MS_FLASHPROGRAM  994A
MS_FLASHPROGRAM1 994A
MS_FLASHPROGRAM2 9979
MS_MASSERASE     9919
MS_PROGRAMFLASH  990A
MS_PROGRAMFLASH1 990D
MS_PROGRAMRAM    000B
MS_PROGRAMRAMSIZ 004A
MS_RAM_END       0112
MS_RAM_SIZE      00D2
MS_RAM_START     0040
MS_RF_END        01DA
MS_RF_END_F      E871
MS_RF_SIZE       00C8
MS_RF_START      0112
MS_TOTAL_RAM_SIZ 019A
MULTISPARKB      0008


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 94
MC68HC908GP32 User Bootloader


MV_INIT          833E
MV_MODE          0006
MV_V_EMUL        9743
M_SC1INVSPARK    0008
M_SC1LNGTRG      0001
M_SC1ODDFIRE     0010
M_SC1TIMCRNK     0004
M_SC1XLNGTRG     0002
M_TWOSTROKE      0004
N2ODEL_FLAT_F    E09E
N2ODEL_LAUNCH_F  E09D
N2OHOLD          010C
N2OHOLDON_F      E09F
N2OLAUNCHDEL     010B
NEG_SLOPE        9815
NEIE             0002
NEW_EGOLIM       8780
NEW_SQUIRT1      8D98
NEW_SQUIRT2      8DAE
NEXTCYL          0005
NF               0002
NITROUS          0007
NITROUSANGLE     0108
NOACCELASEB      0004
NOAIRFACTORB     0040
NOCOILNEG1       8D3F
NOCOILNEG2       9039
NOCOILPOS1       8D86
NOCOILPOS2       8FF1
NODECELBOOSTB    0080
NOITX_ERR        9225
NOPRIMEPB        0008
NORMAIRDEN       83D0
NORMDECEL        86DD
NORM_OP_DDRC     8184
NOS2ANGLE_F      E6A3
NOS2DELAY_F      E6A2
NOS2PWHI_F       E6A5
NOS2PWLO_F       E6A4
NOS2RPMMAX_F     E6A1
NOS2RPM_F        E6A0
NOSANGLE_F       E044
NOSANTILAG       0004
NOSCLT_F         E016
NOSDCOK          0000
NOSFUELHI_F      E046
NOSFUELLO_F      E045
NOSHIKPA_F       E056
NOSIN            0001
NOSLAGSYSTEMB    0040
NOSLOWKPA_F      E055
NOSPARKCARRY     92EE
NOSPKOFF         8A7B
NOSPW            0109
NOSRPMMAX_F      E018
NOSRPM_F         E017
NOSSYSON         0001
NOSSYSREADY      0005
NOSTPS_F         E043
NOTSPKTIME       8FC9
NOTTPSLAST_YET   9666
NOT_FIXED        88A5
NOT_MISS         9126
NOT_MISS_OK      913D
NOT_ST1          897C
NOX_OF           8441
NO_AFR_FORVE1    99E6
NO_CRANKPW2      8AFD
NO_EGO_CNT       9243
NO_FLYBK         8DAA
NO_IRQTIMER      8CD8
NO_KPA_CHECK     8733
NO_MISC_SPARK    8A7E
NO_OVERRUN       89EE
NO_OVERRUN_RESET 89E1
NO_OVER_RUN      89BC
NO_ROLLCHK       9062
NO_SPK_F         8169
NO_TPSCOUNT      8F72
NO_TPS_SETAFR1   99F7
NO_USC100L_ROLL  8CD8
NSQ1             8DA0


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 95
MC68HC908GP32 User Bootloader


NSQ2             8DB6
NSQ2CONT         8DBC
NUMTEETH_F       E05A
O2TARGETV_F      E1BB
O2TARGETV_F2     E2BB
O2_FPADC         005A
O2_IS_LEAN       87A4
O2_IS_RICH       878D
OFFSETANG        020C
OFFSETSTEP       020B
OFF_INJ_1        8DDC
OFF_INJ_2        8E15
OKPAGE           9789
ONE00TH          8F39
ONESHOTBARRO     0007
ONESHOT_BAR      8396
ONETENTH         8F3F
ONETEN_NOTLOG    8F66
OP_DDRC          8186
OR               0003
ORIE             0003
ORUNKPA_F        E048
ORUNRPM_F        E047
ORUNTPS_F        E049
OUT1HYS_F        E07E
OUT1LIM          E007
OUT1SOURCE       E008
OUT1UPLIM_F      E058
OUT1_OUT3B       0080
OUT2HYS_F        E07F
OUT2LIM          E009
OUT2SOURCE       E00A
OUT2UPLIM_F      E059
OUT3LIM_F        E085
OUT3SOURCE_F     E084
OUT3SPARKD       0004
OUT3TIMER        00E5
OUT4LIM_F        E08B
OUT4SOURCE_F     E08A
OUTAOFFS_F       E6A6
OUTAOFFV_F       E6A7
OUTBOFFS_F       E6A8
OUTBOFFV_F       E6A9
OUTCOFFS_F       E6AA
OUTCOFFV_F       E6AB
OUTDOFFS_F       E6AC
OUTDOFFV_F       E6AD
OUTEOFFS_F       E6AE
OUTEOFFV_F       E6AF
OUTFOFFS_F       E6B0
OUTFOFFV_F       E6B1
OUTOFF_22B       0001
OUTOFF_45B       0002
OUTOFF_90B       0004
OUTPUT1          0003
OUTPUT1ON        0001
OUTPUT2          0002
OUTPUT2ON        0002
OUTPUT3          0000
OUTPUTPINS       0062
OUTPUTPINS_F     E001
OVERRUN          0002
OVERRUNCLT_F1    E0B6
OVERRUNONB       0040
OVERRUNTIME      00D7
OVERRUNT_F       E082
OVER_B_P_F       E02C
OVER_RUN         89B5
OVER_RUN_DONE    89F2
OVER_RUN_SET     0005
OVER_RUN_T       89F0
OVRF             0005
P8FEAT1_F        E86F
PAGE             0105
PAGE2            0002
PAGESIZE         00BD
PAMBIENT         00CA
PAMBIENT_F       E0B9
PASS_STORE       8EDE
PBWC             0037
PCTL             0036
PE               0000


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 96
MC68HC908GP32 User Bootloader


PEIE             0000
PEN              0001
PERSONALITY      0061
PERSONALITY_F    E000
PGM              0001
PIN              0006
PIN10            0003
PIN11            0004
PLLF             0006
PLLIE            0007
PLLON            0005
PLLSET           FB3D
PLLWAIT          FB4D
PMDS             003B
PMRS             003A
PMSH             0038
PMSL             0039
POR              0007
PORTA            0000
PORTB            0001
PORTC            0002
PORTD            0003
PORTE            0008
POSINTERP        97FC
PRE0             0002
PRE1             0003
PRIMED           0007
PRIMELATEB       0002
PRIMEPULSE_F     E82D
PRIMETWICEB      0004
PRINTSTRING      FBF8
PRINTSTRING1     FBF3
PROGRAMRAM       000B
PROGRAMRAMSIZE   004F
PS0              0000
PS1              0001
PS2              0002
PTAPUE           000D
PTCPUE           000E
PTDPUE           000F
PTY              0000
PUTCHAR          FB53
PUTSTRING        FBED
PW1              004E
PW2              0053
PWCALC1          006E
PWCALC2          006F
PWMIDLEB         0001
PWM_LIMIT_1      8DF2
PWM_LIMIT_2      8E2A
PWRUN1           006C
PWRUN2           006D
PW_DONE          8869
PW_STAGED        010A
PW_STAGED2       010D
QUOTIENT         0094
R8               0007
RAILCALC         99DB
RAM_EXEC         01ED
RAM_LAST         023F
RAM_START        0040
RE               0002
REARM_IRQ        8E7F
RECALCDELAY      92B6
REENT            97BD
REMAINDER        0094
REQ_FUEL_F1      E194
REQ_FUEL_F2      E294
REQ_FUEL_R       01A6
RESTAGING        0003
RESTART_F0       8F4C
RESTART_F1       8F59
RET_W            91BC
REUSE_FIDLE      0000
REUSE_LED17      0001
REUSE_LED18      0002
REUSE_LED18_2    0003
REUSE_LED19      0004
REVLIMBITS       0060
REVLIMHARD       0002
REVLIMHSOFT      0001
REVLIMIT_F       E006


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 97
MC68HC908GP32 User Bootloader


REVLIMSOFT       0000
REVNUM           9A9E
RISE             0004
ROLL1            0000
ROLL1SET         8A86
ROLL2            0001
ROLL_NOT_HIGH    8A94
ROM_LAST         FDFF
ROM_START        8000
ROTARY2          0000
ROTARY2B         0001
ROTARYFDIGN      0004
ROUNDREM         99A6
RPF              0000
RPM              004D
RPMAEBASED       0010
RPMAQL_F2        E09C
RPMAQ_F2         E099
RPMBACKAE        85FC
RPMBASEDRATE_F   E095
RPMCALCDONE      8453
RPMCALCFAST      842A
RPMCALCSLOW      83F9
RPMCALCZERO      8452
RPMCH            0072
RPMCL            0073
RPMDOTRATE       9ADF
RPMK_F1          E19C
RPMK_F2          E29C
RPMK_R           01AE
RPMLAST          0103
RPMLOWBYTECHK    8E78
RPMOXLIMIT_R     01D7
RPMPH            0070
RPMPL            0071
RPMRANGE3BC_F    E784
RPMRANGEAFR_F1   E640
RPMRANGEAFR_F2   E690
RPMRANGEBC_F     E724
RPMRANGEBC_F2    E754
RPMRANGESPLIT_F  E863
RPMRANGEST_F1    E390
RPMRANGEST_F2    E490
RPMRANGEST_R     01A2
RPMRANGEVE_F1    E19E
RPMRANGEVE_F2    E29E
RPMRANGEVE_F3    E590
RPMRANGEVE_R     01B0
RPMRATE_F        E05E
RPMREDUHI_F      E837
RPMREDULO_F      E836
RPMTHRESH_F      E062
RQFE1            8825
RQFR1            8822
RSH_R            0005
RSH_S            0004
RST_ACCEL        86C2
RST_ACCJMP       8691
RTC_DONE         8F95
RTC_DONE2        8FC7
RTC_DONEJMP      8F6F
RTC_RESET        8FB8
RUNIT            8465
RUNNING          0000
RWU              0001
RXOFFSET         008D
SAVE_DWELL:000B  8C2A
SAVE_DWELL:000E  8CBB
SAWH             00F3
SAWL             00F4
SBFCR            FE03
SBK              0000
SBSR             FE00
SBSW             0001
SC2DUAL          9447
SCALEFAC_F       E04F
SCBR             0019
SCC1             0013
SCC2             0014
SCC3             0015
SCDR             0018
SCHED1           0002


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 98
MC68HC908GP32 User Bootloader


SCHED2           0004
SCHEDINJ         93F7
SCHEDULE1        940F
SCHEDULE1A       9416
SCHEDULE2D       945D
SCHEDULE2DA      9464
SCHEDULE2S       9435
SCHEDULE2SA      943C
SCRF             0005
SCRIE            0005
SCS1             0016
SCS2             0017
SCTE             0007
SCTIE            0007
SECH             0080
SECL             0040
SECONDO2B        0001
SECONDS          8F78
SEC_FIN          8F8D
SEND_DATA_NORMAL 96AD
SEND_FUDGED_DATA 96AB
SEND_PORTS       96B1
SETAFR_UP        8740
SETIT            9386
SETIT2           9388
SETLSB           98A2
SETPWMSINGLE     81CE
SET_SPK_TIMER    9316
SHFTLP           986A
SHIFTHI_F        E013
SHIFTLIGHT       0001
SHIFTLO_F        E012
SIGNATURE        9ABF
SIN_A            8CED
SIN_B            8D00
SKIPO2           87BB
SKIPO2A          8785
SKIPO2JMP        8735
SKIP_ALL_O2      8737
SKIP_CYCLE_CALC  9399
SLED             0000
SLIPRATE         9AE3
SLOWIDLETEMP_F   E812
SLOWIDLE_F       E814
SPARE1           E07A
SPARE1_2_F       E023
SPARE1_3_F       E024
SPARE1_4_F       E025
SPARE1_5_F       E026
SPARE3_182       E3B6
SPARE3_183       E3B7
SPARE3_184       E3B8
SPARE3_F         E08E
SPARK2DELAY_F    E057
SPARKANGLE       0058
SPARKBITS        005F
SPARKCARRY       00C3
SPARKCONFIG1_F   E3AD
SPARKCUT         0005
SPARKCUTBASE_F   E04E
SPARKCUTBNUM_F   E054
SPARKCUTCNT      00D8
SPARKCUTNLC_F    E04D
SPARKCUTNUM_F    E02D
SPARKDELAYH      00B1
SPARKDELAYL      00B2
SPARKDLTH        0096
SPARKDLTL        0097
SPARKDLTX        0095
SPARKHOLDCYC_F   E3AC
SPARKHSPEED      0001
SPARKLSPEED      0002
SPARKON          0003
SPARKONLEFTAH    00B3
SPARKONLEFTAL    00B4
SPARKONLEFTBH    00B5
SPARKONLEFTBL    00B6
SPARKONLEFTCH    00B7
SPARKONLEFTCL    00B8
SPARKONLEFTDH    00B9
SPARKONLEFTDL    00BA
SPARKONLEFTEH    00BB


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 99
MC68HC908GP32 User Bootloader


SPARKONLEFTEL    00BC
SPARKONLEFTFH    00BD
SPARKONLEFTFL    00BE
SPARKTABLE2B     0080
SPARKTARGETH     00FA
SPARKTARGETL     00FB
SPARKTEMPH       00C1
SPARKTEMPL       00C2
SPARKTIME        8FCE
SPARKTIME_EXIT   9016
SPARKTRIGG       0000
SPARK_LOOKUP     888F
SPCR             0010
SPDR             0012
SPE              0001
SPKEOPB          0008
SPKFOPB          0010
SPK_MULT         92CF
SPK_MULT_DIV2    92C9
SPLIT_F          E83F
SPMSTR           0005
SPR0             0000
SPR1             0001
SPRF             0007
SPRIE            0007
SPSCR            0011
SPTE             0003
SPTIE            0000
SPWOM            0002
SQUIRT           0041
SQUIRTCHECK1     93FB
SQUIRTDONE1      941F
SQUIRTDONE2      946D
SRECADDR         0007
SRECCHKSUM       0002
SRECCOUNT        0001
SRECSIZE         0006
SRECTYPE         0005
SREDDATA         0008
SREVLIMANGLE     E003
SREVLIMCTIME     E005
SREVLIMHTIME     E004
SREVLIMRPM       E002
SREVLIMTIMELEFT  00C4
SRSR             FE01
ST2TIMER         00DE
STAGEDAND        0007
STAGEDB          0004
STAGEDEITHER     000C
STAGEDMAP2ND     0006
STAGEDMODEB      0008
STALL            8E9F
STALL_CONT       8ED3
START            8128
STARTW           0002
START_ADC        8343
START_DELAY      8A4B
STG2NDPARMDLT_F  E3B5
STG2NDPARMKPA_F  E3B4
STGCYCLES_F      E3B3
STGDELTA_F       E051
STGTRANSDONE     0005
STGTRANSITIONCNT 010E
STGTRANS_F       E050
STH              01FE
STHP             00F3
STL              01FF
STLP             00F4
STORETPSACCEL    86B4
STORE_AIRCOR     83D5
STORE_DDRD       816D
STORE_PWM        81D1
STORE_SPARK      89A5
STORE_SPARK2     89A8
STORE_TEA1       85F8
STTABLELOOKUP    88A5
STX              01FD
ST_F1            E300
ST_F2            E400
ST_R             0112
ST_STEP_1        88A9
ST_STEP_2        88C2


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 100
MC68HC908GP32 User Bootloader


ST_STEP_3        88DB
ST_STEP_4        8938
ST_STEP_5        894D
ST_STEP_6        8962
SUBAR            FE02
SUPERNORM        9989
T1CH0H           0026
T1CH0L           0027
T1CH1H           0029
T1CH1L           002A
T1CNTH           0021
T1CNTL           0022
T1MODH           0023
T1MODL           0024
T1SC             0020
T1SC0            0025
T1SC1            0028
T1SCX_NO_PWM     0010
T1SCX_PWM        001E
T1TIMERGO        0052
T1TIMERSTOP      0032
T2CH0H           0031
T2CH0L           0032
T2CH1H           0034
T2CH1L           0035
T2CNTH           002C
T2CNTL           002D
T2CNTX           00AA
T2CURRH          0203
T2CURRL          0204
T2CURRX          0202
T2LASTH          00AC
T2LASTL          00AD
T2LASTX          00AB
T2MODH           002E
T2MODL           002F
T2OVERFLOW       97AA
T2PREVH          00C6
T2PREVL          00C7
T2PREVX          00C5
T2SC             002B
T2SC0            0030
T2SC1            0033
T8               0006
TABLELOOKUP      97B6
TABLE_ASESTUFF   8577
TACHCONF_F       E090
TACK             0003
TAEIGNCOUNT      0003
TAE_CALC         85BF
TAE_CHK_JMP      8605
TAE_CHK_JMP1     85D9
TAE_CHK_TIME     8682
TAE_DONE         871F
TAE_DONEJ        868C
TAE_DONEJMP      86B6
TARGETAFR3B      0002
TARGETAFRB       0080
TBCR             001C
TBIE             0002
TBIF             0007
TBON             0001
TBR0             0004
TBR1             0005
TBR2             0006
TC               0006
TCACCEL          00E0
TCANGLE          00E1
TCCYCLES         00E4
TCCYCLESEC       0002
TCIE             0006
TCSCALEFAC_F     E077
TCSLIPFACH_F     E07B
TCSLIPFAC_F      E078
TCSPARKCUT       00E2
TDE              86CF
TDE_CHK_DONE     8713
TDE_CHK_FUEL_CUT 86FB
TE               0003
TEMP_SP          0041
TENTH            007F
TEXTVERSION_F    9A9F


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 101
MC68HC908GP32 User Bootloader


TFI              0006
THERMFACTOR      F200
TIMEBASED        8D53
TIMERGO_NO_INT   0002
TIMEROUT3_F      E086
TIMERROLL        8CC0
TIMER_DONE       8CE1
TIMFIXASE_F      E5B4
TLHH             93BC
TL_CONT          93C6
TL_HIGH          93B2
TMP1             0094
TMP10            009D
TMP11            009E
TMP12            009F
TMP13            00A0
TMP14            00A1
TMP15            00A2
TMP16            00A3
TMP17            00A4
TMP18            00A5
TMP19            00A6
TMP2             0095
TMP20            00A7
TMP21            00A8
TMP22            00A9
TMP3             0096
TMP31            00DC
TMP32            00DD
TMP4             0097
TMP5             0098
TMP6             0099
TMP7             009A
TMP8             009B
TMP9             009C
TOF              0007
TOHEX            FCED
TOHEX1           FCF5
TOIE             0006
TOOTHLOG         0002
TOOTHL_F0        978E
TOOTHL_F1        9792
TOOTH_LOG_SETUP  9794
TOVX             0001
TOY_DLI          0007
TPS              0047
TPSACCEL         004F
TPSACLK          0081
TPSACOLD_F1      E0B1
TPSAEN           0004
TPSAQ_F1         E0AD
TPSASYNC_F1      E0B3
TPSBOOIAT_F      E089
TPSDEN           0005
TPSDOTRATE       E0A1
TPSDQ_F1         E0B4
TPSFLOOD_F       E82C
TPSFUELCORR      00D6
TPSFUELCUT       0089
TPSLAST          00D1
TPSO2_F          E041
TPSRANGE3BC_F    E78A
TPSRANGEBC_F     E72A
TPSRANGEBC_F2    E75A
TPSTARGETAFR     0005
TPSTHRESH_F1     E0B2
TPS_COUNTER      9238
TPS_DOT_ON       923D
TRACTCYCLE_F     E070
TRACTDEG_F       E063
TRACTION         0000
TRACTIONCB       0020
TRACTIONNOS      0000
TRACTSPARK_F     E067
TRIG1RET_F       E01D
TRIG1_F          E019
TRIG2FALLB       0001
TRIG2RET_F       E01E
TRIG2RISEFALLB   0002
TRIG2_F          E01A
TRIG3RET_F       E01F
TRIG3_F          E01B


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 102
MC68HC908GP32 User Bootloader


TRIG4RET_F       E020
TRIG4_F          E01C
TRIG5RET_F       E093
TRIG5_F          E091
TRIG6RET_F       E094
TRIG6_F          E092
TRIGGANGLE_F     E3A8
TRIGGANGLE_R     01BA
TRIGGER2         0003
TRIGLOG          0003
TRIGRET          0006
TRIMANGLE_F      E3AA
TRIMANGLE_R      01BC
TRIM_C           898B
TRIM_DONE        899F
TRIM_DONE2       89A5
TRIM_FL          8988
TROLL_CK_DONE    8AAF
TRST             0004
TRUE_DWELL_CALC  8BCE
TSTOP            0005
TURNALLSPARKOFF  8B3E
TURN_ON_INTS     8371
TX6_MV           94BD
TXCNT            008A
TXGOAL           008B
TXINV            0005
TXMODE           008C
TXMODE_5         94A8
TXMODE_6         94B0
TXMODE_7         94C0
TXMODE_8         94C8
TXMODE_9         94D0
TXMODE_9_CONT    94E0
TXMODE_C         9755
TXMODE_C1        94A5
TX_DONE          9613
UDIVBY100        9834
UDIVROUNDINGDONE 984D
UDSPEEDLIM_F     E076
UDSPEEDLO_F      E075
UDVD32           984E
UMUL16           9823
UMULANDDIV       9823
USC100H          0074
USC100HPRV       00FF
USC100L          0075
USC100LPRV       0100
USER_ADC         FACD
USER_CONFIG1     FAC4
USER_CONFIG2     FAC5
USER_FIRST       FAC6
USER_IRQ         FAF7
USER_KEYBOARD    FAD0
USER_LAST        FAC8
USER_PLL         FAF4
USER_RESET       FAFD
USER_SCBR        FAC3
USER_SCIERR      FAD9
USER_SCIRX       FAD6
USER_SCITX       FAD3
USER_SPIRX       FADF
USER_SPITX       FADC
USER_SWI         FAFA
USER_TIM1CH0     FAF1
USER_TIM1CH1     FAEE
USER_TIM1OV      FAEB
USER_TIM2CH0     FAE8
USER_TIM2CH1     FAE5
USER_TIM2OV      FAE2
USER_TIMEBASE    FACA
USEVE3           0006
VARIABLE_DELAY   9269
VARLAUNCHB       0002
VE1XC:0001       84D1
VE1XC:0002       84E3
VE1XC:0003       84FD
VE1XC:0004       850F
VE1XF:0001       84CE
VE1XF:0002       84E0
VE1XF:0003       84FA
VE1XF:0004       850C


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 103
MC68HC908GP32 User Bootloader


VE1_AN           847F
VE1_LOOKUP       8467
VE1_LOOKUP_PW1   8474
VE1_STEP_1       8481
VE1_STEP_2       84A0
VE1_STEP_3       84B7
VE3DELAY_F       E05D
VE3TIMER         00DF
VE3XC:0005       88F5
VE3XC:0006       8907
VE3XC:0007       8921
VE3XC:0008       8933
VE3XF:0005       88F2
VE3XF:0006       8904
VE3XF:0007       891E
VE3XF:0008       8930
VE6XC:0017       9A4D
VE6XC:0018       9A5F
VE6XC:0019       9A79
VE6XC:001A       9A8B
VE6XF:0017       9A4A
VE6XF:0018       9A5C
VE6XF:0019       9A76
VE6XF:001A       9A88
VECURR           0052
VECURR2          0054
VEC_ADC          FFDE
VEC_IRQ          FFFA
VEC_KBD          FFE0
VEC_PLL          FFF8
VEC_RESET        FFFE
VEC_SCIERR       FFE6
VEC_SCIRX        FFE4
VEC_SCITX        FFE2
VEC_SPIRX        FFEA
VEC_SPITX        FFE8
VEC_SWI          FFFC
VEC_TIM1CH0      FFF6
VEC_TIM1CH1      FFF4
VEC_TIM1OV       FFF2
VEC_TIM2CH0      FFF0
VEC_TIM2CH1      FFEE
VEC_TIM2OV       FFEC
VEC_TIMEBASE     FFDC
VETABLE3B        0001
VE_F1            E100
VE_F2            E200
VE_F3            E500
VE_R             0112
VE_STEP_4        8B00
VE_STEP_5        8B15
VE_STEP_6        8B2A
VLAUNCHLIMIT     0104
VOLTOXTARGET_R   01D9
VPR0             0000
VPR1             0001
V_F2             96D5
V_F2ZERO         96DC
V_F3             96DF
V_MV2            9751
WAKE             0003
WARMACCEL_COMP   87C3
WARMCOR          004C
WARMUP           0003
WARMUP_OVERAE    863F
WARM_DONE_NOW    8561
WATER            0005
WATER2           0004
WATERINJB        0008
WATERIPOINT_F    E03E
WATERIRPM_F      E03F
WBO2TYPE         8787
WC_OP            9143
WD2A180:0013     9010
WD2A360:0013     8FF8
WD2B180:0013     9014
WD2B360:0013     8FFC
WD2END180:0013   9016
WD2END360:0013   8FFE
WD2OK:0013       9008
WD2SKIP:0013     9016
WDTH             90CE


msns-extra.asm         Assembled with CASM08Z  9/14/2023  4:20:17 PM  PAGE 104
MC68HC908GP32 User Bootloader


WDTL             90D2
WDTLT            93CF
WDTS             90CF
WDWELL2OP:0013   8FF3
WD_2TRIG         0000
WD_2TRIGB        0001
WHEEL            0002
WHEEL2           0003
WHEELCOUNT       00E6
WHEELINIT        00C3
WHEELSENSOR      0003
WHEEL_OLDB       0008
WHLSIM           0002
WHLSIMCNT        E00D
WHOLD            0002
WLED             0002
WSPK             0003
WSYNC            0001
WUE1             8528
WUE1A            8531
WUE2             856D
WUE2_LEDSKIP     856D
WUE3             85BA
WUE_CALC         8517
WUE_DONE         85BC
WWURANGE         9A94
WWU_F1           E816
W_COMP           9110
W_DECODE         90AB
W_DECODE2        90FA
W_DEC_NOTLOG     90D5
W_DEC_NOTLOGT    93D2
W_HIGH           9067
W_HIGH_FAST      909D
W_NO3            81EF
W_RTI            90E6
W_STORE          91F0
W_STORE2         91EE
X2_FAN           0005
XXKPACORR300_F   E0A0
ZD_A             935B
ZD_B             935F
ZERO_SLOPE       9820
