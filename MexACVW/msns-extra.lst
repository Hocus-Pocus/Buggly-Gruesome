
msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 1
MC68HC908GP32 User Bootloader


                        1  ;***************************************************
                                                      *************************
                        2  ;* msns-extra.asm MexACVW version
                        3  ;* By Robert Hiebert, Project started July 11 2023
                        4  ;*
                        5  ;* This is a stripped down, no frills version of 
                                                          the MSnS extra 029y4a
                        6  ;* code designed to run a stock or nearly stock 
                                                      4cyl air cooled VW engine
                        7  ;* with Mexican EFI hardware. It uses a modified 
                                                    Megasquirt V2.2 board and a
                        8  ;* custom relay board and is tuned with Tuner 
                                                      Studio running the 029y4a
                        9  ;* .ini file.
                       10  ;* Text editor Notepad++
                       11  ;* Developement suite Winide.exe
                       12  ;***************************************************
                                                      *************************
                       13  
                       14  ;.base 10t
                       15  ;.set simulate
                       16  
 0040                  17       org     ram_start
 0040                  18       include "msns-extra.h"
                       19  ;****************************************************************************
                       20  ;* msns-extra.h MexACVW version, include file for msns-extra.h MexACVW version 
                       21  ;* By Robert Hiebert, Project started July 11 2023
                       22  ;*
                       23  ;* This is a stripped down, no frills version of the MSnS extra 029y4a
                       24  ;* code designed to run a stock or nearly stock 4cyl air cooled VW engine 
                       25  ;* with Mexican EFI hardware. It uses a modified Megasquirt V2.2 board and a 
                       26  ;* custom relay board and is tuned with Tuner Studio running the 029y4a 
                       27  ;* .ini file.
                       28  ;* Text editor Notepad++
                       29  ;* Developement suite Winide.exe
                       30  ;****************************************************************************   
                       31  ;*
                       32  ;* MegaSquirt Hardware Wiring
                       33  ;*
                       34  ; Port A
                       35  ;  PTA0 - FP                                            ;* fuelp
                       36  ;  PTA1 - FIDLE                                         ;* iasc
                       37  ;  PTA2 - Output 2 (X5)                                 ;* Tacho
                       38  ;  PTA3 - Output 1 (X4)
                       39  ;  PTA4             X3
                       40  ;  PTA5             X2
                       41  ;  PTA6 - Flyback
                       42  ;  PTA7 - Flyback
                       43  
                       44  ; Port B (ADC inputs)
                       45  ;  PTB0/AD0 - MAP                                        ;* MAP
                       46  ;  PTB1/AD1 - MAT                                        ;* MAT
                       47  ;  PTB2/AD2 - CLT                                        ;* CLT
                       48  ;  PTB3/AD3 - TPS                                        ;* TPS
                       49  ;  PTB4/AD4 - BAT                                        ;* BAT
                       50  ;  PTB5/AD5 - EGO                                        ;* EGO
                       51  ;  PTB6/AD6 - "X7" spare, EGO2, fuel pressure or 2nd MAP
                       52  ;  PTB7/AD7 - "X6" spare, EGT
                       53  
                       54  ; Port C
                       55  ;  PTC0 - Squirt LED  or coil a                          ;* coila
                       56  ;  PTC1 - Accel LED   or coil b or HEI7 bypass           ;* coilb
                       57  ;  PTC2 - Warmup LED  or coil c or output 4
                       58  ;  PTC3 } multiplexed shift { or coil e
                       59  ;  PTC4 } light outputs     { or 2nd trig input
                       60  
                       61  ; Port D
                       62  ;  PTD0/~SS - unused  or coil d
                       63  ;  PTD1/MISO - nitrous in / table switch
                       64  ;  PTD2/MOSI - knock in / coil f
                       65  ;  PTD3/SPSCK - launch in
                       66  ;  PTD4/T1CH0 - Inj1                                     ;* Inj1
                       67  ;  PTD5/T1CH1 - Inj2                                     ;* Inj2
                       68  
                       69  
                       70  ; portd
 0040                  71  NosIn:          equ     1
 0040                  72  KnockIn:        equ     2
 0040                  73  launch:         equ     3
 0040                  74  inject1:        equ     4
 0040                  75  inject2:        equ     5
                       76  
                       77  ; porta
 0040                  78  fuelp:          equ     0
 0040                  79  iasc:           equ     1
 0040                  80  output2:        equ     2
 0040                  81  output1:        equ     3
 0040                  82  water2:         equ     4
 0040                  83  water:                   equ     5   ; or used for X2 Electric fan output
                       84  
 0040                  85  boostP:         equ     3
 0040                  86  Output3:        equ     0
                       87  
                       88  ; portc
 0040                  89  sled:           equ     0 ; LED17
 0040                  90  aled:           equ     1 ; LED19
 0040                  91  wled:           equ     2 ; also IRQ LED18 only used in "fuel only" code
 0040                  92  coila           equ     0 ; LED17
 0040                  93  coilb           equ     1 ; LED19
 0040                  94  pin10           equ     3 ; ptc3 - 2nd trigger for wheel decoder or shiftlight
 0040                  95  pin11           equ     4 ; ptc4
                       96  
 0040                  97  c13_of          equ      %00000001  ; defined but rarely used in code
 0040                  98  c13_o2          equ      %00000010
 0040                  99  c13_cs          equ      %00000100
 0040                 100  c13_bc          equ      %00001000
                      101  
                      102  
 0040                 103  WHEELINIT       equ      %11000011   ; 029g holdoff 3 (011), was 5 (101) recently
                      104  
                      105  
                      106  
                      107  ; oddfire offset setting equates
 0040                 108  outoff_22b      equ     $01
 0040                 109  outoff_45b      equ     $02
 0040                 110  outoff_90b      equ     $04
                      111  
                      112  ; this is the size of the data page, used by the P and C commands
 0040                 113  PAGESIZE        equ     189T
                      114  
 0040                 115  KPASCALE300     equ      $42   ; 1+ 0.258*256 =  66 hardcoded scaling factor for kpa
 0040                 116  KPASCALE400     equ      $a7   ; 1+ 0.652*256 = 167
                      117   
                      118  ;****************************************************
                      119  ;*
                      120  ;* MegaSquirt RAM Variables
                      121  ;*
                      122  ;* We wish we had plenty of RAM to burn
                      123  ;****************************************************
                      124  
                      125  ms_ram_start:
                      126  
                      127  ; RAM Variables - Ordered List for RS232 realtime download - delivered in one pack
 0040                 128  secl:           ds   1  ; low seconds - from 0 to 255, then rollover
 0041                 129  squirt:         ds  1  ; Event variable bit field for Injector Firing
                      130  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 2
MC68HC908GP32 User Bootloader


                      131  ; Squirt Event Scheduling Variables - bit fields for "squirt" variable
 0042                 132  inj1:           equ 0  ; 0 = no squirt 1 = squirt
 0042                 133  inj2:           equ 1  ; 0 = no squirt 1 = squirt
 0042                 134  sched1:         equ 2  ; 0 = nothing scheduled 1 = scheduled to squirt
 0042                 135  firing1:        equ 3  ; 0 = not squirting 1 = squirting
 0042                 136  sched2:         equ  4
 0042                 137  firing2:        equ  5
 0042                 138  bcTableUse:     equ 6  ; boost control
                      139  
 0042                 140  engine:         ds  1  ; Variable bit-field to hold engine current status
                      141  
                      142  ; Engine Operating/Status variables - bit fields for "engine" variable
 0043                 143  running:        equ 0  ; 0 = engine not running 1 = running
 0043                 144  crank:          equ 1  ; 0 = engine not cranking 1 = engine cranking
 0043                 145  startw:         equ 2  ; 0 = not in startup warmup 1 = in warmup enrichment
 0043                 146  warmup:         equ 3  ; 0 = not in warmup 1 = in warmup
 0043                 147  tpsaen:         equ 4  ; 0 = not in TPS acceleration mode 1 = TPS acceleration mode
 0043                 148  tpsden:         equ 5  ; 0 = not in deacceleration mode 1 = in deacceleration mode
 0043                 149  mapaen:         equ 6  ; 0 = not in MAP acceleration mode 1 = MAP deaceeleration mode
 0043                 150  idleOn:         equ 7  ;
                      151  
 0043                 152  baro:           ds   1       ; Barometer ADC Raw Reading - KPa (0 - 255)
 0044                 153  map:            ds   1       ; Manifold Absolute Pressure ADC Raw Reading - KPa (0 - 255)
 0045                 154  mat:            ds   1       ; Manifold Air Temp ADC Raw Reading - counts (0 - 255)
 0046                 155  clt:            ds   1       ; Coolant Temperature ADC Raw Reading - counts (0 - 255)
 0047                 156  tps:            ds   1       ; Throttle Position Sensor ADC Raw Reading - counts, represents 0 - 5 volts
 0048                 157  batt:           ds   1       ; Battery Voltage ADC Raw Reading - counts
 0049                 158  ego:            ds  1   ; Exhaust Gas Oxygen ADC Raw Reading - counts
 004A                 159  egocorr:        ds  1   ; Oxygen Sensor Correction
 004B                 160  aircor:         ds  1   ; Air Density Correction lookup - percent
 004C                 161  warmcor:        ds  1   ; Total Warmup Correction - percent
 004D                 162  rpm:            ds  1   ; Computed engine RPM - rpm/100
 004E                 163  pw1:            ds  1   ; injector squirt time in 1/10 millesec (0 to 25.5 millisec) - applied
 004F                 164  tpsaccel:       ds  1   ; Acceleration enrichment - percent
 0050                 165  barocor:        ds  1   ; Barometer Lookup Correction - percent
 0051                 166  gammae:         ds  1   ; Total Gamma Enrichments - percent
 0052                 167  vecurr:         ds  1   ; Current VE value from lookup table - percent
 0053                 168  pw2:            ds  1
 0054                 169  vecurr2:        ds  1
 0055                 170  idleDC:         ds  1
 0056                 171  ctimeCommH:     ds  1   ; Cycle time H for communication
 0057                 172  ctimeCommL:     ds  1   ; Cycle time L for communication
 0058                 173  SparkAngle:     ds  1   ; Spark angle (256 = 90 deg)
 0059                 174  afrTarget:      ds  1   ; AFR Target temp variable
 005A                 175  o2_fpadc:       ds  1   ; Second O2 sensor or Fuel Pressure
 005B                 176  egtadc:         ds  1   ; EGT Temperature
 005C                 177  CltIatAngle:    ds  1   ; Coolant Iat Angle
 005D                 178  KnockAngle:     ds  1   ; Knock Angle
 005E                 179  egoCorr2:       ds  1   ; Second O2 sensor Ego Correction
                      180  
                      181  ;-------------------------
                      182  
 005F                 183  SparkBits:      ds  1   ; Spark timing bits
                      184  
                      185  ; Bit fields for "SparkBits" variable
 0060                 186  SparkTrigg      equ 0   ; SparkBits(0) IRQ has triggered, but no spark yet
 0060                 187  SparkHSpeed     equ 1   ; SparkBits(1) High speed spark (using highres timer)
 0060                 188  SparkLSpeed     equ 2   ; SparkBits(2) Low speed spark (using low speed timer or trigger going low)
 0060                 189  dwellcd         equ 3   ; used for rotary to tell calcdwellspk not to dwell trailing
 0060                 190  rise            equ 4   ; found a rising IRQ edge / 2nd multispark / coilcbit
 0060                 191  lc_fs           equ 5   ; doing flat shift vs. launch
 0060                 192  trigret         equ 6   ; falling edge at end of short pulses - sets crank timing
 0060                 193  Knocked         equ 7   ; Knock system working
                      194  
                      195  ; Rev limiter variables
 0060                 196  RevLimBits      ds  1   ; Rev limiter status bits
                      197  
                      198  ; Bit fields for "RevLimBits" variable
 0061                 199  RevLimSoft      equ 0   ; RevLimBits(0) Soft rev limiter in action
 0061                 200  RevLimHSoft     equ 1   ; RevLimBits(1) Soft rev limiter hard mode
 0061                 201  RevLimHard      equ 2   ; RevLimBits(2) Hard rev limiter in action
 0061                 202  sparkon         equ 3   ; ran out of space in sparkbits
 0061                 203  coilerr         equ 4   ; out of sequence coil detection
 0061                 204  sparkCut        equ 5   ; Spark Cut in action
 0061                 205  LaunchOn        equ 6   ; Soft Launch On
 0061                 206  Advancing       equ 7   ; Advancing Knock system
                      207  
 0061                 208  personality     ds  1   ; code works from ram. loaded from flash at boot
                      209  
                      210  ; Bit fields for "personality" variable
 0062                 211  MSNS            equ 0   ; Megasquirtnspark
 0062                 212  MSNEON          equ 1   ; MS neon decoder
 0062                 213  WHEEL           equ 2   ; generalised decoder 36-1, 60-2 etc
 0062                 214  WHEEL2          equ 3   ; 0 = -1  1 = -2
 0062                 215  EDIS            equ 4   ; edis
 0062                 216  DUALEDIS        equ 5   ; two edis modules (for edis4 on V8, edis6 on V12)
 0062                 217  TFI             equ 6   ; Ford TFI system
 0062                 218  HEI7            equ 7   ; GM 7 pin HEI
                      219  
                      220  ;* output bits
                      221  ;* spark output defaults to FIDLE (original MSnS)
                      222  ;* Neon code always put coils on D19 and D17
                      223  
 0062                 224  outputpins       ds  1   ;         0 (B&G)  | 1 (non B&G)
                      225  
                      226  ; Bit fields for "outputpins" variable
 0063                 227  REUSE_FIDLE      equ 0  ; FIDLE for iasc   | spark output
 0063                 228  REUSE_LED17      equ 1  ; LED17 for sled   | coila output
 0063                 229  REUSE_LED18      equ 2  ; mismatch between .ini and .asm
 0063                 230  REUSE_LED18_2    equ 3  ;
                      231  ; LED18_2   LED18    function
                      232  ;  0         0       wled
                      233  ;  0         1       irq
                      234  ;  1         0       output4
                      235  ;  1         1       spark c
                      236  
 0063                 237  REUSE_LED19     equ 4  ; LED19 for aled   | coilb output
 0063                 238  X2_FAN          equ 5  ; X2   water/n2o   | fan control
 0063                 239  LED18_FAN       equ 6  ; LED18 output4    | fan control
 0063                 240  TOY_DLI         equ 7  ; toyota DLI ignition multiplex
                      241  
 0063                 242  feature1        ds  1  ; some features taken from Dual Table
                      243  
                      244  ; Bit fields for "feature1" variable
 0064                 245  wd_2trig        equ 0  ; wheel decoder 2nd trigger i/p - new in 023c9
 0064                 246  wd_2trigb       equ 1  ; for use by BIT
 0064                 247  whlsim          equ 2  ; enable wheel simulator for use on the stim ONLY
 0064                 248  taeIgnCount     equ 3
 0064                 249  rotaryFDign     equ 4  ; enable rotary FD ignition outputs
 0064                 250  hybridAlphaN    equ 5
 0064                 251  CrankingPW2     equ 6
 0064                 252  Nitrous         equ 7
                      253  
                      254  
 0064                 255  feature2        ds  1  ; more
                      256  
                      257  ; Bit fields for "feature2" variable
 0065                 258  BoostControl    equ 0
 0065                 259  ShiftLight      equ 1
 0065                 260  LaunchControl   equ 2
                      261  ; spare         equ 3
 0065                 262  out3sparkd      equ 4 ; 1= use output for spark D
 0065                 263  min_dwell       equ 5
 0065                 264  dwellduty50     equ 6
 0065                 265  config_error    equ 7 ; set if non-sense combination of options - don't run.
                      266  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 3
MC68HC908GP32 User Bootloader


 0065                 267  feature7        ds  1  ; Enhanced stuff
                      268  
                      269  ; Bit fields for "feature7" variable
 0066                 270  TractionNos     equ 0  ; Turn Nos off in Traction Loss?
 0066                 271  dwellcont       equ 1  ; Real (crude) dwell control
 0066                 272  TCcycleSec      equ 2  ; Hold traction settings for cycles or till rpm stable for 0.1S
 0066                 273  WheelSensor     equ 3  ; TC wheel sensors fitted
 0066                 274  AlphaTarAFR     equ 4  ; Alpha n or speed density for target afr
 0066                 275  TPSTargetAFR    equ 5  ; TPS setpoint for target AFR's
 0066                 276  StagedMAP2nd equ 6  ; Do we want to use a 2nd param for staged (MAP only for now)
 0066                 277  StagedAnd        equ 7  ; and/or operation for Staged second param
                      278  
                      279  ;bit definitions of "missing" flash feature vars in .asm
                      280  
 0066                 281  EnhancedBits:   ds  1  ; Enhanced Stuff
                      282  
                      283  ; Bit fields for "EnhancedBits" variable
 0067                 284  NosDcOk:        equ 0  ; Nos System not causing Duty Cycle of >90%
 0067                 285  NosSysOn:       equ 1  ; Nos System Running
 0067                 286  OverRun:        equ 2  ; Over Run Fuel Cut
 0067                 287  REStaging:      equ 3  ; Roger Enns Staging On
 0067                 288  NosAntiLag:     equ 4  ; Nos Antilag running
 0067                 289  NosSysReady:    equ 5  ; NOS Ready to go
 0067                 290  UseVE3:         equ 6  ; Use VE table 3
 0067                 291  Primed:         equ 7  ; Fuel System Primed
                      292  
 0067                 293  EnhancedBits2:  ds  1  ; A few more enhanced bits
                      294  
                      295  ; Bit fields for "EnhancedBits2" variable
 0068                 296  Traction:       equ 0  ; Traction control running
 0068                 297  Output1On:      equ 1  ; Bit for the output 1 on
 0068                 298  Output2On:      equ 2  ; Bit for the output 2 on
 0068                 299  cant_crank      equ 3  ; Flag that we can't enter crank mode
 0068                 300  cant_delay      equ 4  ; delay bit for cant crank mode
 0068                 301  over_Run_Set:   equ 5  ; Set over run active for timer
 0068                 302  mv_mode:        equ 6  ; we are in Megaview mode, disable enhanced comms
 0068                 303  OneShotBArro:   equ 7  ; One check for baro correction
                      304  
 0068                 305  coilsel:        ds  1  ; which coil are we working on
                      306  
                      307  ; Bit fields for "coilsel" variable
 0069                 308  coilabit        equ 0  ; now a bit each to make life easier
 0069                 309  coilbbit        equ 1
 0069                 310  coilcbit        equ 2
 0069                 311  coildbit        equ 3
 0069                 312  coilebit        equ 4
 0069                 313  coilfbit        equ 5
                      314  ;don't expect any more!
                      315  
 0069                 316  EnhancedBits4:  ds  1
                      317  
                      318  ; Bit fields for "EnhancedBits4" variable
 006A                 319  roll1           equ 0  ; bits to see if we missed a T2 overflow
 006A                 320  roll2           equ 1
 006A                 321  page2:          equ 2  ; this was a whole byte
 006A                 322  wspk            equ 3  ; set if we are running wasted spark type multiple outputs
 006A                 323  indwell         equ 4  ; hi-res dwell is in process - may drop
 006A                 324  nextcyl         equ 5  ; quick calc for next cyl mode
 006A                 325  invspk          equ 6  ; quick calc for inverted / non-inverted spark
 006A                 326  FxdASEDone      equ 7  ; Fixed ASE done now use normal ASE
                      327  
 006A                 328  EnhancedBits5:   ds  1
                      329  
                      330  ; Bit fields for "EnhancedBits5" variable
 006B                 331  rotary2          equ 0  ; gets copied from flash var on boot and Burn
                      332                          ; enable twin rotor leading/trailing split stuff
 006B                 333  checkbit         equ 1  ; For testing the code.
 006B                 334  toothlog         equ 2  ; log teeth in wheel decoder
 006B                 335  triglog          equ 3  ; log ignition triggers (all ignition codes)
 006B                 336  rsh_s            equ 4  ; rotary split hysteresis on split
 006B                 337  rsh_r            equ 5  ; rotary split hysteresis on rpm
                      338  ;cto spare       equ 6  ; tach output armed
 006B                 339  ctodiv           equ 7  ; tach output divider bit for half speed
 006B                 340  ctodivb          equ $80; ctodiv for bit/eor ops
                      341  
 006B                 342  EnhancedBits6:   ds   1
                      343  
                      344  ; Bit fields for "EnhancedBits6" variable
 006C                 345  hrdwon           equ  0  ; hi-res dwell hysteresis bit
 006C                 346  wsync            equ  1  ; wheel is synced
 006C                 347  whold            equ  2  ; wheel not in holdoff
 006C                 348  trigger2         equ  3  ; used in conjunction with "rise" bit for 2nd trigger input
 006C                 349  IdleAdvTimeOK    equ  4
 006C                 350  StgTransDone     equ  5
 006C                 351  idashbit         equ  6       ; kg PWM idle
 006C                 352  istartbit         equ  7      ; kg PWM idle added for startup
                      353  
                      354  
                      355  ; Calculation Variable
 006C                 356  pwrun1           ds  1   ; Pulsewidth timing variable - from 0 to 25.5ms
 006D                 357  pwrun2           ds   1
 006E                 358  pwcalc1          ds  1
 006F                 359  pwcalc2          ds  1
                      360  
                      361  ; Engine RPM -> RPM = 12000/(ncyl * (rpmph - rpmpl))
 0070                 362  rpmph:           ds  1   ; High part of RPM Period
 0071                 363  rpmpl:           ds  1   ; Low part of RPM Period
 0072                 364  rpmch:           ds  1   ; Counter for high part of RPM
 0073                 365  rpmcl:           ds  1   ; Counter for low part of RPM
 0074                 366  idleph           ds  1T
 0075                 367  idlepl           ds  1T
                      368  
 0076                 369  flocker:         ds  1   ; Flash locker semaphore
                      370  
                      371  ; Previous ADC values for computing derivatives
 0077                 372  lmap:                 ds      1       ; Manifold Absolute Pressure ADC last Reading
 0078                 373  lmat:                 ds      1       ; Manifold Air Temp ADC last Reading
 0079                 374  lclt:                 ds      1       ; Coolant Temperature ADC last Reading
 007A                 375  ltps:                 ds      1       ; Throttle Position Sensor ADC last Reading
 007B                 376  lbatt:                ds      1       ; Battery Voltage ADC last Reading
 007C                 377  lego:            ds  1   ; Last EGO ADC reading
                      378  
                      379  ; Global Time Clock
 007D                 380  mms:          ds      1      ; 0.0001 second update variable
 007E                 381  ms:               ds  1      ; 0.001  second increment
 007F                 382  tenth:           ds  1  ; 1/10th second
 0080                 383  sech:                 ds      1      ; high seconds - rollover at 65536 secs (1110.933 minutes, 18.51 hours)
 0081                 384  tpsaclk:         ds  1  ; TPS enrichment timer clock in 0.1 second resolution
 0082                 385  egocount:        ds  1  ; Counter value for EGO step - incremented every ignition pulse
 0083                 386  asecount:        ds  1  ; Counter value for after-start enrichment counter - every ignition pulse
 0084                 387  igncount1:       ds  1  ; Ignition pulse counter
 0085                 388  igncount2:       ds  1  ; Ignition pulse counter
 0086                 389  altcount1:       ds  1  ; Alternate count selector
 0087                 390  altcount2:       ds  1  ; Alternate count selector
 0088                 391  Decay_Accel:     ds  1  ; Storage for Accel Value to decay from
 0089                 392  tpsfuelcut:      ds   1      ; TPS Fuel Cut (percent)
                      393  
                      394  ;SCI parameters/variables
 008A                 395  txcnt:           ds  1  ; SCI transmitter count (incremented)
 008B                 396  txgoal:          ds  1  ; SCI number of bytes to transmit
 008C                 397  txmode:          ds  1  ; Transmit mode flag
 008D                 398  rxoffset:        ds  1  ; offset placeholder when receiving VE/constants vis. SCI
                      399  
 008E                 400  adsel:                ds      1  ; ADC Selector Variable
                      401  
                      402  ; Timer Equates for real-time clock function


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 4
MC68HC908GP32 User Bootloader


 008F                 403  T1Timerstop      equ  %00110010  ;TSC
 008F                 404  T1Timergo        equ  %01010010  ;TSC
                      405  
                      406  
                      407  ; These control Injector PWM mode for T1SC0 and T1SC1
 008F                 408  Timergo_NO_INT  equ  %00000010  ;TSC without interrupts
 008F                 409  T1SCX_PWM       equ  %00011110  ; Unbuffered PWM enabled - set high on compare, toggle on overflow
 008F                 410  T1SCX_NO_PWM    equ  %00010000  ; No PWM
                      411  
 008F                 412  burnSrc:         ds 2T
 0091                 413  burnDst:         ds 2T
 0093                 414  burnCount:       ds 1T
                      415  
                      416  ; Temporary variables
 0094                 417  tmp1:            ds 1
 0095                 418  tmp2:            ds 1
 0096                 419  tmp3:            ds 1
 0097                 420  tmp4:            ds 1
 0098                 421  tmp5:            ds 1
 0099                 422  tmp6:            ds 1
 009A                 423  tmp7:            ds 1
 009B                 424  tmp8:            ds 1
 009C                 425  tmp9:            ds 1
 009D                 426  tmp10:           ds 1
 009E                 427  tmp11:           ds 1
 009F                 428  tmp12:           ds 1
 00A0                 429  tmp13:           ds 1
 00A1                 430  tmp14:           ds 1
 00A2                 431  tmp15:           ds 1
 00A3                 432  tmp16:           ds 1
 00A4                 433  tmp17:           ds 1
 00A5                 434  tmp18:           ds 1
 00A6                 435  tmp19:           ds 1
 00A7                 436  tmp20:           ds 1
 00A8                 437  tmp21:           ds 1
 00A9                 438  tmp22:           ds 1
                      439  
 00AA                 440  T2CNTX           ds 1  ; software 3rd byte of T2
                      441  
                      442  ; variables here don't need to be zero page
                      443  ; Spark timing variables
 00AB                 444  T2LastX:         ds 1   ; T2 xhigh last
 00AC                 445  T2LastH:         ds 1   ; Timer 2 high last  ; T2 at last decoded pulse. All spark codes.
 00AD                 446  T2LastL:         ds 1   ; Timer 2 low last
 00AE                 447  itimeX:          ds 1   ; Time between decoded triggers in us. X - calc in DOSQUIRT
 00AF                 448  itimeH:          ds 1   ; mid byte
 00B0                 449  itimeL:          ds 1   ; low byte
 00B1                 450  SparkDelayH:     ds 1   ; Spark delay high
 00B2                 451  SparkDelayL:     ds 1   ; Spark delay low
 00B3                 452  SparkOnLeftah:   ds 1   ; Time left for spark to be on (0.1ms) coil a high
 00B4                 453  SparkOnLeftal:   ds 1   ; Time left for spark to be on (0.1ms) coil a low
 00B5                 454  SparkOnLeftbh:   ds 1   ; Time left for spark to be on (0.1ms) coil b high
 00B6                 455  SparkOnLeftbl:   ds 1   ; Time left for spark to be on (0.1ms) coil b low
 00B7                 456  SparkOnLeftch:   ds 1   ; Time left for spark to be on (0.1ms) coil c high
 00B8                 457  SparkOnLeftcl:   ds 1   ; Time left for spark to be on (0.1ms) coil c low
 00B9                 458  SparkOnLeftdh:   ds 1   ; Time left for spark to be on (0.1ms) coil d high
 00BA                 459  SparkOnLeftdl:   ds 1   ; Time left for spark to be on (0.1ms) coil d low
 00BB                 460  SparkOnLefteh:   ds 1   ; Time left for spark to be on (0.1ms) coil e high
 00BC                 461  SparkOnLeftel:   ds 1   ; Time left for spark to be on (0.1ms) coil e low
 00BD                 462  SparkOnLeftfh:   ds 1   ; Time left for spark to be on (0.1ms) coil f high
 00BE                 463  SparkOnLeftfl:   ds 1   ; Time left for spark to be on (0.1ms) coil f low
 00BF                 464  cTimeH:          ds 1   ; Cycle time for spark delay calculation
 00C0                 465  cTimeL:          ds 1   ; Cycle time for spark delay calculation
 00C1                 466  SparkTempH:      ds 1   ; Temporary storage for spark delay calculation
 00C2                 467  SparkTempL:      ds 1   ; Temporary storage for spark delay calculation
 00C3                 468  SparkCarry:      ds 1   ; Temporary storage for spark delay calculation
 00C4                 469  SRevLimTimeLeft  ds 1   ; Soft rev limiter time left to hard mode
 00C5                 470  T2PrevX:         ds 1   ; top byte - only used for v.low rpm
 00C6                 471  T2PrevH:         ds 1   ; T2 at last IRQ/tooth - wheel decoder
 00C7                 472  T2PrevL:         ds 1   ; low byte
 00C8                 473  acch:            ds 1   ; engine accel/devel
 00C9                 474  accl:            ds 1   ;     "
 00CA                 475  Pambient:        ds 1T
 00CB                 476  kpa:             ds 1T
 00CC                 477  coolant:         ds 1T
 00CD                 478  idleLastDC:      ds 1T
 00CE                 479  idleTarget:      ds 1T
 00CF                 480  bcDC:            ds 1T
 00D0                 481  KPAlast:         ds 1T
 00D1                 482  TPSlast:         ds 1T
 00D2                 483  idleCtlClock:    ds 1T
 00D3                 484  idleActClock:    ds 1T
 00D4                 485  bcActClock:      ds 1T
 00D5                 486  bcCtlClock:      ds 1T  ;DT
 00D6                 487  TPSfuelCorr:     ds 1T
                      488  
                      489  ; Enhanced stuff added
 00D7                 490  OverRunTime:     ds 1  ; Timer for over run to cut in
 00D8                 491  SparkCutCnt:     ds 1
 00D9                 492  KnockTimLft:     ds 1
 00DA                 493  KnockAdv:        ds 1
 00DB                 494  kpa_n:           ds 1  ; Kpa or TPs value for spark table lookup.
 00DC                 495  tmp31:           ds 1  ; Tmp storage for anything thats only used in a jsr
 00DD                 496  tmp32:           ds 1  ; Tmp Storage for anything thats only used in a jsr
 00DE                 497  ST2Timer:        ds 1  ; Spark Table 2 delay timer
 00DF                 498  VE3Timer:        ds 1  ; VE Table 3 delay timer
 00E0                 499  TCAccel:         ds 1  ; Traction Control Enrichment
 00E1                 500  TCAngle:         ds 1  ; Traction Control Spark Retard
 00E2                 501  TCSparkCut:      ds 1  ; Traction Control Spark Cut number and prime pulse cnt
 00E3                 502  mmsDiv:          ds 1  ; 0.1mS counter for Boost Control
 00E4                 503  TCCycles:        ds 1  ; Engine hold cycles
 00E5                 504  Out3Timer:       ds 1  ; Output3 timer
                      505  
                      506  ; yet more ram variables for EDIS /wheel stuff
 00E6                 507  wheelcount       ds 1  ; wheel counter for decoder _and_ HoldSpark/toothsync/ignore_small
                      508  ;note on wheelcount:
                      509  ;In Neon mode this is used as a holdoff for syncing counting up to zero
                      510  ;    bit7 = !sync
                      511  ;    bit6 = holdspark
                      512  ;    Once synced it is used to count the teeth
                      513  ; In non-Neon mode it is used as HoldSpark counting down to zero
                      514  ; these two used by tooth decoders or EDIS
                      515  
 00E7                 516  dwelldelay1:     ds  1  ; 2 bytes of dwell delay in 0.1ms
 00E8                 517                   ds  1
 00E9                 518  dwelldelay2:     ds  1  ; same for period +1
 00EA                 519                   ds  1
 00EB                 520  dwelldelay3:     ds  1  ; same for period +2
 00EC                 521                   ds  1
 00ED                 522  dwelldelay4:     ds  1  ; same for period +3
 00EE                 523                   ds  1
 00EF                 524  dwelldelay5:     ds  1  ; same for period +4
 00F0                 525                   ds  1
 00F1                 526  dwelldelay6:     ds  1  ; same for period +5
 00F2                 527                   ds  1
                      528  sawh:                   ; EDIS SAW width
                      529  stHp:
 00F3                 530  avgtoothh:        ds  1  ; OR.. gap between teeth previous in decoders
                      531  sawl:
                      532  stLp:
 00F4                 533  avgtoothl:        ds  1  ; low byte
 00F5                 534  lowresH:          ds  1  ; low res counter. Added for Neon code.
 00F6                 535  lowresL:          ds  1  ;
 00F7                 536  dwelldms:         ds  1  ; target dwell in 0.1ms units
 00F8                 537  dwellush:         ds  1  ; target dwell in us units
 00F9                 538  dwellusl:         ds  1  ;  low byte


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 5
MC68HC908GP32 User Bootloader


 00FA                 539  sparktargeth:     ds  1  ; H target t2 value for spark (used in hi-res dwell)
 00FB                 540  sparktargetl:     ds  1  ; L
 00FC                 541  iTimepX:          ds  1
 00FD                 542  iTimepH:          ds  1  ; previous hi-res cycle time (for accel/decel)
 00FE                 543  iTimepL:          ds  1  ;
 00FF                 544  splitdelH:        ds  1  ; trailing split delay for rotary
 0100                 545  splitdelL:        ds  1
 0101                 546  KnockBoost        ds  1  ; Boost to remove from controller if Knock detected
 0102                 547  KnockAngleRet:    ds  1  ; Knock Angle storage
 0103                 548  rpmlast:          ds  1  ; RPM accel dot last value
 0104                 549  VlaunchLimit:     ds  1  ; Variable Launch RPM value
 0105                 550  page:             ds  1
 0106                 551  DelayAngle:       ds  1  ; Angle to delay spark (TriggAngle - SparkAngle)
 0107                 552  airTemp:          ds  1
 0108                 553  NitrousAngle:     ds  1  ; Nitrous Angle of Retard
 0109                 554  NosPW:            ds  1  ; PW to add for NOS System
 010A                 555  pw_staged:        ds  1
 010B                 556  n2olaunchdel:     ds  1  ; launch to nitrous delay timer
 010C                 557  n2ohold:          ds  1  ; nitrous fuel and retard hold-on timer ; not yet used
 010D                 558  pw_staged2:       ds  1  ; secondary pulsewidth for staging.
 010E                 559  stgTransitionCnt: ds  1  ; transition count for staging.
 010F                 560  idlAdvHld:        ds  1  ; Idle Advance Hold off after conditions are met.
                      561  
                      562  ; rename and use these place holders as needed
                      563  ;ramslot10:       ds  1
                      564  ;ramslot9:        ds  1
 0110                 565  idleRPM:               ds  1T  ; PWM idle kg
 0111                 566  idleDelayClock:        ds  1T  ; PWM Idle kg
                      567  ;ramslot8:        ds  1   ; commented one more for safety zone
                      568  ;xramslot7:       ds  1
                      569  ;xramslot6:       ds  1
                      570  ;xramslot5:       ds  1
                      571  ;xramslot4:       ds  1
                      572  ;xramslot3:       ds  1
                      573  ;xramslot2:       ds  1
                      574  ;xramslot1:       ds  1   ; oh shit, only 1 left!
                      575  
                      576  ; no more or ram copy of data will overrun stack
                      577  
                      578  ms_ram_end:
                      579  
                      580  ;**************************************************
                      581  ; Flash Configuration Variables here - variables can be downloaded via serial link
                      582  ; VETABLE and Constants
                      583  ; "VE" is entry point, everything is offset from this point
                      584  ; All of these variables point to RAM locations. Renamed to _r
                      585  ;**************************************************
                      586  
                      587  ms_rf_start:
 0112                 588  VE_r      rmb     $90     ; 64 bytes for VE Table - Now 144 for 12x12
                      589  ;CWU_r       rmb  1       ; Crank Enrichment at -40 F
                      590  ;CWH_r       rmb  1       ; Crank Enrichment at 170 F
                      591  ;AWEV_r      rmb  1       ; After-start Warmup Percent enrichment add-on value
                      592  ;AWC_r       rmb  1       ; After-start number of cycles
                      593  ;WWU_r       rmb  $0A     ; Warmup bins(fn temp)
                      594  ;TPSAQ_r     rmb  $04     ; TPS acceleration amount (fn TPSDOT) in 0.1 ms units
                      595  ;tpsacold_r  rmb  1       ; Cold acceleration amount (at -40 degrees) in 0.1 ms units
                      596  ;tpsthresh_r rmb  1       ; Accel TPS DOT threshold
                      597  ;TPSASYNC_r  rmb  1       ; ***** TPS Acceleration clock value
                      598  ;TPSDQ_r     rmb  1       ; Deacceleration fuel cut
 01A2                 599  egotemp_r rmb     1       ; Coolant Temperature where EGO is active
 01A3                 600  egocountcmp_r rmb 1       ; Counter value where EGO step is to occur
 01A4                 601  egodelta_r rmb    1       ; EGO Percent step size for rich/lean
 01A5                 602  egolimit_r rmb    1       ; Upper/Lower EGO rail limit (egocorr is inside 100 +/- Limit)
 01A6                 603  REQ_FUEL_r rmb    1       ; Fuel Constant
 01A7                 604  DIVIDER_r  rmb    1       ; IRQ divide factor for pulse
 01A8                 605  Alternate_r rmb   1       ; Alternate injector drivers
 01A9                 606  InjOpen_r rmb     1       ; Injector Open Time
 01AA                 607  InjOCFuel_r rmb   1       ; PW-correlated amount of fuel injected during injector open
 01AB                 608  INJPWM_r  rmb     1       ; Injector PWM duty cycle at current limit
 01AC                 609  INJPWMT_r rmb     1       ; Injector PWM mmillisec time at which to activate.
 01AD                 610  BATTFAC_r rmb     1       ; Battery Gamma Factor
 01AE                 611  rpmk_r    rmb     2       ; Constant for RPM = 12,000/ncyl - downloaded constant
 01B0                 612  RPMRANGEVE_r rmb  12      ; VE table RPM Bins for 2-D interpolation
 01C2                 613  KPARANGEVE_r rmb  12      ; VE Table MAP Pressure Bins for 2_D interp.
 01D4                 614  CONFIG11_r rmb    1       ; Configuration for PC Configurator
                      615  
                      616  ; Bit field for "CONFIG11_r" variable 
                      617  ;  Bit 0-1 = MAP Type
                      618  ;            00 = MPX4115AP
                      619  ;            01 = MPX4250AP
                      620  ;            10 = MPXH6300A
                      621  ;            11 = MPXH6400A
                      622  ;  Bit 2   = Engine Stroke
                      623  ;            0 = Four Stroke
                      624  ;            1 = Two Stroke
                      625  ;  Bit 3   = Injection Type - NOT USED!
                      626  ;            0 = Port Injection
                      627  ;            1 = Throttle Body
                      628  ;  Bit 4-7 = Number of Cylinders
                      629  ;            0000 = 1 cylinder
                      630  ;            0001 = 2 cylinders
                      631  ;            0010 = 3 cylinders
                      632  ;            0011 = 4 cylinders
                      633  ;            0100 = 5 cylinder
                      634  ;            0101 = 6 cylinders
                      635  ;            0110 = 7 cylinders
                      636  ;            0111 = 8 cylinders
                      637  ;            1000 = 9 cylinders
                      638  ;            1001 = 10 cylinders
                      639  ;            1010 = 11 cylinders
                      640  ;            1011 = 12 cylinders
 01D5                 641  M_TwoStroke:      equ     4
                      642  
 01D5                 643  CONFIG12_r rmb    1  ; Configuration for PC Configurator
                      644  
                      645  ; Bit field for "CONFIG12_r" variable
                      646  ;  Bit 0-1 = COOL Sensor Type
                      647  ;            00 = GM
                      648  ;            01 = User-defined
                      649  ;            10 = User-defined
                      650  ;            11 = User-Defined
                      651  ;  Bit 2-3 = MAT Sensor Type
                      652  ;            00 = GM
                      653  ;            01 = Undefined
                      654  ;            10 = Undefined
                      655  ;            11 = Undefined
                      656  ;  Bit 4-7 = Number of Injectors
                      657  ;            0000 = 1 Injector
                      658  ;            0001 = 2 Injectors
                      659  ;            0010 = 3 Injectors
                      660  ;            0011 = 4 Injectors
                      661  ;            0100 = 5 Injectors
                      662  ;            0101 = 6 Injectors
                      663  ;            0110 = 7 Injectors
                      664  ;            0111 = 8 Injectors
                      665  ;            1000 = 9 Injectors
                      666  ;            1001 = 10 Injectors
                      667  ;            1010 = 11 Injectors
                      668  ;            1011 = 12 Injectors
                      669  
 01D6                 670  CONFIG13_r  rmb   1  ; Configuration for PC Configurator
                      671  
                      672  ; Bit field for "CONFIG13_r" variable
                      673  ;  Bit 0   = Odd-fire averaging
                      674  ;            0 = Normal


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 6
MC68HC908GP32 User Bootloader


                      675  ;            1 = Odd-Fire
                      676  ;  Bit 1   = O2 Sensor Type
                      677  ;            0 = Narrow-band (single wire 14.7 stoch)
                      678  ;            1 = DIY-WB (Stoch = 2.5V, reverse slope)
                      679  ;  Bit 2   = Control Stategy
                      680  ;            0 = Speed-Density
                      681  ;            1 = Alpha-N
                      682  ;  Bit 3   = Barometer Correction
                      683  ;            0 = Enrichment Off (set to 100%)
                      684  ;            1 = Enrichment On
                      685  
 01D7                 686  RPMOXLIMIT_r   rmb  1  ; Minimum RPM where O2 Closed Loop is Active
 01D8                 687  FASTIDLE_r     rmb  1  ; Fast idle if enabled
 01D9                 688  VOLTOXTARGET_r rmb  1  ; O2 sensor flip target value
                      689  ;ACMULT_r      rmb  1  ; Acceleration cold multiplication factor (percent/100)
                      690  ;BLANK         rmb  4  ; Extra Slots to make up 64 bytes total
                      691  
                      692  ; Page 0 variables
                      693  ; These are flash ONLY so no need to read them from RAM
                      694  
                      695  ; Page 3 spark variables that get used from RAM
 01DA                 696  ST_r            equ       ms_rf_start        ; spark timing table
 01DA                 697  RPMRANGEST_r    equ     {ms_rf_start + $90}  ; Spark timing RPM bins for 2-D interpolation
 01DA                 698  KPARANGEST_r    equ     {ms_rf_start + $9c}  ; Spark timing MAP pressure bins for 2-D interpolation
                      699  
 01DA                 700  TriggAngle_r    equ     {ms_rf_start + $a8}  ; Trigger angle BTDC
 01DA                 701  FixedAngle_r    equ     {ms_rf_start + $a9}  ; Fixed angle, 0 = not in used
 01DA                 702  TrimAngle_r     equ     {ms_rf_start + $aa}  ; Trim angle, positive and negative
 01DA                 703  CrankAngle_r    equ     {ms_rf_start + $ab}  ; Cranking angle
                      704  
                      705  ; Increased to 200 as according to the 'List' file thats the size of ms_fr since 12x12 ?
                      706  
 01DA                 707       org     {ms_rf_start + 200T}  ; reserve 200 bytes for paging use in RAM
                      708       
                      709  ms_rf_end:
                      710  
                      711  ;-------------------------------------------------------------------------------
 01DA                 712  ms_ram_size       equ {ms_ram_end-ms_ram_start}
 01DA                 713  ms_rf_size        equ {ms_rf_end-ms_rf_start}
 01DA                 714  ms_total_ram_size equ {ms_rf_end-ms_ram_start}
                      715  ;-------------------------------------------------------------------------------
                      716  
                      717  ;new equates so burner ram_exec area can be used as temp storage WITHIN int handlers
 01DA                 718  int_ram       equ      $01ED    ; same as ram_exec, space used by burner
                      719  
 01DA                 720  itmp00        equ       {int_ram + $00 }
 01DA                 721  itmp01        equ       {int_ram + $01 }
 01DA                 722  itmp02        equ       {int_ram + $02 }
 01DA                 723  itmp03        equ       {int_ram + $03 }
 01DA                 724  itmp04        equ       {int_ram + $04 }
 01DA                 725  itmp05        equ       {int_ram + $05 }
 01DA                 726  itmp06        equ       {int_ram + $06 }
 01DA                 727  itmp07        equ       {int_ram + $07 }
 01DA                 728  itmp08        equ       {int_ram + $08 }
 01DA                 729  itmp09        equ       {int_ram + $09 }
 01DA                 730  itmp0a        equ       {int_ram + $0a }
 01DA                 731  itmp0b        equ       {int_ram + $0b }
 01DA                 732  itmp0c        equ       {int_ram + $0c }
 01DA                 733  itmp0d        equ       {int_ram + $0d }
 01DA                 734  itmp0e        equ       {int_ram + $0e }
 01DA                 735  itmp0f        equ       {int_ram + $0f }
                      736  
 01DA                 737  itmp10        equ       {int_ram + $10 }
 01DA                 738  itmp11        equ       {int_ram + $11 }
 01DA                 739  itmp12        equ       {int_ram + $12 }
 01DA                 740  itmp13        equ       {int_ram + $13 }
 01DA                 741  itmp14        equ       {int_ram + $14 }
 01DA                 742  itmp15        equ       {int_ram + $15 }
 01DA                 743  itmp16        equ       {int_ram + $16 }
 01DA                 744  itmp17        equ       {int_ram + $17 }
 01DA                 745  itmp18        equ       {int_ram + $18 }
 01DA                 746  itmp19        equ       {int_ram + $19 }
 01DA                 747  itmp1a        equ       {int_ram + $1a }
 01DA                 748  itmp1b        equ       {int_ram + $1b }
 01DA                 749  itmp1c        equ       {int_ram + $1c }
 01DA                 750  itmp1d        equ       {int_ram + $1d }
 01DA                 751  itmp1e        equ       {int_ram + $1e }
 01DA                 752  itmp1f        equ       {int_ram + $1f }
                      753  
 01DA                 754  itmpcomm      equ       {int_ram + $20 }  ; $32 (50) bytes for SCI comm data packet
                      755  
                      756  ;***************************************************************************
                      757  ; Argument list for LinInterp, used throughout.
                      758  ;
                      759  ; If you move these down to LinInterp, the assembler can't use direct
                      760  ; addressing for some arguments, so the code is bigger.
                      761  
 01DA                 762  liX1             equ  tmp1
 01DA                 763  liX2             equ  tmp2
 01DA                 764  liY1             equ  tmp3
 01DA                 765  liY2             equ  tmp4
 01DA                 766  liX              equ  tmp5
 01DA                 767  liY              equ  tmp6 ; Function output.
                      768  
                      769  ; udvd32 uses some memory space, use tmp instead
 01DA                 770  INTACC1          equ tmp1  ; and 2,3,4
 01DA                 771  INTACC2          equ tmp5  ; and 6,7,8
                      772                             ; tmp9,10,11 used within udvd32
                      773  ; udvd32 is only used within Calcrpm, ought to rewrite a simpler routine
                      774  
                      775  ; misc_spark uses these
 01DA                 776  dwelltmpX        equ  tmp2
 01DA                 777  dwelltmpH        equ  tmp3
 01DA                 778  dwelltmpL        equ  tmp4
 01DA                 779  dwelltmpXp       equ  tmp12
 01DA                 780  dwelltmpHp       equ  tmp13
 01DA                 781  dwelltmpLp       equ  tmp14
 01DA                 782  dwelltmpXac      equ  tmp20  ; use these so they don't get trashed by lookup
 01DA                 783  dwelltmpHac      equ  tmp21
 01DA                 784  dwelltmpLac      equ  tmp22
 01DA                 785  dwelltmpXop      equ  tmp5   ; these are the us result
 01DA                 786  dwelltmpHop      equ  tmp6
 01DA                 787  dwelltmpLop      equ  tmp7
 01DA                 788  dwelltmpXms      equ  tmp8   ; these are the 0.1ms result before transferring to dwelldelay1,2,3,4
 01DA                 789  dwelltmpHms      equ  tmp9
 01DA                 790  dwelltmpLms      equ  tmp10
                      791  
 01DA                 792  SparkdltX        equ  tmp2  ; not used at same time as dwelltmpX etc.
 01DA                 793  SparkdltH        equ  tmp3
 01DA                 794  SparkdltL        equ  tmp4
                      795  
                      796  ;***************************************************************************
                      797  ;* some paging macros. (Were subroutines but consume yet more stack)
                      798  ;***************************************************************************
                      799  
                      800  ; NOTE! page  stores which table is paged into RAM.
                      801  
                      802  ;                    VE TABLE 1
 01DA                 803  $MACRO ve1x                                  ; gets a VE byte from page1 or RAM.
                      804                                               ; On entry X contains index.
                      805                                               ; Returns byte in A
                      806          lda     page
                      807          cmp     #01T
                      808          bne     ve1xf
                      809          lda     VE_r,x
                      810          bra     ve1xc


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 7
MC68HC908GP32 User Bootloader


                      811  ve1xf:  lda     VE_f1,x
                      812  ve1xc:
 01DA                 813  $MACROEND
                      814  
                      815  ;                   VE TABLE 2
 01DA                 816  $MACRO ve2x                          ; gets a VE byte from page2 or RAM.
                      817                                           ; On entry X contains index.
                      818                                           ; Returns byte in A
                      819          lda     page
                      820          cmp     #02T
                      821          bne     ve2xf
                      822          lda     VE_r,x
                      823          bra     ve2xc
                      824  ve2xf:  lda     VE_f2,x
                      825  ve2xc:
 01DA                 826  $MACROEND
                      827  
                      828  ;                  SPARK TABLE 1
 01DA                 829  $MACRO ve3x                                  ; gets a ST byte from page3 or RAM.
                      830                                               ; On entry X contains index.
                      831                                               ; Returns byte in A
                      832          lda     page
                      833          cmp     #03T
                      834          bne     ve3xf
                      835          lda     VE_r,x
                      836          bra     ve3xc
                      837  ve3xf:  lda     ST_f1,x
                      838  ve3xc:
 01DA                 839  $MACROEND
                      840  
                      841  ;                  SPARK TABLE 2
 01DA                 842  $MACRO ve4x                          ; gets a ST byte from page4 or RAM.
                      843                                           ; On entry X contains index.
                      844                                           ; Returns byte in A
                      845          lda     page
                      846          cmp     #04T
                      847          bne     ve4xf
                      848          lda     VE_r,x
                      849          bra     ve4xc
                      850  ve4xf:  lda     ST_f2,x
                      851  ve4xc:
 01DA                 852  $MACROEND
                      853  
                      854  ;                   VE TABLE 3
 01DA                 855  $MACRO ve5x                          ; gets a VE byte from page5 or RAM.
                      856                                           ; On entry X contains index.
                      857                                           ; Returns byte in A
                      858          lda     page
                      859          cmp     #05T
                      860          bne     ve5xf
                      861          lda     VE_r,x
                      862          bra     ve5xc
                      863  ve5xf:  lda     VE_f3,x
                      864  ve5xc:
 01DA                 865  $MACROEND
                      866  
                      867  ;                  AFR TABLE 1 for VE1
 01DA                 868  $MACRO AFR1X                         ; gets an AFR byte from page6 or RAM.
                      869                                               ; On entry X contains index.
                      870                                               ; Returns byte in A
                      871          lda     page
                      872          cmp     #06T
                      873          bne     ve6xf
                      874          lda     VE_r,x
                      875          bra     ve6xc
                      876  ve6xf:  lda     AFR_f1,x
                      877  ve6xc:
 01DA                 878  $MACROEND
                      879  
                      880  ;                 AFR TABLE 2 for VE3
 01DA                 881  $MACRO AFR2X                         ; gets an AFR byte from page7 or RAM.
                      882                                               ; On entry X contains index.
                      883                                               ; Returns byte in A
                      884          lda     page
                      885          cmp     #07T
                      886          bne     ve7xf
                      887          lda     VE_r,x
                      888          bra     ve7xc
                      889  ve7xf:  lda     AFR_f2,x
                      890  ve7xc:
 01DA                 891  $MACROEND
                      892  
                      893  
                      894  ;***************************************************************************
                      895  ;**
                      896  ;** Main Routine Here - Initialization and main loop
                      897  ;**
                      898  ;** Note: Org down 128 bytes below the "rom_start" point
                      899  ;**       because of erase bug in bootloader routine
                      900  ;** All MS HC908 continue to be shipped with the bug to preserve backward
                      901  ;** compatability (BB posted on this on www.msefi.com)
                      902  ;** Do not mess with this offset or your chip won't boot!
                      903  ;**
                      904  ;** Note: Items commented out after the Start entry point are
                      905  ;**       taken care of in the Boot_R12.asm code
                      906  ;***************************************************************************
                      907  
                      908  ; MegaSquirt Hardware Wiring
                      909  
                      910  ; Port A
                      911  ;  PTA0 - FP                                            ;* fuelp
                      912  ;  PTA1 - FIDLE                                         ;* iasc
                      913  ;  PTA2 - Output 2 (X5)                                 ;* Tacho
                      914  ;  PTA3 - Output 1 (X4)
                      915  ;  PTA4             X3
                      916  ;  PTA5             X2
                      917  ;  PTA6 - Flyback
                      918  ;  PTA7 - Flyback
                      919  
                      920  ; Port B (ADC inputs)
                      921  ;  PTB0/AD0 - MAP                                        ;* MAP
                      922  ;  PTB1/AD1 - MAT                                        ;* MAT
                      923  ;  PTB2/AD2 - CLT                                        ;* CLT
                      924  ;  PTB3/AD3 - TPS                                        ;* TPS
                      925  ;  PTB4/AD4 - BAT                                        ;* BAT
                      926  ;  PTB5/AD5 - EGO                                        ;* EGO
                      927  ;  PTB6/AD6 - "X7" spare, EGO2, fuel pressure or 2nd MAP
                      928  ;  PTB7/AD7 - "X6" spare, EGT
                      929  
                      930  ; Port C
                      931  ;  PTC0 - Squirt LED  or coil a                          ;* coila
                      932  ;  PTC1 - Accel LED   or coil b or HEI7 bypass           ;* coilb
                      933  ;  PTC2 - Warmup LED  or coil c or output 4
                      934  ;  PTC3 } multiplexed shift { or coil e
                      935  ;  PTC4 } light outputs     { or 2nd trig input
                      936  
                      937  ; Port D
                      938  ;  PTD0/~SS - unused  or coil d
                      939  ;  PTD1/MISO - nitrous in / table switch
                      940  ;  PTD2/MOSI - knock in / coil f
                      941  ;  PTD3/SPSCK - launch in
                      942  ;  PTD4/T1CH0 - Inj1                                     ;* Inj1
                      943  ;  PTD5/T1CH1 - Inj2                                     ;* Inj2
                      944  
                      945  ;***************************************************************************
                      946  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 8
MC68HC908GP32 User Bootloader


 8128                 947       org     {rom_start + 128}
                      948  
                      949  Start:
 8128 [03] 4501ED     950       ldhx    #init_stack+1   ; Set the stack Pointer
 812B [02] 94         951       txs                                     ; Move before burner to avoid conflict
                      952  
                      953  ; Clock now 8MHz - DJLH
                      954  
 812C [04] 1936       955       bclr  BCS,pctl      ; Select external Clock Reference
 812E [04] 1B36       956       bclr  PLLON,pctl        ; Turn Off PLL
 8130 [04] 6E0236     957       mov       #$02,pctl             ; Set P and E Bits
 8133 [04] 6ED03A     958       mov       #$D0,pmrs             ; Set L
 8136 [04] 6E0338     959       mov       #$03,pmsh             ; Set N (MSB)
 8139 [04] 6ED139     960       mov       #$D1,pmsl             ; Set N (LSB)
 813C [04] 1E37       961       bset  AUTO,pbwc
 813E [04] 1A36       962       bset  PLLON,pctl        ; Turn back on PLL
                      963  
                      964  ; PLLwait:
 8140 [05] 0D37FD     965      brclr LOCK,pbwc,*
 8143 [04] 1836       966      bset  BCS,pctl
                      967  
                      968  
                      969  ;**************************************************************************
                      970  ;   Set all RAM to known value - for code runaway protection.
                      971  ;   If there is ever a code runaway, and processor tries
                      972  ;   executing this as an opcode ($32) then a reset will occur.
                      973  ;**************************************************************************
                      974  
 8145 [03] 450040     975       ldhx   #ram_start       ; Point to start of RAM
                      976  
                      977  ClearRAM:
 8148 [02] A632       978       lda        #$32                 ; This is an illegal op-code -
                      979                                           ; cause reset if executed
 814A [02] F7         980       sta    ,x                       ; Set RAM location
 814B [02] AF01       981       aix    #1                       ; advance pointer
 814D [03] 650240     982       cphx   #ram_last+1      ; done ?
 8150 [03] 26F6       983       bne    ClearRAM         ; loop back if not
                      984  
                      985  
                      986  ; Set up the port data-direction registers
                      987  
 8152 [02] A600       988      lda     #%00000000
 8154 [03] B705       989      sta     ddrb                     ; Set as inputs (ADC will select
                      990                                               ; which channel later)
 8156 [02] A630       991      lda     #%00110000               ; Turn off injectors (inverted output)
 8158 [03] B703       992      sta     portd
 815A [04] 160F       993      bset    launch,ptdpue
 815C [04] 120F       994      bset    NosIn,ptdpue    ; Set all the inputs internal
                      995                                               ; pull ups On
                      996  
                      997  ;*        lda     feature8_f              ; using spark F ?
                      998  ;*        bit     #spkfopb
                      999  ;*        beq     no_spk_f
                     1000  ;*        lda     #%11110101              ; make pin an output
                     1001  ;*        bra     store_ddrd
                     1002  ;*no_spk_f:
 815E [04] 140F      1003      bset    KnockIn,ptdpue
 8160 [02] A6F1      1004      lda     #%11110001               ; Changed to 0 is an output
                     1005  
                     1006  ;*store_ddrd:
 8162 [03] B707      1007      sta     ddrd                     ; Outputs for injector
 8164 [03] 3F00      1008      clr     porta
 8166 [02] A6FF      1009      lda     #%11111111
 8168 [03] B704      1010      sta     ddra                     ; Outputs for Fp and Spark
 816A [02] A600      1011      lda     #$00
 816C [03] B702      1012      sta     portc
                     1013  
                     1014  ;is PTC4 an input?    - see also 'B' code section
                     1015  ;*        lda     feature1_f   ; we haven't copied to RAM yet
                     1016  ;*        bit     #wd_2trigb
                     1017  ;*        beq     norm_op_ddrc
                     1018  ;*        lda     #%00001111              ; make PTC4 an input for second trigger
                     1019  ;*        bra     op_ddrc
                     1020  ;*norm_op_ddrc:
 816E [02] A61F      1021      lda     #%00011111               ; ** Was 11111111
                     1022  ;*op_ddrc:
 8170 [03] B706      1023      sta     ddrc                     ; Outputs for LED
 8172 [02] A601      1024      lda     #%00000001               ; Serial Comm Port
 8174 [03] B70C      1025      sta     ddre
                     1026  
                     1027  ; Set up the Real-time clock Timer (TIM2)
                     1028  
 8176 [04] 6E332B    1029      MOV     #%00110011,t2sc   ; Stop Timer so it can be set up
                     1030                                                ; No overflow interrupt, stop,
                     1031                                                ; reset, div / 8
 8179 [04] 6EFF2E    1032      mov     #$FF,T2MODH               ; Free running timer
 817C [04] 6EFF2F    1033      mov     #$FF,T2MODL
 817F [04] 6E0031    1034      mov     #0T,T2CH0H                ; Channel 0 high, 0
 8182 [04] 6E6432    1035      mov     #100T,T2CH0L      ; Channel 0 low, 100 = 0.1 ms
                     1036                                                ; @ 8.0MHz - DJLH
 8185 [04] 6E5430    1037      mov     #%01010100,T2SC0 ; Output compare, interrupt enabled
 8188 [04] 6E0034    1038      mov     #$00,T2CH1H               ; Channel 1 high, to be used
                     1039                                                ; for spark control
 818B [04] 6E0035    1040      mov     #$00,T2CH1L               ; Channel 1 low, 0
 818E [04] 6E5433    1041      mov     #%01010100,T2SC1 ; Channel 1 Output compare,
                     1042                                                ; interrupt enabled
                     1043  
 8191 [04] 1F33      1044      bclr    TOF,T2SC1                ; clear any pending interrupt
 8193 [04] 1D33      1045      bclr    TOIE,T2SC1               ; Disable timer interrupt until
                     1046                                               ; we are ready
                     1047  
 8195 [04] 6E532B    1048      mov     #%01010011,T2SC          ; Start timer, overflow int, div / 8
                     1049  
                     1050  ; Set up the PWM for the Injector (for current limit mode)
                     1051  
 8198 [04] 6E3220    1052      MOV     #T1Timerstop,t1sc ; Stop Timer so it can be set up
 819B [04] 6E0023    1053      mov     #$00,T1MODH
 819E [04] 6E6424    1054      mov     #$64,T1MODL                ; set timer modulus register to 100
                     1055                                                 ; decimal
 81A1 [04] 6E0026    1056      mov     #$00,T1CH0H
 81A4 [04] C6E199    1057      lda     INJPWM_f1
 81A7 [03] B727      1058      sta     T1CH0L
 81A9 [04] 6E0029    1059      mov     #$00,T1CH1H
                     1060  ;*    lda     dtmode_f
                     1061  ;*    bit     #alt_i2t2
                     1062  ;*    beq     setpwmsingle
                     1063  ;*    lda     INJPWM_f2
                     1064  ;*    bra     store_pwm
                     1065  
                     1066  ;*setpwmsingle:
 81AC [04] C6E199    1067      lda     INJPWM_f1
                     1068  
                     1069  ;*store_pwm:
 81AF [03] B72A      1070      sta     T1CH1L
                     1071  
                     1072  ; Set up SCI port
 81B1 [02] A630      1073       lda      #$30             ; This is 9615 baud w/ the osc
                     1074                                         ; frequency 8.0M - DJLH
 81B3 [03] B719      1075       sta       scbr
 81B5 [04] 1C13      1076       bset  ensci,scc1  ; Enable SCI
 81B7 [04] 1414      1077       bset  RE,SCC2     ; Enable receiver
 81B9 [04] 1A14      1078      bset  SCRIE,SCC2  ; Enable Receive interrupt
 81BB [03] B616      1079       lda       SCS1            ; Clear SCI transmitter Empty Bit
 81BD [03] 3F8A      1080      clr   txcnt
 81BF [03] 3F8B      1081      clr   txgoal
                     1082  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 9
MC68HC908GP32 User Bootloader


                     1083  ; Set up Interrupts
 81C1 [04] 6E041D    1084      mov   #%00000100,INTSCR   ; Enable IRQ
                     1085  
                     1086  ; clear water outputs
 81C4 [04] 1B00      1087      bclr   water,porta          ; water injection
 81C6 [04] 1900      1088      bclr   water2,porta    ; 2nd water injection output
                     1089  ;*    brset    out3sparkd,feature2,w_no3
 81C8 [04] 1103      1090      bclr   Output3,portd
                     1091  
                     1092  w_no3:
                     1093  ;
                     1094  ; Load the constants (VE Table, etc) from Flash to RAM - the program
                     1095  ; uses the RAM values.
                     1096  ; Changed!
                     1097  ; For multi table work we always operate from flash unless directed to
                     1098  ; copy the data into RAM for tuning. Even then only the VE tables will
                     1099  ; use the RAM version.  Extra coding could change this, but the initial
                     1100  ; release will use all other variables from flash ONLY - so be sure to
                     1101  ; "send" the data after changes.
                     1102  ;
 81CA [02] A6FF      1103      lda      #$ff
 81CC [04] C70105    1104      sta      page            ; select invalid page to make
                     1105                                           ;sure we run from flash
                     1106  
                     1107  ; Set up RAM Variable - also when burning page0 search for "burning page0"
 81CF [04] C6E00B    1108      lda     feature1_f
 81D2 [03] B763      1109      sta     feature1
 81D4 [04] C6E00C    1110      lda     feature2_f
 81D7 [03] B764      1111      sta     feature2
 81D9 [04] C6E06D    1112      lda     feature7_f
 81DC [03] B765      1113      sta     feature7
 81DE [04] C6E001    1114      lda     outputpins_f
 81E1 [03] B762      1115      sta     outputpins
 81E3 [04] C6E000    1116      lda     personality_f
 81E6 [03] B761      1117      sta     personality              ;move from flash to ram
                     1118  
 81E8 [03] 3F7D      1119      clr     mms
 81EA [03] 3F7E      1120      clr     ms
 81EC [03] 3F7F      1121      clr     tenth
 81EE [03] 3F40      1122      clr     secl
 81F0 [03] 3F80      1123      clr     sech
 81F2 [03] 3F41      1124      clr     squirt
 81F4 [03] 3F42      1125      clr     engine
 81F6 [03] 3F70      1126      clr     rpmph
 81F8 [03] 3F71      1127      clr     rpmpl
 81FA [03] 3F72      1128      clr     rpmch
 81FC [03] 3F73      1129      clr     rpmcl
 81FE [03] 3F4D      1130      clr     rpm
 8200 [03] 3F76      1131      clr          flocker
 8202 [02] A600      1132      lda     #$00
 8204 [03] B7FF      1133      sta     splitdelH       ; initial value for rotary split
 8206 [04] C70100    1134      sta     splitdelL
 8209 [03] B7FC      1135      sta     iTimepX
 820B [03] B7FD      1136      sta     iTimepH
 820D [03] B7FE      1137      sta     iTimepL
 820F [04] C70102    1138      sta     KnockAngleRet
 8212 [03] B7DA      1139      sta     KnockAdv
 8214 [03] B7D9      1140      sta     KnockTimLft
 8216 [03] B75D      1141      sta     KnockAngle
 8218 [03] B7E1      1142      sta     TCAngle
 821A [04] C70101    1143      sta     KnockBoost
 821D [03] B75C      1144      sta     CltIatAngle
 821F [03] B7E0      1145      sta     TCAccel
 8221 [03] B76E      1146      sta     pwcalc1
 8223 [03] B76F      1147      sta     pwcalc2
 8225 [03] B74E      1148      sta     pw1
 8227 [03] B753      1149      sta     pw2
 8229 [03] 3F6C      1150      clr     pwrun1
 822B [03] 3F6D      1151      clr     pwrun2
 822D [02] A6FF      1152      lda     #$FF
 822F [03] B7D1      1153      sta     TPSlast
 8231 [04] C70103    1154      sta     rpmlast
 8234 [03] 3F82      1155      clr     egocount
 8236 [04] C7010B    1156      sta     N2Olaunchdel
                     1157  
 8239 [03] 450000    1158      ldhx    #0
 823C [04] 35E7      1159      sthx    dwelldelay1
 823E [04] 35E9      1160      sthx    dwelldelay2
 8240 [04] 35EB      1161      sthx    dwelldelay3
 8242 [04] 35ED      1162      sthx    dwelldelay4
 8244 [04] 35EF      1163      sthx    dwelldelay5
 8246 [04] 35F1      1164      sthx    dwelldelay6
                     1165  
 8248 [02] A6BB      1166      lda     #$BB
 824A [03] B743      1167      sta     baro
 824C [03] B744      1168      sta     map
 824E [03] B745      1169      sta     mat
 8250 [03] B746      1170      sta     clt
 8252 [03] B747      1171      sta     tps
 8254 [03] B748      1172      sta     batt
                     1173  
 8256 [02] A664      1174      lda     #$64
 8258 [03] B74B      1175      sta     aircor
 825A [03] B752      1176      sta     vecurr
 825C [03] B750      1177      sta     barocor
 825E [03] B74C      1178      sta     warmcor
 8260 [03] B74A      1179      sta     egocorr
 8262 [03] B75E      1180      sta     EgoCorr2
 8264 [03] B789      1181       sta         tpsfuelcut
                     1182  
 8266 [03] 3F51      1183      clr     gammae
 8268 [03] 3F4F      1184      clr     tpsaccel
 826A [03] 3F88      1185      clr     Decay_Accel
 826C [03] 3F84      1186      clr     igncount1
 826E [03] 3F85      1187      clr     igncount2
 8270 [03] 3F55      1188      clr     idleDC                           ; set fully closed
 8272 [03] 3FCD      1189      clr     idlelastdc                       ; PWM idle kg
 8274 [04] 1F42      1190      bclr    idleon,engine                ; PWM idle kg
 8276 [04] 1D6B      1191      bclr    idashbit,EnhancedBits6   ; PWM idle kg
 8278 [04] 1F6B      1192      bclr    istartbit,EnhancedBits6  ; PWM idle kg
 827A [04] C6E057    1193      lda     Spark2Delay_f
 827D [03] B7DE      1194      sta     ST2Timer                 ; Set delay timer for ST2
 827F [04] C6E05D    1195      lda     VE3Delay_f
 8282 [03] B7DF      1196      sta     VE3Timer                 ; Set Delay timer for VE 3
                     1197  
 8284 [01] 4F        1198      clra
 8285 [04] C70111    1199       sta         idledelayclock                  ; PWM idle kg
 8288 [03] B7E2      1200      sta     TCSparkCut
 828A [03] B7C4      1201      sta     SRevLimTimeLeft
 828C [04] C70108    1202      sta     NitrousAngle                 ; Clear the NOS Angle
 828F [04] C70109    1203      sta     NosPW                            ; Clear the Nos PW
 8292 [03] B7D8      1204      sta     SparkCutCnt                      ; Spark Cut counter - Enhanced
 8294 [04] C7010A    1205      sta     pw_staged                        ; Reset the Staged PW
 8297 [04] C7010D    1206       sta         pw_staged2
 829A [04] C7010E    1207       sta         stgTransitionCnt
 829D [04] C7010F    1208       sta         idlAdvHld
 82A0 [03] 3F5F      1209      clr     SparkBits
 82A2 [03] 3FB3      1210      clr     Sparkonleftah
 82A4 [03] 3FB4      1211      clr     Sparkonleftal
 82A6 [03] 3FB5      1212      clr     Sparkonleftbh
 82A8 [03] 3FB6      1213      clr     Sparkonleftbl
 82AA [03] 3FB7      1214      clr     Sparkonleftch
 82AC [03] 3FB8      1215      clr     Sparkonleftcl
 82AE [03] 3FB9      1216      clr     Sparkonleftdh
 82B0 [03] 3FBA      1217      clr     Sparkonleftdl
 82B2 [03] 3FBB      1218      clr     Sparkonlefteh


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 10
MC68HC908GP32 User Bootloader


 82B4 [03] 3FBC      1219      clr     Sparkonleftel
 82B6 [03] 3FBD      1220      clr     Sparkonleftfh
 82B8 [03] 3FBE      1221      clr     Sparkonleftfl
 82BA [03] 3FF5      1222      clr     lowresH                         ; low res (0.1ms) timer
 82BC [03] 3FF6      1223      clr     lowresL                         ;
                     1224  
 82BE [04] C6E06E    1225      lda     dwellcrank_f
 82C1 [03] B7F7      1226      sta     dwelldms                ; initial dwell period
 82C3 [04] 6E10F8    1227      mov     #$10,dwellush               ;  high speed dwell delay,
                     1228                                                      ; default of 4.1ms
 82C6 [03] 3FF9      1229      clr     dwellusl                ; } until calc in main loop
 82C8 [04] 145F      1230      bset    SparkLSpeed,SparkBits; At boot turn on low speed ignition
 82CA [03] 3F60      1231      clr     RevLimBits
 82CC [03] 3F66      1232      clr     EnhancedBits
 82CE [03] 3F67      1233      clr     EnhancedBits2
 82D0 [03] 3F69      1234      clr     EnhancedBits4
 82D2 [03] 3F6A      1235      clr     EnhancedBits5
 82D4 [03] 3F6B      1236      clr     EnhancedBits6
 82D6 [03] 3F68      1237      clr     coilsel
 82D8 [04] 1068      1238      bset    coilabit,coilsel
 82DA [04] 1860      1239      bset    coilerr,RevLimBits       ; set "error" bit so first coil found is used
                     1240  
                     1241  ; possible that this calc could go wrong if a large "addition" was used but then a small
                     1242  ; real angle. Shouldn't happen if angles set correctly.
                     1243  
                     1244  ;*        lda     TriggAngle_f
                     1245  ;*        cmp     #57T                       ; check for next cyl mode
                     1246  ;*        bhi     init_crang         ; trigger angle > 20, continue
                     1247  ;*        bset    nextcyl,EnhancedBits4
                     1248  ;*init_crang:
 82DC [04] C6E3AB    1249      lda     CrankAngle_f                    ;* CrankAngle_f = 10/.352=28
 82DF [03] B758      1250      sta     SparkAngle
                     1251  ;*        brset   EDIS,personality,init_edis
                     1252  
                     1253  ;this won't work for next-cyl but will be ignored at low rpm anyway
 82E1 [04] C6E3A8    1254      lda     TriggAngle_f                    ;* = 80/.532=227
 82E4 [04] C0E3AB    1255      sub     CrankAngle_f                    ;* = 10/.352=28
 82E7 [02] AB1C      1256      add     #28T                                     ;* A<-(A)+(M);* - - 10deg
 82E9 [04] C70106    1257      sta     DelayAngle                      ;* 227-28=199+28=227 (80 degrees)
 82EC [04] C6E3AC    1258      lda     SparkHoldCyc_f                  ;* = 3
                     1259  ;*        bra     init_cont
                     1260  
                     1261  ;*init_edis:
                     1262  ;*        lda     TriggAngle_f
                     1263  ;*       sta     DelayAngle
                     1264  ;*        lda     #$05                       ; set initial SAW to 10 degrees
                     1265  ;*        sta     sawh
                     1266  ;*        lda     #$00
                     1267  ;*        sta     sawl
                     1268  
                     1269  ;*init_cont:
 82EF [03] B7E6      1270      sta     wheelcount               ; (HoldSpark)
                     1271  ;*    brset   MSNEON,personality,init_wheel
                     1272  ;*    brset   WHEEL,personality,init_wheel
                     1273  ;*    bra     init_no_hold
                     1274  ;*init_wheel:
 82F1 [04] 6EC3E6    1275       mov     #WHEELINIT,wheelcount   ; holdoff for Neon/Wheel  ;* WHEELINIT = %11000011, $C3, 195T
 82F4 [04] 136B      1276      bclr    wsync,EnhancedBits6
 82F6 [04] 146B      1277      bset    whold,EnhancedBits6
 82F8 [02] A600      1278      lda     #0
 82FA [03] B7F3      1279      sta     avgtoothh
 82FC [03] B7F4      1280      sta     avgtoothl
                     1281  ;if 2nd trig rising and falling then store existing value of pin to monitor state
                     1282  ;*        lda     dtmode_f
                     1283  ;*        bit     #trig2risefallb
                     1284  ;*        beq     init_no_hold
                     1285  ;*        brclr   pin11,portc,iw_rf2
                     1286  ;*        bset    rise,sparkbits
                     1287  ;*        bra     init_no_hold
                     1288  ;*iw_rf2:
                     1289  ;*        bclr    rise,sparkbits
                     1290  
                     1291  ;*init_no_hold:
                     1292  
 82FE [02] A6FF      1293      lda     #$FF
 8300 [03] B7AF      1294      sta     iTimeH
 8302 [03] B7B0      1295      sta     iTimeL
 8304 [03] B7AE      1296      sta     iTimeX
                     1297  
                     1298  ;see if inverted or non-inv output and use a quick bit
                     1299  ;*        lda     SparkConfig1_f             ; check if noninv or inv spark
                     1300  ;*        bit     #M_SC1InvSpark
                     1301  ;*        bne     inspk_inv
                     1302  ;*        bclr    invspk,EnhancedBits4       ; set non-inverted
                     1303  ;*        bra     inspk_done
                     1304  ;*inspk_inv:
 8306 [04] 1C69      1305      bset    invspk,EnhancedBits4     ; set inverted
                     1306  ;*inspk_done:
                     1307  
                     1308  ;*        lda     p8feat1_f
                     1309  ;*        bit     #rotary2b
                     1310  ;*        beq     not_init_rot
                     1311  ;*        bset    rotary2,EnhancedBits5  ; set rotary quick bit
                     1312  ;*        bclr    wspk,EnhancedBits4 ; set that we are NOT doing normal wasted spark
                     1313  ;*        bra     done_rot
                     1314  ;*not_init_rot:
 8308 [04] 116A      1315          bclr    rotary2,EnhancedBits5  ; clr rotary quick bit
                     1316  
                     1317  ;*done_rot:
                     1318  
                     1319  ;decide if we are doing multiple wasted spark outputs
                     1320  ;*        brset   MSNEON,personality,wsp_init
                     1321  ;*        brset   WHEEL,personality,wsp_init
                     1322  ;*        bra     mv_init                    ; not wasted spark so skip
                     1323  ;*wsp_init:
                     1324  ;*        brclr   REUSE_LED19,outputpins,mv_init
                     1325  ;*        brset   rotary2,EnhancedBits5,mv_init
 830A [04] 1669      1326          bset    wspk,EnhancedBits4   ; set that we are doing wasted spark
                     1327  ;*mv_init:
                     1328  ; set MegaView mode to block enhanced comms, S,P,R,X commands reset
                     1329  ; it to allow normal ops
 830C [04] 1C67      1330          bset    mv_mode,EnhancedBits2
                     1331  
                     1332  ;*If HEI set bypass to 0v
                     1333  ;*        brclr   HEI7,personality,not_hei7_init
                     1334   ;*       bset    aled,portc
                     1335  ;*not_hei7_init:
                     1336  
                     1337  ;*        brclr   DUALEDIS,personality,chk_out
                     1338  ;*        bset    EDIS,personality   ; DUALEDIS implies EDIS
                     1339  
                     1340  ;*chk_out:
                     1341  ;***** add in some sanity checks for outputs vs. code base ****
                     1342  ;*        lda     personality
                     1343  ;*        bne     check_out_config
                     1344  ;        lda     outputpins          ; assumes if personality zero
                     1345  ;                                    ; then any outputs are error
                     1346  ;        beq     b_dc                        ; no personality, no outputs
                     1347  ;wrong!  This prevents "Fuel only", just check for conflicts
                     1348   ;*       bra     check3
                     1349  
                     1350  ;*set_error:
                     1351  ;*        mov     #1,tmp4
                     1352  ;*        bset    config_error,feature2
                     1353  ;*        jmp     done_checks
                     1354  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 11
MC68HC908GP32 User Bootloader


                     1355  ;*check_out_config:
                     1356  ;*        brclr   REUSE_LED17,outputpins,block_neon
                     1357  ;*        brclr   REUSE_LED19,outputpins,block_neon
                     1358  ;*        bra     check_msns
                     1359  ;*block_neon:
                     1360  ;*        brclr   MSNEON,personality,check_msns
                     1361  ;*        mov     #2,tmp4
                     1362  ;*        bset    config_error,feature2      ; if MSNEON but haven't
                     1363  ;*                                   ; reused led17&19 then error
                     1364  ;*        jmp     done_checks
                     1365  
                     1366  ;*check_msns:
                     1367  ;*        brclr   MSNS,personality,check3
                     1368  ;*        brset   REUSE_FIDLE,outputpins,check3
                     1369  ;*        brset   REUSE_LED17,outputpins,check3
                     1370  ;*        mov     #3,tmp4
                     1371  ;*        bset    config_error,feature2      ; if MSNS and haven't reused
                     1372  ;*                                   ; FIDLE or LED17 then error
                     1373  ;*        jmp     done_checks
                     1374  
                     1375  ;*check3:   ; check for idle conflict
                     1376  ;        brclr   PWMidle,feature2,check4
                     1377  ;*        lda     feature13_f
                     1378  ;*        bit     #pwmidleb
                     1379  ;*        beq     check4
                     1380  ;*        brclr   REUSE_FIDLE,outputpins,check4
                     1381  ;*        mov     #4,tmp4
                     1382  ;*        bset    config_error,feature2      ; trying to use PWM idle and spark
                     1383  ;*                                   ; on FIDLE
                     1384  ;*        jmp     done_checks
                     1385  
                     1386  ;*check4:         ; check we don't have Water and Fan control as both use X2
                     1387  ;*        lda     feature3_f
                     1388  ;*        bit     #WaterInjb
                     1389  ;*        beq     check5
                     1390  ;        brclr   WaterInj,feature3,check5
                     1391  ;*        brclr   X2_FAN,outputpins,check5
                     1392  ;*        mov     #5,tmp4
                     1393  ;*        bset    config_error,feature2      ; X2 in conflict
                     1394  ;*b_dc:
                     1395  ;*       jmp     done_checks
                     1396  ;*check5:
                     1397  ;*        brclr   Nitrous,feature1,check6
                     1398  ;*        lda     feature3_f
                     1399  ;*        bit     #WaterInjb
                     1400  ;*        beq     check6
                     1401  ;        brclr   WaterInj,feature3,check6
                     1402  ;*        mov     #6,tmp4
                     1403  ;*        bset    config_error,feature2      ; X4 water/nitrous pin in conflict
                     1404  ;*        jmp     done_checks
                     1405  
                     1406  ;*check6:         ;7pin HEI must have spark output B (LED19) defined. For bypass output
                     1407  ;*        brclr   HEI7,personality,check7
                     1408  ;*        brset   REUSE_LED19,outputpins,check7
                     1409  ;*        mov     #7,tmp4
                     1410  ;*        bset    config_error,feature2
                     1411  ;*        jmp     done_checks
                     1412  
                     1413  ;*check7:   ; do some checks on wasted spark outputs
                     1414  ;*        brset   rotary2,EnhancedBits5,check8a
                     1415  ;  coilc is the pain - set if LED18=1 and LED18_2=1
                     1416  ;*        brclr   wspk,EnhancedBits4,check8  ; don't bother if we
                     1417                                               ; aren't doing multiple outputs
                     1418  ;*        brclr   WHEEL,personality,check8
                     1419  ;*        brset   out3sparkd,feature2,ck74   ; 4th output
                     1420  ;*        brclr   REUSE_LED18,outputpins,ck72        ; not 3rd output
                     1421  ;*        brclr   REUSE_LED18_2,outputpins,ck72      ; not 3rd output
                     1422  ;*        bra     ck73                               ; LED18=1 & LED18_2=1
                     1423  ;*ck74:
                     1424  ;*        lda     trig4_f
                     1425  ;*        beq     ck7err
                     1426  ;*        brclr   REUSE_LED18,outputpins,ck7err
                     1427  ;*        brclr   REUSE_LED18_2,outputpins,ck7err
                     1428  ;*ck73:
                     1429  ;*        lda     trig3_f
                     1430  ;*        beq     ck7err
                     1431  ;*        brclr   REUSE_LED19,outputpins,ck7err
                     1432  ;*ck72:
                     1433  ;*        lda     trig2_f
                     1434  ;*        beq     ck7err
                     1435  ;*ck72b:
                     1436  ;*        brclr   REUSE_LED17,outputpins,ck7err
                     1437  ;*ck71:
                     1438  ;*        lda     trig1_f
                     1439  ;*        beq     ck7err
                     1440  ;*        bra     check7b                            ; passed all checks
                     1441  ;*ck7err:
                     1442  ;*        mov     #8,tmp4
                     1443  ;*        bset    config_error,feature2
                     1444  ;*        jmp     done_checks
                     1445  ;*check7b:   ; can't use FIDLE for spark if doing wasted spark
                     1446  ;*        brclr   REUSE_FIDLE,outputpins,check7c
                     1447  ;*        mov     #9,tmp4
                     1448  ;*        bset    config_error,feature2
                     1449  ;*        jmp     done_checks
                     1450  
                     1451  ;*check7c:
                     1452  ;now check other way around
                     1453  ;first check for dual dizzy feature
                     1454  ;*        lda     feature6_f
                     1455  ;*        bit     #dualdizzyb
                     1456  ;*        bne     check8       ; if dual dizzy then only 2 outputs anyway
                     1457  
                     1458  ;*        lda     trig4_f                            ; if trig4 pt set must have
                     1459                                               ; spark o/p d
                     1460  ;*        beq     ck7c3
                     1461  ;*        brclr   out3sparkd,feature2,ck7err ; 4th output
                     1462  ;*ck7c3:
                     1463  ;*        lda     trig3_f                            ; if trig3 pt set must
                     1464                                               ; have spark o/p c
                     1465  ;*        beq     check8
                     1466  ;*        brclr   REUSE_LED18,outputpins,ck7err
                     1467  ;*        brclr   REUSE_LED18_2,outputpins,ck7err
                     1468  
                     1469  ;*check8:
                     1470  ;*        bra     check9
                     1471  ;*check8a:
                     1472          ; do rotary2 output checks, must have led17,18,19 set to spark and two
                     1473          ; wheel triggers
                     1474  ;*        brclr   REUSE_LED18,outputpins,ck8aerr
                     1475  ;*        brclr   REUSE_LED18_2,outputpins,ck8aerr
                     1476  ;*        brclr   REUSE_LED19,outputpins,ck8aerr
                     1477  ;*        brclr   REUSE_LED17,outputpins,ck8aerr
                     1478  ;now check wheel decoder is setup
                     1479  ;*        brclr   WHEEL,personality,ck8cerr
                     1480  ;check for two triggers
                     1481  ;*        lda     trig2_f
                     1482  ;*        beq     ck8berr
                     1483  ;*        lda     trig1_f
                     1484  ;*        beq     ck8berr
                     1485  ;*        bra     check9
                     1486  
                     1487  ;*ck8aerr:
                     1488  ;*        mov     #10T,tmp4
                     1489  ;*        bset    config_error,feature2
                     1490   ;*       bra     done_checks


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 12
MC68HC908GP32 User Bootloader


                     1491  ;*ck8berr:
                     1492  ;*        mov     #11T,tmp4
                     1493  ;*        bset    config_error,feature2
                     1494  ;*        bra     done_checks
                     1495  ;*ck8cerr:
                     1496  ;*        mov     #12T,tmp4
                     1497  ;*        bset    config_error,feature2
                     1498  ;*        bra     done_checks
                     1499  
                     1500  ;*check9:
                     1501  ;*        brclr   REUSE_FIDLE,outputpins,check10
                     1502  ;*        brclr   REUSE_LED17,outputpins,check10
                     1503  ;*        mov     #13T,tmp4
                     1504  ;*        bset    config_error,feature2
                     1505  ;*        bra     done_checks
                     1506  ;*check10:
                     1507  ; count how many ignition types and if more than one give an error
                     1508  ;*        clra
                     1509  ;*        brclr   MSNS,personality,check10a
                     1510  ;*        inca
                     1511  ;*check10a:
                     1512  ;*        brclr   MSNEON,personality,check10b
                     1513  ;*        inca
                     1514  ;*check10b:
                     1515  ;*        brclr   WHEEL,personality,check10c
                     1516  ;*        inca
                     1517  ;*check10c:
                     1518  ;*        brclr   EDIS,personality,check10d
                     1519  ;*        inca
                     1520  ;*check10d:
                     1521  ;*        brclr   TFI,personality,check10e
                     1522  ;*        inca
                     1523  ;*check10e:
                     1524  ;*        brclr   HEI7,personality,check10f
                     1525  ;*        inca
                     1526  ;*check10f:
                     1527  ;*      8 cmp     #1
                     1528  ;*        bls     check11
                     1529  ;*        mov     #14T,tmp4
                     1530  ;*     8  bset    config_error,feature2
                     1531  ;*        bra     done_checks
                     1532  
                     1533  ;*check11:
                     1534  ;*done_checks:
                     1535  ;make sure all spark outputs are inactive as soon as poss
                     1536  
 830E [05] CD8AC9    1537          jsr     turnallsparkoff     ; subroutine
                     1538  
                     1539  ; Fire up the ADC, and perform three conversions to get the baro value, IAT
                     1540  ; and the clt temp
                     1541  
                     1542  start_adc:
 8311 [02] A670      1543       lda       #%01110000    ; Set up divide 8 and internal bus clock source
 8313 [03] B73E      1544       sta       adclk
 8315 [02] A600      1545       lda       #%00000000    ; Select one conversion, no interrupt, AD0
 8317 [03] B73C      1546       sta       adscr
 8319 [05] 0F3CFD    1547       brclr coco,adscr,*      ; wait until conversion is finished
 831C [03] B63D      1548       lda       adr
 831E [03] B743      1549       sta       baro              ; Store value in Barometer
 8320 [02] A602      1550       lda       #%00000010    ; Select second conversion, no interrupt, AD2
 8322 [03] B73C      1551       sta       adscr
 8324 [05] 0F3CFD    1552       brclr coco,adscr,*      ; wait until conversion is finished
 8327 [03] BE3D      1553       ldx   adr
 8329 [04] D6F400    1554       lda   THERMFACTOR,x
 832C [03] B7CC      1555       sta   coolant           ; Coolant temperature in degrees F + 40
 832E [02] A603      1556       lda       #%00000011    ; Select third conversion, no interrupt, AD3
 8330 [03] B73C      1557       sta       adscr
 8332 [05] 0F3CFD    1558       brclr coco,adscr,*      ; wait until conversion is finished
 8335 [03] BE3D      1559       ldx   adr
                     1560  ;*   lda   MATFACTOR,x
 8337 [04] D6F400    1561      lda   THERMFACTOR,x
 833A [04] C70107    1562      sta   airTemp
 833D [03] 3F8E      1563       clr   adsel             ; Clear the channel selector
                     1564  
                     1565  TURN_ON_INTS:
 833F [02] 9A        1566          cli                  ; Turn on all interrupts now
                     1567  ***************************************************************************
                     1568  ** Check for config error
                     1569  ***************************************************************************
                     1570  ;*        brset   config_error,feature2,config_er1JMP
                     1571  
                     1572  ***************************************************************************
                     1573  **
                     1574  ** Prime Pulse - Shoot out one priming pulse of length PRIMEP now or
                     1575  ** after 2 seconds
                     1576  ** Also added the facility for 2 priming pulses  P Ringwood
                     1577  **
                     1578  ***************************************************************************
                     1579  ;*    bclr   Primed,EnhancedBits     ; Clear the primed bit
                     1580  ;*        lda    feature11_f4
                     1581  ;*        bit    #PrimeTwiceb
                     1582  ;*        bne    Two_Primes
                     1583  ;*        brset  PrimeTwice,feature6,Two_Primes      ; Are we firing priming
                     1584                                               ; pulses twice?
                     1585  ;*    inc    TCSparkCut              ; Add 1 to prime counter so it only does it once
                     1586  ;*Two_Primes:                                        ; using spark cut byte to
                     1587                                               ; cut down bytes
                     1588  ;*        lda    feature11_f4
                     1589  ;*        bit    #PrimeLateb
                     1590  ;*        bne    PrimeLater
                     1591  ;*        brset  PrimeLate,feature6,PrimeLater       ; Are we going to prime late?
                     1592  
                     1593  ;*PrimeNow:
                     1594  ;*    inc    TCSparkCut                      ; Increase Prime Pulse Counter
                     1595  ;*    lda    TCSparkCut
                     1596  ;*    cmp    #02T                                ; Have we reached primepulse count limit?
                     1597  ;*    blo    Prime_Not_Done
                     1598  ;*    bset   Primed,EnhancedBits     ; Set Primed bit high if we've done all pulses
                     1599  ;*    lda    #00T
                     1600  ;*    sta    TCSparkCut                      ; Clear this for use later
                     1601  
                     1602  ;*Prime_Not_Done:
                     1603  ;*        lda    feature11_f4                     ; Priming pulse table or box?
                     1604  ;*        bit    #NoPrimePb
                     1605  ;*        beq    PrimeTable_P                     ; Prime table
                     1606  
                     1607  ;*        lda    primePulse_f                     ; Prime pulse
                     1608  ;*        beq    Prime_NoPrime                    ; if zero are we priming pump?
                     1609  ;*        bra    prime                            ; Go do prime
                     1610  ;*Prime_NoPrime:
                     1611  ;*        lda    feature11_f4                     ; zero pulse so are we priming pump?
                     1612  ;*        bit    #AlwaysPrimeb
                     1613  ;*        beq    CalcRunJMP                       ; zero and not fing pump
                     1614  ;*        bset   Primed,EnhancedBits              ; We have primed now
                     1615  ;*        lda    #00T                             ; firing pump, put 00 back in acc
                     1616  ;*        bra    prime
                     1617  
                     1618  ;*PrimeTable_P:
                     1619          ; Interpolate from CLT, same curve as cranking PW.
                     1620  
 8340 [05] CD8A31    1621      jsr    crankingModePrime
 8343 [03] B699      1622      lda    tmp6
 8345 [03] 2000      1623      bra    prime
                     1624  
                     1625  ;*NotPrimed:                                 ; If were here we must
                     1626                                               ; be priming late


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 13
MC68HC908GP32 User Bootloader


                     1627  ;*        lda    secl
                     1628  ;*        cmp    #02T                                ; Have we been powered up
                     1629                                               ; for 2 secs?
                     1630  ;*        bhs    PrimeNow                            ; Yes so fire prime pulse now
                     1631  ;*        jmp    Prime_Checked                       ; No so go back to main loop
                     1632  
                     1633  ;*PrimeLater:
                     1634  ;*        bset   running,engine
                     1635  ;*        bset   crank,engine
                     1636  ;*        bset   fuelp,porta                 ; Start the pump running
                     1637  ;*        bra    CalcRunningParameters                       ; Don't pulse the injectors yet
                     1638  
                     1639  prime:
                     1640  
 8347 [04] 1042      1641      bset   running,engine
 8349 [04] 1000      1642      bset   fuelp,porta
 834B [03] B74E      1643      sta    pw1
 834D [03] 3F6C      1644      clr    pwrun1
 834F [04] 1441      1645      bset   sched1,squirt
 8351 [04] 1041      1646      bset   inj1,squirt
                     1647  
                     1648  ;*        brclr  CrankingPW2,feature1,CalcRunningParameters; can skip prime
                     1649                                               ; on second channel
 8353 [03] B753      1650      sta    pw2
 8355 [03] 3F6D      1651      clr    pwrun2
 8357 [04] 1841      1652      bset   sched2,squirt
 8359 [04] 1241      1653      bset   inj2,squirt
 835B [03] 2000      1654      bra    CalcRunningParameters
                     1655  
                     1656  ;*config_er1JMP:
                     1657  ;*        jmp   config_error1                        ; Config Error jump
                     1658  
                     1659  ;*PumpPrime:
                     1660  ;*        bset   crank,engine
                     1661  ;*        bset   running,engine
                     1662  ;*        bset   fuelp,porta                 ; prime the pump
                     1663  ;*CalcRunJMP:
                     1664  ;*        bra    CalcRunningParameters            ; Go start the main loop
                     1665  ******** Config error dead end **********
                     1666  ** Toggle these ports as a visual and audible indicator
                     1667  ***************************************************************************
                     1668  ;*config_error1:
                     1669  ;*        bset    IMASK,INTSCR                       ; disable interrupts for
                     1670                                               ; IRQ (the ignition i/p)
                     1671  ;*        bclr    running,engine
                     1672  ;*        bset    fuelp,porta
                     1673   ;*       bclr    wled,portc
                     1674  
                     1675  ;dead_end:
                     1676  ;*        bset    fuelp,porta
                     1677  
                     1678  ;*        lda     tmp4
                     1679  ;*        beq     skip_err_msg                       ; if zero then don't try
                     1680  ;*                                           ; to send
                     1681  
                     1682  ;find start address or error message
                     1683  ;*        lda     tmp4
                     1684  ;*        asla
                     1685  ;*        tax
                     1686  ;*        clrh
                     1687  ;*        lda     error_vector,x
                     1688  ;*        sta     tmp5
                     1689  ;*        incx
                     1690  ;*        lda     error_vector,x
                     1691  ;*        sta     tmp6
                     1692  
                     1693  ;*        mov     #$0D,txmode
                     1694  ;*        bset    TE,SCC2                            ; Enable Transmit
                     1695  ;*        bset    SCTIE,SCC2                 ; Enable transmit interrupt
                     1696  ;*        clr     tmp4                               ; wipe error code so we
                     1697                                               ; only send it once
                     1698          ;if we keep sending it then it gets in the way of tuning software trying to
                     1699          ;read and write data to put the error right. e.g. you send 'R' but the code
                     1700          ;is in the middle of sending a message
                     1701  ;skip_err_msg:
                     1702  
                     1703  ;*        mov     #10,tmp1
                     1704  ;*dead_loop1
                     1705  ;*        clr     tmp2
                     1706  ;*dead_loop2:
                     1707  ;*        clr     tmp3
                     1708  ;*dead_loop3:
                     1709  ;*        dec     tmp3
                     1710  ;*        bne     dead_loop3
                     1711  ;*        dec     tmp2
                     1712  ;*        bne     dead_loop2
                     1713  ;*        dec     tmp1
                     1714  ;*        bne     dead_loop1
                     1715  
                     1716  ;*       bclr    fuelp,porta
                     1717  
                     1718  ;*        mov     #10,tmp1
                     1719  ;*dead_loop4
                     1720  ;*        clr     tmp2
                     1721  ;*dead_loop5:
                     1722  ;*        clr     tmp3
                     1723  ;*dead_loop6:
                     1724  ;*        dec     tmp3
                     1725  ;*        bne     dead_loop6
                     1726   ;*       dec     tmp2
                     1727  ;*        bne     dead_loop5
                     1728  ;*        dec     tmp1
                     1729  ;*        bne     dead_loop4
                     1730  
                     1731  ;*        bra     dead_end
                     1732  
                     1733  
                     1734  *****************************************************************************
                     1735  *****************************************************************************
                     1736  **
                     1737  **  Correction Factor Lookup Table Access
                     1738  **
                     1739  **   Perform table lookup for barometer and air density correction factors,
                     1740  **    and performs coolant temperature conversion from counts to degrees F.
                     1741  **
                     1742  **   All tables are pre-computed for all 256 different values
                     1743  **    and stored in FLASH.
                     1744  **
                     1745  **   Note: Coolant temperature is in degrees F plus 40 - this allows
                     1746  **    unsigned numbers for full temperature range of -40 to 215.
                     1747  **
                     1748  ***************************************************************************
                     1749  CalcRunningParameters:
                     1750  
                     1751  *******************************
 835D [01] 8C        1752          clrh
 835E [05] 0E6700    1753          brset   OneShotBArro,EnhancedBits2,bEnd_of_Baro      ; Only do this once
                     1754                                                       ; as we may change
                     1755                                                       ; the baro value
                     1756  
                     1757  
                     1758  ;*        lda     config13_f1           ; Are we doing baro at all?
                     1759  ;*        bit     #c13_bc
                     1760  ;*        beq     non_baro
                     1761  
                     1762  ;*        lda     feature9_f


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 14
MC68HC908GP32 User Bootloader


                     1763  ;*        bit     #ConsBarCorb           ; Are we doing constant Bar COr using map on X7 ??
                     1764  ;*        bne     ConsBar
                     1765  
                     1766  ;*        lda     config13_f1
                     1767  ;*        bit     #c13_cs                ; Are we doing Alpha_n?
                     1768  ;*        beq     OneShot_Bar            ; No so one shot baro only!
                     1769  
                     1770  ;*        lda     feature9_f             ; Are we doing constant baro correction using
                     1771  ;*        bit     #BaroCorConstb         ; the on board map in Alpha_n mode?
                     1772  ;*        beq     OneShot_Bar
                     1773  ;*        lda     map
                     1774  ;*        sta     baro                   ; Store the map in the baro variable
                     1775  ;*        bra     DoBaroCorr
                     1776  
                     1777  bEnd_of_Baro:
 8361 [03] CC8397    1778          jmp     End_of_Baro          ; extend branch below
                     1779  
                     1780  ;*non_baro:
                     1781  ;*        bset    OneShotBArro,EnhancedBits2            ; only do this once
                     1782  
                     1783          ; not doing any baro, so use fixed Pambient and 100% baro correction
                     1784  ;*        lda     Pambient_f     ; load in flash data. Let the user choose the setpoint
                     1785  ;*        cmp     #20T
                     1786  ;*        bhi     st_pamb
                     1787  ;*        lda     #100T           ; if a silly low (or zero) value is set then use default
                     1788  ;*st_pamb:
                     1789  ;*        sta     Pambient   ;decide which hardcoded limit to use for starting boost control
                     1790  ;*        lda     #100T
                     1791  ;*        bra     DoneBaroCorr
                     1792  
                     1793  
                     1794  ;*OneShot_Bar:
 8364 [04] 1E67      1795          bset    OneShotBArro,EnhancedBits2
                     1796  ;*        bra     DoBaroCorr
                     1797  
                     1798  ;*ConsBar:                                ; MAP connected to X7, so using constant BARO COR
                     1799  ;*        lda     o2_fpadc
                     1800  ;*        sta     baro
                     1801  
                     1802  ;*DoBaroCorr:
 8366 [03] BE43      1803          ldx     baro
                     1804          ;check if within sensible range
 8368 [04] C3E052    1805          cpx     BarroHi_f
 836B [03] 2505      1806          blo     Baro_Lo_Check
 836D [04] CEE052    1807          ldx     BarroHi_f
 8370 [03] 2008      1808          bra     Do_Baro
                     1809  Baro_Lo_Check:
 8372 [04] C3E053    1810          cpx     BarroLow_f
 8375 [03] 2203      1811          bhi     Do_Baro
 8377 [04] CEE053    1812          ldx     BarroLow_f
                     1813  Do_Baro:
 837A [03] BF43      1814          stx     baro                    ; re-store whatever it ended up as
 837C [04] C6E1B6    1815          lda     config11_f1
 837F [02] A403      1816          and     #$03                    ; What MAP sensor?
 8381 [03] 270A      1817          beq     do_baro4115
                     1818  ;*        cbeqa   #2T,do_baro_6300
                     1819  ;*        cbeqa   #3T,do_baro_6400
                     1820  
                     1821  ;do_baro_4250:
 8383 [04] D6F300    1822          lda     KPAFACTOR4250,x
 8386 [03] B7CA      1823          sta     Pambient
 8388 [04] D6F100    1824          lda     BAROFAC4250,x
 838B [03] 2008      1825          bra     DoneBaroCorr
                     1826  
                     1827  ;*do_baro_6300:
                     1828  ;*        stx     Pambient ; use raw ADC
                     1829  ;*        lda     BAROFAC300k,x
                     1830  ;*        bra     DoneBaroCorr
                     1831  
                     1832  ;*do_baro_6400:
                     1833  ;*        stx     Pambient ; use raw ADC
                     1834  ;*        lda     BAROFAC400k,x
                     1835  ;*        bra     DoneBaroCorr
                     1836  
                     1837  do_baro4115:
 838D [04] D6F200    1838          lda     KPAFACTOR4115,x
 8390 [03] B7CA      1839          sta     Pambient
 8392 [04] D6F000    1840          lda     BAROFAC4115,x
                     1841  DoneBaroCorr:
 8395 [03] B750      1842          sta     barocor                      ; Barometer Correction Gamma
                     1843  End_of_Baro:
                     1844  
                     1845  ;now convert map ADC count into internal kpa
 8397 [03] BE44      1846          ldx     map
 8399 [04] C6E1B6    1847          lda     config11_f1
 839C [02] A403      1848          and     #$03
 839E [04] 410102    1849          cbeqa   #1T,do_kpa4250
                     1850  ;*        cbeqa   #2T,do_kpa6300
                     1851  ;*        cbeqa   #3T,do_kpa6400
 83A1 [03] 2005      1852          bra     do_kpa4115
                     1853  
                     1854  
                     1855  do_kpa4250:
 83A3 [04] D6F300    1856          lda     KPAFACTOR4250,x
 83A6 [03] 2005      1857          bra     Donekpa
                     1858  
                     1859  do_kpa4115:
 83A8 [04] D6F200    1860          lda     KPAFACTOR4115,x
 83AB [03] 2000      1861          bra     Donekpa
                     1862  
                     1863  ;*do_kpa6300:
                     1864  ;*        lda     map                        ; Use Raw ADC value + offset if 300/400 KPa
                     1865  ;*        inca                               ; instead of KPAFACTOR
                     1866  ;*        bra     Donekpa
                     1867  
                     1868  ;*do_kpa6400:
                     1869  ;*        lda     map                        ; Use Raw ADC value + offset if 300/400 KPa
                     1870  ;*        inca
                     1871  ;*        inca                               ; instead of KPAFACTOR
                     1872  
                     1873  Donekpa:
 83AD [03] B7CB      1874          sta     kpa
                     1875  
 83AF [03] BE46      1876          ldx     clt
 83B1 [04] D6F400    1877          lda     THERMFACTOR,x
 83B4 [03] B7CC      1878          sta     coolant                      ; Coolant temperature in degrees F + 40
                     1879  
 83B6 [03] BE45      1880          ldx     mat
                     1881  ;*        lda     MATFACTOR,x
 83B8 [04] D6F400    1882               lda     THERMFACTOR,x
 83BB [04] C70107    1883          sta     airTemp                      ; Added for enhanced stuff Air Temp in F + 40
                     1884  
                     1885  ;*        lda     feature9_f              ; Are we using a MAF?
                     1886  ;*        bit     #MassAirFlwb
                     1887  ;*        beq     Do_AirDens
                     1888  ;*        lda     feature9_f              ; Using MAF, so do we still do Air Cor?
                     1889  ;*        bit     #NoAirFactorb
                     1890  ;*        beq     Do_AirDens
                     1891  ;*        lda     #100T                   ; No Air Cor so set it to 100%
                     1892  ;*        jmp     Store_AirCor
                     1893  
                     1894  ;*Do_AirDens:                             ; Not using a Air correction within a MAF
                     1895  
                     1896  ;******** CHECK IF CORRECTING AIR DENSITY *****************
                     1897  ;*        lda     feature13_f
                     1898  ;*        bit     #cltMAPb             ; Are we correcting the air density factor?


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 15
MC68HC908GP32 User Bootloader


                     1899  ;*        beq     NormAirDen           ; If no then do normal air density
                     1900  
                     1901  ; If we get here we are doing correction to air density
                     1902  ; Air Density = IAT Air Density * (Correction * Reduction based on RPM %)
                     1903  
                     1904  ;*        ldhx    #CltMATRange         ; Temps for table
                     1905  ;*        sthx    tmp1
                     1906  ;*        lda     #$06                 ; 7 bytes big
                     1907  ;*        sta     tmp3
                     1908  
                     1909  ;*        lda     feature13_f
                     1910  ;*        bit     #CltMATCheckb
                     1911  ;*        beq     CoolantRel           ; Are we using Coolant or IAT for correction?
                     1912  ;*        lda     airTemp              ; MAT based correction
                     1913  ;*        bra     MATRel
                     1914  
                     1915  ;*CoolantRel:
                     1916  ;*        lda     coolant              ; Coolant based correction
                     1917  ;*MATRel:
                     1918  ;*        sta     tmp4
                     1919  ;*        jsr     tableLookup          ; Find the lookup place for coolant
                     1920                                       ; corr in table
                     1921  ;*        clrh
                     1922  ;*        ldx     tmp5
                     1923  ;*        lda     cltMATcorr_f,x       ; From correction table to correct Density
                     1924  ;*        sta     liY2
                     1925  ;*        decx
                     1926  ;*        lda     cltMATcorr_f,x
                     1927  ;*        sta     liY1
                     1928  
                     1929  ;*        lda     feature13_f
                     1930  ;*        bit     #CltMATCheckb
                     1931  ;*        beq     CoolantTabl          ; Are we using Coolant or IAT for correction?
                     1932  ;*        lda     airTemp
                     1933  ;*        bra     StoreCoret
                     1934  
                     1935  ;*CoolantTabl:
                     1936  ;*        lda     coolant
                     1937  ;*StoreCoret:
                     1938  ;*        sta     liX
                     1939  ;*        jsr     LinInterp
                     1940  ;*        mov     tmp6,tmp31           ; Tmp31 now contains correction percentage
                     1941  
                     1942  ; So now we have the correction for Air Den, now interpolate the RPM to reduce this if needed due to engine speed
                     1943  ; We do this by having 2 RPM set points, below Lowest is all of calculated coolant correction, above it is interpolated.
                     1944  
                     1945  ;*        lda     rpm
                     1946  ;*   cmp     RPMReduLo_f          ; Are we below the min reduction value?
                     1947  ;*        blo     Do_Cal_Red1          ; YES so no reduction on correction factor
                     1948  ;*        lda     rpm
                     1949  ;*        sta     liX                  ; Store current value to see where we are
                     1950  ;*        lda     RPMReduHi_f
                     1951  ;*        sta     liX2                 ; Highest point to stop all correction
                     1952  ;*        lda     RPMReduLo_f
                     1953  ;*        sta     liX1                 ; Lowest point to start to remove correction
                     1954  ;*        lda     tmp31                ; This is the coolant correction value
                     1955  ;*        sta     liY1
                     1956  ;*        lda     #100T
                     1957  ;*        sta     liY2                 ; 100% correction when at this setpoint (No correction)
                     1958  ;*        jsr     LinInterp            ; Find How much we want to reduce by.
                     1959  ;*        mov     tmp6,tmp31           ; tmp31 now contains coolant correction * 0-100% reduction depending on RPM
                     1960  
                     1961  ;*Do_Cal_Red1:
                     1962  ;*        clrh
                     1963  ;*        ldx     mat
                     1964  ;*        lda     AIRDENFACTOR,x       ; Find normal Air Density
                     1965  ;*;        sta     tmp10
                     1966  ;*;        clr     tmp11
                     1967  ;*;        lda     tmp31
                     1968  ;*;        sta     tmp12
                     1969  ;*;        clr     tmp13
                     1970  ;*;        jsr     Supernorm            ; Multiply Norm AirDen with correction
                     1971  ;*;        mov     tmp10,AirCor         ; Now we have amount of correction based on correction * RPM reduction%
                     1972  ;*;why use SuperNorm when remainder is zero and we discard output remainder?
                     1973  ;*;want to do airdenfactor * tmp31 / 100
                     1974  ;*        ldx     tmp31
                     1975  ;*        mul             ; (result in x:a)
                     1976  ;*        pshx
                     1977  ;*        pulh
                     1978  ;*        ldx     #100T
                     1979  ;*        div             ; (h:a / x -> a rem h)
                     1980  ;*        sta     AirCor
                     1981  ;*        bra     Do_Mat_Fact          ; jump past normal Air Density
                     1982  
                     1983  ;******** NORMAL AIR DENSITY **************************************
                     1984  NormAirDen:
 83BE [03] BE45      1985          ldx     mat
 83C0 [04] D6F500    1986          lda     AIRDENFACTOR,x
                     1987  Store_AirCor:
 83C3 [03] B74B      1988          sta     AirCor                       ; Air Density Correction Factor
                     1989  
                     1990  ;*Do_Mat_Fact:
                     1991  
                     1992  ***************************************************************************
                     1993  **
                     1994  ** Computation of RPM
                     1995  **
                     1996  **   Result left in accumulator.
                     1997  **
                     1998  **     rpmk:rpmk+1
                     1999  **     ----------- = rpm
                     2000  **     rpmph:rpmpl
                     2001  **
                     2002  **  rpmk:rpmK+1 = RPM constant = (6,000 * (stroke/2))/ncyl
                     2003  **  rpmph:rpmpl = period count between IRQ pulsed lines, in 0.1 ms resolution
                     2004  **
                     2005  ****************************************************************************
                     2006  
                     2007  CalcRPM:
                     2008  ; 50% re-written in 026i with aim of better odd-fire averaging
                     2009  
 83C5 [05] 004207    2010          brset     running,engine,dorpmCalc
 83C8 [04] 5570      2011          ldhx      rpmph
 83CA [03] 2603      2012          bne       dorpmCalc          ; If zero then jump over calculation
                     2013                                       ; - prevent divide by zero
 83CC [03] CC8440    2014          jmp       rpmCalcZero           ; previous branches out of range
                     2015  
                     2016  dorpmCalc:
                     2017  ;tmp12,13,14 used to hold average iTime or avg iTime
 83CF [02] 9B        2018          sei                    ; must block ints for this little period
 83D0 [05] 4EAE9F    2019          mov       iTimeX,tmp12
 83D3 [05] 4EAFA0    2020          mov       iTimeH,tmp13
 83D6 [05] 4EB0A1    2021          mov       iTimeL,tmp14
                     2022  
 83D9 [05] 4EFCA2    2023          mov       iTimepX,tmp15
 83DC [05] 4EFDA3    2024          mov       iTimepH,tmp16
 83DF [05] 4EFEA4    2025          mov       iTimepL,tmp17
 83E2 [02] 9A        2026          cli
                     2027  
                     2028  ;*; If odd-fire is set (bit zero of Config13), then average RPM values
                     2029  ;*        lda       config13_f1
                     2030  ;*        and       #$01
                     2031  ;*        beq       NO_ODD_FIRE
                     2032  
                     2033  ;*YES_ODD_FIRE:
                     2034  ;*;average previous period with previous previous


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 16
MC68HC908GP32 User Bootloader


                     2035  ;*        lda       tmp17    ; add together
                     2036  ;*        add       tmp14
                     2037  ;*        sta       tmp14
                     2038  ;*        lda       tmp16
                     2039  ;*        adc       tmp13
                     2040  ;*        sta       tmp13
                     2041  ;*        lda       tmp15
                     2042  ;*        adc       tmp12
                     2043  ;*        lsra               ; divide by 2
                     2044  ;*        sta       tmp12
                     2045  ;*        ror       tmp13
                     2046  ;*        ror       tmp14
                     2047  
                     2048  ;*NO_ODD_FIRE:
 83E3 [03] B69F      2049          lda       tmp12
 83E5 [03] 2731      2050          beq       rpmCalcFast                ; If we have only 8-bit denominator,
                     2051                                       ; then use native divide
                     2052  
                     2053  ;note, udvd32 re-written so that it uses
                     2054  ;tmp1,2,3,4 as intacc1
                     2055  ;tmp5,6,7,8 as intacc2
                     2056  ;tmp9,10,11 as temp storage instead of extra stack
                     2057  
                     2058  rpmCalcSlow:
                     2059  ;need to divide period (tmp12,13,14) by 100 to obtain period time in 0.1ms
 83E7 [02] AE64      2060          ldx       #100T
 83E9 [01] 8C        2061          clrh
 83EA [03] B69F      2062          lda       tmp12
 83EC [07] 52        2063          div                          ; A rem H = (H:A) / X
 83ED [03] B79F      2064          sta       tmp12
 83EF [03] B6A0      2065          lda       tmp13
 83F1 [07] 52        2066          div                          ; A rem H = (H:A) / X
 83F2 [03] B7A0      2067          sta       tmp13
 83F4 [03] B6A1      2068          lda       tmp14
 83F6 [07] 52        2069          div                          ; A rem H = (H:A) / X
 83F7 [03] B7A1      2070          sta       tmp14
                     2071  
 83F9 [03] B69F      2072          lda       tmp12
 83FB [03] 2643      2073          bne       rpmCalcZero           ; if tmp12>0 then very slow indeed (<100rpm)
                     2074  
                     2075  
 83FD [03] 3F94      2076          clr       intacc1
 83FF [03] 3F95      2077          clr       intacc1+1
                     2078  
 8401 [05] 4EA098    2079          mov       tmp13,intacc2
 8404 [05] 4EA199    2080          mov       tmp14,intacc2+1
                     2081  
 8407 [04] C6E19C    2082          lda       rpmk_f1
 840A [03] B796      2083          sta       intacc1+2
 840C [04] C6E19D    2084          lda       rpmk_f1+1
 840F [03] B797      2085          sta       intacc1+3
                     2086  
 8411 [05] CD9BE0    2087          jsr       udvd32             ; 32 / 16 divide
                     2088  
 8414 [03] B697      2089          lda       intacc1+3          ; get 8-bit RPM result
 8416 [03] 2029      2090          bra       rpmCalcDone
                     2091  
                     2092  rpmCalcFast:
                     2093  ;This (new) slower code takes the time between IRQs in 1us accuracy to calc the rpm
                     2094  ;this should eliminate the jumpiness at high rpm where one 0.1ms step > 100rpm
                     2095  ;
                     2096  ;Multiply rpmk x 100 then do 32/16 divide using 1us time
 8418 [02] A664      2097          lda      #100T
 841A [04] CEE19D    2098          ldx      rpmk_f1+1                   ; LSB of multiplicand.
 841D [05] 42        2099          mul
 841E [03] B797      2100          sta      intacc1+3                   ; LSB of result stored.
 8420 [03] BF96      2101          stx   intacc1+2                      ; Carry on stack.
 8422 [02] A664      2102          lda      #100T
 8424 [04] CEE19C    2103          ldx      rpmk_f1                     ; MSB of multiplicand.
 8427 [05] 42        2104          mul
 8428 [03] BB96      2105          add      intacc1+2                   ; Add in carry from LSB.
 842A [03] B796      2106          sta      intacc1+2           ; MSB of result.
 842C [03] 2401      2107          bcc      nox_of
 842E [01] 5C        2108          incx
                     2109  nox_of:
 842F [03] BF95      2110          stx      intacc1+1
 8431 [03] 3F94      2111          clr      intacc1
                     2112  ;rpmk x 100 now dividend
                     2113  ;make iTime the divisor
 8433 [05] 4EA098    2114          mov      tmp13,intacc2
 8436 [05] 4EA199    2115          mov      tmp14,intacc2+1
 8439 [05] CD9BE0    2116          jsr      udvd32         ; 32/16 divide
                     2117  
 843C [03] B697      2118          lda      intacc1+3           ; get 8-bit RPM result
 843E [03] 2001      2119          bra      rpmCalcDone
                     2120  
                     2121  rpmCalcZero:
 8440 [01] 4F        2122          clra
                     2123  
                     2124  rpmCalcDone:
 8441 [03] B74D      2125          sta       rpm
                     2126  
                     2127  ***************************************************************************
                     2128  ** First, check RPM value to determine if we are cranking or running,
                     2129  ** then calculate the appropriate pulse width.
                     2130  ***************************************************************************
                     2131  CalcPWs:
 8443 [03] B64D      2132          lda     rpm
 8445 [04] C1E82B    2133          cmp     crankRPM_f           ; Check if we are cranking,
 8448 [03] 2209      2134          bhi     runIt
 844A [05] 066706    2135          brset    cant_crank,EnhancedBits2,runIt      ; don't allow reentry
                     2136                                                       ; to crank mode while
                     2137                                                       ; running
                     2138  crankIt:
 844D [05] CD8A2E    2139          jsr     crankingMode
 8450 [03] CC8848    2140          jmp     checkRPMsettings
                     2141  runIt:
                     2142  
                     2143  ;--------------------------------------------------------------------------
                     2144  ; Approximate ranges of the various terms of the equation:
                     2145  ;
                     2146  ;   gammae   90-150, highest when cold, but really of no consequence.
                     2147  ;   vecurr   10-200, biggest range with blown motors.
                     2148  ;   kPa      20-250, biggest range with blown motors.
                     2149  ;   reqFuel  50-150, lowest values with big injectors, blown motors again.
                     2150  ;   battcorr ~100, assume it's constant.
                     2151  ;
                     2152  ; So calc VEcurr * reqFuel before * kPa to minimize overflow.
                     2153  
                     2154  ; calc 'PW1' from table 1
 8453 [04] 1569      2155       bclr    page2,EnhancedBits4     ; set table 1
                     2156  
                     2157  ;*   brclr   UseVE3,EnhancedBits,Do_VE1_4_Now        ; Jump if aren't using VE table 3
                     2158  ;*        jmp     VE3_Table
                     2159  Do_VE1_4_Now:
                     2160  
                     2161  ***************************************************************************
                     2162  ***************************************************************************
                     2163  **
                     2164  **  VE 3-D Table Lookup
                     2165  **
                     2166  **   This is used to determine value of VE based on RPM and MAP
                     2167  **   The table looks like:
                     2168  **
                     2169  **      105 +....+....+....+....+....+....+....+
                     2170  **          ....................................


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 17
MC68HC908GP32 User Bootloader


                     2171  **      100 +....+....+....+....+....+....+....+
                     2172  **                     ...
                     2173  **   KPA                 ...
                     2174  **                         ...
                     2175  **       35 +....+....+....+....+....+....+....+
                     2176  **          5    15   25   35   45   55   65   75 RPM/100
                     2177  **
                     2178  **
                     2179  **  Steps:
                     2180  **   1) Find the bracketing KPA positions via tableLookup, put index in
                     2181  **       tmp8 and bounding values in tmp9(kpa1) and tmp10(kpa2)
                     2182  **   2) Find the bracketing RPM positions via tableLookup, store index
                     2183  **       in tmp11 and bounding values in tmp13(rpm1) and tmp14(rpm2)
                     2184  **   3) Using the VE table, find the table VE values for tmp15=VE(kpa1,rpm1),
                     2185  **       tmp16=VE(kpa1,rpm2), tmp17 = VE(kpa2,rpm1), and tmp18 = VE(kpa2,rpm2)
                     2186  **   4) Find the interpolated VE value at the lower KPA range :
                     2187  **       x1=rpm1, x2=rpm2, y1=VE(kpa1,rpm1), y2=VE(kpa1,rpm2) - put in tmp19
                     2188  **   5) Find the interpolated VE value at the upper KPA range :
                     2189  **       x1=rpm1, x2=rpm2, y1=VE(kpa2,rpm1), y2=VE(kpa2,rpm2) - put in tmp11
                     2190  **   6) Find the final VE value using the two interpolated VE values:
                     2191  **       x1=kpa1, x2=kpa2, y1=VE_FROM_STEP_4, y2=VE_FROM_STEP_5
                     2192  **
                     2193  ***************************************************************************
                     2194  
                     2195  ***************************************************************************
                     2196  ** JSM changed it to just be one routine per page. Maybe Eric will kill
                     2197  ** me, but we've plenty of flash and I'm obviously a bit lazy.
                     2198  ***************************************************************************
                     2199  
                     2200  VE1_LOOKUP:                          ; ALWAYS page 1
 8455 [01] 8C        2201          clrh
 8456 [01] 5F        2202          clrx
                     2203  
                     2204  ;*        lda     feature9_f
                     2205  ;*        bit     #MassAirFlwb
                     2206  ;*        beq     VE1_LOOKUP_PW1          ; Are we using a MAF on pin X7?
                     2207  ;*        lda     o2_fpadc                ; Using MAF thats on pin X7
                     2208  ;*        bra     VE1_STEP_1
                     2209  
                     2210  VE1_LOOKUP_PW1:
                     2211  ;*        lda     config13_f1
                     2212  ;*        bit     #c13_cs
                     2213  ;*        bne     VE1_AN                     ; Using Alpha_n?
 8457 [03] B6CB      2214          lda     kpa                  ; SD, so use kpa for load
                     2215  ;*        bra     VE1_STEP_1
                     2216  
                     2217  ;*VE1_AN:
                     2218  ;*        lda     tps                     ; Alpha_n
                     2219  
                     2220  VE1_STEP_1:
 8459 [03] B7DB      2221          sta     kpa_n
 845B [03] 45E1AA    2222          ldhx    #KPARANGEVE_f1
 845E [04] 3594      2223          sthx    tmp1
 8460 [02] A60B      2224          lda     #$0b                 ; 12x12
 8462 [03] B796      2225          sta     tmp3
 8464 [03] B6DB      2226          lda     kpa_n
 8466 [03] B797      2227          sta     tmp4
 8468 [05] CD9B48    2228          jsr     tableLookup
 846B [03] B694      2229          lda     tmp1
 846D [03] B695      2230          lda     tmp2
 846F [05] 4E989B    2231          mov     tmp5,tmp8            ; Index
 8472 [05] 4E949C    2232          mov     tmp1,tmp9            ; X1
 8475 [05] 4E959D    2233          mov     tmp2,tmp10           ; X2
                     2234  
                     2235  VE1_STEP_2:
 8478 [03] 45E19E    2236          ldhx    #RPMRANGEVE_f1
 847B [04] 3594      2237          sthx    tmp1
 847D [04] 6E0B96    2238          mov     #$0b,tmp3            ; 12x12
 8480 [05] 4E4D97    2239          mov     rpm,tmp4
 8483 [05] CD9B48    2240          jsr     tableLookup
 8486 [05] 4E989E    2241          mov     tmp5,tmp11           ; Index
 8489 [05] 4E94A0    2242          mov     tmp1,tmp13           ; X1
 848C [05] 4E95A1    2243          mov     tmp2,tmp14           ; X2
                     2244  
                     2245  VE1_STEP_3:
 848F [01] 8C        2246          clrh
 8490 [02] AE0C      2247          ldx     #$0c                 ; 12x12
 8492 [03] B69B      2248          lda     tmp8
 8494 [01] 4A        2249          deca
 8495 [05] 42        2250          mul
 8496 [03] BB9E      2251          add     tmp11
 8498 [01] 4A        2252          deca
 8499 [01] 97        2253          tax
 849A macro          2254          VE1X
 849A [04] C60105    2255   LDA PAGE  
 849D [02] A101      2256   CMP #01T  
 849F [03] 2605      2257   BNE VE1XF  
 84A1 [04] D60112    2258   LDA VE_R,X  
 84A4 [03] 2003      2259   BRA VE1XC  
 84A6 [04] D6E100    2260  VE1XF: LDA VE_F1,X  
                     2261  VE1XC:  
 84A9 [03] B7A2      2262          sta     tmp15
 84AB [01] 5C        2263          incx
 84AC macro          2264          VE1X
 84AC [04] C60105    2265   LDA PAGE  
 84AF [02] A101      2266   CMP #01T  
 84B1 [03] 2605      2267   BNE VE1XF  
 84B3 [04] D60112    2268   LDA VE_R,X  
 84B6 [03] 2003      2269   BRA VE1XC  
 84B8 [04] D6E100    2270  VE1XF: LDA VE_F1,X  
                     2271  VE1XC:  
 84BB [03] B7A3      2272          sta     tmp16
 84BD [02] AE0C      2273          ldx     #$0c                 ; 12x12
 84BF [03] B69B      2274          lda     tmp8
 84C1 [05] 42        2275          mul
 84C2 [03] BB9E      2276          add     tmp11
 84C4 [01] 4A        2277          deca
 84C5 [01] 97        2278          tax
 84C6 macro          2279          VE1X
 84C6 [04] C60105    2280   LDA PAGE  
 84C9 [02] A101      2281   CMP #01T  
 84CB [03] 2605      2282   BNE VE1XF  
 84CD [04] D60112    2283   LDA VE_R,X  
 84D0 [03] 2003      2284   BRA VE1XC  
 84D2 [04] D6E100    2285  VE1XF: LDA VE_F1,X  
                     2286  VE1XC:  
 84D5 [03] B7A4      2287          sta     tmp17
 84D7 [01] 5C        2288          incx
 84D8 macro          2289          VE1X
 84D8 [04] C60105    2290   LDA PAGE  
 84DB [02] A101      2291   CMP #01T  
 84DD [03] 2605      2292   BNE VE1XF  
 84DF [04] D60112    2293   LDA VE_R,X  
 84E2 [03] 2003      2294   BRA VE1XC  
 84E4 [04] D6E100    2295  VE1XF: LDA VE_F1,X  
                     2296  VE1XC:  
 84E7 [03] B7A5      2297          sta     tmp18
                     2298  
 84E9 [05] CD8A8B    2299          jsr     VE_STEP_4
 84EC [05] 4E9952    2300          mov     tmp6,vecurr
                     2301  
                     2302  ;*   jmp     No_VE3
                     2303  
                     2304  ;*VE3_Table:
                     2305  ;*   lda     VE3Timer
                     2306  ;*        beq     VE3_LOOKUP


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 18
MC68HC908GP32 User Bootloader


                     2307  ;*   jmp     Do_VE1_4_Now
                     2308  ***************************************************************************
                     2309  *** VE Table 3 Look up
                     2310  ***************************************************************************
                     2311  
                     2312  ;*VE3_LOOKUP:                                ; ALWAYS page 3
                     2313  ;*        clrh
                     2314  ;*        clrx
                     2315  
                     2316  ;*        lda     feature9_f
                     2317  ;*        bit     #MassAirFlwb
                     2318  ;*        beq     VE3_LOOKUP_PW1          ; Are we using a MAF on pin X7?
                     2319  
                     2320  ;*        lda     o2_fpadc                ; Using MAF thats on pin X7
                     2321  ;*        bra     VE3_STEP_1
                     2322  
                     2323  ;*VE3_LOOKUP_PW1:
                     2324  ;*        lda     config13_f1
                     2325  ;*        bit     #c13_cs
                     2326  ;*        bne     VE3_AN                     ; if alpha-n
                     2327  
                     2328  ;*        lda     kpa                        ; SD, so use kpa for load
                     2329  ;*        bra     VE3_STEP_1
                     2330  ;*VE3_AN:
                     2331  ;*        lda     tps
                     2332  
                     2333  ;*VE3_STEP_1:
                     2334  ;*        sta     kpa_n
                     2335  ;*        ldhx    #KPARANGEVE_f3
                     2336  ;*        sthx    tmp1
                     2337  ;*        lda     #$0b                       ; 12x12
                     2338  ;*        sta     tmp3
                     2339  ;*        lda     kpa_n
                     2340  ;*        sta     tmp4
                     2341  ;*        jsr     tableLookup
                     2342  ;*        lda     tmp1
                     2343  ;*        lda     tmp2
                     2344  ;*        mov     tmp5,tmp8          ; Index
                     2345  ;*        mov     tmp1,tmp9          ; X1
                     2346  ;*        mov     tmp2,tmp10         ; X2
                     2347  
                     2348  ;*VE3_STEP_2:
                     2349  ;*        ldhx    #RPMRANGEVE_f3
                     2350  ;*        sthx    tmp1
                     2351  ;*        mov     #$0b,tmp3          ; 12x12
                     2352  ;*        mov     rpm,tmp4
                     2353  ;*        jsr     tableLookup
                     2354  ;*        mov     tmp5,tmp11         ; Index
                     2355  ;*        mov     tmp1,tmp13         ; X1
                     2356  ;*        mov     tmp2,tmp14         ; X2
                     2357  
                     2358  ;*VE3_STEP_3:
                     2359  
                     2360  ;*        clrh
                     2361  ;*        ldx     #$0c                       ; 12x12
                     2362  ;*        lda     tmp8
                     2363  ;*        deca
                     2364  ;*        mul
                     2365  ;*        add     tmp11
                     2366  ;*        deca
                     2367  ;*        tax
                     2368  ;*        VE5X
                     2369  ;*        sta     tmp15
                     2370  ;*        incx
                     2371  ;*        VE5X
                     2372  ;*        sta     tmp16
                     2373  ;*        ldx     #$0c                       ; 12x12
                     2374  ;*        lda     tmp8
                     2375  ;*        mul
                     2376  ;*        add     tmp11
                     2377  ;*        deca
                     2378  ;*        tax
                     2379  ;*        VE5X
                     2380  ;*        sta     tmp17
                     2381  ;*        incx
                     2382  ;*        VE5X
                     2383  ;*        sta     tmp18
                     2384  
                     2385  ;*        jsr     VE_STEP_4
                     2386  ;*        mov     tmp6,vecurr
                     2387  
                     2388  ;*No_VE3:
                     2389  
                     2390  CalcGammaE:
                     2391  
                     2392  ; Now we do all the WUE, TAE and EGO in sequence rather than subroutines
                     2393  ; (ram saving?)
                     2394  
                     2395  ***************************************************************************
                     2396  **  PW Correction Factor subroutines.
                     2397  ***************************************************************************
                     2398  ***************************************************************************
                     2399  **
                     2400  ** Warm-up and After-start Enrichment Section
                     2401  **
                     2402  ** The Warm-up enrichment is a linear interpolated value from WWU (10 points)
                     2403  **  which are placed at different temperatures
                     2404  **
                     2405  ** Method:
                     2406  **
                     2407  ** 1) Perform ordered table search of WWU (using coolant variable) to determine
                     2408  **  which bin.
                     2409  ** 2) Perform linear interpolation to get interpolated warmup enrichment
                     2410  **
                     2411  ** Also, the after-start enrichment value is calculated and applied here - it
                     2412  ** is an added percent value on top of the warmup enrichment, and it is applied
                     2413  ** for the number of ignition cycles specified in AWC. This enrichment starts
                     2414  ** at a value of AWEV at first, then it linearly interpolates down to zero
                     2415  ** after AWC cycles.
                     2416  **
                     2417  ** 3) If (startw, engine is set) then:
                     2418  ** 4) compare if (awc < ASEcount) then:
                     2419  ** 5) x1=0, x2=AWC, y1=AWEV, y2=0, x=ASEcount, y=ASEenrichment
                     2420  ** 6) else clear startw bit in engine
                     2421  **
                     2422  ** During calcs we use tmp31 for result then store at end
                     2423  ***************************************************************************
                     2424  WUE_CALC:
 84EF [05] 03420E    2425          brclr   crank,engine,WUE1  ; already out of crank mode
 84F2 [04] 1342      2426          bclr    crank,engine
 84F4 [03] 3FE4      2427          clr     TCCycles
 84F6 [03] 3FE0      2428          clr     TCAccel
 84F8 [04] 1442      2429          bset    startw,engine
 84FA [04] 1642      2430          bset    warmup,engine
 84FC [04] 1F69      2431          bclr    FxdASEDone,EnhancedBits4   ; not done yet
 84FE [03] 3F83      2432          clr     ASEcount
                     2433  WUE1:
 8500 [05] 064206    2434          brset   warmup,engine,WUE1a   ; only run code if in warmup
 8503 [04] 6E64DC    2435          mov     #100T,tmp31           ; ensure wue is 100%
 8506 [03] CC8598    2436          jmp     WUE_DONE
                     2437  WUE1a:
 8509 [03] B6CC      2438          lda     coolant
 850B [02] A1CD      2439          cmp     #205T
 850D [03] 242A      2440          bhs     Warm_Done_Now  ; If coolant is >165F (greater than the max setting)
                     2441  
                     2442  ;Warm_NotDone:


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 19
MC68HC908GP32 User Bootloader


 850F [03] 459E13    2443          ldhx    #WWURANGE
 8512 [04] 3594      2444          sthx    tmp1
 8514 [04] 6E0996    2445          mov     #$09,tmp3
 8517 [03] B6CC      2446          lda     coolant
 8519 [03] B797      2447          sta     tmp4
 851B [05] CD9B48    2448          jsr     tableLookup
                     2449  
 851E [01] 8C        2450          clrh
 851F [03] BE98      2451          ldx     tmp5
 8521 [04] D6E816    2452          lda     WWU_f1,x
 8524 [03] B797      2453          sta     liY2
 8526 [01] 5A        2454          decx
 8527 [04] D6E816    2455          lda     WWU_f1,x
 852A [03] B796      2456          sta     liY1
 852C [03] B6CC      2457          lda     coolant
 852E [03] B798      2458          sta     liX
 8530 [05] CD9B63    2459          jsr     LinInterp
 8533 [03] B699      2460          lda     tmp6
 8535 [03] B7DC      2461          sta     tmp31   ; save result
 8537 [03] 200E      2462          bra     WUE2    ; only end warmup when reached temp
                     2463  ;        cmp     #100T
                     2464  ;        bhi     WUE2
                     2465  
                     2466  ; Outside of warmup range - clear warmup enrichment mode (also ends any ASE)
                     2467  Warm_Done_Now:
 8539 [04] 6E64DC    2468          mov     #100T,tmp31
 853C [04] 1E69      2469          bset    FxdASEDone,EnhancedBits4
 853E [04] 1542      2470          bclr    startw,engine
 8540 [04] 1742      2471          bclr    warmup,engine
                     2472  ;*        brset   REUSE_LED18,outputpins,jWUE_DONE
                     2473  ;*        brset   REUSE_LED18_2,outputpins,jWUE_DONE ; Using led as output 4
 8542 [04] 1502      2474          bclr    wled,portc           ; not when crank sim or if
                     2475                                       ; LED re-used as IRQ indicator
                     2476  jWUE_DONE:
 8544 [03] CC8598    2477          jmp     WUE_DONE
                     2478  WUE2:
                     2479  ;*        brset   REUSE_LED18,outputpins,WUE2_ledskip
                     2480  ;*        brset   REUSE_LED18_2,outputpins,WUE2_ledskip ; Using led as output 4
 8547 [04] 1402      2481          bset    wled,portc
                     2482  WUE2_ledskip:
 8549 [05] 0542F8    2483          brclr   startw,engine,jWUE_DONE
                     2484  
                     2485  ; Added a fixed period of ASE rather than a decaying ASE, after fixed period it
                     2486  ; goes to the normal ASE decay type of ASE
                     2487  
                     2488  
                     2489  ;*        lda     feature10_f5
                     2490  ;*        bit     #ASEHoldb           ; Are we holding the ASE at a fixed percentage?
                     2491  ;*        beq     NormASE_Count
                     2492  ;*        brset   FxdASEDone,EnhancedBits4,NormASE_Count  ; If Fixed ASE done
                     2493  
                     2494  ;*        lda     coolant             ; We are in fixed Accel mode
                     2495  ;*        cmp     CltFixASE_f         ; so are we below the temperature setpoint?
                     2496  ;*        blo     Cont_FixASE
                     2497  ;*        bset    FxdASEDone,EnhancedBits4
                     2498  ;*        bra     NormASE_Count
                     2499  ;*Cont_FixASE:
                     2500  ;*        lda     ASEcount
                     2501  ;*        cmp     TimFixASE_f
                     2502  ;*        blo     Table_ASEStuff      ; Have we passed the Fixed timer yet?
                     2503  
                     2504  ;*        clr     ASEcount            ; Reset ASE count so we do the norm ASE now  ????
                     2505  ;*        bset    FxdASEDone,EnhancedBits4
                     2506  ;*NormASE_Count:
 854C [03] B683      2507          lda     ASEcount
 854E [04] C1E5B2    2508          cmp     awc_f1                       ; Check if ASE period has expired.
 8551 [03] 2443      2509          bhs     WUE3
                     2510  ;*;        bra     Table_ASEStuff
                     2511  ; Table ASE stuff based on coolant temp - PR
                     2512  Table_ASEStuff:
 8553 [05] 4ECC97    2513          mov     coolant,tmp4
 8556 [03] 459E13    2514          ldhx    #WWURANGE
 8559 [04] 3594      2515          sthx    tmp1
 855B [04] 6E0996    2516          mov     #$09,tmp3            ; 10 bits wide
 855E [05] CD9B48    2517          jsr     tableLookup          ; This finds the bins when the
                     2518                                       ; temperatures are set
 8561 [01] 8C        2519          clrh
 8562 [03] BE98      2520          ldx     tmp5
                     2521  
 8564 [04] D6E5A8    2522          lda     ASEVTbl_f,x
 8567 [03] B797      2523          sta     liY2
 8569 [01] 5A        2524          decx
 856A [04] D6E5A8    2525          lda     ASEVTbl_f,x          ; This finds the values for the
                     2526                                       ; ase percentage for the temperature
 856D [03] B796      2527          sta     liY1
 856F [05] 4ECC98    2528          mov     coolant,liX
 8572 [05] CD9B63    2529          jsr     LinInterp            ; tmp6 contains amount of ase
                     2530                                       ; enrichment in percent for this
                     2531                                       ; temperature
                     2532  
 8575 [03] 3F94      2533          clr     liX1
 8577 [04] C6E5B2    2534          lda     AWC_f1
 857A [03] B795      2535          sta     liX2
                     2536  
 857C [03] B699      2537          lda     tmp6                 ; Use the value from the interpolated
                     2538                                       ; table rather than the normal value
 857E [03] B796      2539          sta     liY1
 8580 [03] 3F97      2540          clr     liY2
 8582 [03] 3F98      2541          clr     liX
                     2542  ;*        lda     feature10_f5
                     2543  ;*        bit     #ASEHoldb
                     2544  ;*        beq     NormASE_Interp
                     2545  ;*        brclr   FxdASEDone,EnhancedBits4,All_ASECount
                     2546  ;*NormASE_Interp:
 8584 [05] 4E8398    2547          mov     ASEcount,liX
                     2548  All_ASECount:
 8587 [05] CD9B63    2549          jsr     LinInterp
 858A [03] B699      2550          lda     tmp6
 858C [03] BBDC      2551          add     tmp31
 858E [03] 2402      2552          bcc     aacok
 8590 [02] A6FF      2553          lda     #255T     ; overflowed, rail at 255%
                     2554  aacok:
 8592 [03] B7DC      2555          sta     tmp31
 8594 [03] 2002      2556          bra     WUE_DONE
                     2557  
                     2558  WUE3:
 8596 [04] 1542      2559          bclr    startw,engine                ; ASE period terminated, turn off bit.
                     2560  
                     2561  WUE_DONE:
 8598 [05] 4EDC4C    2562          mov     tmp31,warmcor          ; only store in warmcor after all calcs
                     2563  ***************************************************************************
                     2564  **
                     2565  **  Throttle Position Acceleration Enrichment
                     2566  **
                     2567  **   Method is the following:
                     2568  **
                     2569  **
                     2570  **   ACCELERATION ENRICHMENT:
                     2571  **   If (TPS < TPSlast) goto DECELERATION ENLEANMENT
                     2572  **   If (TPS - TPSlast) > TPSthresh and TPSAEN == 0 {
                     2573  **      Turn on acceleration enrichment.
                     2574  **      1) Set acceleration mode.
                     2575  **      2) Continuously determine rate-of-change of throttle, and
                     2576  **          perform interpolation of TPSAQ values to determine
                     2577  **          acceleration enrichment amount to apply.
                     2578  **   }


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 20
MC68HC908GP32 User Bootloader


                     2579  **   If (TPSACLK > TPSACLKCMP) and TPSAEN is set {
                     2580  **      1) Clear TPSAEN engine bit.
                     2581  **      2) Set TPSACCEL to 0 ms.
                     2582  **      3) Go to EGO Delta Step Check Section.
                     2583  **   }
                     2584  **
                     2585  **
                     2586  **   DECELERATION ENLEANMENT:
                     2587  **   If (TPSlast - TPS) > TPSthresh {
                     2588  **      If TPSAEN == 1 {
                     2589  **         1) TPSACCEL = 0 ms (terminate AE early)
                     2590  **         2) Clear TPSAEN bit in ENGINE
                     2591  **         3) Go to EGO Delta Step
                     2592  **      }
                     2593  **      If RPM > 15 {
                     2594  **         Turn on deceleration fuel cut.
                     2595  **         1) Set TPSACCEL value to TPSDQ
                     2596  **         2) Set TPSDEN bit in ENGINE
                     2597  **         3) Go to EGO Delta Step Check Section
                     2598  **      }
                     2599  **   }
                     2600  **   else {
                     2601  **      If TPSDEN == 1 {
                     2602  **         1) Clear TPSDEN bit in ENGINE
                     2603  **         2) TPSACCEL = 0 ms
                     2604  **         3) Go to EGO Delta Step Check Section
                     2605  **      }
                     2606  **   }
                     2607  **
                     2608  ***************************************************************************
                     2609  TAE_CALC:
                     2610  ;*        lda     feature4_f
                     2611  ;*        bit     #KpaDotSetb
                     2612  ;*        beq     tps_dotty
                     2613  ;*;        brclr   KpaDotSet,feature4,tps_dotty      ; If not in KPA dot mode
                     2614                                               ; jump past KPa settings
                     2615  ;*        bit     #KpaDotBoostb
                     2616  ;*        beq     No_Boost_Chk
                     2617  ;*;        brclr   KpaDotBoost,feature4,No_Boost_Chk; Are we going to stop
                     2618                                               ; accel in boost?
                     2619  ;*        lda     kpa
                     2620  ;*        cmp     #100T
                     2621  ;*        bhi     TAE_CHK_JMP1               ; If KPa above 100 then no
                     2622                                       ; accel deccel enrichment
                     2623  ;*No_Boost_Chk:
                     2624  ;*        lda     feature9_f
                     2625  ;*        bit     #NoAccelASEb                ; Are we Acceling during ASE?
                     2626  ;*        beq     NoASE_Check_Accel
                     2627  ;*        brset   startw,engine,TAE_CHK_JMP1  ; Is After Start Enrichment running?
                     2628  
                     2629  ;*NoASE_Check_Accel:
                     2630  ;*        sei
                     2631  ;*        mov     kpa,tmp1           ; Load kpa into temp1
                     2632  ;*        lda     TPSlast
                     2633  ;*        sta     tmp2
                     2634  ;*        cli
                     2635  ;*        lda     tmp1
                     2636  ;*        cmp     tmp2
                     2637  ;*        bhi     AE_CHK
                     2638  ;*        beq     Dec_Accel
                     2639  ;*        jmp     TDE
                     2640  
                     2641  ;*tps_dotty:
 859B [02] 9B        2642          sei
 859C [05] 4E4794    2643          mov     tps,tmp1
 859F [03] B6D1      2644          lda     TPSlast
 85A1 [03] B795      2645          sta     tmp2
 85A3 [02] 9A        2646          cli
 85A4 [03] B694      2647          lda     tmp1
 85A6 [03] B195      2648          cmp     tmp2
 85A8 [03] 220E      2649          bhi     AE_CHK
 85AA [03] 2703      2650          beq     Dec_Accel
 85AC [03] CC86AD    2651          jmp     TDE
                     2652  
                     2653  Dec_Accel:                               ; Throttle steady but lets check if we have just triggered decel
 85AF [05] 0B4206    2654               brclr   TPSDEN,ENGINE,AE_CHK     ; If we are not decel then check accel threshold
 85B2 [03] CC86AD    2655       jmp     TDE                      ; We are deceling so check decel timers, etc
                     2656  
                     2657  TAE_CHK_JMP1:
 85B5 [03] CC865E    2658          jmp     TAE_CHK_TIME
                     2659  
                     2660  AE_CHK:
 85B8 [04] 1B42      2661          bclr    TPSDEN,ENGINE
 85BA [04] 6E64D6    2662          mov     #100T,TPSfuelCorr
 85BD [03] B095      2663          sub     tmp2
 85BF [03] B7DC      2664          sta     tmp31
                     2665  ;*        lda     feature4_f         ; Are we in TPS or KPA mode?
                     2666  ;*        bit     #KpaDotSetb
                     2667  ;*        beq     tps_ThreshCheck
                     2668  ;*        lda     tmp31
                     2669  ;*        cmp     MAPthresh_f                ; Are we above the Accel
                     2670  ;*                                   ; threshold for MAP?
                     2671  ;*        bhs     AE_SET
                     2672  ;*        brclr   TPSAEN,ENGINE,acc_done_led   ; If we are not in AE mode then jump to end
                     2673  ;*        jmp     TAE_CHK_TIME            ; in AE mode so check timer
                     2674  
                     2675  ;*tps_ThreshCheck:
 85C1 [03] B6DC      2676          lda     tmp31
 85C3 [04] C1E0B2    2677          cmp     TPSthresh_f1         ; Are we above the Accel
                     2678                                       ; threshold for TPS?
 85C6 [03] 2406      2679          bhs     AE_SET
                     2680  
 85C8 [05] 094213    2681          brclr   TPSAEN,ENGINE,acc_done_led   ; If we are not in AE mode then jump to end
 85CB [03] CC865E    2682          jmp     TAE_CHK_TIME
                     2683  AE_SET:
 85CE [05] 084213    2684          brset   TPSAEN,ENGINE,AE_COMP_SHOOT_AMT
                     2685  
                     2686  ; Add in accel enrichment
                     2687  ;*        lda     feature9_f
                     2688  ;*        bit     #RpmAEBased             ; This is a basic AE system that uses
                     2689  ;*        beq     NormalBased_AE          ; RPM rather than dot
                     2690  ;*        ldhx    #RPMbasedrate_f         ; Lets find out the actual AE with respects to RPM
                     2691  ;*        sthx    tmp1
                     2692  ;*        mov     #$03,tmp3
                     2693  ;*        lda     rpm
                     2694  ;*        sta     tmp4
                     2695  ;*        sta     tmp10
                     2696  ;*        jsr     tableLookup             ; Find the rpm bins we are going to use
                     2697  ;*        clrh
                     2698  ;*        ldx     tmp5
                     2699  ;*        lda     RPMAQ_f2,x
                     2700  ;*        sta     liY2
                     2701  ;*        decx
                     2702  ;*        lda     RPMAQ_f2,x
                     2703  ;*        sta     liY1
                     2704  ;*        mov     tmp10,liX
                     2705  ;*        jsr     LinInterp
                     2706  ;*        lda     tmp6
                     2707  ;*        bra     Store_TEA1
                     2708  
                     2709  ;*NormalBased_AE:
                     2710  ;*        lda     feature4_f
                     2711  ;*        bit     #KpaDotSetb
                     2712  ;*        beq     tps_FirstElem
                     2713  ;*        lda     MAPAQ_f                    ; start out using first element
                     2714                                       ; - will determine actual next


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 21
MC68HC908GP32 User Bootloader


                     2715                                       ; time around
                     2716  ;*        bra     Store_TEA1
                     2717  
                     2718  ;*tps_FirstElem:
 85D1 [04] C6E0AD    2719          lda     TPSAQ_f1             ; start out using first element
                     2720                                       ; - will determine actual next
                     2721                                       ; time around
                     2722  
                     2723  Store_TEA1:
 85D4 [03] B74F      2724          sta     TPSACCEL             ; Acceleration percent amount
                     2725                                       ; - used in later calculations
 85D6 [03] B788      2726          sta     Decay_Accel
                     2727  RPMBackAE:
 85D8 [03] 3F81      2728          clr     TPSACLK
 85DA [04] 1842      2729          bset    TPSAEN,ENGINE
 85DC [04] 1B42      2730          bclr    TPSDEN,ENGINE
                     2731  ;*        brset   REUSE_LED19,outputpins,acc_done_led        ; LED already used
                     2732                                                       ; in NEON as coilb
                     2733  ;*        bset    aled,portc
                     2734  acc_done_led:
 85DE [03] CC86F3    2735          jmp     TAE_DONE
                     2736  TAE_CHK_JMP:
 85E1 [03] CC865E    2737          jmp     TAE_CHK_TIME
                     2738  
                     2739  ; First, calculate cold temperature add-on enrichment value from coolant value,
                     2740  ; from -40 degrees to 165 degrees.
                     2741  ;
                     2742  ; Then determine cold temperature multiplier value ACCELMULT (in percent),
                     2743  ; from -40 degrees to 165 degrees.
                     2744  ;
                     2745  ; Next, calculate squirt amount (quantity) for acceleration enrichment
                     2746  ; Find bins (between) for corresponding TPSdot, and linear interpolate
                     2747  ; to find enrichment amount (from TPSAQ). This is continuously
                     2748  ; checked every time thru main loop while in acceleration mode,
                     2749  ; and the highest value is latched and used.
                     2750  ;
                     2751  ; The final acceleration applied is:
                     2752  ;  AE = Alookup(TPSdot) * (ACCELMULT/100) + TPSACOLD
                     2753  
                     2754  AE_COMP_SHOOT_AMT:
                     2755          ; First, the amount based on cold temperatures
 85E4 [03] B64C      2756          lda     warmcor
 85E6 [02] A164      2757          cmp     #100T         ; And if Warm corr = 100?
 85E8 [03] 2731      2758          beq     Warmup_OverAE
 85EA [03] 3F94      2759          clr     liX1                 ; 0 -> - 40 degrees
 85EC [04] 6ECD95    2760          mov     #205T,liX2           ; 165 + 40 degrees (because of
                     2761                                       ; offset in lookup table)
 85EF [04] C6E0B1    2762          lda     TPSACOLD_f1
 85F2 [03] B796      2763          sta     liY1                 ; This is the amount at coldest
 85F4 [03] 3F97      2764          clr     liY2                 ; no enrichment addon at warm
                     2765                                       ; temperature
 85F6 [03] B6CC      2766          lda     coolant
 85F8 [03] B798      2767          sta     liX
 85FA [05] CD9B63    2768          jsr     LinInterp
 85FD [05] 4E99A0    2769          mov     liY,tmp13            ; result - save here temporarily
                     2770  
                     2771  ; Second, find the multiplier (ACCELMULT) amount based on cold temperatures
 8600 [03] 3F94      2772          clr     liX1                 ; 0 -> - 40 degrees
 8602 [04] 6ECD95    2773          mov     #205T,liX2           ; 165 + 40 degrees
 8605 [03] 3F95      2774          clr     tmp2
 8607 [04] C6E0B5    2775          lda     ACMULT_f1
 860A [03] B796      2776          sta     liY1                 ; This is the amount at coldest
 860C [04] 6E6497    2777          mov     #100T,liY2           ; 1.00 multiplier at 165 degrees
 860F [03] B6CC      2778          lda     coolant
 8611 [03] B798      2779          sta     liX
 8613 [05] CD9B63    2780          jsr     lininterp
 8616 [05] 4E99A1    2781          mov     liY,tmp14            ; result - save here temporarily
 8619 [03] 2008      2782          bra     AECarry_OnAE
                     2783  
                     2784  Warmup_OverAE:
 861B [02] A600      2785          lda     #00T                ; If we get here then the warmup = 100 so no need to
 861D [03] B7A0      2786          sta     tmp13               ; Add any cold stuff so bypass it
 861F [02] A664      2787          lda     #100T
 8621 [03] B7A1      2788          sta     tmp14
                     2789  AECarry_OnAE:
                     2790  ;*        lda     feature9_f
                     2791  ;*        bit     #RpmAEBased             ; This is a basic AE system that uses
                     2792  ;*        beq     NotRPMBased             ; engine rpm instead of rate of change of tps
                     2793  ;*        ldhx    #RPMbasedrate_f         ; or map. Amount added is rpm based.
                     2794  ;*        sthx    tmp1
                     2795  ;*        mov     #$03,tmp3
                     2796  ;*        lda     rpm
                     2797  ;*        sta     tmp4
                     2798  ;*        sta     tmp10
                     2799  ;*        jsr     tableLookup             ; Find the rpm bins we are going to use
                     2800  ;*        clrh
                     2801  ;*        ldx     tmp5
                     2802  ;*        lda     RPMAQ_f2,x
                     2803  ;*        sta     liY2
                     2804  ;*        decx
                     2805  ;*        lda     RPMAQ_f2,x
                     2806  ;*        bra     Carry_On_TEA
                     2807  
                     2808  ;*NotRPMBased:
                     2809  ;*        lda     feature4_f
                     2810  ;*        bit     #KpaDotSetb
                     2811  ;*        beq     tps_doty
                     2812  
                     2813  ;*; Now the amount based on MAPdot
                     2814  ;*        ldhx    #MAPdotrate_f
                     2815  ;*        sthx    tmp1
                     2816  ;*        mov     #$03,tmp3
                     2817  ;*        lda     kpa                        ; If not store KPa into last_tps
                     2818  ;*        sub     TPSlast                    ;
                     2819  ;*        sta     tmp4                       ; TPSDOT
                     2820  ;*        sta     tmp10                      ; Save away for later use below
                     2821  ;*        jsr     tableLookup
                     2822  ;*        bra     miss_tps           ; Jump past the tps checks
                     2823  
                     2824  ;*; Now the amount based on TPSdot
                     2825  ;*tps_doty:
 8623 [03] 45E0A1    2826          ldhx    #TPSdotrate
 8626 [04] 3594      2827          sthx    tmp1
 8628 [04] 6E0396    2828          mov     #$03,tmp3
 862B [03] B647      2829          lda     tps
 862D [03] B0D1      2830          sub     TPSlast
 862F [03] B797      2831          sta     tmp4                 ; TPSdot
 8631 [03] B79D      2832          sta     tmp10                        ; Save away for later use below
 8633 [05] CD9B48    2833          jsr     tableLookup
                     2834  miss_tps:
 8636 [01] 8C        2835          clrh
 8637 [03] BE98      2836          ldx     tmp5
                     2837  
                     2838  ;*        lda     feature4_f
                     2839  ;*        bit     #KpaDotSetb
                     2840  ;*        beq     TPS_Accel_AE
                     2841  
                     2842  ;*        lda     MAPAQ_f,x          ;MAP Based DOT
                     2843  ;*        sta     liY2
                     2844  ;*        decx
                     2845  ;*        lda     MAPAQ_f,x
                     2846  ;*        bra     Carry_On_TEA
                     2847  
                     2848  ;*TPS_Accel_AE:
 8639 [04] D6E0AD    2849          lda     TPSAQ_f1,x           ; TPS Based dot
 863C [03] B797      2850          sta     liY2


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 22
MC68HC908GP32 User Bootloader


 863E [01] 5A        2851          decx
 863F [04] D6E0AD    2852          lda     TPSAQ_f1,x
                     2853  
                     2854  Carry_On_TEA:
 8642 [03] B796      2855          sta     liY1
 8644 [05] 4E9D98    2856          mov     tmp10,liX
 8647 [05] CD9B63    2857          jsr     LinInterp
                     2858  
                     2859          ; Apply the cold multiplier
 864A [05] 4E999E    2860          mov     tmp6,tmp11
 864D [03] 3F9F      2861          clr     tmp12
 864F [03] B6A1      2862          lda     tmp14
 8651 [05] CD9BB5    2863          jsr     uMulAndDiv
 8654 [03] B69E      2864          lda     tmp11
 8656 [03] BBA0      2865          add     tmp13                        ; Add on the amount computed in
                     2866                                       ; cold temperature enrich above
 8658 [03] B799      2867          sta     tmp6
 865A [03] B14F      2868          cmp     TPSACCEL
 865C [03] 220A      2869          bhi     Higher_AcJMP
                     2870  
                     2871  ; Check if acceleration done
                     2872  TAE_CHK_TIME:
 865E [05] 0A4209    2873          brset   TPSDEN,ENGINE,RST_ACCJMP
 8661 [03] B681      2874          lda     TPSaclk
 8663 [04] C1E0B3    2875          cmp     TPSASYNC_f1
 8666 [03] 2402      2876          bhs     RST_ACCJMP
                     2877  
                     2878  ; MAP or TPS rate stable now so have we selected to interpolate the
                     2879  ; accel enrichments?
                     2880  ;*        lda     feature8_f
                     2881  ;*        bit     #InterpAcelb
                     2882  ;*        bne     Decay_AE_Aw
                     2883  
                     2884  ;*        lda     feature9_f              ; We are not decaying AE but are we doing RPM based?
                     2885  ;*        bit     #RpmAEBased             ; If we are in rpm AE mode then check
                     2886  ;*        beq     TAE_DONEJ               ; rpm AE value as it may be lower than the
                     2887  ;*        ldhx    #RPMbasedrate_f         ; earlier calculated stuff if rpm has increased.
                     2888  ;*        sthx    tmp1
                     2889  ;*        mov     #$03,tmp3
                     2890  ;*        lda     rpm
                     2891  ;*        sta     tmp4
                     2892  ;*        sta     tmp10
                     2893  ;*        jsr     tableLookup             ; Find the rpm bins we are going to use
                     2894  ;*        clrh
                     2895  ;*        ldx     tmp5
                     2896  ;*        lda     RPMAQ_f2,x
                     2897  ;*        sta     liY2
                     2898  ;*        decx
                     2899  ;*        lda     RPMAQ_f2,x
                     2900  ;*        sta     liY1
                     2901  ;*        mov     tmp10,liX
                     2902  ;*        jsr     LinInterp
                     2903  ;*        lda     tmp6
                     2904  ;*        sta     TPSACCEL                ; Store new AE enrichment
                     2905  ;*TAE_DONEJ:
                     2906  ;*        jmp     TAE_DONE
                     2907  
                     2908  Higher_AcJMP:
 8668 [03] 2028      2909          bra     Higher_Accel
                     2910  
                     2911  RST_ACCJMP:
 866A [03] 202F      2912          bra     RST_ACCEL
                     2913  
                     2914  ;*; Decay the Accel enrichment away to a setpoint in the time period set - Phil
                     2915  ;*Decay_AE_Aw:
 866C [04] C6E0B7    2916          lda     AccelDecay_f
 866F [03] B14F      2917          cmp     TPSACCEL             ; Only do interpolated Decay if
                     2918                                       ; Accel is higher than target point
 8671 [03] 241C      2919          bhs     TAE_DONEJMP
 8673 [03] B797      2920          sta     liY2                 ; Load in the Decay PW value in mS
                     2921                                       ; at the end of the timer
 8675 [03] 3F94      2922          clr     lix1                 ; Acceltimer Start point for
                     2923                                       ; linear interpolater.
 8677 [04] C6E0B3    2924          lda     TPSASYNC_f1
 867A [03] B795      2925          sta     lix2                 ; Stick the max time in lix2 for
                     2926                                       ; linear interpolater.
 867C [03] B688      2927          lda     Decay_Accel
 867E [03] B796      2928          sta     liY1                 ; Load in the actual maximum PW we
                     2929                                       ; calculated fo the Accel to
                     2930                                       ; interpolate from
 8680 [03] B681      2931          lda     TPSaclk
 8682 [03] B798      2932          sta     lix                  ; Actual timer point
 8684 [05] CD9B63    2933          jsr     lininterp            ; Go and work out the value
 8687 [03] B699      2934          lda     tmp6
 8689 [03] B7DC      2935          sta     tmp31                   ; Save true result for a moment
                     2936  
                     2937  ;*        lda     feature9_f
                     2938  ;*        bit     #RpmAEBased             ; If we are in rpm AE mode then check
                     2939  ;*        beq     NormAEMode              ; rpm AE value as it may be lower than the
                     2940  ;*        ldhx    #RPMbasedrate_f         ; Decay value.
                     2941  ;*        sthx    tmp1
                     2942  ;*        mov     #$03,tmp3
                     2943  ;*        lda     rpm
                     2944  ;*        sta     tmp4
                     2945  ;*        sta     tmp10
                     2946  ;*        jsr     tableLookup             ; Find the rpm bins we are going to use
                     2947  ;*        clrh
                     2948  ;*        ldx     tmp5
                     2949  ;*        lda     RPMAQ_f2,x
                     2950  ;*        sta     liY2
                     2951  ;*        decx
                     2952  ;*        lda     RPMAQ_f2,x
                     2953  ;*        sta     liY1
                     2954  ;*        mov     tmp10,liX
                     2955  ;*        jsr     LinInterp
                     2956  ;*        lda     tmp6
                     2957  ;*        cmp     tmp31                   ; Is the RPM value lower than the
                     2958  ;*        blo     StoreTPSACCEL           ; AE value? tmp6 < tmp31 ?
                     2959  
                     2960  ;*NormAEMode:
 868B [03] B6DC      2961          lda     tmp31
                     2962  
                     2963  StoreTPSACCEL:
 868D [03] B74F      2964          sta     TPSACCEL             ; Save decaying accel value
                     2965  TAE_DONEJMP:
 868F [03] CC86F3    2966          jmp     TAE_DONE
                     2967  
                     2968  Higher_Accel:
 8692 [03] B699      2969          lda     tmp6                 ; Replace with this higher value
 8694 [03] B74F      2970          sta     TPSACCEL
 8696 [03] B788      2971          sta     Decay_Accel          ; Decaying Accel value
 8698 [03] CC86F3    2972          jmp     TAE_DONE
                     2973  
                     2974  RST_ACCEL:
 869B [04] 6E64D6    2975          mov     #100T,TPSfuelCorr
 869E [03] 3F4F      2976          clr     TPSACCEL
 86A0 [03] 3F88      2977          clr     Decay_Accel
 86A2 [04] 1942      2978          bclr    TPSAEN,ENGINE
 86A4 [04] 1B42      2979          bclr    TPSDEN,ENGINE
 86A6 [05] 08624A    2980          brset   REUSE_LED19,outputpins,TAE_DONE
 86A9 [04] 1302      2981          bclr    aled,portc           ; not in Neon
 86AB [03] 2046      2982          bra     TAE_DONE
                     2983  
                     2984  ; deaccel
                     2985  TDE:
                     2986  ;*        lda     feature6_f


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 23
MC68HC908GP32 User Bootloader


                     2987  ;*        bit     #NoDecelBoostb             ; Have we selected to use Decel
                     2988                                       ; all the time?
                     2989  ;*        beq     NormDecel
                     2990  ;*        lda     kpa
                     2991  ;*        cmp     DecelKpa_f
                     2992  ;*        bhi     TAE_DONE           ; If KPa above user defined amount
                     2993                                       ; then no decel enrichment
                     2994  
                     2995  NormDecel:
 86AD [05] 0A4229    2996          brset   TPSDEN,ENGINE,CheckDecelT ; If we are already decelin then carry on with it
 86B0 [03] B695      2997          lda     tmp2
 86B2 [03] B094      2998          sub     tmp1
 86B4 [03] B7DC      2999          sta     tmp31
                     3000  ;*        lda     feature4_f         ; Are we in TPS or KPA mode?
                     3001  ;*        bit     #KpaDotSetb
                     3002  ;*        beq     tps_Decell
                     3003  ;*        lda     tmp31
                     3004  ;*        cmp     MAPthresh_f
                     3005  ;*        blo     TDE_CHK_DONE
                     3006  ;*        brclr   TPSAEN,ENGINE,TDE_CHK_FUEL_CUT
                     3007  ;*        bra     Clear_Decel
                     3008  
                     3009  tps_Decell:
 86B6 [03] B6DC      3010          lda     tmp31
 86B8 [04] C1E0B2    3011          cmp     TPSthresh_f1
 86BB [03] 252A      3012          blo     TDE_CHK_DONE
 86BD [05] 09420D    3013          brclr   TPSAEN,ENGINE,TDE_CHK_FUEL_CUT
                     3014  
                     3015  Clear_Decel:
 86C0 [04] 6E64D6    3016          mov     #100T,TPSfuelCorr
 86C3 [03] 3F4F      3017          clr     TPSACCEL
 86C5 [03] 3F88      3018          clr     Decay_Accel
 86C7 [04] 1942      3019          bclr    TPSAEN,ENGINE
 86C9 [04] 1B42      3020          bclr    TPSDEN,ENGINE
                     3021  ;*        brset   REUSE_LED19,outputpins,TAE_DONE
                     3022  ;*        bclr    aled,portc         ; not in Neon
 86CB [03] 2026      3023          bra     TAE_DONE
                     3024  
                     3025  TDE_CHK_FUEL_CUT:
 86CD [03] B64D      3026          lda     rpm
 86CF [02] A10F      3027          cmp     #15T                 ; Only active above 1500
 86D1 [03] 2520      3028          blo     TAE_DONE
 86D3 [04] 1A42      3029          bset    TPSDEN,ENGINE
 86D5 [04] 1942      3030          bclr    TPSAEN,ENGINE
 86D7 [03] 3F81      3031          clr     TPSaclk
                     3032  
                     3033  CheckDecelT:                         ; New decel timer
 86D9 [04] C6E0B4    3034          lda     TPSDQ_f1
 86DC [03] B7D6      3035          sta     TPSfuelCorr
 86DE [03] B681      3036          lda     TPSaclk                 ; Use accel timer for decel timer
 86E0 [04] C1E0B3    3037          cmp     TPSASYNC_f1
                     3038  ;*    ;    cmp     #2T                     ; Have we deceled for 200mSec?
 86E3 [03] 24DB      3039          bhs     Clear_Decel
                     3040  
                     3041  ;*        brset   REUSE_LED19,outputpins,TAE_DONE
                     3042  ;*        bclr    aled,portc         ; not in Neon
 86E5 [03] 200C      3043          bra     TAE_DONE
                     3044  
                     3045  TDE_CHK_DONE:
 86E7 [05] 0B4209    3046          brclr   TPSDEN,ENGINE,TAE_DONE
 86EA [04] 1B42      3047          bclr    TPSDEN,ENGINE
 86EC [04] 6E64D6    3048          mov     #100T,TPSfuelCorr
 86EF [03] 3F4F      3049          clr     TPSACCEL
 86F1 [03] 3F88      3050          clr     Decay_Accel
                     3051  
                     3052  TAE_DONE:
                     3053  
                     3054  ***************************************************************************
                     3055  **
                     3056  **  Exhaust Gas Oxygen Sensor Measurement Section
                     3057  **
                     3058  **   Steps are the following:
                     3059  **
                     3060  **   If EGOdelta = 0                                 then skipo2
                     3061  **   If KPA > 100                                    then skipo2
                     3062  **   If RPM < ego_rpm                                then skipo2
                     3063  **   If TPSAEN in ENGINE or TPSDEN in ENGINE are set then skipo2
                     3064  **   If coolant < EGOtemp                            then skipo2
                     3065  **   If sech = 0 and secl < 30 seconds               then skipo2
                     3066  **     (skip first 30 seconds)
                     3067  **   If TPS > 3.5 volts                              then skipo2
                     3068  **
                     3069  **   If EGOcount > EGOcountcmp {
                     3070  **      EGOcount = 0
                     3071  **      If EGO > 26 (counts, or 0.5 Volts) then (rich) {
                     3072  **         tpm = EGOcurr - EGOdelta
                     3073  **         if tpm >= EGOlimit then EGOcorr = tpm
                     3074  **         return
                     3075  **      }
                     3076  **      else (lean) {
                     3077  **         tpm = EGOcorr + EGOdelta
                     3078  **         if tpm > EGOlimit then EGOcorr = tpm
                     3079  **         return
                     3080  **      }
                     3081  **   }
                     3082  **
                     3083  **   skipo2:
                     3084  **   EGOcorr = 100%
                     3085  **
                     3086  ***************************************************************************
                     3087  
                     3088  EGO_CALC:
                     3089  ;*         lda     feature3_f
                     3090  ;*         bit     #WaterInjb
                     3091  ;*         beq     no_ego_w_chk
                     3092  ;*;        brclr   WaterInj,feature3,no_ego_w_chk
                     3093  ;*        brset   water,porta,SKIP_ALL_O2    ; if water injection on
                     3094                                       ; skip both O2 checks
                     3095  ;*no_ego_w_chk:
                     3096  ;*        brset   NosSysOn,EnhancedBits,SKIP_ALL_O2; If NOS running then no
                     3097                                       ;O2 checks
 86F3 [05] 046612    3098          brset   OverRun,EnhancedBits,SKIP_ALL_O2; Skip O2 if in Overrun mode
 86F6 [04] C6E192    3099          lda     EGOdelta_f           ; No delta means open loop.
 86F9 [03] 270B      3100          beq     SkipO2JMP
                     3101  
                     3102  ;*         lda     feature3_f
                     3103  ;*         bit     #KPaTpsOpenb
                     3104  ;*         beq     throttle_check
                     3105  ;*;        brclr KPaTpsOpen,feature3,throttle_check  ; 0 = throttle do
                     3106                                       ; throttle check  1 = KPa
 86FB [04] C6E040    3107          lda   kpaO2_f                        ; In KPa mode so is it higher
                     3108                                       ; than setpoint?
 86FE [03] 2711      3109          beq   SETAFR_UP                      ; If its zero dont check it as
                     3110                                       ; no open loop
 8700 [03] B1CB      3111          cmp   kpa
 8702 [03] 2504      3112          blo   SKIP_ALL_O2            ; If it is dont check O2
                     3113  No_KPA_Check:
 8704 [03] 200B      3114          bra   SETAFR_UP
                     3115  
                     3116  ;*throttle_check:
                     3117  ;*     lda     tpsO2_f               ; Throttle position setpoint
                     3118                                       ; check for open loop
                     3119  ;*          beq     SETAFR_UP                ; If its zero dont check it
                     3120                                       ; as no open loop
                     3121  ;*     cmp     tps                   ; Load in TPS
                     3122  ;*     blo     SKIP_ALL_O2


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 24
MC68HC908GP32 User Bootloader


                     3123  ;*          bra     SETAFR_UP
                     3124  
                     3125  SkipO2JMP:
 8706 [03] 204B      3126           bra    SKIPO2A
                     3127  
                     3128  SKIP_ALL_O2:                         ; Skip both O2 checks
 8708 [02] A664      3129           lda    #100T
 870A [03] B74A      3130           sta    EGOCorr
 870C [03] B75E      3131           sta    EgoCorr2
 870E [03] CC8791    3132           jmp    EGOALL_DONE
                     3133  
                     3134  SETAFR_UP:
                     3135  ;*         lda     feature3_f
                     3136  ;*         bit     #TargetAFRb
                     3137  ;*         bne     CheckVE1
                     3138  ;*;        brset   TargetAFR,feature3,CheckVE1       ; Target AFR?
                     3139  
                     3140  ;*Re_CheckTarg:
                     3141  ;*         lda     feature6_f
                     3142  ;*         bit     #TargetAFR3b
                     3143  ;*         bne     CheckVE3
                     3144  ;*;        brset   TargetAFR3,feature6,CheckVE3
                     3145  ;*        jmp     SETAFRNORMAL
                     3146  
                     3147  ;*CheckVE1:
                     3148  ;*         brset  useVE3,EnhancedBits,Re_CheckTarg; Are we are using VE3
                     3149  ;*                                           ; at present if so check
                     3150  ;*                                           ; if targets needed?
                     3151  ;*         bra    SETAFRTABLE
                     3152  
                     3153  ;*CheckVE3:
                     3154  ;*         brset  useVE3,EnhancedBits,SETAFRTABLE    ; If were not running in
                     3155                                               ; VE3 then no targets
                     3156  
                     3157  ;*SETAFRNORMAL:                              ; Normal setting for AFR
                     3158  ;*        lda     O2targetV_f
                     3159  ;*        sta     afrTarget
                     3160  
                     3161  ;*SETAFRTABLE:                               ; AFR Table value is already in
                     3162                                       ; afrTarget
 8711 [03] B649      3163          lda     ego
 8713 [03] B7DD      3164          sta     tmp32                        ; Make tmp32 = the ego raw adc
                     3165                                       ; in narrow band or non AFR target mode
                     3166  
                     3167  AFTERAFRSET:
 8715 [05] 0842F0    3168          brset   TPSAEN,ENGINE,Skip_ALL_O2
 8718 [05] 0A42ED    3169          brset   TPSDEN,ENGINE,Skip_ALL_O2
                     3170  ;*        brset   Traction,EnhancedBits2,Skip_ALL_O2
                     3171  
 871B [03] B680      3172          lda     sech
 871D [03] 2606      3173          bne     chk_o2_lag           ; if high seconds set then we
                     3174                                       ; can check o2
 871F [03] B640      3175          lda     secl
 8721 [02] A11E      3176          cmp     #30T                 ; 30 seconds threshold
 8723 [03] 25E3      3177          blo     Skip_ALL_O2
                     3178  
                     3179  CHK_O2_LAG:
                     3180  ; Check if exceeded lag time - if so then we can modify EGOcorr
 8725 [03] B682      3181          lda     EGOcount
 8727 [04] C1E191    3182          cmp     EGOcountcmp_f
 872A [03] 2509      3183          blo     EGOALL_DONEJMP
                     3184  ; Check if we are over the O2 operating temp
 872C [03] B6CC      3185          lda     coolant
 872E [04] C1E190    3186          cmp     EGOtemp_f
 8731 [03] 2520      3187          blo     SkipO2A
 8733 [03] 2002      3188          bra     Do_The_Ego
                     3189  
                     3190  EGOALL_DONEJMP:
 8735 [03] 205A      3191          bra     EGOALL_DONE
                     3192  
                     3193  Do_The_Ego:
 8737 [03] B64D      3194          lda     rpm                  ; Over EGOrpm we go closed loop.
 8739 [04] C1E1B9    3195          cmp     EGOrpm_f
 873C [03] 2515      3196          blo     SkipO2A
                     3197  
                     3198  ; Check if rich/lean
 873E [03] 3F82      3199          clr     EGOcount
 8740 [03] B6CB      3200          lda     kpa                  ; See if we need to load in a
                     3201                                       ; new Ego Limit
 8742 [04] C1E027    3202          cmp     EgoLimitKPa_f
 8745 [03] 2207      3203          bhi     New_EgoLim
 8747 [04] C6E193    3204          lda     EGOlimit_f           ; Original Ego Limit
 874A [03] B7DC      3205          sta     tmp31
 874C [03] 2005      3206          bra     EgoLim_Done
                     3207  New_EgoLim:
 874E [04] C6E028    3208          lda     EgoLim2_f            ; New Ego Limit
 8751 [03] B7DC      3209          sta     tmp31
                     3210  EgoLim_Done:
                     3211  
                     3212  ;*        lda     config13_f1                ; Check if Narrow-band (bit=0)
                     3213                                       ; or DIY-WB (bit=1)
                     3214  ;*        bit     #c13_o2                    ; Use BIT instead of brset
                     3215                                       ; because outside of zero-page
                     3216  ;*        bne     WBO2TYPE           ; Branch if the bit is set
                     3217  ;*NBO2TYPE:
                     3218  ;*        lda     tmp32                      ; EGO
                     3219  ;*        cmp     afrTarget
                     3220  ;*        blo     O2_IS_LEAN
                     3221  ;*        bra     O2_IS_RICH
                     3222  
                     3223  SkipO2A:                             ; Jmp for Skip O2
 8753 [03] 2034      3224          bra     SkipO2
                     3225  
                     3226  ;*WBO2TYPE:
 8755 [03] B6DD      3227          lda     tmp32
 8757 [03] B159      3228          cmp     afrTarget
 8759 [03] 2217      3229          bhi     O2_IS_LEAN
                     3230  
                     3231  ; rich o2 - lean out EGOcorr
                     3232  O2_IS_RICH:
 875B [02] A664      3233          lda     #100T
 875D [03] B0DC      3234          sub     tmp31                        ; Generate the lower limit rail point
 875F [03] B795      3235          sta     tmp2
 8761 [03] B64A      3236          lda     EGOcorr
 8763 [04] C0E192    3237          sub     EGOdelta_f           ; remove the amount required per step.
 8766 [03] B794      3238          sta     tmp1
 8768 [03] B195      3239          cmp     tmp2
 876A [03] 2521      3240          blo     EGO_DONE             ; railed at EGOlimit value
 876C [03] B694      3241          lda     tmp1
 876E [03] B74A      3242          sta     EGOcorr
 8770 [03] 201B      3243          bra     EGO_DONE
                     3244  
                     3245  ; lean o2 - richen EGOcorr
                     3246  O2_IS_LEAN:
 8772 [02] A664      3247          lda     #100T
 8774 [03] BBDC      3248          add     tmp31                        ; Generate the upper limit rail point
 8776 [03] B795      3249          sta     tmp2
                     3250  
 8778 [03] B64A      3251          lda     EGOcorr
 877A [04] CBE192    3252          add     EGOdelta_f
 877D [03] B794      3253          sta     tmp1
 877F [03] B195      3254          cmp     tmp2
 8781 [03] 220A      3255          bhi     EGO_DONE             ; railed at EGOlimit value
 8783 [03] B694      3256          lda     tmp1
 8785 [03] B74A      3257          sta     EGOcorr
 8787 [03] 2004      3258          bra     EGO_DONE


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 25
MC68HC908GP32 User Bootloader


                     3259  
                     3260  ; reset EGOcorr to 100%
                     3261  SkipO2:
 8789 [02] A664      3262          lda     #100T
 878B [03] B74A      3263          sta     EGOcorr
                     3264  EGO_DONE:
                     3265  ;*        lda       DTmode_f         ; check if DT in use
                     3266  ;*        bit       #alt_i2t2
                     3267  ;*        beq      No_DT_SecondO2
                     3268  ;*        lda     feature12_f2
                     3269  ;*        bit     #SecondO2b
                     3270  ;*        bne     DO_Second_Ego
                     3271  ;*;        brset    SecondO2,feature4,DO_Second_Ego  ; Do we have a second
                     3272                                                          ; O2 sensor?
                     3273  No_DT_SecondO2:
 878D [03] B64A      3274          lda     Egocorr
 878F [03] B75E      3275          sta     Egocorr2
                     3276  EGOALL_DONE:
 8791 [03] CC8794    3277          jmp     EGO_2Done
                     3278  
                     3279  ;Second O2 Sensor runs from Page2 Enrichments
                     3280  
                     3281  ;*DO_Second_Ego:
                     3282  ;*        clr     EGOcount
                     3283  
                     3284  ;*        lda     rpm                        ; Over EGOrpm we go closed loop.
                     3285  ;*        cmp     EGOrpm_f2
                     3286  ;*        blo     SkipO22
                     3287  ;*        lda     coolant
                     3288  ;*        cmp     EGOtemp_f2
                     3289  ;*        blo     SkipO22
                     3290  
                     3291  ;*         lda     feature3_f
                     3292  ;*         bit     #TargetAFRb
                     3293  ;*         bne     Check2VE1
                     3294  ;*;        brset   TargetAFR,feature3,Check2VE1      ; Target AFR?
                     3295  
                     3296  ;*Re_Check2Targ:
                     3297  ;*         lda     feature6_f
                     3298  ;*         bit     #TargetAFR3b
                     3299  ;*         bne     Check2VE3
                     3300  ;*;        brset   TargetAFR3,feature6,Check2VE3
                     3301  ;*        jmp     SETAFRNORMAL2
                     3302  
                     3303  ;*Check2VE1:
                     3304  ;*         brset  useVE3,EnhancedBits,Re_Check2Targ  ; Are we are using
                     3305                                                       ; VE3 at present if
                     3306                                                       ; so check if targets
                     3307                                                       ; needed?
                     3308  ;*         bra    SETAFRTABLE2
                     3309  
                     3310  ;*Check2VE3:
                     3311  ;*         brset  useVE3,EnhancedBits,SETAFRTABLE2   ; If were not running
                     3312                                                       ; in VE3 then no
                     3313                                                       ; targets
                     3314  
                     3315  ;*SETAFRNORMAL2:                             ; Normal setting for AFR
                     3316  ;*        lda     O2targetV_f2
                     3317  ;*        sta     afrTarget
                     3318  
                     3319  ;*SETAFRTABLE2:
                     3320  ;*        lda     o2_fpadc
                     3321  ;*        sta     tmp32
                     3322  
                     3323  ;*AFTERAFRSET2:
                     3324  ;*        lda     kpa                        ; See if we need to load in a
                     3325                                       ; new Ego Limit
                     3326  ;*        cmp     EgoLimitKPa_f
                     3327  ;*        bhi     EgoLim2_New
                     3328  ;*        lda     EGOlimit_f2                ; Original Ego Limit from page 2
                     3329  ;*        sta     tmp31                      ; We can re-use this as its
                     3330                                       ; reset every time
                     3331  ;*        bra     EgoLim2_Done
                     3332  
                     3333  ;*EgoLim2_New:
                     3334  ;*        lda     EgoLim2_f          ; New Ego Limit
                     3335  ;*        sta     tmp31
                     3336  
                     3337  ;*EgoLim2_Done:
                     3338  
                     3339  ;*        lda     config13_f2                ; Check if Narrow-band (bit=0)
                     3340                                       ; or DIY-WB (bit=1)
                     3341  ;*        bit     #c13_o2                    ; Use BIT instead of brset because
                     3342                                       ; outside of zero-page
                     3343  ;*        bne     WBO2TYPE2          ; Branch if the bit is set
                     3344  ;*NBO2TYPE2:
                     3345  ;*        lda     tmp32                      ; ADC from Second O2
                     3346  ;*        cmp     afrTarget
                     3347  ;*        blo     O2_IS_LEANER
                     3348  ;*        bra     O2_IS_RICHER
                     3349  
                     3350  ;*WBO2TYPE2:
                     3351  ;*        lda     tmp32
                     3352  ;*        cmp     afrTarget
                     3353  ;*        bhi     O2_IS_LEANER
                     3354  
                     3355  ; rich o2 - lean out EGOcorr2
                     3356  ;*O2_IS_RICHER:
                     3357  ;*        lda     #100T
                     3358  ;*        sub     tmp31                      ; Generate the lower limit rail point
                     3359  ;*        sta     tmp2
                     3360  ;*        lda     EgoCorr2
                     3361  ;*        sub     EGOdelta_f2
                     3362  ;*        sta     tmp1
                     3363  ;*        cmp     tmp2
                     3364  ;*        blo     EGO_2Done          ; railed at EGOlimit value
                     3365  ;*        lda     tmp1
                     3366  ;*        sta     EgoCorr2
                     3367  ;*EGO_2DoneJMP:
                     3368  ;*        bra     EGO_2Done
                     3369  
                     3370  ;*SkipO22:
                     3371  ;*        lda     #100T
                     3372  ;*        sta     EgoCorr2
                     3373  ;*        bra     EGO_2Done
                     3374  
                     3375  ;*; lean o2 - richen EGOcorr2
                     3376  ;*O2_IS_LEANER:
                     3377  ;*        lda     #100T
                     3378  ;*        add     tmp31                      ; Generate the upper limit rail point
                     3379  ;*        sta     tmp2
                     3380  ;*        lda     EgoCorr2
                     3381  ;*        add     EGOdelta_f2
                     3382  ;*        sta     tmp1
                     3383  ;*        cmp     tmp2
                     3384  ;*        bhi     EGO_2Done          ; railed at EGOlimit value
                     3385  ;*        lda     tmp1
                     3386  ;*        sta     EgoCorr2
                     3387  EGO_2Done:
                     3388  
                     3389  ***************************************************************************
                     3390  ***************************************************************************
                     3391  ***************************************************************************
                     3392  **
                     3393  ** Computation of Fuel Parameters
                     3394  **


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 26
MC68HC908GP32 User Bootloader


                     3395  ** Remainders are maintained for hi-resolution calculations - results
                     3396  **  converted back to 100 microsecond resolution at end.
                     3397  **
                     3398  ** (Warm * Tpsfuelcut)/100 = R1 + rem1/100
                     3399  ** (Barcor * Aircor)/100 = R2 + rem2/100
                     3400  ** ((R1 + rem1/100) * (R2 + rem2/100)) / 100 = R3 + rem3/100
                     3401  ** (EGO * MAP)/100 = R4 + rem4/100
                     3402  ** ((R3 + rem3/100) * (R4 + rem4/100)) /100 = R5 + rem5/100
                     3403  ** (VE * REQ_FUEL)/100 = R6 + rem6/100
                     3404  ** ((R5 + rem5/100) * (R6 + rem6/100))  = R7
                     3405  **
                     3406  **
                     3407  **
                     3408  ** Note: that GAMMAE only includes Warm, Tpsfuelcut, Barocor, and Aircor
                     3409  ** (EGO no longer included)
                     3410  **
                     3411  ** Rationle on ordering: to prevent calculation overflow for boosted
                     3412  ** operations, the variables have been ordered in specific "pairs" in
                     3413  ** the calculation:
                     3414  **   EGO * MAP - when at WOT, EGO is set to 100%,
                     3415  **   so MAP can run up to 255% without overflow
                     3416  **   VE * REQ_FUEL - for boosted applications,
                     3417  **   REQ_FUEL tends to be low (below 10 ms) due to the added fuel
                     3418  **   requirements (i.e. large injectors), so VE entries can be well
                     3419  **   above 100%.
                     3420  **
                     3421  ***************************************************************************
                     3422  
                     3423  
                     3424  
                     3425  WARMACCEL_COMP:
                     3426  
 8794 [05] 4E4C9D    3427          mov     warmcor,tmp10                ; Warmup Correction in tmp10
 8797 [03] 3F9E      3428          clr     tmp11                        ; tmp11 is zero
 8799 [05] 4ED69F    3429          mov     TPSfuelcorr,tmp12    ; tpsfuelcut in tmp12
 879C [03] 3FA0      3430          clr     tmp13                        ; tmp13 is zero
 879E [05] CD9D1B    3431          jsr     Supernorm            ; do the multiply and normalization
 87A1 [05] 4E9DDC    3432          mov     tmp10,tmp31          ; save whole result in tmp31
 87A4 [05] 4E9EDD    3433          mov     tmp11,tmp32          ; save remainder in tmp32
                     3434  
 87A7 [05] 4E509D    3435          mov     barocor,tmp10                ; tmp10 is barometer percent
 87AA [03] 3F9E      3436          clr     tmp11                        ; zero to tmp11
 87AC [05] 4E4B9F    3437          mov     AirCor,tmp12         ; air temp correction % in tmp12
 87AF [03] 3FA0      3438          clr     tmp13                        ; tmp13 is zero
 87B1 [05] CD9D1B    3439          jsr     Supernorm            ; multiply and divide by 100
                     3440                                       ; result in tmp10:tmp11
 87B4 [05] 4EDC9F    3441          mov     tmp31,tmp12          ; move saved tmp31 into tmp12
 87B7 [05] 4EDDA0    3442          mov     tmp32,tmp13          ; move saved tmp32 into tmp13
 87BA [05] CD9D1B    3443          jsr     Supernorm            ; multiply/divide
 87BD [05] 4E9D98    3444          mov     tmp10,tmp5           ; save whole result into tmp5
 87C0 [05] 4E9E99    3445          mov     tmp11,tmp6           ; save remainder into tmp6
                     3446  
                     3447  ;*        lda     DTmode_f           ; Must check the INJ1 GammaE bit,
                     3448  ;*        bit     #alt_i1ge          ; if 0 then set it to 100T to
                     3449  ;*                                   ; remove GammaE.
                     3450  ;*        bne     ld_ve_1
                     3451  ;*        mov     #100T,GammaE
                     3452  ;*        bra     ld_ve_1Done
                     3453  
                     3454  ld_ve_1:
 87C3 [05] 4E9D51    3455          mov     tmp10,GammaE
                     3456  
                     3457  ld_ve_1Done:
 87C6 [05] 4E4A9D    3458          mov     EGOcorr,tmp10                ; closed-loop correction percent
                     3459                                       ; into tmp10
 87C9 [03] 3F9E      3460          clr     tmp11                        ; remainder is zero
                     3461  
                     3462  ;*        brset  hybridAlphaN,feature1,skip_loadcontcomp     ; if hybrid then
                     3463                                                       ; skip AN bypass
                     3464  
                     3465  ;*        lda    config13_f1
                     3466  ;*        bit     #c13_cs
                     3467  ;*        beq     MAFCheck                ; No Alpha but are we using MAF?
                     3468  ;*        bra     LoadContribDone
                     3469  
                     3470  ;*MAFCheck:
                     3471  ;*        lda     feature9_f
                     3472  ;*        bit     #MassAirFlwb
                     3473  ;*        beq     skip_loadcontcomp       ; Are we using a MAF on pin X7?
                     3474  ;*        bra     LoadContribDone
                     3475  
                     3476  ;*skip_loadcontcomp:
 87CB [05] 4ECB9F    3477          mov     kpa,tmp12            ; MAP into tmp12
 87CE [03] 3FA0      3478          clr     tmp13                        ; no remainder
 87D0 [05] CD9D1B    3479          jsr     Supernorm            ; do the multiply and divide
                     3480  
                     3481  ; NORMAL KPA stuff now
                     3482  LoadContribDone:
                     3483  
 87D3 [05] 4E989F    3484          mov     tmp5,tmp12           ; take saved result in tmp5 and put into tmp12
 87D6 [05] 4E99A0    3485          mov     tmp6,tmp13           ; tmp6 into tmp13
 87D9 [05] CD9D1B    3486          jsr     Supernorm            ; mult/div
 87DC [05] 4E9D96    3487          mov     tmp10,tmp3           ; result (whole) save in tmp3
 87DF [05] 4E9E97    3488          mov     tmp11,tmp4           ; remainder result save in tmp4
                     3489  
 87E2 [05] 4E529D    3490          mov     vecurr,tmp10         ; VE into tmp10
 87E5 [03] 3F9E      3491          clr     tmp11                        ; no remainder value for VE
                     3492  
 87E7 [04] C60105    3493          lda     page
 87EA [02] A101      3494          cmp     #01T
 87EC [03] 2705      3495          beq     rqfr1
 87EE [04] C6E194    3496          lda     REQ_FUEL_f1
 87F1 [03] 2003      3497          bra     rqfe1
                     3498  rqfr1:
 87F3 [04] C601A6    3499          lda     REQ_FUEL_r
                     3500  rqfe1:
 87F6 [03] B79F      3501          sta     tmp12                        ; req-fuel into tmp12
 87F8 [03] 3FA0      3502          clr     tmp13                        ; no remainder
 87FA [05] CD9D1B    3503          jsr     Supernorm            ; mult/div
                     3504  
 87FD [05] 4E969F    3505          mov     tmp3,tmp12           ; take previous result and put in tmp12
 8800 [05] 4E97A0    3506          mov     tmp4,tmp13           ; again for remainder
 8803 [05] CD9D1B    3507          jsr     Supernorm            ; multiply/divide
 8806 [05] 4E9D9E    3508          mov     tmp10,tmp11
                     3509  
                     3510  ;*;  jsr     BATT_CORR_CALC          ; result in tmp6  <- f(Vbatt)
                     3511  
                     3512  
                     3513  ***************************************************************************
                     3514  ** For    V E   T A B L E  1 and 3
                     3515  ** Calculation of Battery Voltage Correction for Injector Opening Time
                     3516  **
                     3517  ** Leaves result in liY == tmp6.
                     3518  ** Mangles tmp1-tmp5.
                     3519  **
                     3520  ** Injector open time is implemented as a linear function of
                     3521  **  battery voltage, from 7.2 volts (61 ADC counts) to 19.2 volts (164 counts),
                     3522  **  with 13.2 volts (113 counts) being the nominal operating voltage
                     3523  **
                     3524  ** INJOPEN = injector open time at 13.2 volts in mms
                     3525  ** BATTFAC = injector open adjustment factor 6 volts from 13.2V in mms
                     3526  **
                     3527  **
                     3528  ** + (INJOPEN + BATTFAC)
                     3529  ** +   *
                     3530  ** +                     (INJOPEN)


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 27
MC68HC908GP32 User Bootloader


                     3531  ** +                         *
                     3532  ** +                                       (INJOPEN - BATTFAC)
                     3533  ** +                                               *
                     3534  ** +
                     3535  ** ++++++++++++++++++++++++++++++++++++++++++++++++++++++
                     3536  **           7.2v          13.2v          19.2v
                     3537  **
                     3538  ***************************************************************************
                     3539  
                     3540  BATT_CORR_CALC:
 8809 [01] 8C        3541          clrh
                     3542  BATT_CORR_PW:
 880A [04] 6E3D94    3543          mov     #061T,liX1           ; x1
 880D [04] 6EA495    3544          mov     #164T,liX2           ; x2
 8810 [04] C6E197    3545          lda     InjOpen_f1
 8813 [04] CBE19B    3546          add     battfac_f1
 8816 [03] B796      3547          sta     liY1                 ; y1
 8818 [04] C6E197    3548          lda     injopen_f1
 881B [04] C0E19B    3549          sub     battfac_f1
 881E [03] B797      3550          sta     liY2                 ; y2
 8820 [03] 2A02      3551          bpl     MBFF                 ; y2 < 0, underflow
 8822 [03] 3F97      3552          clr     liY2                 ; Screws up slope, but gives
                     3553                                       ; reasonable result.
                     3554  MBFF:
 8824 [05] 4E4898    3555          mov     batt,liX             ; xInterp
 8827 [05] CD9B63    3556          jsr     LinInterp            ; injector open time in tmp6
                     3557  
                     3558  ***************************************************************************
                     3559  * Check if 300kpa or 400kpa map sensor
                     3560  ***************************************************************************
                     3561  
                     3562  ;*        lda     config11_f1
                     3563  ;*        and     #$03
                     3564  ;*        cmp     #$02                       ; Are we using Turbo Map sensor?
                     3565  ;*        blo     CALC_FINAL    ; skip if 0 or 1
                     3566  
                     3567  ; If we get here we are using non-standard map sensor
                     3568  ; so do kpa * compensation factor to work out larger kpa
                     3569  ; value then add it back to the normal kpa cals later
                     3570  
                     3571  ;*        cbeqa   #2T,mul300
                     3572  ;*        ldx     #KPASCALE400
                     3573  ;*        bra     lcd_cont
                     3574  ;*mul300:
                     3575  ;*        ldx     #KPASCALE300
                     3576  ;*lcd_cont:
                     3577  ;*        lda     tmp11
                     3578  ;*        mul
                     3579  ;*        txa
                     3580  ;*        add     tmp11
                     3581  ;*        bcc     Store_Mod_KPa1
                     3582  ;*        lda     #255T           ; Limit
                     3583  ;*Store_Mod_KPa1:
                     3584  ;*        sta     tmp11
                     3585  
                     3586  
                     3587  ***************************************************************************
                     3588  **       F O R    V E   T A B L E   1 and 3
                     3589  ** Calculation of Final Pulse Width
                     3590  **
                     3591  **  The following equation is evaluated here:
                     3592  **
                     3593  **  tmp20 = tmp6 + TMP11 + TPSACCEL - INJOCFUEL
                     3594  **
                     3595  **  Note that InjOCFuel (injected fuel during injector open and
                     3596  **  close) is currently a constant - eventually it will be a function
                     3597  **  of battery voltage.
                     3598  **
                     3599  ***************************************************************************
                     3600  CALC_FINAL:
                     3601  
 882A [03] B69E      3602          lda     tmp11                        ; From required fuel, above.
 882C [03] 270C      3603          beq     PW_Done                      ; If no calculated pulse, then
                     3604                                       ; don't open at all.
 882E [03] BB99      3605          add     tmp6                 ; from batt correction
 8830 [03] 2506      3606          bcs     MaxPulse
 8832 [03] BB4F      3607          add     TPSACCEL
 8834 [03] 2502      3608          bcs     MaxPulse
 8836 [03] 2002      3609          bra     PW_Done
                     3610  
                     3611  MaxPulse:
 8838 [02] A6FF      3612          lda     #$FF
                     3613  PW_Done:
                     3614  
 883A [03] B7A7      3615          sta     tmp20
                     3616  ;*        lda     feature5_f
                     3617  ;*        bit     #stagedeither
                     3618  ;*        beq     Calc_Final1Done
                     3619  ;*        jsr     CALC_STAGED_PW   ; Do the Staged PW calculations if set
                     3620  ;*Calc_Final1Done:
                     3621  ****************************************************************************
                     3622  
                     3623  
 883C [05] 4EA794    3624       mov     tmp20,tmp1              ; store PW from table 1
                     3625  ;*   lda     DTmode_f
                     3626  ;*   bit     #alt_i2t2
                     3627  ;*   bne     do_dt
 883F [03] CC8842    3628          jmp     both_table1          ; if (inj2=t2) =0 then single table
                     3629  
                     3630  ;*do_dt:
                     3631  ;*; calc 'PW2' from table 2
                     3632  ;*        mov     tmp20,tmp22                ; storage for PW1 whilst doing DT
                     3633  ;*        bset    page2,EnhancedBits4        ; set page2
                     3634  ***************************************************************************
                     3635  ** Maybe lazy, but we have lots of flash, so quicker to have one
                     3636  ** routine per page
                     3637  ***************************************************************************
                     3638  ;*VE2_LOOKUP:                                ; ALWAYS page 2
                     3639   ;*       clrh
                     3640  ;*        clrx
                     3641  
                     3642  ;*        lda     feature9_f
                     3643  ;*        bit     #MassAirFlwb
                     3644  ;*        beq     VE2_LOOKUP_PW1          ; Are we using a MAF on pin X7?
                     3645  ;*        lda     o2_fpadc                ; Using MAF thats on pin X7
                     3646  ;*        bra     VE2_STEP_1
                     3647  
                     3648  ;*VE2_LOOKUP_PW1:
                     3649  ;*        lda     config13_f2
                     3650  ;*        bit     #c13_cs
                     3651  ;*        bne     VE2_AN                     ; if alpha-N
                     3652  ;*        lda     kpa                        ; SD, so use kpa for load
                     3653  ;*        bra     VE2_STEP_1
                     3654  ;*VE2_AN:
                     3655  ;*        lda     tps
                     3656  
                     3657  ;*VE2_STEP_1:
                     3658  ;*        sta     kpa_n
                     3659  ;*        ldhx    #KPARANGEVE_f2
                     3660  ;*        sthx    tmp1
                     3661  ;*        lda     #$0b
                     3662  ;*        sta     tmp3
                     3663  ;*        lda     kpa_n
                     3664  ;*        sta     tmp4
                     3665  ;*        jsr     tableLookup
                     3666  ;*        lda     tmp1


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 28
MC68HC908GP32 User Bootloader


                     3667  ;*        lda     tmp2
                     3668  ;*        mov     tmp5,tmp8          ; Index
                     3669  ;*        mov     tmp1,tmp9          ; X1
                     3670  ;*        mov     tmp2,tmp10         ; X2
                     3671  
                     3672  ;*VE2_STEP_2:
                     3673  ;*        ldhx    #RPMRANGEVE_f2
                     3674  ;*        sthx    tmp1
                     3675  ;*        mov     #$0b,tmp3          ; 12x12
                     3676  ;*        mov     rpm,tmp4
                     3677  ;*        jsr     tableLookup
                     3678  ;*        mov     tmp5,tmp11         ; Index
                     3679  ;*        mov     tmp1,tmp13         ; X1
                     3680  ;*        mov     tmp2,tmp14         ; X2
                     3681  
                     3682  ;*VE2_STEP_3:
                     3683  
                     3684  ;*        clrh
                     3685  ;*        ldx     #$0c                       ; 12x12
                     3686  ;*        lda     tmp8
                     3687  ;*        deca
                     3688  ;*        mul
                     3689  ;*        add     tmp11
                     3690  ;*        deca
                     3691  ;*        tax
                     3692  ;*        VE2X
                     3693  ;*        sta     tmp15
                     3694  ;*        incx
                     3695  ;*        VE2X
                     3696  ;*        sta     tmp16
                     3697  ;*        ldx     #$0c                       ; 12x12
                     3698  ;*        lda     tmp8
                     3699  ;*        mul
                     3700  ;*        add     tmp11
                     3701  ;*        deca
                     3702  ;*        tax
                     3703  ;*        VE2X
                     3704  ;*        sta     tmp17
                     3705  ;*        incx
                     3706  ;*        VE2X
                     3707  ;*        sta     tmp18
                     3708  
                     3709  ;*        jsr     VE_STEP_4
                     3710  ;*        mov     tmp6,vecurr2
                     3711  
                     3712   ;*********** Dual Table CALCULATIONS***********************************
                     3713  ;* ; I think theres only need to do this bit as the rest would have been done in VE1?
                     3714  
                     3715  ;*        mov     warmcor,tmp10              ; Warmup Correction in tmp10
                     3716  ;*        clr     tmp11                      ; tmp11 is zero
                     3717  ;*        mov     tpsfuelcorr,tmp12  ; tpsfuelcut in tmp12
                     3718  ;*        clr     tmp13                      ; tmp13 is zero
                     3719  ;*        jsr     Supernorm          ; do the multiply and normalization
                     3720  ;*        mov     tmp10,tmp31                ; save whole result in tmp31
                     3721  ;*        mov     tmp11,tmp32                ; save remainder in tmp32
                     3722  
                     3723  ;*        mov     barocor,tmp10              ; tmp10 is barometer percent
                     3724  ;*        clr     tmp11                      ; zero to tmp11
                     3725  ;*        mov     AirCor,tmp12               ; air temp correction % in tmp12
                     3726  ;*        clr     tmp13                      ; tmp13 is zero
                     3727  ;*        jsr     Supernorm          ; multiply and divide by 100
                     3728  
                     3729                                       ; result in tmp10:tmp11
                     3730  
                     3731  ;*        mov     tmp31,tmp12                ; move saved tmp31 into tmp12
                     3732  ;*        mov     tmp32,tmp13                ; move saved tmp32 into tmp13
                     3733  ;*        jsr     Supernorm          ; multiply/divide
                     3734  ;*        mov     tmp10,tmp5         ; save whole result into tmp5
                     3735  ;*        mov     tmp11,tmp6         ; save remainder into tmp6
                     3736  
                     3737  ;*        lda     DTmode_f
                     3738  ;*        bit     #alt_i2ge
                     3739  ;*        bne     ld_ve_2                    ; Are we using gammae in Second PW?
                     3740  ;*        mov     #100T,GammaE
                     3741  ;*        bra     ld_ve2_Done
                     3742  
                     3743  ;*ld_ve_2:
                     3744  ;*        mov     tmp10,GammaE
                     3745  ;*ld_ve2_Done:
                     3746  ;*        mov     EGOcorr2,tmp10             ; closed-loop correction percent
                     3747                                       ; into tmp10
                     3748  ;*        clr     tmp11                      ; remainder is zero
                     3749  
                     3750  ;*        brset  hybridAlphaN,feature1,skip_loadccomp2       ; if hybrid then
                     3751                                                       ; skip AN bypass
                     3752  
                     3753  ;*        lda    config13_f2
                     3754  ;*        bit     #c13_cs
                     3755  ;*        beq     skip_loadccomp2      ; Ignore if not alpha-N
                     3756  
                     3757  ;*        lda     feature9_f             ; Using Alhpa-n so
                     3758  ;*        bit     #BaroCorConstb         ; are we adding the KPa factor?
                     3759  ;*        beq     LoadContribDn2
                     3760  
                     3761  ;*skip_loadccomp2:
                     3762  
                     3763  ;*        mov     kpa,tmp12          ; MAP into tmp12
                     3764  ;*        clr     tmp13                      ; no remainder
                     3765  ;*        jsr     Supernorm          ; do the multiply and divide
                     3766  
                     3767  ; NORMAL KPA stuff now
                     3768  ;*LoadContribDn2:
                     3769  ;*        mov     tmp5,tmp12         ; take saved result in tmp5 and put into tmp12
                     3770  ;*        mov     tmp6,tmp13         ; tmp6 into tmp13
                     3771  ;*        jsr     Supernorm          ; mult/div
                     3772  ;*        mov     tmp10,tmp3         ; result (whole) save in tmp3
                     3773  ;*        mov     tmp11,tmp4         ; remainder result save in tmp4
                     3774  
                     3775  ;*        mov     vecurr2,tmp10              ; VE into tmp10
                     3776  ;*        clr     tmp11                      ; no remainder value for VE
                     3777  ;*        lda     page
                     3778  ;*        cmp     #02T
                     3779  ;*        beq     rqfr2
                     3780  ;*        lda     REQ_FUEL_f2
                     3781  ;*        bra     rqfe2
                     3782  ;*rqfr2:
                     3783  ;*        lda     REQ_FUEL_r
                     3784  
                     3785  ;*rqfe2:
                     3786  
                     3787  ;*        sta     tmp12                      ; req-fuel into tmp12
                     3788  ;*        clr     tmp13                      ; no remainder
                     3789  ;*        jsr     Supernorm          ; mult/div
                     3790  
                     3791  ;*        mov     tmp3,tmp12         ; take previous result and put in tmp12
                     3792  ;*        mov     tmp4,tmp13         ; again for remainder
                     3793  ;*        jsr     Supernorm          ; multiply/divide
                     3794  
                     3795  ;*        mov     tmp10,tmp11
                     3796  
                     3797  ;*End_DTCalcs:
                     3798  
                     3799  ;*    ;     jsr     BATT_CORR_CALC           ; result in tmp6
                     3800  
                     3801  ;*          bra     BATT_CORR_CALC2
                     3802  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 29
MC68HC908GP32 User Bootloader


                     3803  
                     3804  ***************************************************************************
                     3805  **            For    V E   T A B L E   2
                     3806  ** Calculation of Battery Voltage Correction for Injector Opening Time
                     3807  **
                     3808  ** Leaves result in liY == tmp6.
                     3809  ** Mangles tmp1-tmp5.
                     3810  **
                     3811  ** Injector open time is implemented as a linear function of
                     3812  **  battery voltage, from 7.2 volts (61 ADC counts) to 19.2 volts (164 counts),
                     3813  **  with 13.2 volts (113 counts) being the nominal operating voltage
                     3814  **
                     3815  ** INJOPEN = injector open time at 13.2 volts in mms
                     3816  ** BATTFAC = injector open adjustment factor 6 volts from 13.2V in mms
                     3817  **
                     3818  **
                     3819  ** + (INJOPEN + BATTFAC)
                     3820  ** +   *
                     3821  ** +                     (INJOPEN)
                     3822  ** +                         *
                     3823  ** +                                       (INJOPEN - BATTFAC)
                     3824  ** +                                               *
                     3825  ** +
                     3826  ** ++++++++++++++++++++++++++++++++++++++++++++++++++++++
                     3827  **           7.2v          13.2v          19.2v
                     3828  **
                     3829  ***************************************************************************
                     3830  
                     3831  ;*BATT_CORR_CALC2:
                     3832  ;*        clrh
                     3833  ;*        mov     #061T,liX1         ; x1
                     3834  ;*        mov     #164T,liX2         ; x2
                     3835  ;*        lda     injopen_f2
                     3836  ;*        add     battfac_f2
                     3837  ;*        sta     liY1                       ; y1
                     3838  ;*        lda     injopen_f2
                     3839  ;*        sub     battfac_f2
                     3840  ;*        sta     liY2                       ; y2
                     3841  ;*        bpl     MBFF2                      ; y2 < 0, underflow
                     3842  ;*        clr     liY2                       ; Screws up slope, but gives
                     3843                                       ; reasonable result.
                     3844  ;*MBFF2:
                     3845  ;*        mov     batt,liX           ; xInterp
                     3846  ;*        jsr     LinInterp          ; injector open time in tmp6
                     3847  
                     3848  ***************************************************************************
                     3849  * Check if 300kpa or 400kpa map sensor
                     3850  ***************************************************************************
                     3851  
                     3852  ;*        lda     config11_f1
                     3853  ;*        and     #$03
                     3854  ;*        cmp     #$02                       ; Are we using Turbo Map sensor?
                     3855  ;*        blo     CALC_FINAL2    ; skip if 0 or 1
                     3856  
                     3857  ; If we get here we are using non-standard map sensor
                     3858  ; so do kpa * compensation factor to work out larger kpa
                     3859  ; value then add it back to the normal kpa cals later
                     3860  
                     3861  ;*        cbeqa   #2T,mul300_2
                     3862  ;*        ldx     #KPASCALE400
                     3863  ;*        bra     lcd_cont2
                     3864  ;*mul300_2:
                     3865  ;*        ldx     #KPASCALE300
                     3866  ;*lcd_cont2:
                     3867  ;*        lda     tmp11
                     3868  ;*        mul
                     3869  ;*        txa
                     3870  ;*        add     tmp11
                     3871  ;*        bcc     Store_Mod_KPa2
                     3872  ;*        lda     #255T           ; Limit
                     3873  ;*Store_Mod_KPa2:
                     3874  ;*        sta     tmp11
                     3875  
                     3876  ***************************************************************************
                     3877  **       F O R    V E   T A B L E   2
                     3878  ** Calculation of Final Pulse Width
                     3879  **
                     3880  **  The following equation is evaluated here:
                     3881  **
                     3882  **  tmp20 = tmp6 + TMP11 + TPSACCEL - INJOCFUEL
                     3883  **
                     3884  **  Note that InjOCFuel (injected fuel during injector open and
                     3885  **  close) is currently a constant - eventually it will be a function
                     3886  **  of battery voltage.
                     3887  **
                     3888  ***************************************************************************
                     3889  ;*CALC_FINAL2:
                     3890  
                     3891  ;*        lda     tmp11                      ; From required fuel, above.
                     3892  ;*        beq     PW2_Done                   ; If no calculated pulse, then
                     3893                                       ; don't open at all.
                     3894  ;*        add     tmp6                       ; from batt correction
                     3895  ;*        bcs     MaxPulse2
                     3896  ;*        add     TPSACCEL
                     3897  ;*        bcs     MaxPulse2
                     3898  ;*        bra     PW2_Done
                     3899  
                     3900  ;*MaxPulse2:
                     3901  ;*        lda     #$FF
                     3902  ;*PW2_Done:
                     3903  ;*        sta     tmp21           ; PW2 temp
                     3904  
                     3905  ;*Calc_Final2Done:
                     3906  ****************************************************************************
                     3907  
                     3908  ;*        mov     tmp22,tmp1         ; When DT done put PW1 back into tmp1
                     3909  
                     3910  ;*PW2_calc:
                     3911  ;*        clr     tmp2
                     3912  ;*        lda     DTmode_f
                     3913  ;*        bit     #alt_i2t2          ; if inj2 is not driven from
                     3914                                       ; table1 then skip
                     3915  ;*        bne     pw2_table2
                     3916  ;*        mov     tmp20,tmp2         ; 'PW' from table 1
                     3917  ;*        bra     checkRPMsettings
                     3918  ;*pw2_table2:
                     3919  ;*        mov     tmp21,tmp2         ; 'PW' from table 2
                     3920  ;*        bra     checkRPMsettings
                     3921  
                     3922  both_table1:
 8842 [03] B6A7      3923          lda     tmp20
 8844 [03] B794      3924          sta     tmp1
 8846 [03] B795      3925          sta     tmp2
                     3926  
                     3927  checkRPMsettings:
                     3928          ; Do all the rpm related stuff here.
                     3929  
                     3930  ;*        brclr  ShiftLight,feature2,ShiftLightDone
                     3931  ;*        lda    feature8_f   ; if spark output E then no shift lights
                     3932  ;*        bit    #spkeopb
                     3933  ;*        bne    ShiftLightDone
                     3934  ;*        ; if rpm < shiftLo  bclr p3_3, bclr p3_4
                     3935  ;*        ; shiftMd = (shiftLo+shiftHi)/2
                     3936  ;*        ; if rpm < shiftMd  bset p3_3, bclr p3_4
                     3937  ;*        ; if rpm < shiftHi  bclr p3_3, bset p3_4
                     3938  ;*        ; otherwise         bset p3_3, bset p3_4


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 30
MC68HC908GP32 User Bootloader


                     3939  ;*;if wheel decoder second input is enabled then lower limit only functions
                     3940  
                     3941  ;*        lda    shiftLo_f
                     3942  ;*        cmp    rpm
                     3943  ;*        bls    shiftLight1
                     3944  ;*        bclr   3,portc
                     3945  ;*        brset  wd_2trig,feature1,shiftLightDone
                     3946  ;*        bclr   4,portc
                     3947  ;*        bra    shiftLightDone
                     3948  ;*shiftLight1:
                     3949  ;*        add    shiftHi_f
                     3950  ;*        rora
                     3951  ;*        cmp    rpm
                     3952  ;*        bls    shiftLight2
                     3953  ;*        bset   3,portc
                     3954  ;*        brset  wd_2trig,feature1,shiftLightDone
                     3955  ;*        bclr   4,portc
                     3956  ;*        bra    shiftLightDone
                     3957  ;*shiftLight2:
                     3958  ;*        lda    shiftHi_f
                     3959  ;*        cmp    rpm
                     3960  ;*        bls    shiftLight3
                     3961  ;*        bclr   3,portc
                     3962  ;*        bset   4,portc
                     3963  ;*        bra    shiftLightDone
                     3964  ;*shiftLight3:
                     3965  ;*        bset   3,portc
                     3966  ;*        brset  wd_2trig,feature1,shiftLightDone
                     3967  ;*        bset   4,portc
                     3968  ;*shiftLightDone:
                     3969  
                     3970  ;*;Hard Cut Rev and Launch checks
                     3971  ;*        bclr    sparkCut,RevLimBits                ; Reset spark cut bit
                     3972  ;*        brclr   LaunchControl,feature2,LaunchDone; Is Launch selected?
                     3973  ;*;Changes to launch system for 025y - JSM
                     3974  ;*        brset   Launch,portd,Reset_VL              ; Button not pressed so
                     3975                                               ; reset variable bit
                     3976  ;*        lda     VlaunchLimit
                     3977  ;*        cmp     #08T                               ; If launch limit higher
                     3978  ;*   bhi     chk_launch_lim                  ; than 800 then it has been set
                     3979  
                     3980  ;if it is currently zero then we are arming the system.
                     3981  ;If in Vlaunch mode we grab current rpm and save that as the limit
                     3982  ;Else, if rpm > LC_flatsel then use flat shift limit
                     3983  ;else use fixed launch limit
                     3984  ;*        lda     feature3_f
                     3985  ;*        bit     #VarLaunchb                     ; Is variable launch wanted,
                     3986  ;*        beq     No_V_Launch_On                  ; if not go to fixed section
                     3987  
                     3988  ;*        lda     rpm                                ; load rpm and set this as limit
                     3989  ;*        bra     str_launch                 ;
                     3990  
                     3991  ;*No_V_Launch_On:
                     3992  ;*        lda     rpm                                ; higher or lower than launch/flat limit
                     3993  ;*        cmp     LC_flatsel_f
                     3994  ;*        blo        set_launch                      ; lower, so launch
                     3995  ;*        lda     N2Odel_flat_f                   ; load flat shift delay
                     3996  ;*        sta     N2Olaunchdel                    ; store into launch/nitrous delay timer
                     3997  ;*        bset    lc_fs,SparkBits                 ; set flatshift mode on
                     3998  ;*        lda     LC_flatlim                 ; higher so use flat shift limit
                     3999  ;*        bra     str_launch
                     4000  
                     4001  ;*set_launch:
                     4002  ;*        lda     N2Odel_launch_f                 ; load launch delay
                     4003  ;*        sta     N2Olaunchdel                    ; store into launch/nitrous delay timer
                     4004  ;*        lda     Launchlimit_f                   ; use launch limit
                     4005  ;*        bra     str_launch
                     4006  
                     4007  ;*Reset_VL:
                     4008  ;*       clra
                     4009  ;*        bclr    lc_fs,SparkBits                 ; make sure flatshift mode off
                     4010  
                     4011  ;*str_launch:
                     4012  ;*        sta     VlaunchLimit                       ; Reset Launch Limit var
                     4013  ;*        bra     LaunchDone                 ; Not in Launch mode so
                     4014  
                     4015  ;*chk_Launch_lim:
                     4016  ;*        lda     tps                                ; Is throttle in right place?
                     4017  ;*        cmp     LC_Throttle_f
                     4018   ;*       blo     LaunchDone                 ; No then no LC
                     4019  
                     4020  ;*        lda     Vlaunchlimit                       ; load up limit
                     4021  ;*        cmp     rpm
                     4022  ;*        blo     Chk_Cuts                   ; We've hit the limiter...
                     4023  ;*LaunchDone:
                     4024  
                     4025  ; ***Over Boost Protection**********************************
                     4026  ;*            lda    Over_B_P_f                      ; load in Over boost KPa value
                     4027  ;*            cmp    #101T
                     4028  ;*            blo    BoostP_Done                     ; If set to less than 100KPa
                     4029                                               ; then no boost protection
                     4030  ;*            cmp    kpa                             ; Is the kpa higher than the
                     4031                                               ; boost safety high limit?
                     4032  ;*            bhi    BoostP_Done
                     4033  ;*            lda    feature5_f
                     4034  ;*            bit    #BoostCutb
                     4035  ;*            beq    B_SparkFuel                  ; Spark Cut Mode?
                     4036  
                     4037  ;*            lda    SparkCutCnt
                     4038  ;*            cmp    SparkCutBNum_f          ; Have we sparked more than
                     4039                                               ; the user defined number?
                     4040  ;*            bhi    B_SparkFuel                     ; Yes so dont cut any more
                     4041                                               ; sparks
                     4042  ;*            bset   sparkCut,RevLimBits             ; No so cut next spark
                     4043  
                     4044  ;*B_SparkFuel:
                     4045  ;*           lda    feature5_f
                     4046  ;*           bit    #BoostCut2b
                     4047  ;*           bne    cutChannels
                     4048  ;*           bra     checkRevsOk
                     4049  ;*BoostP_Done:
                     4050  
                     4051  ;implement fuel cut from rev limiter soft limiter
                     4052  ;*        brset   RevLimHSoft,RevLimBits,Chk_Rev_Cuts
                     4053  
                     4054          ; Hard-cut rev limiter, done here during pulse
                     4055          ; calcs to avoid timing issues if we set pw and
                     4056          ; then reset it a few instructions later.  I was
                     4057          ; seeing "ghost" pulses when this was the case.
                     4058  ;*checkHighLimit:
                     4059  ;*        lda     revLimit_f
                     4060  ;*        beq     checkRevsOk                        ; Zero means no limit
                     4061  ;*        cmp     rpm
                     4062  ;*        bhs     checkRevsOk                        ; We have not hit any
                     4063                                               ; Rev limits
                     4064  
                     4065  ; IF we get here we are in rev limit hard cut mode so check for
                     4066  ; fuel or and spark cut
                     4067  ;*Chk_Rev_Cuts:
                     4068  ;*         lda     feature3_f
                     4069  ;*         bit     #Fuel_SparkHardb               ; Spark cut mode?
                     4070  ;*         beq     FuelCut_C
                     4071  ;*         lda     SparkCutCnt                       ; We are in spark cut only
                     4072                                               ; mode so how many sparks
                     4073                                               ; are we at?
                     4074  ;*         cmp     SparkCutNum_f                     ; User defined spark number


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 31
MC68HC908GP32 User Bootloader


                     4075  ;*         bhi     Fuelcut_C                 ; If spark count higher than
                     4076                                               ; number dont set spark cut bit
                     4077  ;*         bset    sparkCut,RevLimBits               ; Set sparkcut bit
                     4078  
                     4079    ; HARD REV LIMITER FUEL CUT
                     4080  ;*Fuelcut_C:
                     4081  ;*         lda     feature3_f
                     4082  ;*         bit     #FuelSparkCutb                 ; Are we cutting fuel?
                     4083  ;*         bne     cutChannels
                     4084  ;*         bra     checkRevsOk
                     4085  
                     4086  ;*;If we get here we are in Launch control
                     4087  ;*;so check whether spark and or fuel cuts
                     4088  ;*Chk_Cuts:
                     4089  ;*         lda     feature5_f
                     4090  ;*         bit     #Fuel_SparkHLCb
                     4091  ;*         beq     SparkFuel_LC                   ;   Spark cut?
                     4092  
                     4093  ;*         lda     SparkCutCnt                       ; We are in spark cut
                     4094                                               ; mode so how many sparks
                     4095                                               ; are we at?
                     4096  ;*         cmp     SparkCutNLC_f                     ; User defined spark number
                     4097                                               ; for Launch
                     4098  ;*         bhi     SparkFuel_LC                      ; If spark count higher than
                     4099                                               ; number dont set spark cut bit
                     4100  ;*         bset    sparkCut,RevLimBits               ; Set sparkcut bit
                     4101  
                     4102  ;*SparkFuel_LC:
                     4103  ;*         lda     feature5_f                     ; Launch fuel cut?
                     4104  ;*         bit     #FuelSparkLCb
                     4105  ;*         bne     cutChannels
                     4106  ;*         bra     checkRevsOk
                     4107  
                     4108  ;*cutChannels:
                     4109  ;*        clr     tmp1
                     4110  ;*        clr     tmp2
                     4111  ;*        bclr    OverRun,EnhancedBits               ; Reset Over Run Fuel Cut
                     4112  ;*        mov     tmp1,pwcalc1
                     4113  ;*        mov     tmp2,pwcalc2
                     4114  ;*        jmp     spark_lookup                                       ; In fuel cut mode so return
                     4115                                               ; with zeros
                     4116  ;*checkRevsOk:
                     4117  ;*        brclr   Traction,EnhancedBits2,No_Traction_On
                     4118  ;*        lda     TCSparkCut
                     4119  ;*        beq     No_Traction_On                     ; If zero then no spark cut
                     4120  ;*        cmp     SparkCutCnt                        ; In traction mode do we
                     4121                                               ; cut sparks
                     4122  ;*        bls     No_Traction_On
                     4123  ;*        bset    sparkCut,RevLimBits                ; Set sparkcut bit
                     4124  
                     4125  ;*No_Traction_On:
                     4126   ;*       brset   OverRun,EnhancedBits,cutChannels; If Over run fuel cut on
                     4127                                               ; cut fuel
                     4128  
                     4129  ;*; Add in the NOS and Staged PW's here
                     4130  ;*         lda     feature5_f
                     4131  ;*         bit     #stagedeither
                     4132   ;*        bne     Add_to_PWCALC
                     4133  ;*;        brset     staged,feature5,Add_to_PWCALC ; If in Staged mode Add
                     4134                                               ; to PW1+2
                     4135  ;*;        brset     stagedMode,feature5,Add_to_PWCALC; If in Staged mode
                     4136                                               ; Add to PW1+2
                     4137  ;*        brset     Nitrous,feature1,Add_to_PWCALC; If NOS System selected
                     4138                                               ; add to PW1+2
                     4139  
                     4140  ;*        brset     crank,engine,No_TCAccel
                     4141  
                     4142  ;*        lda       tmp1
                     4143  ;*        add       TCAccel
                     4144  ;*        sta       tmp1
                     4145  ;*        lda       tmp2
                     4146  ;*        add       TCAccel                  ; Add in the traction
                     4147                                               ; control enrichments
                     4148  ;*        sta       tmp2
                     4149  ;*No_TCAccel:
                     4150  ;*        mov       tmp1,pwcalc1
                     4151  ;*        mov       tmp2,pwcalc2
                     4152  ;*        jmp       spark_lookup
                     4153  ;*Add_to_PWCALC:
                     4154  ;*        lda       DTmode_f                 ; check if DT in use
                     4155  ;*        bit       #alt_i2t2
                     4156  ;*        beq       Do_Nos_PW1                       ; i2t2=1
                     4157  
                     4158  ;*        lda       feature4_f
                     4159  ;*        bit       #DtNosb
                     4160  ;*        bne       Dont_Nos_PW1
                     4161  ;*;        brset     DtNos,feature4,Dont_Nos_PW1
                     4162  ;*Do_Nos_PW1:
                     4163  ;*        lda       tmp1
                     4164  ;*        add       NosPW                            ; Add Nos PW to pw1
                     4165  ;*        sta       tmp1
                     4166  ;*Dont_Nos_PW1:
                     4167  ;*        brclr     REStaging,EnhancedBits,No_Staging; Staging not running
                     4168                                               ; so dont add PW Staging
                     4169  ;*        lda       pw_staged
                     4170  ;*        sta       tmp1
                     4171  ;*No_Staging:                                        ; Staging not running
                     4172  ;*        lda       feature5_f
                     4173  ;*        bit       #stagedeither
                     4174  ;*        bne       Staging_2_PW          ; If in Staged mode Go to NOS PW2
                     4175  ;*        bra       Staging_Done_PW
                     4176  ;*Staging_2_PW:
                     4177  ;*        brclr     REStaging,EnhancedBits,No_PW2_Staging    ; Staging Mode not
                     4178                                                       ; running so no PW2
                     4179  ;*        lda       pw_staged2
                     4180  ;*        sta       tmp2
                     4181  ;*        bra       Staging_Done_PW
                     4182  ;*No_PW2_Staging:
                     4183  ;*        clr      tmp2                              ; In Staging Mode but not
                     4184                                               ; running so PW2 = 0
                     4185  ;*Staging_Done_PW:
                     4186  ;*        lda       DTmode_f                 ; check if DT in use
                     4187  ;*       bit       #alt_i2t2
                     4188  ;*        beq       Nos_PWCal2                       ; i2t2=1
                     4189  ;*        lda       feature4_f
                     4190  ;*        bit       #DtNosb
                     4191  ;*        beq       Calc_PWs_DONE  ; In DT mode so do we add
                     4192                                ; NosPW to PW2?
                     4193  ;*Nos_PWCal2:
                     4194  ;*        lda       tmp2
                     4195  ;*        add       NosPW                            ; Add Nos PW to pwcalc2
                     4196  ;*        sta       tmp2
                     4197  ;*Calc_PWs_DONE:
                     4198  ;*        brset     crank,engine,No_TCAccel2
                     4199  ;*        lda       tmp1
                     4200  ;*        add       TCAccel
                     4201  ;*        sta       tmp1
                     4202  ;*        lda       tmp2
                     4203  ;*        add       TCAccel                  ; Add in the traction
                     4204                                               ; control enrichments
                     4205  ;*        sta       tmp2
                     4206  ;*No_TCAccel2:
                     4207  ;*        mov       tmp1,pwcalc1
                     4208  ;*        mov       tmp2,pwcalc2
                     4209  ;*        bra       spark_lookup
                     4210  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 32
MC68HC908GP32 User Bootloader


                     4211  ***************************************************************************
                     4212  **
                     4213  ** Check if fixed spark angle - only works if we are tuning this page
                     4214  **
                     4215  ***************************************************************************
                     4216  spark_lookup:
                     4217  ;*                lda     personality_f   ; Are we using a spark mode?
                     4218  ;*                beq     No_Personality
                     4219  
 8848 [04] C60105    4220                  lda     page
 884B [02] A103      4221                  cmp     #3
 884D [03] 2605      4222                  bne     fixed_fl
 884F [04] C601BB    4223                  lda     FixedAngle_r
 8852 [03] 2003      4224                  bra     fxr_c
                     4225  ;*No_Personality:
                     4226  ;*                jmp     CheckSoftLimit  ; No spark Stuff set, so only fuel
                     4227  
 8854 [04] C6E3A9    4228  fixed_fl:       lda     FixedAngle_f
                     4229  fxr_c:
 8857 [02] A103      4230                  cmp     #$03
 8859 [03] 2503      4231                  blo     NOT_FIXED    ; Added this as earlier MT didnt
                     4232                                       ; send a perfect 00T for -10 (use map)
                     4233                 ;; sta     SparkAngle ; else use this fixed advance
 885B [03] CC8961    4234                  jmp     CALC_DELAY
                     4235  NOT_FIXED:
                     4236  ;*                brclr   LaunchOn,RevLimBits,Not_LC_in
                     4237  ;*                brset   lc_fs,SparkBits,nf_flat
                     4238  ;*                lda     LC_LimAngle_f      ; Launch Retard spark Angle
                     4239  ;*              ;;  sta     SparkAngle
                     4240  ;*                jmp     CALC_DELAY
                     4241  ;*nf_flat:
                     4242  ;*                lda     LC_f_limangle_f
                     4243  ;*              ;;  sta     SparkAngle
                     4244  ;*                jmp     CALC_DELAY
                     4245  ;*Not_LC_in:
                     4246  ;*           lda     IdleAdvance_f
                     4247  ;*           cmp     #$03
                     4248  ;*           blo     use_spark_table
                     4249  ;*                ; check if set too high. Users loading old MSQ will have $FF in this byte
                     4250  ;*                cmp     #$F0
                     4251  ;*           bhi     use_spark_table
                     4252  ;*           ; if there's an idle advance set, see if we want to use it
                     4253  ;*           lda     coolant
                     4254  ;*           cmp     IdleCLTThresh_f
                     4255  ;*           blo     idleadv_cond_false
                     4256  ;*           ; check the tps to see if it's ok to use idle advance
                     4257  ;*           lda     tps
                     4258  ;*           cmp     IdleTPSThresh_f
                     4259  ;*           bhi     idleadv_cond_false
                     4260  ;*           ; ok, tps is where it needs to be, what about rpm?
                     4261  ;*           lda     rpm
                     4262  ;*           cmp     IdleRPMThresh_f
                     4263  ;*           bhi     idleadv_cond_false
                     4264  ;*           ; set a bit to say all conditions are met so the timer will start
                     4265  ;*           bset    IdleAdvTimeOK,EnhancedBits6
                     4266  ;*           ; check to see if the time is up
                     4267  ;*           lda     idlAdvHld
                     4268  ;*           cmp     IdleDelayTime_f
                     4269  ;*           blo     use_spark_table
                     4270  ;*           ; ok, rpm is also where it should be, so use IdleAdvance_f
                     4271  ;*           ; if we are here, we don't want the timer going up, so stop it
                     4272  ;*           bclr    IdleAdvTimeOK,EnhancedBits6
                     4273  ;*           lda     IdleAdvance_f
                     4274  ;*           jmp     CALC_DELAY
                     4275  ;*idleadv_cond_false:
                     4276  ;*           bclr    IdleAdvTimeOK,EnhancedBits6
                     4277  ;*           clra
                     4278  ;*           sta     idlAdvHld
                     4279  ;*use_spark_table:
                     4280  ;*                brclr   RevLimSoft,RevLimBits,STTABLELOOKUP
                     4281  ;*                lda     SRevLimAngle       ; Retard spark
                     4282  ;*                jmp     CALC_DELAY
                     4283  ***************************************************************************
                     4284  **
                     4285  **  ST 3-D Table Lookup
                     4286  **
                     4287  **   This is used to determine value of SparkAngle ST based on RPM and MAP
                     4288  **   The table looks like:
                     4289  **
                     4290  **      105 +....+....+....+....+....+....+....+
                     4291  **          ....................................
                     4292  **      100 +....+....+....+....+....+....+....+
                     4293  **                     ...
                     4294  **   KPA                 ...
                     4295  **                         ...
                     4296  **       35 +....+....+....+....+....+....+....+
                     4297  **          5    15   25   35   45   55   65   75 RPM/100
                     4298  **
                     4299  **
                     4300  **  Steps:
                     4301  **   1) Find the bracketing KPA positions via tableLookup,
                     4302  **       put index in tmp8 and bounding values in tmp9(kpa1) and tmp10(kpa2)
                     4303  **   2) Find the bracketing RPM positions via tableLookup, store
                     4304  **       index in tmp11 and bounding values in tmp13(rpm1) and tmp14(rpm2)
                     4305  **   3) Using the ST table, find the table ST values for tmp15=ST(kpa1,rpm1),
                     4306  **       tmp16=ST(kpa1,rpm2), tmp17 = ST(kpa2,rpm1), and tmp18 = ST(kpa2,rpm2)
                     4307  **   4) Find the interpolated ST value at the lower KPA range :
                     4308  **       x1=rpm1, x2=rpm2, y1=ST(kpa1,rpm1), y2=ST(kpa1,rpm2) - put in tmp19
                     4309  **   5) Find the interpolated ST value at the upper KPA range :
                     4310  **       x1=rpm1, x2=rpm2, y1=ST(kpa2,rpm1), y2=ST(kpa2,rpm2) - put in tmp11
                     4311  **   6) Find the final ST value using the two interpolated ST values:
                     4312  **       x1=kpa1, x2=kpa2, y1=ST_FROM_STEP_4, y2=ST_FROM_STEP_5
                     4313  **
                     4314  ***************************************************************************
                     4315  STTABLELOOKUP:
                     4316  ; First, determine if in Speed-density or Alpha-N mode. If in Alpha-N
                     4317  ; mode, then replace the variable "kpa" with the contents of "tps".
                     4318  ; This will not break anything, since this check is performed again when
                     4319  ; multiplying MAP against the enrichments, and the SCI version of the
                     4320  ; variable is MAP, not kpa
                     4321  
                     4322  ;*        lda     feature9_f
                     4323  ;*        bit     #MassAirFlwb
                     4324  ;*        beq     SD_ALPHa_N              ; Are we using a MAF on pin X7?
                     4325  
                     4326  ;*        lda     o2_fpadc                ; Using MAF thats on pin X7
                     4327  ;*        sta     kpa_n
                     4328  ;*        bra     ST_STEP_1
                     4329  
                     4330  ;*SD_ALPHa_N:
                     4331  ;*        lda     config13_f1                ; Check if in speed-density or
                     4332                                       ; Aplha-N mode
                     4333  ;*        bit     #$04                       ; Use BIT instead of brset because
                     4334                                       ; outside of zero-page
                     4335  ;*   beq     Kpa_n_Kpa               ; Branch if the bit is clear
                     4336  
                     4337  ;*        lda     tps                     ; Alpha_N Mode
                     4338  ;*        sta     kpa_n                      ; Added so as KPa can be used
                     4339                                       ; elsewhere in code
                     4340  ;*        bra     ST_STEP_1
                     4341  
                     4342  ;*Kpa_n_Kpa:                              ; Speed Den Mode
 885E [03] B6CB      4343          lda     kpa
 8860 [03] B7DB      4344          sta     kpa_n                        ; Added so as KPa can be used
                     4345  
                     4346  ST_STEP_1:                                   ; else where in code


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 33
MC68HC908GP32 User Bootloader


 8862 [03] 45E39C    4347          ldhx    #KPARANGEST_f1
 8865 [04] 3594      4348          sthx    tmp1
 8867 [02] A60B      4349          lda     #$0b                 ;(12-1)
 8869 [03] B796      4350          sta     tmp3
 886B [03] B6DB      4351          lda     kpa_n
 886D [03] B797      4352          sta     tmp4
 886F [05] CD9B48    4353          jsr     tableLookup
 8872 [05] 4E989B    4354          mov     tmp5,tmp8            ;Index
 8875 [05] 4E949C    4355          mov     tmp1,tmp9            ;X1
 8878 [05] 4E959D    4356          mov     tmp2,tmp10           ;X2
                     4357  ST_STEP_2:
 887B [03] 45E390    4358          ldhx    #RPMRANGEST_f1
 887E [04] 3594      4359          sthx    tmp1
 8880 [02] A60B      4360          lda     #$0b                 ;(12-1)
 8882 [03] B796      4361          sta     tmp3
 8884 [03] B64D      4362          lda     rpm
 8886 [03] B797      4363          sta     tmp4
 8888 [05] CD9B48    4364          jsr     tableLookup
 888B [05] 4E989E    4365          mov     tmp5,tmp11           ;Index
 888E [05] 4E94A0    4366          mov     tmp1,tmp13           ;X1
 8891 [05] 4E95A1    4367          mov     tmp2,tmp14           ;X2
                     4368  ST_STEP_3:
                     4369  ;TABLEWALK:
 8894 [01] 8C        4370          clrh
 8895 [02] AE0C      4371          ldx     #$0c                 ;(12)
 8897 [03] B69B      4372          lda     tmp8
 8899 [01] 4A        4373          deca
 889A [05] 42        4374          mul
 889B [03] BB9E      4375          add     tmp11
 889D [01] 4A        4376          deca
 889E [01] 97        4377          tax
 889F macro          4378          VE3X
 889F [04] C60105    4379   LDA PAGE  
 88A2 [02] A103      4380   CMP #03T  
 88A4 [03] 2605      4381   BNE VE3XF  
 88A6 [04] D60112    4382   LDA VE_R,X  
 88A9 [03] 2003      4383   BRA VE3XC  
 88AB [04] D6E300    4384  VE3XF: LDA ST_F1,X  
                     4385  VE3XC:  
 88AE [03] B7A2      4386          sta     tmp15
 88B0 [01] 5C        4387          incx
 88B1 macro          4388          VE3X
 88B1 [04] C60105    4389   LDA PAGE  
 88B4 [02] A103      4390   CMP #03T  
 88B6 [03] 2605      4391   BNE VE3XF  
 88B8 [04] D60112    4392   LDA VE_R,X  
 88BB [03] 2003      4393   BRA VE3XC  
 88BD [04] D6E300    4394  VE3XF: LDA ST_F1,X  
                     4395  VE3XC:  
 88C0 [03] B7A3      4396          sta     tmp16
 88C2 [02] AE0C      4397          ldx     #$0c                 ;(12)
 88C4 [03] B69B      4398          lda     tmp8
 88C6 [05] 42        4399          mul
 88C7 [03] BB9E      4400          add     tmp11
 88C9 [01] 4A        4401          deca
 88CA [01] 97        4402          tax
 88CB macro          4403          VE3X
 88CB [04] C60105    4404   LDA PAGE  
 88CE [02] A103      4405   CMP #03T  
 88D0 [03] 2605      4406   BNE VE3XF  
 88D2 [04] D60112    4407   LDA VE_R,X  
 88D5 [03] 2003      4408   BRA VE3XC  
 88D7 [04] D6E300    4409  VE3XF: LDA ST_F1,X  
                     4410  VE3XC:  
 88DA [03] B7A4      4411          sta     tmp17
 88DC [01] 5C        4412          incx
 88DD macro          4413          VE3X
 88DD [04] C60105    4414   LDA PAGE  
 88E0 [02] A103      4415   CMP #03T  
 88E2 [03] 2605      4416   BNE VE3XF  
 88E4 [04] D60112    4417   LDA VE_R,X  
 88E7 [03] 2003      4418   BRA VE3XC  
 88E9 [04] D6E300    4419  VE3XF: LDA ST_F1,X  
                     4420  VE3XC:  
 88EC [03] B7A5      4421          sta     tmp18
 88EE [03] CC88F1    4422          jmp     ST_STEP_4
                     4423  
                     4424  ST_STEP_4:
 88F1 [05] 4EA094    4425          mov     tmp13,tmp1
 88F4 [05] 4EA195    4426          mov     tmp14,tmp2
 88F7 [05] 4EA296    4427          mov     tmp15,tmp3
 88FA [05] 4EA397    4428          mov     tmp16,tmp4
 88FD [05] 4E4D98    4429          mov     rpm,tmp5
 8900 [05] CD9B63    4430          jsr     lininterp
 8903 [05] 4E99A6    4431          mov     tmp6,tmp19
                     4432  
                     4433  ST_STEP_5:
 8906 [05] 4EA094    4434          mov     tmp13,tmp1
 8909 [05] 4EA195    4435          mov     tmp14,tmp2
 890C [05] 4EA496    4436          mov     tmp17,tmp3
 890F [05] 4EA597    4437          mov     tmp18,tmp4
 8912 [05] 4E4D98    4438          mov     rpm,tmp5
 8915 [05] CD9B63    4439          jsr     lininterp
 8918 [05] 4E999E    4440          mov     tmp6,tmp11
                     4441  
                     4442  ST_STEP_6:
 891B [05] 4E9C94    4443          mov     tmp9,tmp1
 891E [05] 4E9D95    4444          mov     tmp10,tmp2
 8921 [05] 4EA696    4445          mov     tmp19,tmp3
 8924 [05] 4E9E97    4446          mov     tmp11,tmp4
 8927 [05] 4EDB98    4447          mov     kpa_n,tmp5
 892A [05] CD9B63    4448          jsr     lininterp
 892D [03] B699      4449          lda     tmp6
 892F [03] B7DC      4450          sta     tmp31                        ; Store the result away
                     4451  
                     4452  ; Spark Table 2 Lookup
                     4453  ;*ST2_STEP_1:
                     4454  ;*        lda     feature5_f  ; Are we using SparkTable2?
                     4455  ;*        bit     #SparkTable2b
                     4456  ;*        beq     LookUp_Done
                     4457                                       ;
                     4458  ;*        brclr   Nitrous,feature1,No_NOS_STable2    ; Are we using NOS?
                     4459  ;*        brclr   NosSysOn,EnhancedBits,LookUp_Done  ; NOS Mode not ready.
                     4460  ;*No_NOS_STable2:
                     4461  ;*        lda     ST2Timer           ; Spark table 2 delay timer
                     4462  ;*        bne     LookUp_Done                ; If its not zero no ST2
                     4463  ;*        ldhx    #KPARANGEST_f2
                     4464  ;*        sthx    tmp1
                     4465  ;*        lda     #$0b                       ;(12-1)
                     4466  ;*        sta     tmp3
                     4467  ;*        lda     kpa_n
                     4468  ;*        sta     tmp4
                     4469  ;*        jsr     tableLookup
                     4470  ;*        mov     tmp5,tmp8          ;Index
                     4471  ;*        mov     tmp1,tmp9          ;X1
                     4472  ;*        mov     tmp2,tmp10         ;X2
                     4473  ;*        jmp     ST2_STEP_2
                     4474  ;*
                     4475  ;*LookUp_Done:
                     4476  ;*        jmp     LookUp_Finished
                     4477  
                     4478  ;*ST2_STEP_2:
                     4479  ;*        ldhx    #RPMRANGEST_f2
                     4480  ;*        sthx    tmp1
                     4481  ;*        lda     #$0b                       ;(12-1)
                     4482  ;*        sta     tmp3


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 34
MC68HC908GP32 User Bootloader


                     4483  ;*        lda     rpm
                     4484  ;*        sta     tmp4
                     4485  ;*        jsr     tableLookup
                     4486  ;*        mov     tmp5,tmp11         ;Index
                     4487  ;*        mov     tmp1,tmp13         ;X1
                     4488  ;*        mov     tmp2,tmp14         ;X2
                     4489  ;*ST2_STEP_3:
                     4490  ;*;TABLEWALK:
                     4491  ;*        clrh
                     4492  ;*        ldx     #$0c                       ;(12)
                     4493  ;*        lda     tmp8
                     4494  ;*        deca
                     4495  ;*        mul
                     4496  ;*        add     tmp11
                     4497  ;*        deca
                     4498  ;*        tax
                     4499  ;*        VE4X
                     4500  ;*        sta     tmp15
                     4501  ;*        incx
                     4502  ;*        VE4X
                     4503  ;*        sta     tmp16
                     4504  ;*        ldx     #$0c                       ;(12)
                     4505  ;*        lda     tmp8
                     4506  ;*        mul
                     4507  ;*        add     tmp11
                     4508  ;*        deca
                     4509  ;*        tax
                     4510  ;*        VE4X
                     4511  ;*        sta     tmp17
                     4512  ;*        incx
                     4513  ;*        VE4X
                     4514  ;*        sta     tmp18
                     4515  ;*        jmp     ST2_STEP_4
                     4516  
                     4517  ;*ST2_STEP_4:
                     4518  ;*        mov     tmp13,tmp1
                     4519  ;*        mov     tmp14,tmp2
                     4520  ;*        mov     tmp15,tmp3
                     4521  ;*        mov     tmp16,tmp4
                     4522  ;*        mov     rpm,tmp5
                     4523  ;*        jsr     lininterp
                     4524  ;*        mov     tmp6,tmp19
                     4525  
                     4526  ;*ST2_STEP_5:
                     4527  ;*        mov     tmp13,tmp1
                     4528  ;*        mov     tmp14,tmp2
                     4529  ;*        mov     tmp17,tmp3
                     4530  ;*        mov     tmp18,tmp4
                     4531  ;*        mov     rpm,tmp5
                     4532  ;*        jsr     lininterp
                     4533  ;*        mov     tmp6,tmp11
                     4534  
                     4535  ;*ST2_STEP_6:
                     4536  ;*        mov     tmp9,tmp1
                     4537  ;*        mov     tmp10,tmp2
                     4538  ;*        mov     tmp19,tmp3
                     4539  ;*        mov     tmp11,tmp4
                     4540  ;*        mov     kpa_n,tmp5
                     4541  ;*        jsr     lininterp          ; Spark Table 2 result in tmp6
                     4542  ;*        brclr   NosIn,portd,Not_ST1        ; If input low then use ST2
                     4543  
                     4544  ;*LookUp_Finished:
 8931 [03] B6DC      4545          lda     tmp31                        ; Reload the look up angle for ST1
 8933 [03] B799      4546          sta     tmp6
                     4547  Not_ST1:
 8935 [04] C60105    4548           lda     page
 8938 [02] A103      4549          cmp     #3
 893A [03] 2605      4550          bne     trim_fl
 893C [04] C601BC    4551          lda     TrimAngle_r
 893F [03] 2003      4552          bra     trim_c
 8941 [04] C6E3AA    4553  trim_fl: lda     TrimAngle_f
 8944 [03] 2A0A      4554  trim_c: bpl     CHECK_SP_ADD         ; check adding of trim
 8946 [03] BB99      4555          add     tmp6                 ; add lookup angle
 8948 [03] 250E      4556          bcs     TRIM_DONE            ; if carry, all is done = high advance
 894A [03] 2A0C      4557          bpl     TRIM_DONE            ; if result is positive
 894C [02] A600      4558          lda     #$00                 ; Negative trim over to high advance,
                     4559                                       ; clamp to 0
 894E [03] 2008      4560          bra     TRIM_DONE
                     4561  
                     4562  CHECK_SP_ADD:
 8950 [03] BB99      4563          add     tmp6                 ; add lookup angle
 8952 [03] 2404      4564          bcc     TRIM_DONE            ; Check if add over into low advance
 8954 [03] 2B02      4565          bmi     TRIM_DONE            ; Check if result negative
 8956 [02] A6FF      4566          lda     #$FF                 ; Clamp to maximum
                     4567  
                     4568  TRIM_DONE:
 8958 [05] 034203    4569          brclr   crank,engine,TRIM_DONE2
                     4570  ;*        brset   nextcyl,EnhancedBits4,td_nc
 895B [04] C6E3AB    4571          lda     CrankAngle_f         ; Update spark angle for User Interface
                     4572  ;*        bra     TRIM_DONE2
                     4573  ;*td_nc:
                     4574  ;*        lda     TriggAngle_f            ; if next cyl cranking then use trigger angle
                     4575  ;*        add     #28T                    ; add on 10 deg offset
                     4576  
                     4577  TRIM_DONE2:
                     4578  ;*;       bmi     store_spark                ; Check if result negative
                     4579                                       ; (i.e. > 10ATDC)
                     4580  ;*;       lda     #0                 ; Clamp to minimum (surely safer?)
                     4581  ;*store_spark:
 895E [05] 024200    4582          brset   crank,engine,store_spark2    ; if we are cranking skip
                     4583                                       ;to the save
                     4584  
                     4585  ;*        add     CltIatAngle
                     4586  ;*        add     KnockAngleRet
                     4587  ;*        add     NitrousAngle
                     4588  ;*        clc                                ; Clear carry bit **
                     4589  ;*        add     TCAngle
                     4590  ;*        bcc     Store_Spark_Ang            ; Did we over flow with the
                     4591                                       ; traction angle? **
                     4592  ;*        lda     #28T                       ; Yes so limit angle to 0 deg **
                     4593  ;*Store_Spark_Ang:
                     4594  ;*        brclr   LaunchOn,RevLimBits,store_spark2
                     4595  ;*        brset   lc_fs,SparkBits,nf_flat2
                     4596  ;*        lda     LC_LimAngle_f              ; Launch Retard spark Angle
                     4597  ;*        bra     store_spark2
                     4598  ;*nf_flat2:
                     4599  ;*        lda     LC_f_limangle_f
                     4600  
                     4601  store_spark2:
                     4602  CALC_DELAY:
 8961 [01] 97        4603          tax    ; take a copy in x, but don't save to SparkAngle yet
                     4604  
                     4605  ;*        brset   EDIS,personality,edis_calc
                     4606  
                     4607  ;*        brclr   nextcyl,EnhancedBits4,this_cyl
                     4608  ;*        sub     #28T                    ; subtract 10 deg offset
                     4609  ;*        bcs     next_cyl_rail           ; just in case map has -ves in it.
                     4610  ;*        cmp     TriggAngle_f
                     4611  ;*        bhi     next_cyl_calc              ; if spark angle > trigger we're ok
                     4612  ;*next_cyl_rail:
                     4613  ;*        lda     TriggAngle_f
                     4614  ;*        add     #31T                       ; add on 10deg offset + 1 degree safety margin
                     4615  ;*        tax                             ; save copy in x
                     4616  ;*        sub     #28T                    ; remove that 10deg offset again
                     4617  *****************************************************************************
                     4618  **  next Cyl mode works like this...


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 35
MC68HC908GP32 User Bootloader


                     4619  **  DelayAngle = SparkAngle-Trigger
                     4620  *****************************************************************************
                     4621  ;*next_cyl_calc:
                     4622  ;*        stx     SparkAngle
                     4623  ;*        sub     TriggAngle_f
                     4624  ;*;can't go negative because we checked just above
                     4625  ;*        sta     DelayAngle
                     4626  ;*        bra     CheckSoftLimit
                     4627  
                     4628  ;*this_cyl:
 8962 [03] BF58      4629          stx     SparkAngle
 8964 [04] C6E3A8    4630          lda     TriggAngle_f
 8967 [03] B058      4631          sub     SparkAngle
 8969 [02] AB1C      4632          add     #28T
 896B [04] C70106    4633          sta     DelayAngle
                     4634  ;*        bra     CheckSoftLimit
                     4635  
                     4636  ;*edis_calc:
                     4637  *****************************************************************************
                     4638  ** Delay angle not used, but code left as-is for simplicity
                     4639  ** now convert to SAW width.  SAW = 1536 - (25.6 * adv)
                     4640  ** SparkAngle = adv / 45 * 128   by definition in MSS
                     4641  ** adv = SparkAngle * 45 / 128   re-arrange for adv
                     4642  **              (256 * 45 * SparkAngle)
                     4643  ** SAW = 1536 - (---------------------)
                     4644  **              (128 * 10             )
                     4645  **
                     4646  ** SAW (us) = 1536 - (SparkAngle * 9)
                     4647  ** BUT we will use baseline timing of 10ATDC so formula becomes
                     4648  ** SAW (us) = 1792 - (SparkAngle * 9)
                     4649  **
                     4650  ** JSM - physical tests show some skewing, pulse is 2-3% longer and at
                     4651  ** least 15us too long
                     4652  ** make it 1777 ($6f1)
                     4653  *****************************************************************************
                     4654  
                     4655  ;*        stx     SparkAngle
                     4656  ;*        txa
                     4657  ;*        ldx      #9
                     4658  ;*        mul                                ; stores result in x:a
                     4659  ;*        stx      tmp1                      ; save them
                     4660  ;*        sta      tmp2
                     4661  ;*        clc
                     4662  ;*        lda     #$f1                       ; do 1792-... (1792 = $700) (1777 = $6f1)
                     4663  ;*        sbc     tmp2
                     4664  ;*        sta      tmp2
                     4665  ;*        lda     #$6
                     4666  ;*        sbc     tmp1
                     4667  ;*        sta     tmp1
                     4668  ;*; if rpm < 1100 & multi-mode enabled
                     4669  ;*;        brclr   multispark,feature4,NOT_MULTI
                     4670  ;*        lda     feature4_f         ; this allow multi spark on/off
                     4671  ;*                                   ; while running
                     4672  ;*        bit     #multisparkb
                     4673  ;*        beq     NOT_MULTI
                     4674  ;*        lda     rpm
                     4675  ;*        cmp     edisms_f
                     4676  ;*        bhs     NOT_MULTI
                     4677  ;*; add on 2048us (@8MHz)
                     4678  ;*; the initial 2048us command may correct the 2% error as the EDIS
                     4679  ;*; module uses it to
                     4680  ;*; calibrate its own timer
                     4681  ;*        lda     tmp1
                     4682  ;*        add     #$08
                     4683  ;*        sta     tmp1
                     4684  ;*NOT_MULTI:
                     4685  ;*        ldhx    tmp1
                     4686  ;*        sthx    sawh                       ; save 16-bits in one instruction
                     4687                                       ; to avoid interruption
                     4688  
                     4689  ***************************************************************************
                     4690  **
                     4691  ** Check rev limiters
                     4692  **
                     4693  ***************************************************************************
                     4694  ;*CheckSoftLimit:
                     4695  ;*                bclr    LaunchOn,RevLimBits        ; Clear the Soft Launch
                     4696                                               ; Rev Limit bit
                     4697  ;*                brclr   LaunchControl,feature2,Magnus_revlimiters; Is Launch
                     4698                                               ; selected?
                     4699  ;*                brset   Launch,portd,Magnus_revlimiters    ; Button not pressed
                     4700                                               ; so reset variable bit
                     4701  ;*                lda     tps                        ; Is throttle in right place?
                     4702  ;*                cmp        LC_Throttle_f
                     4703  ;*                blo     Magnus_revlimiters ; No then no LC
                     4704  ;*                brset   lc_fs,SparkBits,csl_flat
                     4705  ;*                lda     LC_Soft_Rpm_f              ; Load in Launch soft limiter
                     4706  ;*                bra     csl_comp
                     4707  ;*csl_flat:
                     4708  ;*                lda     LC_f_slim_f
                     4709  ;*csl_comp:
                     4710  ;*                beq     Magnus_revlimiters ; If Zero no soft limit
                     4711  ;*                cmp     rpm                        ; Is rpm higher than limit?
                     4712  ;*                bhi     Magnus_revlimiters ; No so no soft limit
                     4713  ;*                lda     tps                        ; Is tps higher than setting?
                     4714  ;*                cmp     LC_Throttle_f
                     4715  ;*                blo     Magnus_revlimiters ; No so no soft limit
                     4716  ;*                bset    LaunchOn,RevLimBits        ; Set soft Launch bit on
                     4717  ;*                bra     SRevLimOnDone              ; Jump past rpm limit checks
                     4718  
                     4719  ;*Magnus_revlimiters:
                     4720  ;*                lda     SRevLimRPM
                     4721  ;*                beq     SRevLimOnDone              ; skip if zero
                     4722  ;*                cmp     rpm
                     4723  ;*                blo     SRevLimOn          ; rpm higher than limit
                     4724  ;*                bhi     SRevLimOff         ; rpm lower than limit
                     4725  ;*                brset   RevLimSoft,RevLimBits,SRevLimOn ; at limit check
                     4726                                               ; current status
                     4727  ;*SRevLimOff:
                     4728  ;*                bclr    RevLimSoft,RevLimBits      ; Clear soft limit bit
                     4729  ;*                bclr    RevLimHSoft,RevLimBits     ; Clear soft limit fuel cut bit
                     4730  ;*                bra     SRevLimDone
                     4731  
                     4732  ;*SRevLimOn:
                     4733   ;*               bset    RevLimSoft,RevLimBits      ; Set soft limit bit
                     4734  ;*;                lda     SRevLimCTime              ; Set Cool down period
                     4735  ;*;                sta     SRevLimCoolLeft
                     4736  ;*                lda     SRevLimTimeLeft            ; Check if time left =
                     4737  ;*                                           ; counting down
                     4738  ;*                bne     SRevLimOnDone
                     4739  ;*                brset   RevLimHSoft,RevLimBits,SRevLimOnDone       ; Check if
                     4740  ;*                                           ; soft limit has cut fuel
                     4741  ;*                lda     SRevLimHTime               ; Set delay time for soft
                     4742  ;*                                           ; limit to cut fuel
                     4743  ;*                sta     SRevLimTimeLeft
                     4744  ;*SRevLimOnDone:
                     4745  ;*SRevLimDone:
                     4746  
                     4747  ***************************************************************************
                     4748  **
                     4749  ** Check outputs
                     4750  **
                     4751  ***************************************************************************
                     4752  ;*CheckOutputs:
                     4753  ;*                clrh
                     4754  ;*                brset   BoostControl,feature2,Out1DoneJMP; If Boost control


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 36
MC68HC908GP32 User Bootloader


                     4755  ;*                                   ; used then no output1
                     4756  ;*                lda     Out1Source
                     4757  ;*                cmp     #31T
                     4758  ;*                beq     TractOut1
                     4759  ;*                cmp     #05T               ; Are we using temperature?
                     4760  ;*                beq     IAT1Source
                     4761  ;*                cmp     #06T
                     4762  ;*                beq     CLT1Source
                     4763  ;*                bra     Not_Temps1
                     4764  ;*IAT1Source:
                     4765  ;*                lda     AirTemp
                     4766  ;*                sta     tmp31
                     4767  ;*                cmp     Out1Lim            ; Check limit
                     4768  ;*                bhi     Out1On             ; Above limit, set output
                     4769  ;*                beq     Out1Done   ; Equal to limit skip out
                     4770  ;*                bra     Hyster1
                     4771  ;*CLT1Source:
                     4772  ;*                lda     coolant
                     4773  ;*                sta     tmp31
                     4774  ;*                cmp     Out1Lim            ; Check limit
                     4775  ;*                bhi     Out1On             ; Above limit, set output
                     4776  ;*                beq     Out1Done   ; Equal to limit skip out
                     4777  ;*                bra     Hyster1
                     4778  
                     4779  ;*ADCX6_In1:                         ; ADC Input on X6
                     4780  ;*                lda     o2_fpadc
                     4781  ;*                sta     tmp31
                     4782  ;*                cmp     Out1Lim
                     4783  ;*                bhi     Out1On
                     4784  ;*                beq     Out1Done
                     4785  ;*                bra     Hyster1
                     4786  
                     4787  ;*ADCX7_In1:                         ; ADC Input on X7
                     4788  ;*                lda     egtadc
                     4789  ;*                sta     tmp31
                     4790  ;*                cmp     Out1Lim
                     4791  ;*                bhi     Out1On
                     4792  ;*                beq     Out1Done
                     4793  ;*                bra     Hyster1
                     4794  
                     4795  ;*Out1DoneJMP:
                     4796  ;*                bra     Out1Done
                     4797  ;*Not_Temps1:
                     4798  ;*                ldx     Out1Source ; Get source
                     4799  ;*                beq     Out1Done   ; No source = no check
                     4800  ;*                lda     secl,x             ; Get data
                     4801  ;*                sta     tmp31
                     4802  ;*                cmp     Out1Lim            ; Check limit
                     4803  ;*                bhi     Out1On             ; Above limit, set output
                     4804   ;*               beq     Out1Done   ; Equal to limit skip out
                     4805  ;*; Hysterisis check
                     4806  ;*Hyster1:
                     4807  ;*                brclr   Output1On,Enhancedbits2,Out1Off    ; Is output 1 off?
                     4808  ;*                                   ; If so carry on as normal
                     4809  ;*                lda     Out1Lim
                     4810  ;*                sub     Out1Hys_f  ; Subtract Hysterisis for output1
                     4811  ;*                                   ; from Out1 limit
                     4812  ;*                cmp     tmp31              ; Actual value
                     4813  ;*                bls     Out1Done   ; If actual value higher than
                     4814  ;*                                   ; Limit-Hysterisis then dont clear
                     4815  ;*                                   ; output
                     4816  
                     4817  ;*Out1Off:
                     4818  ;*                bclr    Output1On,Enhancedbits2    ; Turn the output bit check off
                     4819  ;*                lda     feature4_f
                     4820  ;*                bit     #InvertOutOneb
                     4821  ;*                bne     out1_set
                     4822  ;*                bra     out1_clr   ; Below limit, clear output
                     4823  
                     4824  ;*;Added for traction bit set output
                     4825  ;*TractOut1:
                     4826  ;*                brset   Traction,EnhancedBits2,No_Upper_Lim1       ; If traction
                     4827  ;*                                   ; Running set output
                     4828  ;*                bra     Out1Off
                     4829  
                     4830  
                     4831  ;*Out1On:
                     4832  ;*                lda     Out1UpLim_f        ; Upper limit. Creates a window
                     4833  ;*                                   ; for output to work in
                     4834  ;*                beq     No_Upper_Lim1      ; If zero no limit
                     4835  ;*                cmp     secl,x
                     4836  ;*                bhi     No_Upper_Lim1      ; If higher than setpoint dont
                     4837  ;*                                   ; clear output
                     4838  ;*                lda     feature4_f
                     4839  ;*                bit     #InvertOutOneb
                     4840  ;*                bne     out1_set
                     4841  ;*out1_clr:
                     4842  ;*                bclr    Output1,porta
                     4843  ;*                bra     Out1Done
                     4844  
                     4845  ;*No_Upper_Lim1:
                     4846  ;*                bset    Output1On,Enhancedbits2    ; Output on so set bit
                     4847  ;*                lda     feature4_f
                     4848  ;*                bit     #InvertOutOneb
                     4849  ;*                bne     out1_clr
                     4850  ;*out1_set:
                     4851  ;*                bset    Output1,porta      ; Below limit, set output (Inverted)
                     4852  
                     4853  ;*Out1Done:
                     4854  
                     4855  ;*                lda     Out2Source
                     4856  
                     4857  ;*                cmp     #31T
                     4858  ;*                beq     TractOut2
                     4859  
                     4860  ;*                cmp     #05T               ; Are we using temperature?
                     4861  ;*                beq     IAT2Source
                     4862  ;*                cmp     #06T
                     4863  ;*                beq     CLT2Source
                     4864  ;*                bra     Not_Temps2
                     4865  ;*IAT2Source:
                     4866  ;*                lda     AirTemp
                     4867  ;*                sta     tmp31
                     4868  ;*                cmp     Out2Lim            ; Check limit
                     4869  ;*                bhi     Out2On             ; Above limit, set output
                     4870  ;*                beq     Out2Done   ; Equal to limit skip out
                     4871  ;*                bra     Hyster2
                     4872  ;*CLT2Source:
                     4873  ;*                lda     coolant
                     4874  ;*                sta     tmp31
                     4875  ;*                cmp     Out2Lim            ; Check limit
                     4876  ;*                bhi     Out2On             ; Above limit, set output
                     4877  ;*                beq     Out2Done   ; Equal to limit skip out
                     4878  ;*                bra     Hyster2
                     4879  
                     4880  ;*ADCX6_In2:                         ; ADC Input on X6
                     4881  ;*                lda     o2_fpadc
                     4882  ;*                sta     tmp31
                     4883  ;*                cmp     Out2Lim
                     4884  ;*                bhi     Out2On
                     4885  ;*                beq     Out2Done
                     4886  ;*                bra     Hyster2
                     4887  
                     4888  ;*ADCX7_In2:
                     4889  ;*                lda     egtadc
                     4890  ;*                sta     tmp31


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 37
MC68HC908GP32 User Bootloader


                     4891  ;*                cmp     Out2Lim
                     4892  ;*                bhi     Out2On
                     4893  ;*                beq     Out2Done
                     4894  ;*                bra     Hyster2
                     4895  
                     4896  ;*Not_Temps2:
                     4897  ;*                ldx     Out2Source ; Get source
                     4898  ;*                beq     Out2Done   ; No source = no check
                     4899  ;*                lda     secl,x             ; Get data
                     4900  ;*                sta     tmp31
                     4901  ;*                cmp     Out2Lim            ; Check limit
                     4902  ;*                bhi     Out2On             ; Above limit, set output
                     4903  ;*                beq     Out2Done   ; Equal to limit skip out
                     4904  ;*; Hysterisis check
                     4905  ;*Hyster2:
                     4906  ;*                brclr   Output2On,Enhancedbits2,Out2Off    ; Is output 1 off?
                     4907  ;*                                   ; If so carry on as normal
                     4908  ;*                lda     Out2Lim
                     4909  ;*                sub     Out2Hys_f  ; Subtract Hysterisis for output1
                     4910  ;*                                   ; from Out1 limit
                     4911  ;*                cmp     tmp31              ; Actual value
                     4912  ;*                bls     Out2Done   ; If actual value higher than
                     4913  ;*                                   ; Limit-Hysterisis then dont
                     4914  ;*                                   ; clear output
                     4915  
                     4916  ;*Out2Off:
                     4917  ;*                bclr    Output2On,Enhancedbits2    ; Turn the output bit check off
                     4918  ;*                lda     feature4_f
                     4919  ;*                bit     #InvertOutTwob
                     4920  ;*                bne     Inv_Out2   ; Are we inverting output2?
                     4921  ;*                bclr    Output2,porta      ; Below limit, clear output
                     4922  ;*                bra     Out2Done
                     4923  ;*Inv_Out2:
                     4924  ;*                bset    Output2,porta      ; Inverting output
                     4925  ;*                bra     Out2Done
                     4926  
                     4927  ;*TractOut2:
                     4928  ;*                brset   Traction,EnhancedBits2,No_Upper_Lim2       ; If traction
                     4929  ;*                                   ; Running set output
                     4930  ;*                bra     Out2Off
                     4931  
                     4932  ;*Out2On:
                     4933  ;*                lda     Out2UpLim_f        ; Upper limit. Creates a window
                     4934  ;*                                   ; for output to work in
                     4935  ;*                beq     No_Upper_Lim2      ; If zero no limit
                     4936  ;*                cmp     secl,x
                     4937  ;*                bhi     No_Upper_Lim2      ; If higher than setpoint dont
                     4938  ;*                                   ; clear output
                     4939  ;*                lda     feature4_f
                     4940  ;*                bit     #InvertOutTwob
                     4941  ;*                bne     out2_set
                     4942  ;*out2_clr:
                     4943  ;*                bclr    Output2,porta      ; Inverting output
                     4944  ;*                bra     Out2Done
                     4945  
                     4946  ;*No_Upper_Lim2:
                     4947  ;*                bset    Output2On,Enhancedbits2    ; Output on so set bit
                     4948  ;*                lda     feature4_f
                     4949  ;*                bit     #InvertOutTwob
                     4950  ;*                bne     out2_clr
                     4951  ;*out2_set:
                     4952  ;*                bset    Output2,porta      ; Below limit, set output (Inverted)
                     4953  ;*Out2Done:
                     4954  
                     4955  *******************************************************************************
                     4956  ** OUTPUT 3 Port D 0 (pin 15 top of R14) with delay off timer
                     4957  *******************************************************************************
                     4958  
                     4959  ;*                brset   out3sparkd,feature2,out3done
                     4960  ;*                clrh
                     4961  ;*                lda     feature8_f
                     4962  ;*                bit     #Out1_Out3b        ; Are we in Out1+ mode?
                     4963  ;*                beq     Norm_Out3_check
                     4964  ;*                brclr   Output1,porta,Out3Off      ; If Output1 is off then
                     4965  ;*                                   ; don't do any checks for Out3
                     4966  
                     4967  ;*Norm_Out3_check:
                     4968  ;*                lda     Out3Source_f
                     4969  ;*                bit     #$0f               ; Only use 5 bits of this byte
                     4970  ;*                beq     Out3Done   ; No source = no check
                     4971  ;*           ;     cmp     #01T
                     4972  ;*           ;     beq     Tract_Output3     ; If source = 1 then traction to
                     4973  ;*                                   ; activate output
                     4974  ;*                cmp     #31T
                     4975  ;*                beq     Tract_Output3      ; If source = 31 then traction to
                     4976  ;*                                   ; activate output
                     4977  ;*                cmp     #02
                     4978  ;*                beq     DEC_Output3        ; If source = 2 then we are using
                     4979  ;*                                   ; decel to activate output
                     4980  ;*                cmp     #03T
                     4981  ;*                beq     ACEL_Output3       ; If source = 3 then we are using
                     4982  ;*                                   ; accel to activate output
                     4983  ;*                cmp     #05T               ; Are we using temperature?
                     4984  ;*                beq     IAT3Source
                     4985  ;*                cmp     #06T
                     4986  ;*                beq     CLT3Source
                     4987  ;*                cmp     #10T               ; Are we looking at Out2?
                     4988  ;*                beq     Out2_Out3
                     4989  ;*                cmp     #32T
                     4990  ;*                beq     Out2_Out3
                     4991  ;*                ldx     Out3Source_f       ; Get source
                     4992  ;*                lda     secl,x             ; Get data
                     4993  ;*                cmp     Out3Lim_f  ; Check limit
                     4994  ;*                bhi     Out3On             ; Above limit, set output
                     4995  ;*                beq     Out3Done   ; Equal to limit skip out
                     4996  ;*Out3Off:
                     4997  ;*                lda     TimerOut3_f        ; What time delay is set?
                     4998  ;*                beq     No_Out3_Timer
                     4999  ;*                cmp     Out3Timer
                     5000  ;*                bhi     Out3Done
                     5001  
                     5002  ;*No_Out3_Timer:
                     5003  ;*                bclr    Output3,portd      ; Below limit, clear output
                     5004  ;*                bra     Out3Done
                     5005  
                     5006  ;*IAT3Source:
                     5007  ;*                lda     AirTemp
                     5008  ;*                cmp     Out3Lim_f  ; Check limit
                     5009  ;*                bhi     Out3On             ; Above limit, set output
                     5010  ;*                beq     Out3Done   ; Equal to limit skip out
                     5011  ;*                bra     Out3Off
                     5012  ;*CLT3Source:
                     5013  ;*                lda     coolant
                     5014  ;*                cmp     Out3Lim_f  ; Check limit
                     5015  ;*                bhi     Out3On             ; Above limit, set output
                     5016  ;*                beq     Out3Done   ; Equal to limit skip out
                     5017  ;*                bra     Out3Off
                     5018  
                     5019  ;*Out2_Out3:
                     5020  ;*                brclr   Output2,porta,Out3Off      ; If Output2 on then turn
                     5021  ;*                                   ; output3 on
                     5022  ;*                bra     Out3On
                     5023  
                     5024  ;*Tract_Output3:
                     5025  ;*                brclr   Traction,EnhancedBits2,Out3Off     ; If traction Running
                     5026  ;*                                   ; set output


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 38
MC68HC908GP32 User Bootloader


                     5027  ;*                bra     Out3On
                     5028  
                     5029  ;*DEC_Output3:
                     5030  ;*                brclr   TPSDEN,ENGINE,Out3Off      ; If Decel output off
                     5031  ;*                bra     Out3On
                     5032  
                     5033  ;*ACEL_Output3:
                     5034  ;*                brclr   TPSAEN,ENGINE,Out3Off      ; If Accel output off
                     5035  
                     5036  ;*Out3On:
                     5037  ;*                clr     Out3Timer
                     5038  ;*                bset    Output3,portd      ; Set output
                     5039  
                     5040  ;*Out3Done:
                     5041  
                     5042  
                     5043  *****************************************************************************
                     5044  **   OUTPUT 4
                     5045  *******************************************************************************
                     5046  ;*; OUTPUT 4 LED 18 can be used as a standard output or as a fan control
                     5047  ;*; for those using WATER INJECTION on X2
                     5048  
                     5049  ;*                brset   REUSE_LED18,outputpins,Out4Done    ; being used as IRQ
                     5050  ;*                                   ; or COIL C
                     5051  ;*                brclr   REUSE_LED18_2,outputpins,Out4Done  ; Are we re
                     5052  ;*                                   ; using LED18 as output4?
                     5053  ;*                brset   LED18_FAN,outputpins,Out4Done      ; Are we using it
                     5054  ;*                                   ;as fan control?
                     5055  ;*                clrh
                     5056  ;*                lda     Out4Source_f
                     5057  ;*                bit     #$0f               ; Only use 5 bits of this byte
                     5058  ;*                beq     Out4Done   ; No source = no check
                     5059  ;*           ;     cmp     #01T
                     5060  ;*           ;     beq     Tract_Output4     ; If source = 1 then traction to
                     5061  ;*                                   ; activate output
                     5062  ;*                cmp     #31T
                     5063  ;*                beq     Tract_Output4      ; If source = 31 then traction to
                     5064  ;*                                   ; activate output
                     5065  ;*                cmp     #02T
                     5066  ;*                beq     DEC_Output4        ; If source = 2 then we are using
                     5067  ;*                                   ; decel to activate output
                     5068  ;*                cmp     #03T
                     5069  ;*                beq     ACEL_Output4       ; If source = 3 then we are using
                     5070  ;*                                   ; accel to activate output
                     5071  ;*                cmp     #05T               ; Are we using temperature?
                     5072  ;*                beq     IAT4Source
                     5073  ;*                cmp     #06T
                     5074  ;*                beq     CLT4Source
                     5075  ;*                ldx     Out4Source_f       ; Get source
                     5076  ;*                lda     secl,x             ; Get data
                     5077  ;*                cmp     Out4Lim_f  ; Check limit
                     5078  ;*                bhi     Out4On             ; Above limit, set output
                     5079  ;*                beq     Out4Done   ; Equal to limit skip out
                     5080  ;*Out4Off:
                     5081  ;*                bclr    wled,portc ; Below limit, clear output
                     5082  ;*                bra     Out4Done
                     5083  
                     5084  ;*IAT4Source:
                     5085  ;*                lda     AirTemp
                     5086  ;*                cmp     Out4Lim_f  ; Check limit
                     5087  ;*                bhi     Out4On             ; Above limit, set output
                     5088  ;*                beq     Out4Done   ; Equal to limit skip out
                     5089  ;*                bra     Out4Off
                     5090  ;*CLT4Source:
                     5091  ;*                lda     coolant
                     5092  ;*                cmp     Out4Lim_f  ; Check limit
                     5093  ;*                bhi     Out4On             ; Above limit, set output
                     5094  ;*                beq     Out4Done   ; Equal to limit skip out
                     5095  ;*                bra     Out4Off
                     5096  
                     5097  ;*Tract_Output4:
                     5098  ;*                brclr   Traction,EnhancedBits2,Out4Off     ; If traction Running
                     5099  ;*                                   ; set output
                     5100  ;*                bra     Out4On
                     5101  
                     5102  ;*DEC_Output4:
                     5103  ;*                brclr   TPSDEN,ENGINE,Out4Off      ; If Decel output off
                     5104  ;*                bra     Out4On
                     5105  
                     5106  ;*ACEL_Output4:
                     5107  ;*                brclr   TPSAEN,ENGINE,Out4Off      ; If Accel output off
                     5108  
                     5109  ;*Out4On:
                     5110  ;*                bset    wled,portc ; Set output
                     5111  
                     5112  ;*Out4Done:
                     5113  
                     5114  ***************************************************************************
                     5115  **
                     5116  ** Fan Control - added separate off-temp - from RPE
                     5117  ** Can use X2 and or LED18
                     5118  **
                     5119  ***************************************************************************
                     5120  ;*        brset   X2_FAN,outputpins,DO_FAN_Check     ; Are we using X2 as fan
                     5121  ;*                                           ; control?
                     5122  ;*        brset   REUSE_LED18,outputpins,fan_exit
                     5123  ;*        brclr   REUSE_LED18_2,outputpins,fan_exit
                     5124  ;*        brset   LED18_FAN,outputpins,DO_FAN_Check  ; Are we using LED18
                     5125                                       ; as fan control?
                     5126  ;*fan_exit:
                     5127  ;*        bra     FAN_DONE           ; Nope, so return
                     5128  
                     5129  ;*DO_FAN_Check:
                     5130  ;*        brset   crank,engine,FAN_OFF
                     5131  ;*        lda     coolant
                     5132  ;*        cmp     EfanOnTemp_f
                     5133  ;*        bhi     FAN_ON
                     5134  ;*        cmp     EfanOffTemp_f
                     5135  ;*        blo     FAN_OFF
                     5136  ;*        bra     FAN_DONE
                     5137  
                     5138  ;*FAN_OFF:
                     5139  ;*        brclr   X2_FAN,outputpins,No_FAN_Porta     ; Are we using X2?
                     5140  ;*        bclr    water,porta                ; sharing X2 with water inj output
                     5141  ;*No_FAN_Porta:
                     5142  ;*        brclr   LED18_FAN,outputpins,FAN_DONE      ; Are we using LED18?
                     5143  ;*        bclr    wled,portc
                     5144  ;*        bra     FAN_DONE
                     5145  ;*FAN_ON:
                     5146  ;*        brclr   X2_FAN,outputpins,No_FANOn_Porta   ; Are we using X2?
                     5147  ;*        bset    water,porta                ; sharing X2 with water inj output
                     5148  ;*No_FANOn_Porta:
                     5149  ;*        brclr   LED18_FAN,outputpins,FAN_DONE      ; Are we using LED18?
                     5150  ;*        bset    wled,portc
                     5151  
                     5152  ;*FAN_DONE:
                     5153  
                     5154  
                     5155  *******************************************************************************
                     5156  **
                     5157  **   Over run fuel cut system                    (P Ringwood)
                     5158  **
                     5159  *******************************************************************************
                     5160  ;*Over_Run:
                     5161  ;*        lda     feature4_f
                     5162  ;*        bit     #OverRunOnb


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 39
MC68HC908GP32 User Bootloader


                     5163  ;*        beq     Over_Run_Done
                     5164  
                     5165  ;*No_Over_Run:
                     5166  ;*        lda    kpa
                     5167  ;*        cmp    ORunKpa_f           ; Is the KPa lower than the set point?
                     5168  ;*       bhi    No_OverRun           ; No so no over run
                     5169  ;*        lda    rpm
                     5170  ;*        cmp    ORunRpm_f           ; Is the rpm higher than the setpoint?
                     5171  ;*        blo    No_OverRun          ; No so no Over run
                     5172  ;*        lda    tps
                     5173  ;*        cmp    ORunTPS_f           ; Is the TPS below the setpoint?
                     5174  ;*        bhi    No_OverRun          ; No so no over run
                     5175  ;*        lda    coolant
                     5176  ;*        cmp    OverRunClt_f1               ; Is the coolant temp high enough?
                     5177  ;*        blo    No_OverRun
                     5178  ;*        brset  over_Run_Set,EnhancedBits2,No_OverRun_Reset
                     5179  ;*        bset   over_Run_Set,EnhancedBits2
                     5180  ;*        lda    #00T
                     5181  ;*        sta    OverRunTime         ; Reset the over run timer once
                     5182  ;*                                   ; per over run
                     5183  
                     5184  ;*No_OverRun_Reset:
                     5185  ;*        lda    OverRunTime
                     5186  ;*        cmp    OverRunT_f
                     5187  ;*        bhs    Do_OverRun
                     5188  ;*        bra    Over_Run_T
                     5189  
                     5190  ;*Do_OverRun:
                     5191  ;*        bset   OverRun,EnhancedBits        ; Set Over Run Fuel Cut
                     5192  ;*        bra    Over_Run_Done
                     5193  ;*No_OverRun:
                     5194  ;*        bclr  over_Run_Set,EnhancedBits2 ; Clear the over run timer clear bit
                     5195  ;*Over_Run_T:
                     5196  ;*        bclr  OverRun,EnhancedBits ; Clear the over run fuel cut
                     5197  
                     5198  ;*Over_Run_Done:
                     5199  
                     5200  *****************************************************************************
                     5201  **  Water Injection section
                     5202  **
                     5203  **  Turn 1st water output (X2) on if MAP and RPM and IAT higher than
                     5204  **  Water set point
                     5205  **
                     5206  **  Pulse water2 output (X3) at same rate as Fuel Injector #2.
                     5207  **
                     5208  ***************************************************************************
                     5209  ;*        lda     feature3_f
                     5210  ;*        bit     #WaterInjb
                     5211  ;*        beq     Water_Inj_Done
                     5212  
                     5213  ;*Water_Injection:                   ; we only get here if water
                     5214  ;*                                   ; inj is enabled
                     5215  ;*            brset  water,porta,ignore_iat;If water on then dont check
                     5216                                       ; IAT again
                     5217  
                     5218  ;*         lda   iatpoint_f          ; Load Inlet air temp setpoint
                     5219  ;*         cmp   airTemp             ; Is it higher than actual iat?
                     5220  ;*            bhi   definatlyno_water
                     5221  
                     5222  
                     5223  ;*ignore_iat:
                     5224  ;*          lda  wateripoint_f               ; Load water injection point
                     5225  ;*       cmp  kpa                    ; Is it lower than the actual kpa?
                     5226  ;*       blo  water_on               ; If so turn water pump on
                     5227  ;*          bra  definatlyno_water   ; If not then no water
                     5228  
                     5229  ;*          lda   rpm
                     5230  ;*          cmp   wateriRpm_f                ; Is the engine above the min rpm?
                     5231  ;*          blo   definatlyno_water
                     5232  
                     5233  ;*water_on:
                     5234  ;*          lda  rpm
                     5235  ;*          cmp  wateriRpm_f         ; Are we actually above the rpm Minimum?
                     5236  ;*          blo  definatlyno_water
                     5237  ;*          bset  water,porta                ;Turn water pump on
                     5238  ;*     bra    Water_Inj_Done
                     5239  
                     5240  ;*definatlyno_water:
                     5241  
                     5242  ;*           bclr   water,porta              ;Turn off water pump
                     5243  ;*Water_Inj_Done:
                     5244  
                     5245  *****************************************************************************
                     5246  **
                     5247  **  Coolant Related Ignition Advance (P Ringwood)
                     5248  **  Add Advance of 1 deg per user defined amount of coolant temp below setpoint
                     5249  **
                     5250  *****************************************************************************
                     5251  ***************************************************************************
                     5252  ** DeadBand: If we are within 5 degrees above of coolant setpoint then
                     5253  ** ensure we turn advance  setting to zero. This is incase temp jumps up
                     5254  ** for some reason and leaves advance set.
                     5255  **
                     5256  ** I have no idea if this could happen but I put it in just incase.
                     5257  *****************************************************************************
                     5258  ;*         lda    feature3_f
                     5259  ;*         bit    #CltIatIgnitionb
                     5260  ;*         beq    retard_endJmp
                     5261  
                     5262  ;*IatClt_Related:
                     5263  
                     5264  ;*      clrh
                     5265  ;*      lda   cltAdvance_f           ; Load Coolant temperature setpoint
                     5266  ;*      beq   Advance_end                    ; If zero no Advance
                     5267  ;*      add   #05T                   ; Add 5 to the clt temp
                     5268  ;*      cmp   coolant                        ; Are we within 5 degrees F of
                     5269  ;*                                   ; setpoint for clt advance?
                     5270  ;*      blo   Advance_end                    ;
                     5271  ;*      lda   coolant                        ;
                     5272  ;*      cmp   cltAdvance_f           ; Is the clt under the setpoint?
                     5273  ;*      blo   carryOn_Advance                ; If so carry on with advance
                     5274  ;*      lda   #$00
                     5275  ;*      sta   CltIatAngle                    ; If not then it's in dead band
                     5276  ;*                                   ; so clear trimAngle
                     5277  ;*      jmp   retard_end             ; Don't do any Advance / Retard
                     5278  ;*                                   ; till out of deadband
                     5279  
                     5280  ;** End of dead band
                     5281  **********************************************************************
                     5282  
                     5283  ;*carryOn_Advance:
                     5284  
                     5285  ;*      lda   cltDeg_f                       ; load the temp per 1 deg of Advance.
                     5286  ;*      beq   Advance_end                    ; If zero no Advance
                     5287  ;*      lsra                         ; Shift bit pattern to the right
                     5288                                       ; (Divide by 2)
                     5289  ;*      bcc   nota_carry                     ; Check if carry bit clear, skip
                     5290                                       ; increment
                     5291  ;*      inca                         ; otherwise, increment accumulator
                     5292  ;*nota_carry:
                     5293  ;*      sta   tmp31                  ; Stores half the cltDeg (used for
                     5294                                       ; checking division)
                     5295  ;*      lda   cltAdvance_f           ; Load into the accumulator the top
                     5296                                       ; temperature limit
                     5297  ;*      sub   coolant                        ; How much cooler are we?
                     5298  ;*      clrh                         ; Zero out high 8 bits of 16-bit


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 40
MC68HC908GP32 User Bootloader


                     5299                                       ; H:X register
                     5300                                       ; Accumulator contains low 8 bits
                     5301  ;*      ldx   cltDeg_f                       ; Set divisor
                     5302  ;*      div                          ; (H:A) /X -> A, with rem in H
                     5303  
                     5304  ;*      tax                          ; Move quotient to index register
                     5305  ;*      pshh                         ; Transfer remainder to accumulator
                     5306  ;*      pula
                     5307  ;*      cmp   tmp31                  ; See if the remainder is more than
                     5308                                       ; half of divisor
                     5309  ;*      blo   roundedAdvance
                     5310  ;*      incx                         ; It was a big remainder, round up.
                     5311  
                     5312  ;*roundedAdvance:
                     5313  ;*      lda   #3T                            ; 1 degree
                     5314  ;*      mul                          ; X * A -> (X:A)
                     5315  ;*      cpx   #0T                            ; See if we overflowed, i.e., X != 0
                     5316  ;*      beq   maxAdvanceTrim         ; No, so see if we are at max angle
                     5317  ;*      lda   #255T                  ; Overflow value
                     5318  
                     5319  ;*maxAdvanceTrim:
                     5320  ;*      cmp   maxAdvAng_f                    ; Is it above the max allowed advance?
                     5321  ;*      blo   store_Advance          ; No, store the advance
                     5322  ;*      lda   maxAdvAng_f                    ; Yes, load the max Advance allowed
                     5323  
                     5324  ;*store_Advance:
                     5325  ;*      sta   CltIatAngle                    ; Store the advance
                     5326  
                     5327  ;*retard_endJmp:
                     5328  
                     5329  ;*      jmp retard_end                       ; If Coolant advance running dont
                     5330                                       ; check IAT retard
                     5331  
                     5332  ;*Advance_end:
                     5333  
                     5334  *****************************************************************************
                     5335  **
                     5336  **  Add Retard of 1 deg per user defined amount of IAT when IAT and
                     5337  **  boost above setpoints
                     5338  **
                     5339  *****************************************************************************
                     5340  
                     5341  ;*      lda   iatDeg_f                       ; load the temp per 1 deg of retard.
                     5342  ;*      beq   noRetard                       ; If zero then no Retard
                     5343  ;*      lsra                         ; Shift bit pattern to the right
                     5344                                       ; (Divide by 2)
                     5345  ;*      bcc   no_carry                       ; Check if carry bit clear, skip
                     5346                                       ; increment
                     5347  ;*      inca                         ; otherwise, increment accumulator
                     5348  
                     5349  ;*no_carry:
                     5350  ;*      sta   tmp32                  ; Stores half the iatDeg
                     5351  
                     5352  ;*      lda   kpa
                     5353  ;*      cmp   kpaRetard_f                    ; Setpoint of KPa for retard
                     5354  ;*      blo   clr_Retard                     ; If not reached make sure we
                     5355                                       ; clear the retard angle
                     5356  
                     5357  ;*      lda   airTemp                        ; Actual IAT Temp
                     5358  ;*      cmp   iatDanger_f                    ; Setpoint for start of retard
                     5359  ;*      blo   clr_Retard                     ; If not reached make sure we
                     5360                                       ; clear the retard angle
                     5361  
                     5362  ;*      sub   iatDanger_f                    ; How much higher are we? Leaves
                     5363                                       ; difference in accumulator
                     5364  ;*      clrh                         ; Zero out high 8 bits of 16-bit
                     5365                                       ; H:X register
                     5366                                       ; Accumulator contains low 8 bits
                     5367  ;*      ldx   iatDeg_f                       ; Set divisor
                     5368  ;*      div                          ; (H:A) /X -> A, with rem in H
                     5369  
                     5370  ;*      tax                          ; Move quotient to index register
                     5371  ;*      pshh                         ; Transfer remainder to accumulator
                     5372  ;*      pula
                     5373  ;*      cmp   tmp32                  ; See if the remainder is more than
                     5374                                       ; half of divisor
                     5375  ;*      blo   roundedRetard
                     5376  ;*      incx                         ; It was a big remainder, round up.
                     5377  
                     5378  ;*roundedRetard:
                     5379  ;*      lda   #3T                            ; 1 degree
                     5380  ;*      mul                          ; X * A -> (X:A)
                     5381  
                     5382  ;*      sta   tmp31                  ; Store angle to retard, its an
                     5383                                       ; advance angle at the moment
                     5384  ;*      lda   #255T                  ;
                     5385  ;*      sub   tmp31                  ; (255-angle to retard) turns it
                     5386                                       ; into a retard angle
                     5387  
                     5388  ;*      cpx   #0T                            ; See if we overflowed, i.e., X != 0
                     5389  ;*      beq   storeRetardedTrim
                     5390  ;*      lda   #255T                  ; Overflow value
                     5391  
                     5392  ;*storeRetardedTrim:
                     5393  ;*      sta   CltIatAngle                    ;
                     5394  ;*      jmp   retard_end                     ; finished retard
                     5395  
                     5396  ;*clr_Retard:
                     5397  ;*      lda  #$00
                     5398  ;*      sta  CltIatAngle                     ; Sets trim angle back to zero when
                     5399                                       ; no setpoints met
                     5400  ;*noRetard:
                     5401  ;*retard_end:
                     5402  
                     5403  
                     5404  ***************************************************************************
                     5405  **
                     5406  ** Idle Speed Adjustment
                     5407  **
                     5408  **    Ubipa's idle control algorithm with KeithG front end logic and such.
                     5409  **
                     5410  **    idleOn = adjustment algorithm is running.  If it is not, then
                     5411  **    idleLastDC will not be changed.
                     5412  **
                     5413  **    if cranking
                     5414  **       idleDC     = icrankdc
                     5415  **       idleLastDC = icrankdc
                     5416  **
                     5417  **    Active Dashpot
                     5418  **    small amount added to last idle DC value recorded
                     5419  **
                     5420  **    Through the closed loop warmup, activation tracks idle speed because it
                     5421  **    is 'rpms above idle' not a fixed value.
                     5422  **
                     5423  **    JSM added warmup PWM setting. Can choose open loop or closed loop.
                     5424  **    This is designed to work like a variable version of B&G
                     5425  **    Can set duty cycle at lower temp. Interpolates to zero at upper temp, where
                     5426  **    rpm targets take over.
                     5427  **    If rpm targets are set to zero then valve shut about upper temp.
                     5428  ***************************************************************************
                     5429  ;*        brset   REUSE_FIDLE,outputpins,idle_DoneJMP1
                     5430  
                     5431  ;*IdleAdjust:
                     5432  ;*;         brset   PWMidle,feature2,idlePWM
                     5433  ;*         lda     feature13_f
                     5434  ;*         bit     #pwmidleb


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 41
MC68HC908GP32 User Bootloader


                     5435  ;*         bne     idlePWM
                     5436  
                     5437  ;*;-- Toggle Mode ----------------------------------------------------------------
                     5438  
                     5439  ;*idleToggle:
                     5440  ;*        lda     coolant
                     5441  ;*        cmp     fastIdleBG_f               ; use original B&G on/off temp
                     5442  ;*        bls     idleFast           ; Shouldn't there be some hysteresis
                     5443                                       ; here?  On the other hand, the
                     5444                                       ; temp should never hover around
                     5445                                       ; here, so why bother?
                     5446  ;*idleSlow:
                     5447  ;*        clr     idleDC                     ; Fully closed.
                     5448  ;*        jmp     idle_Done
                     5449  
                     5450  ;*idleFast:
                     5451  ;*        mov     #255T,idleDC               ; Wide open.
                     5452  ;*        jmp     idle_Done
                     5453  
                     5454  ;-- PWM Mode -------------------------------------------------------------------
                     5455  
                     5456  ;*idlePWM:
 896E [05] 0E6B37    5457       brset   istartbit,EnhancedBits6,Crank_PWM       ; loop to stabilize on startup
 8971 [05] 024234    5458       brset   crank,engine,Crank_PWM          ; open AIC for cranking
 8974 [05] 01422E    5459       brclr   running,engine,Idle_doneJMP1    ; no PWM adjust when not running
                     5460  ;*;        brset   crank,engine,jeskipAdjust ; Don't adjust idle during cranking
                     5461  ;*        lda     feature13_f
                     5462  ;*        bit     #idle_warmupb
                     5463  ;*        beq     idle_closedloop
                     5464  ;*;  bra     idle_closedloop  ;?? this prevents open loop from working
                     5465  
                     5466  ;*; Warmup PWM
                     5467  ;*idle_openloop:
 8977 [03] B6CC      5468          lda     coolant
 8979 [04] C1E812    5469          cmp     slowIdleTemp_f
 897C [03] 2507      5470          blo     idle_loopcold
                     5471  ;*        lda     feature13_f                 ; If we are not using closed loop then clear DC
                     5472  ;*        bit     #idle_clb
                     5473  ;*        beq     clrNskip
                     5474  ;*        bra     idle_closedloop
                     5475  
                     5476  ;*clrNskip:
 897E [04] C6E806    5477          lda     idle_dc_hi              ; Store hot DC in Idle DC
 8981 [03] B755      5478          sta     idleDC                  ; Added for setting idle DC as if ignition turned
 8983 [03] 2020      5479          bra     idle_DoneJMP1                ; on when engine hot
                     5480  
                     5481  idle_loopcold:
                     5482          ; determine duty cycle by linear interpolation
 8985 [04] C6E811    5483          lda     fastIdletemp_f
 8988 [03] B794      5484          sta     liX1
 898A [04] C6E812    5485          lda     slowIdleTemp_f
 898D [03] B795      5486          sta     liX2
 898F [04] C6E800    5487          lda     idle_dc_lo
 8992 [03] B796      5488          sta     liY1
 8994 [04] C6E806    5489          lda     idle_dc_hi
 8997 [03] B797      5490          sta     liy2                ; rmd upper duty limit
 8999 [03] B6CC      5491          lda     coolant
 899B [03] B798      5492          sta     liX
 899D [05] CD9B63    5493          jsr     lininterp
 89A0 [05] 4E9955    5494          mov     liY,idleDC
 89A3 [03] 2047      5495       bra     idle_closedloop
                     5496  
                     5497  Idle_doneJMP1:
 89A5 [03] CC89EC    5498       jmp     Idle_done
                     5499  
                     5500  Crank_PWM:
 89A8 [05] 0E6B1C    5501       brset   istartbit,EnhancedBits6,start_delay
 89AB [04] C6E811    5502       lda     fastIdletemp_f          ; interpolate delay to 0 at
 89AE [03] B794      5503       sta     tmp1                    ; slow idle temp
 89B0 [04] C6E812    5504       lda     slowIdleTemp_f
 89B3 [03] B795      5505       sta     tmp2
 89B5 [04] C6E80C    5506       lda     idlestartclk_f
 89B8 [03] B796      5507       sta     tmp3
 89BA [03] 3F97      5508       clr     tmp4
 89BC [05] 4ECC98    5509       mov     coolant,tmp5
 89BF [05] CD9B63    5510       jsr     lininterp
                     5511  ;    mov     tmp6,idleDelayClock
 89C2 [03] B699      5512       lda     tmp6
 89C4 [04] C70111    5513       sta     idleDelayClock
                     5514  start_delay:
 89C7 [04] C6E802    5515       lda     idlecrankdc_f
 89CA [03] B755      5516       sta     idleDC
 89CC [03] B7CD      5517       sta     idlelastdc
 89CE [04] 1E6B      5518       bset    istartbit,EnhancedBits6 ; let em know we are starting...
 89D0 [04] C60111    5519       lda     idledelayClock          ; Make sure we settle here for a bit
 89D3 [03] 26D0      5520       bne     idle_doneJMP1           ; clear the bit after the wait time
 89D5 [04] 1F6B      5521       bclr    istartbit,EnhancedBits6 ; we are no longer starting
 89D7 [04] 1E42      5522       bset    idleon,engine           ; we want to idle down
 89D9 [04] 1C6B      5523       bset    idashbit,EnhancedBits6  ; we want to bypass the rpm test for a bit
 89DB [04] C6E80C    5524       lda     idlestartclk_f          ; load start delay clock again
 89DE [04] C1E803    5525       cmp     idleDelayClock_f
 89E1 [03] 2203      5526       bhi     longer_delay
 89E3 [04] C6E803    5527       lda     idleDelayClock_f
                     5528  longer_delay:
 89E6 [04] C70111    5529       sta     idleDelayClock          ; to allow for the decay time
                     5530  
                     5531  Idle_doneJMP2:
 89E9 [03] CC89EC    5532       jmp     Idle_done
                     5533  
                     5534  idle_closedloop:
                     5535  ;*;  brclr   idle_cl,feature7,Idle_doneJMP1
                     5536  ;*        lda     feature13_f
                     5537  ;*        bit     #idle_clb
                     5538  ;*        beq     idle_DoneJMP1
                     5539  ;*   lda     tps
                     5540  ;*   cmp     IdleThresh_f            ; compare tps with treshold
                     5541  ;*   bhi     close_AIC               ; tps based closure
                     5542  
                     5543  ;*IDLE_RPM:                          ; Ubipa's idle regulation code
                     5544  ;*   lda     #24T
                     5545  ;*   cmp     rpm                     ; now check rpms
                     5546  ;*   blo     revs_over               ; make sure rpms below are < 2400 rpm
                     5547  ;*   clr     intacc1                 ; routine to determine 8 bit RPM value x10
                     5548  ;*   clr     intacc1+1
                     5549  ;*   ldhx    rpmph
                     5550  ;*   sthx    intacc2
                     5551  ;*   lda     #10T
                     5552  ;*   ldx     rpmk_f1+1               ; LSB of multiplicand.
                     5553  ;*   mul
                     5554  ;*   sta     intacc1+3               ; LSB of result stored.
                     5555  ;*   stx     intacc1+2               ; Carry on stack.
                     5556  ;*   lda     #10T
                     5557  ;*   ldx     rpmk_f1                 ; MSB of multiplicand.
                     5558  ;*   mul
                     5559  ;*   add     intacc1+2               ; Add in carry from LSB.
                     5560  ;*   sta     intacc1+2               ; MSB of result.
                     5561  ;*   jsr     udvd32                  ; 32 / 16 divide
                     5562  ;*   lda     intacc1+3               ; get 8-bit RPM result
                     5563  ;*   sta     idlerpm                 ; of current RPM x10
                     5564  ;*   bra     IDLE_SPEED
                     5565  
                     5566  ;*revs_over:                         ; ensure that revs do not overflow
                     5567  ;*   lda     #240T                   ; set at 2400 rpm
                     5568  ;*   sta     idlerpm
                     5569  ;*   bra     IDLE_SPEED
                     5570  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 42
MC68HC908GP32 User Bootloader


                     5571  ;*close_AIC_rpm:
                     5572  ;*   brset   idashbit,EnhancedBits6,rpm_delay ; but not if dashpot is set
                     5573  ;*close_AIC:
                     5574  ;*   bclr    idashbit,EnhancedBits6  ; turn off dashpot bit
                     5575  ;*   bclr    idleon,engine           ; turn off idle bit
                     5576  ;*   lda     idleCtlClock            ; step close the AIC
                     5577  ;*   cmp     Idashdelay_f            ; with this many 1/10 sec between steps
                     5578  ;*   blo     Idle_doneJMP2
                     5579  ;*   clr     idleCtlClock
                     5580  ;*   lda     idleDC
                     5581  ;*   cmp     idleclosedc_f
                     5582  ;*   bls     Idle_doneJMP2
                     5583  ;*   deca
                     5584  ;*   sta     idleDC
                     5585  ;*   bra     Idle_doneJMP2
                     5586  
                     5587  ;*idash:                                     ; simplified dashpot
                     5588  ;*   brset   idashbit,EnhancedBits6,idle_doneJMP2
                     5589  ;*   bset    idleon,engine
                     5590  ;*   bset    idashbit,EnhancedBits6
                     5591  ;*   lda     idledashdc_f            ; take lastidleDC
                     5592  ;*   add     idlelastdc              ; add dashDC
                     5593  ;*   sta     idleDC
                     5594  ;*   lda     IdleDelayClock_f        ; start delay clock
                     5595  ;*   sta     idleDelayClock
                     5596  ;*   bra     idle_doneJMP
                     5597  
                     5598  ;*IDLE_SPEED:                                ; Determine idle speed target
                     5599  ;*   lda     slowIdle_f              ; based on coolant temp and targets
                     5600  ;*   cmp     idleTarget
                     5601  ;*   beq     RPM_TEST
                     5602  ;*   lda     fastIdletemp_f
                     5603  ;*   sta     tmp1
                     5604  ;*   lda     slowIdleTemp_f
                     5605  ;*   sta     tmp2
                     5606  ;*   lda     fastIdle_f
                     5607  ;*   sta     tmp3
                     5608  ;*   lda     slowIdle_f
                     5609  ;*   sta     tmp4
                     5610  ;*   mov     coolant,tmp5
                     5611  ;*   jsr     lininterp
                     5612  ;*   mov     tmp6,idleTarget
                     5613  
                     5614  ;*RPM_TEST:
                     5615  ;*   lda     idleTarget
                     5616  ;*   add     irestorerpm_f           ; tests to determine what to do based on RPM
                     5617  ;*   cmp     idlerpm                 ; now check rpms
                     5618  ;*   blo     close_AIC_rpm           ; close it above RPM threshold
                     5619  ;*   brset   idashbit,EnhancedBits6,rpm_delay ; always go here when dashbit is set
                     5620  ;*   bra     idleDC_test
                     5621  
                     5622  ;*rpm_delay:
                     5623  ;*   lda     idleDelayClock          ; Make sure we settle below the thresh before we
                     5624  ;*   bne     IdleDC_test             ; clear the bit after the wait time
                     5625  ;*   bclr    idashbit,EnhancedBits6  ; clear the dashbit after delay
                     5626  
                     5627  ;*idleDC_test:                               ; make sure that idleDC is reasonable and not closed
                     5628  ;*   brclr   idleon,engine,idash     ; dashpot if idleon is not set
                     5629  ;*   lda     idlemindc_f
                     5630  ;*   cmp     idleDC
                     5631  ;*   bls     IDLE_LOOP
                     5632  ;*   lda     idlelastdc              ; do not let idleDC drop below min for routine
                     5633  ;*   sta     idleDC                  ; we want to idle, calc rpm and target
                     5634  ;*   bra     IDLE_LOOP
                     5635  
                     5636  ;*Idle_doneJMP:
                     5637  ;*   bra     idle_done
                     5638  
                     5639  ;*IDLE_LOOP:                         ; delay time is proportional to deviance
                     5640  ;*   lda     ictlrpm2_f              ; from target
                     5641  ;*   sta     tmp1                    ; upper limit of rpm deviance
                     5642  ;*   lda     ictlrpm1_f
                     5643  ;*   sta     tmp2                    ; lower limit of rpm deviance
                     5644  ;*   lda     idleperiod_f
                     5645  ;*   sta     tmp3                    ; faster idlectl, lower #
                     5646  ;*   lda     idleperiod2_f
                     5647  ;*   sta     tmp4                    ; slower idlectl, higher #
                     5648  ;*   lda     idlerpm
                     5649  ;*   sub     idletarget
                     5650  ;*   sta     tmp5
                     5651  ;*   bcc     Ctl_speed
                     5652  ;*   nega
                     5653  ;*   sta     tmp5
                     5654  ;*;  rol     tmp1 ; comment per KG   ; SPEED THIS UP by halving the high rpm
                     5655  ;*Ctl_speed:
                     5656  ;*   jsr     lininterp
                     5657  ;*   lda     tmp6
                     5658  ;*   cmp     idleCtlClock
                     5659  ;*   bhi     Idle_done
                     5660  ;*   lda     idleTarget
                     5661  ;*   add     Ideadbnd_f      ; add tol. e.g. 850+2=870rpm
                     5662  ;*   cmp     idlerpm         ; compare with idle rpm
                     5663  ;*   blo     idle_dec        ; if lower the outside range so adjust
                     5664  ;*   lda     idleTarget
                     5665  ;*   sub     Ideadbnd_f      ; subtract 870-4=830rpm
                     5666  ;*   cmp     idlerpm
                     5667  ;*   bhi     idle_inc
                     5668  ;*   bra     Idle_done       ; idle is ok so exit
                     5669  
                     5670  ;*IDLE_INC:                  ; idle rpm is too low increase duty cycle
                     5671  ;*   lda     idledc
                     5672  ;*   cmp     idlefreq_f      ;these lines to accomodate freqs other than 100
                     5673  ;*   beq     Idle_done
                     5674  ;*   inca
                     5675  ;*   sta     idledc
                     5676  ;*   bra     IDLE_SAVE
                     5677  
                     5678  ;*IDLE_DEC:                  ; idle rpm is too high decrease duty cycle
                     5679  ;*   lda     idledc
                     5680  ;*   cmp     idlemindc_f
                     5681  ;*   beq     idle_done       ; lower duty cycle limit
                     5682  ;*   deca
                     5683  ;*   sta     idledc
                     5684  
                     5685  ;*IDLE_SAVE:
                     5686  ;*   clr     idleCtlClock    ; clear delay counter
                     5687  ;*   sta     idleLastDC      ; Save the last active idle dutycycle
                     5688  
                     5689  Idle_done:
                     5690  
                     5691  ******************************************************************************
                     5692  **          K n o c k  D e t e c t i o n  S y s t e m         P Ringwood    **
                     5693  **
                     5694  **    This receives an input in from the JP1 header, if its low it sees
                     5695  **    it as a knock.
                     5696  **    Basic functionality:
                     5697  **    Are we below the max rpm allowed?
                     5698  **      Yes- carry on with detection,
                     5699  **      No- reset all and end knock detection.
                     5700  **    Knock on input, retard ignition by the 1st retard value
                     5701  **    (KnockRetard1), start timer
                     5702  **    wait for timer to time out (KnockTimLft)
                     5703  **    Is it still knocking?
                     5704  **      Yes- then add knockretard2 value to total retard.
                     5705  **      No- then advance by KnockAdv amount.
                     5706  **    Is the total retard less than 1 degree?


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 43
MC68HC908GP32 User Bootloader


                     5707  **      Yes- reset all knock settings, goto start.
                     5708  **      No- so carry on with timer
                     5709  **    Check for knock. If knocking add retard2 restart timer - if not
                     5710  **    Wait for timer to time out before adding advance.
                     5711  **    Is it still knocking?
                     5712  **      Yes- then add knockretard2 value to total retard, restart timer.
                     5713  **      No- then advance by KnockAdv amount, restart timer.
                     5714  **    Is the total retard less than 1 degree?
                     5715  **      Yes- reset all knock settings, goto start.
                     5716  **      No- so carry on with timer
                     5717  **    When timer timed out check for knock? If knocking add knockRetard2,
                     5718  **    if not advance
                     5719  **    etc, etc,
                     5720  **
                     5721  ****************************************************************************
                     5722  ****************************************************************************
                     5723  ;*Knock_Detection:
                     5724  
                     5725  ;*        lda     feature3_f
                     5726  ;*        bit     #KnockDetb
                     5727  ;*        beq     End_KnockJmp   ; knock not enabled
                     5728  
                     5729  ;*        lda     feature8_f
                     5730  ;*        bit     #spkfopb
                     5731  ;*        bne     End_KnockJmp   ; Spark output F enabled, incompatible
                     5732  
                     5733  ;*        clrh
                     5734  ;*        lda    rpm
                     5735  ;*        cmp    KnockRpmL_f         ; Is the engine rpm too high for
                     5736                                       ; the knock sensor?
                     5737  ;*        bhi    Clr_KnockJmp                ; If it is clear values, no more retard
                     5738  ;*        cmp    KnockRpmLL_f                ; Is it running lower than the
                     5739                                       ; low rpm setpoint?
                     5740  ;*        blo    Clr_KnockJmp                ; If so clear all values, no
                     5741                                       ; more retard
                     5742  ;*        lda    kpa
                     5743  ;*        cmp    KnockKpaL_f         ; Is the boost above the limit
                     5744                                       ; for knock system?
                     5745  ;*        bhi    Clr_KnockJmp                ; If it is clear knock values,
                     5746                                       ; no more retard.
                     5747  ;*        brset  Knocked,SparkBits,KnockTLeft        ; If knock has been
                     5748                                       ; previously detected do timer
                     5749  ;*        brset  Advancing,RevLimBits,KnockALeft     ; If we are advancing back
                     5750  ;*        brset  KnockIn,portd,End_KnockJmp  ; If no knock on input
                     5751                                       ; then no knock
                     5752  ;*        bset   Knocked,SparkBits   ; 1st Knock on input so set knocked bit
                     5753  ;*        lda    KnockRet1_f
                     5754  ;*        sta    KnockAngle          ; Load in first retard amount
                     5755  ;*        lda    BoostKnock_f                ; Value to remove from Boost controller
                     5756  ;*        sta    KnockBoost          ; target
                     5757  ;*        jmp    Start_KnockTime             ; Start the knock timer
                     5758  
                     5759  ;*KnockTLeft:
                     5760  ;*        bclr   Advancing,RevLimBits        ; Clear advance bit as we are retarding
                     5761  ;*        lda    KnockTimLft
                     5762  ;*        cmp    #00T
                     5763  ;*        beq    NoTimeLeft          ; If timer counted down then add
                     5764                                       ; some advance
                     5765  ;*        jmp    End_KnockJmp                ; End of Knock
                     5766  
                     5767  ;*KnockALeft:
                     5768  ;*        bclr   Knocked,SparkBits   ; Clear Retard set bit as we
                     5769                                       ; are advancing
                     5770  ;*        brclr  KnockIn,portd,Knocking_Still        ; Do we have any knocking?
                     5771  ;*        lda    KnockTimLft
                     5772  ;*        cmp    #00T
                     5773  ;*        beq    NoTimeLeft          ; If timer counted down then add
                     5774                                       ; some advance
                     5775  ;*        jmp    End_KnockJmp                ; End of Knock
                     5776  
                     5777  ;*NoTimeLeft:
                     5778  ;*         brclr KnockIn,portd,Knocking_Still        ; Still knocking?
                     5779  ;*         bclr  Knocked,SparkBits   ; No Knocking so clear knock bit
                     5780  ;*         bset  Advancing,SparkBits ; Set advancing bit
                     5781  ;*         lda   Boostknock_f
                     5782  ;*         beq   No_BoostKnock               ; if no Boost Knock value then
                     5783                                       ; jump past checks
                     5784  ;*         lda   KnockBoost          ; Value to add to Boost controller
                     5785  ;*         sub   BoostKnock_f                ; target
                     5786  ;*         sta   KnockBoost
                     5787  ;*         cmp   #03T
                     5788  ;*         blo   ClearTime           ; If target boost less than
                     5789                                       ; 0.5psi then clear all
                     5790  ;*No_BoostKnock:
                     5791  ;*         lda   KnockAngle          ; No Knock detected and time
                     5792                                       ; period over
                     5793  ;*         sub   KnockAdv_f          ; so remove some retard
                     5794  
                     5795  ;*StoreKnock:
                     5796  ;*         cmp   #03T
                     5797  ;*         blo   ClearTime           ; If retard is less than 1deg
                     5798                                       ; clear timer, we have finished
                     5799  ;*         cmp   #85T
                     5800  ;*         bhi   ClearTime           ; If we are above 30 Degrees
                     5801                                       ; then somethings wrong so clear retard
                     5802  ;*         sta   KnockAngle
                     5803  ;*         jmp   Start_KnockTime
                     5804  
                     5805  ;*Clr_KnockJmp:
                     5806  ;*         jmp   Clr_Knock
                     5807  ;*End_KnockJmp:
                     5808  ;*         jmp   End_Knock
                     5809  
                     5810  ;*ClearTime:                         ; No Knocks and retard back to start
                     5811                                       ; so clear everything.
                     5812  ;*         lda   #00T
                     5813  ;*         sta   KnockAngle          ; Clear the knock angle
                     5814  ;*         sta   KnockTimLft         ; Clear the time left value
                     5815  ;*         sta   KnockAngleRet               ; Clears actual knock angle
                     5816  ;*         sta   KnockBoost          ; Clear the boost value to remove
                     5817  ;*         bclr  Knocked,SparkBits   ; Clear the Knocked bit
                     5818  ;*         bclr  Advancing,RevLimBits        ; Clear advance bit
                     5819  ;*         jmp   End_Knock           ; Go to end of knock system
                     5820  
                     5821  ;*Knocking_Still:
                     5822  ;*         bset  Knocked,SparkBits   ; Set Knocking bit
                     5823  ;*         bclr  Advancing,RevLimBits        ; Clear the advance bit as we are
                     5824                                       ; in knock retard
                     5825  ;*         lda   KnockBoost
                     5826  ;*         add   BoostKnock_f                ; Increase the amount of boost to remove
                     5827  ;*         cmp   BoostKnMax_f                ; Are we at max?
                     5828  ;*         blo   Store_Boost_Remove  ; No so store boost to remove
                     5829  ;*         lda   BoostKnMax_f                ; Yes so store the max
                     5830  ;*Store_Boost_Remove:
                     5831  ;*         sta   KnockBoost
                     5832  ;*         lda   KnockRet2_f         ;
                     5833  ;*         add   KnockAngle          ; add the knock retard angle2 to
                     5834                                       ; knock angle
                     5835  ;*         cmp   KnockMax_f          ; Are we at the max retard?
                     5836  ;*         blo   Not_atMax           ; If not at max store new angle
                     5837  ;*         lda   KnockMax_f          ; If above max load the max allowed.
                     5838  
                     5839  ;*Not_atMax:
                     5840  ;*         sta   KnockAngle          ; Store new knock angle
                     5841  
                     5842  ;*Start_KnockTime:


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 44
MC68HC908GP32 User Bootloader


                     5843  ;*         lda   KnockTim_f          ; Start/Restart the knock timer
                     5844  ;*         sta   KnockTimLft
                     5845  ;*         lda   #255T
                     5846  ;*         sub   KnockAngle          ; (255-Knock Angle) turns it into a retard angle
                     5847  ;*         cmp   #$aa                        ; Limit the retard to 30 degrees
                     5848  ;*         bhi   StoreAngle
                     5849  ;*         lda   #$aa
                     5850  ;*         jmp   StoreAngle
                     5851  
                     5852  ;*Clr_Knock:
                     5853  ;*         bclr   Knocked,SparkBits  ; Clear the Knocked bit
                     5854  ;*         bclr   Advancing,RevLimBits       ; Clear advancing bit
                     5855  ;*         lda    #$00                       ; Clear the knock angle value
                     5856  ;*         sta    KnockBoost         ; Clear the boost value to remove
                     5857   ;*        sta    KnockAngle
                     5858  
                     5859  ;*StoreAngle:
                     5860  ;*         sta    KnockAngleRet              ; Actual retard value for MSnS
                     5861  
                     5862  ;*End_Knock:
                     5863  ******************************************************************************
                     5864  ******************************************************************************
                     5865  **  Anti-Rev System                     P Ringwood
                     5866  **  System based on rate of change of rpm or input signals from
                     5867  **  2 x Vehicle Speed Sensors
                     5868  **  Fuel enrichment, to bog down the engine and retard angle are
                     5869  **  interpolated from the 4 bins of each setting. Spark Cut isn't
                     5870  **  interpolated as it's not worth the effort as it's such a low
                     5871  **  figure (1 or 2 cuts)
                     5872  **  Now added cycle counter so it can hold settings for an interpolated amount
                     5873  **  of engine cycles. Uses ASEcount, so can only work after start warm up over.
                     5874  **  Using this saves making h file bigger and adding yet another counter
                     5875  **  to the interupt.
                     5876  **
                     5877  ********************************************************************************
                     5878  ********************************************************************************
                     5879  
                     5880  ;*        lda   feature6_f
                     5881  ;*        bit   #TractionCb
                     5882  ;*        beq   Traction_DoneJMP
                     5883  
                     5884  ;*TractionSystem:
                     5885  ;*        brclr   running,engine,No_TC_Yet; Only use it if engine running
                     5886  ;*        brset   crank,engine,No_TC_Yet  ; Dont use it during cranking as we use some
                     5887                                          ; traction bytes
                     5888  ;*        brset   startw,engine,No_TC_Yet    ; only use Anti-Rev when after
                     5889                                       ; start enrichment over
                     5890  ;*        brset   WheelSensor,feature7,No_RPM_Thresh ; If using wheel
                     5891                                       ; sensors then no need to look at rpm
                     5892  ;*Do_RPM_TC:
                     5893  ;*        lda     rpm
                     5894  ;*        cmp     rpmlast
                     5895  ;*        bhs     RPM_Thresh         ; Has the rpm increased?
                     5896  ;*NO_TC_Loss:
                     5897  ;*        brset   Traction,EnhancedBits2,reset_TC_Yet        ; Have we selected
                     5898                                       ; to wait till cycle counter timed out?
                     5899  ;*Reset_TC_Now:
                     5900  ;*        bclr    Traction,EnhancedBits2     ; Clear the traction control bit
                     5901  ;*        lda     #00T
                     5902  ;*        sta     TCCycles
                     5903  ;*        sta     TCAngle
                     5904  ;*        sta     TCAccel
                     5905  ;*        sta     ASEcount
                     5906  ;*No_TC_Yet:
                     5907  ;*        jmp     Traction_Done                              ; No so return
                     5908  
                     5909  ;*No_RPM_Thresh:
                     5910  
                     5911  ;      Driven input = egtadc     Non-Driven input = o2_fpadc
                     5912  ; If under max speed and over min speed, multiply driven speed sensor
                     5913  ; input by the scale factor to find the speed the un-driven sensor should be at.
                     5914  ; Then find the allowable slip amount based on calculated estimate speed
                     5915  ; than actual then we have lost traction. I think:-)
                     5916  
                     5917  ;*        lda     o2_fpadc           ; Non-driven speed sensor input
                     5918  ;*        cmp     UDSpeedLim_f               ; Have we reached the speed limit?
                     5919  ;*        bhi     Reset_TC_Now               ; Yes so reset TC
                     5920  ;*        cmp     UDSpeedLo_f                ; Are we above the minimum speed?
                     5921  ;*        blo     Reset_TC_Now               ; Yes so reset TC
                     5922  ;*        clrh
                     5923  ;*        ldx     egtadc                     ; Put Driven input into x reg
                     5924  ;*        lda     TCScaleFac_f               ; Multiply by the differential factor
                     5925  ;*        mul
                     5926  ;*        txa                                ; Transfer high byte to accumulator
                     5927  ;*        bcc     Carry_LC           ; Is the carry bit set?
                     5928  ;*        inca
                     5929  ;*Carry_LC:                          ; Acc contains result
                     5930  ;*        sta     tmp32
                     5931  ;*        sub     o2_fpadc           ; subtract undriven wheel speed
                     5932  ;*        bmi     NO_TC_Loss         ; Drive wheels slower than undriven,
                     5933                                       ; no TC
                     5934  
                     5935  ;*; Interpolate to find allowable slip depending on vehicle speed
                     5936  ;*; (store allowed slip in tmp31)
                     5937  ;*        clr    liX1                        ; Set minimum speed to 00
                     5938  ;*        lda    #127T                       ; Set maximum speed for
                     5939                                       ; interpolater to half speed
                     5940  ;*        sta    liX2
                     5941  ;*        lda    TCSlipFac_f         ; Slip allowed at minimum speed
                     5942                                       ; (00 liX1)
                     5943  ;*        sta    liY1
                     5944  ;*        lda    TCSlipFacH_f                ; Slip allowed at half speed
                     5945  ;*        sta    liY2
                     5946  ;*        lda    o2_fpadc                    ; Actual speed were running at
                     5947  ;*        sta    liX
                     5948  ;*        jsr    LinInterp           ; Go and find out what slip is
                     5949                                       ; allowed at current speed
                     5950  ;*        sta    tmp31
                     5951  
                     5952  ; Find out if we are slipping over the amount allowed
                     5953  ;*        ldx     tmp32                      ; Load x reg with speed undriven
                     5954                                       ; wheels should be (calculated
                     5955                                       ; from driven wheel)
                     5956  ;*        lda     tmp31                      ; Multiply by the allowable
                     5957                                       ; difference factor (slip allowed)
                     5958  ;*        mul
                     5959  ;*        txa                                ; Transfer high byte to acc
                     5960  ;*        bcc     Carry_Slip
                     5961  ;*        inca
                     5962  ;*Carry_Slip:
                     5963  ;*        add     o2_fpadc           ; Acc = speed of undriven wheel
                     5964                                       ; + slip allowed
                     5965  ;*        bcs     NO_TC_Loss         ; If we go over 255 then no traction
                     5966  ;*        cmp     tmp32                      ; Compare to calculated speed of
                     5967                                       ; undriven wheel
                     5968  ;*        bhi     NO_TC_Loss         ; Were not over limit so no TC
                     5969  ;*        sta     tmp31                      ; Store speed of undriven wheel
                     5970                                       ; + slip allowed
                     5971  ;*        lda     tmp32                      ; Load calculated value of
                     5972                                       ; undriven wheel
                     5973  ;*        sub     tmp31
                     5974  ;*        sta     tmp32                      ; Store amount of traction loss
                     5975  ;*        bra     VSSThresh_RJMP
                     5976  
                     5977  ;*Traction_DoneJMP:
                     5978  ;*        jmp     Traction_Done


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 45
MC68HC908GP32 User Bootloader


                     5979  
                     5980  ; If were here weve had Anti-Rev working and rpm is stable so do we
                     5981  ; reset it yet or later?
                     5982  ;*reset_TC_Yet:
                     5983  ;*        brclr   TCcycleSec,feature7,Reset_TC_Now   ; Reset it now if
                     5984                                       ; stable rpm selected
                     5985  ;*        bra     Check_TC_Counter   ; Not reseting on stable rpm
                     5986                                       ; so check cycle counter
                     5987  
                     5988  ;*RPM_Thresh:
                     5989  ;*        lda     rpm
                     5990  ;*        sub     rpmlast
                     5991  ;*        cmp     RPMthresh_f                ; Have we increased rpm above
                     5992                                       ; the threshold?
                     5993  ;*        bhs     Thresh_Reach
                     5994  
                     5995  ;*Check_TC_Counter:
                     5996  ;*        lda     ASEcount           ; Use after start warmup counter
                     5997                                       ; as its only used for a few
                     5998                                       ; seconds on start up.
                     5999  ;*        cmp     TCCycles
                     6000  ;*        blo     Dont_Reset_Tract   ; Only reset angle and accel
                     6001                                       ; enrich after nn cycles
                     6002  ;*        bclr    Traction,EnhancedBits2     ; Clear the traction control bit
                     6003  ;*        lda     #00T
                     6004  ;*        sta     TCAngle
                     6005  ;*        sta     TCAccel
                     6006  ;*        sta     ASEcount
                     6007  ;*Dont_Reset_Tract:
                     6008  ;*        jmp     Traction_Done
                     6009  
                     6010  ;*; For RPM Based Anti-Rev
                     6011  ;*Thresh_Reach:
                     6012  ;*        bset    Traction,EnhancedBits2     ; Set the traction control bit
                     6013  ;*        lda     #00T
                     6014  ;*        sta     ASEcount           ; Reset the cycle counter
                     6015  ;*        clr     tmp2
                     6016  
                     6017  ;*; Find the rate of change from the table lookup, store it in tmp31 for
                     6018  ;*; the rest of the interpolaters
                     6019  ;*        ldhx    #rpmdotrate                ; Store address for finding
                     6020                                       ; rate of change
                     6021  ;*        sthx    tmp1
                     6022  ;*        mov     #$03,tmp3          ; Table size 4 (3+1)
                     6023  ;*        lda     rpm
                     6024  ;*        sub     rpmlast
                     6025  ;*        sta     tmp4
                     6026  ;*        sta     tmp10
                     6027  ;*        jsr     tablelookup                ; Go find the address
                     6028  ;*        clrh
                     6029  ;*        lda     tmp5                       ; Put Address value from lookup
                     6030                                       ; into x reg
                     6031  ;*        tax
                     6032  ;*        sta     tmp31                      ; Save tmp5 for next lin inter
                     6033  ;*        bra     TC_Interpoler
                     6034  
                     6035  ;*VSSThresh_RJMP:
                     6036  ;*        bra     VSSThresh_Reach
                     6037  
                     6038  ;*TC_Interpoler:
                     6039  ;*; Enrichment interpole
                     6040  ;*        lda     RPMrate_f,x                ; Load the enrich value
                     6041  ;*        sta     liY2
                     6042  ;*        decx
                     6043  ;*        lda     RPMrate_f,x                ; Load the enrich value - 1
                     6044  ;*        sta     liY1
                     6045  ;*        mov     tmp10,liX
                     6046  ;*        jsr     LinInterp
                     6047  ;*        lda     tmp6                       ; result from Lin Inter
                     6048  ;*        sta     TCAccel                    ; Store enrichment
                     6049  
                     6050  ;*; Retard angle interpole
                     6051  ;*        ldx     tmp31                      ; Address from lookup table
                     6052  ;*        lda     TractDeg_f,x
                     6053  ;*        sta     liY2
                     6054  ;*        decx
                     6055  ;*        lda     TractDeg_f,x               ; Load the angle value - 1
                     6056  ;*        sta     liY1
                     6057  ;*        mov     tmp10,liX
                     6058  ;*        jsr     LinInterp
                     6059  ;*        lda     #255T                      ; 255 - result = retard angle
                     6060  ;*        sub     tmp6                       ; result from Lin Inter
                     6061  ;*        sta     TCAngle                    ; Store retard angle
                     6062  
                     6063  ;*; Engine cycles to hold interpole
                     6064  ;*        ldx     tmp31                      ; Address from lookup table
                     6065  ;*        lda     TractCycle_f,x ;
                     6066  ;*        sta     liY2
                     6067  ;*        decx
                     6068  ;*        lda     TractCycle_f,x             ; Load the cycle hold value - 1
                     6069  ;*        sta     liY1
                     6070  ;*        mov     tmp10,liX
                     6071  ;*        jsr     LinInterp
                     6072  ;*        lda     tmp6
                     6073  ;*        sta     TCCycles
                     6074  
                     6075  ; Spark Cut finder
                     6076  ;*        ldx     tmp31
                     6077  ;*        lda     TractSpark_f,x
                     6078  ;*        sta     TCSparkCut         ; No need to lin interpolate as
                     6079  
                     6080  ;*        bra     Traction_Done
                     6081  
                     6082  ;*TC_InterpJMP:
                     6083  ;*        bra   TC_Interpoler
                     6084  
                     6085  ; For speed sensor Anti-Rev system, find table value. Tmp32 contains loss
                     6086  ;*VSSThresh_Reach:
                     6087  ;*        bset    Traction,EnhancedBits2     ; Set the traction control bit
                     6088  ;*        lda     #00T
                     6089  ;*        sta     ASEcount           ; Reset the cycle counter
                     6090  ;*        clr     tmp2
                     6091  ; Find percentage of loss: Undriven wheel/100 * loss of traction (tmp32)
                     6092  ;*        lda     o2_fpadc
                     6093  ;*        clrh
                     6094  ;*        ldx     #100T
                     6095  ;*        div                                ; (H:A) / X ->A, rem in H
                     6096  ;*        tax
                     6097  ;*        pshh
                     6098  ;*        pula
                     6099  ;*        cmp     #50T                       ; Is remainder higher than half
                     6100  ;*                                   ; divisor?
                     6101  ;*        blo     Round_Slip_Per
                     6102  ;*        incx
                     6103  ;*Round_Slip_Per:
                     6104  ;*        lda     tmp32
                     6105  ;*        mul                                ; X*A -> (X:A)
                     6106  ;*        cpx     #0T                        ; Did we overflow?
                     6107  ;*        beq     No_OF_Slip
                     6108  ;*        lda     #100T                      ; 100% max
                     6109  ;*No_OF_Slip:
                     6110  ;*        cmp     #100T
                     6111  ;*        blo     Slip_Percentage
                     6112  ;*        lda     #100T
                     6113  ;*Slip_Percentage:
                     6114  ;*        sta     tmp32                      ; Store percentage slip


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 46
MC68HC908GP32 User Bootloader


                     6115  
                     6116  ; Find the percent slip from the table lookup, store it in tmp31 for
                     6117  ; the rest of the interpolaters
                     6118  ;*        ldhx    #sliprate          ; Store address for finding slipage
                     6119  ;*        sthx    tmp1
                     6120  ;*        mov     #$03,tmp3          ; Table size 4 (3+1)
                     6121  ;*        lda     tmp32                      ; Percentage of loss
                     6122  ;*        sta     tmp4
                     6123  ;*        sta     tmp10
                     6124  ;*        jsr     tablelookup                ; Go find the address
                     6125  ;*        clrh
                     6126  ;*        lda     tmp5                       ; Put Address value from lookup
                     6127                                       ; into x reg
                     6128  ;*        tax
                     6129  ;*        sta     tmp31                      ; Save tmp5 for next lin inter
                     6130  ;*        bra     TC_InterpJMP               ; Now go and work out the
                     6131                                       ; enrichments, etc
                     6132  
                     6133  ;*Traction_Done:
                     6134  
                     6135  ***************************************************************************
                     6136  ********************    S U B   S E C T I O N    L O O P     **************
                     6137  ***************************************************************************
                     6138  
                     6139  ;SubSectionLoop:
                     6140  ;*        brset   Primed,EnhancedBits,Prime_Checked  ; Have we primed?
                     6141  ;*        jmp     NotPrimed
                     6142  
                     6143  ;*Prime_Checked:
                     6144  ;*        brclr   BoostControl,feature2,no_boost
                     6145  ;*        jsr     CalcBoostDC
                     6146  
                     6147  ;*no_boost:
                     6148  ;*        brclr   Nitrous,feature1,no_nitrous
                     6149  ;*        jsr     EnableN2O
                     6150  
                     6151  ;*no_nitrous:
                     6152  ;*        lda     feature6_f
                     6153  ;*        bit     #VETable3b
                     6154  ;*        beq     No_VE_Table_3
                     6155  ;*        jsr     Check_VE3_Table
                     6156  
                     6157  ;*No_VE_Table_3:
                     6158  ;*        lda   feature3_f
                     6159  ;*        bit   #TargetAFRb
                     6160  ;*        beq   No_AFRTar_VE1
                     6161                              ; Are we using the
                     6162                                                       ; target afrs for
                     6163                                                       ; table 1?
 89EC [05] CD9D71    6164          jsr     AFR1_Targets; Get Target AFR
                     6165                                                       ; from table 1 for VE 1
                     6166  ;*NO_AfrTar_VE1:
                     6167  ;*        lda   feature6_f
                     6168  ;*        bit   #TargetAFR3b
                     6169  ;*        beq   No_AfrTar_VE3
                     6170  ;*        jsr     AFR2_Targets; Are we using the
                     6171                                                       ; target afrs for
                     6172                                                       ; table 3?
                     6173                                       ; Get Target AFR
                     6174                                                       ; from table 2 for VE 3
                     6175  ;*No_AfrTar_VE3:
 89EF [05] 004203    6176          brset   running,engine,nospkoff   ; skip next check
                     6177          ;if not running then make sure all spark outputs are OFF
                     6178          ;this is a bandaid, but better safe than sorry
 89F2 [05] CD8AC9    6179          jsr     turnallsparkoff     ; subroutine to stop them all
                     6180  nospkoff:
                     6181  ;*        lda    personality_f
                     6182  ;*        beq    No_misc_Spark
 89F5 [05] CD8B3F    6183          jsr    misc_spark                              ; dwell and other bits
                     6184  
                     6185  No_misc_Spark:
                     6186  ;This section checks for imminent T2 rollover. Trying to avoid a race condition where
                     6187  ;the timer overflows but we try to read software byte before the overflow handler
                     6188  ; gets there. This would give an incorrect 24bit "current" value
 89F8 [02] 9B        6189          sei
 89F9 [05] 006904    6190          brset  roll1,EnhancedBits4,roll1set
 89FC [04] 1369      6191          bclr   roll2,EnhancedBits4
 89FE [03] 2002      6192          bra    chk_roll
                     6193  roll1set:
 8A00 [04] 1269      6194          bset   roll2,EnhancedBits4
                     6195  chk_roll:
 8A02 [03] B62D      6196          lda    T2CNTL           ; unlatch any previous read
 8A04 [03] B62C      6197          lda    T2CNTH
 8A06 [02] A1FF      6198          cmp    #$FF
 8A08 [03] 2604      6199          bne    roll_not_high
 8A0A [04] 1069      6200          bset   roll1,EnhancedBits4
 8A0C [03] 2002      6201          bra    chkroll_end
                     6202  roll_not_high:
 8A0E [04] 1169      6203          bclr   roll1,EnhancedBits4
                     6204  chkroll_end:
 8A10 [02] 9A        6205          cli
                     6206  
                     6207  ;test code
                     6208  ;check if 0.1ms code has executed since we got here last. Major problem if it
                     6209  ;hasn't.
 8A11 [05] 036A15    6210          brclr  checkbit,EnhancedBits5,troll_ck_done  ; ok
                     6211          ;oh dear, we've missed it
                     6212  
 8A14 [03] B62D      6213          lda     T2CNTL ; unlatch any previous read
 8A16 [03] B62C      6214          lda     T2CNTH
 8A18 [03] B794      6215          sta     tmp1
 8A1A [03] B62D      6216          lda     T2CNTL
 8A1C [02] AB0A      6217          add     #10T    ; interrupt will occur in 10us
 8A1E [01] 97        6218          tax
 8A1F [03] B694      6219          lda     tmp1
 8A21 [02] A900      6220          adc     #0T
 8A23 [03] B731      6221          sta     T2CH0H
 8A25 [03] BF32      6222          stx     T2CH0L
 8A27 [04] 1C30      6223          bset    TOIE,T2SC0           ; re-enable 0.1ms interrupt
                     6224  
                     6225  troll_ck_done:
 8A29 [04] 126A      6226          bset   checkbit,EnhancedBits5  ;set it here, 0.1ms will clear it
                     6227  
 8A2B [03] CC835D    6228          jmp    CalcRunningParameters                   ; Start main loop again
                     6229  
                     6230  ***************************************************************************
                     6231  **
                     6232  ** Cranking Mode
                     6233  **
                     6234  ** Pulsewidth is directly set by the coolant temperature value of
                     6235  ** 021p added facility to use Inlet Manifold air temp instead / as well
                     6236  ** CWU (at -40 degrees) and CWH (at 165 degrees) - value is interpolated
                     6237  **
                     6238  ** Leaves result in tmp1, clears tmp2.
                     6239  **
                     6240  ***************************************************************************
                     6241  
                     6242  crankingMode:
                     6243  ;*         brclr    running,engine,ExtraFuelCrank   ; We are stopped so do we add
                     6244                                                    ; extra fuel whilst cranking
 8A2E [05] 01420F    6245       brclr    running,engine,floodClear
                     6246  
                     6247  crankingModePrime:
 8A31 [04] 1242      6248      bset    crank,engine             ; Turn on cranking mode.
 8A33 [04] 1542      6249      bclr    startw,engine            ; Turn off ASE mode.
 8A35 [04] 1742      6250      bclr    warmup,engine            ; Turn off WUE mode.


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 47
MC68HC908GP32 User Bootloader


 8A37 [03] B647      6251      lda     tps                              ; ~70% comparison value for throttle
                     6252                                                   ; - flood clear trigger
 8A39 [04] C1E82C    6253      cmp     tpsflood_f
 8A3C [03] 2506      6254      blo     crankingPW
 8A3E [03] 3FE0      6255      clr     TCAccel
                     6256  
                     6257  floodClear:
 8A40 [01] 4F        6258      clra                                     ; Turn off pulses altogether.
 8A41 [03] CC8A86    6259      jmp     crankingDone
                     6260  
                     6261  ; Extra Fueling for Cranking! This is triggered if the TPS goes above the floodclear
                     6262  ; value 3 times before starting. Were using the NosDcOk Bit as its not used at cranking.
                     6263  ; Were also using various Traction Bytes too. All this to save RAM.
                     6264  
                     6265  ;*ExtraFuelCrank:
                     6266  ;*        lda     feature11_f4
                     6267  ;*        bit     #ExCrFuelb
                     6268  ;*        beq     floodClear              ; If Extra Cranking Fuel not selected then
                     6269                                          ; carry on as normal
                     6270  
                     6271  ;*        lda     tps
                     6272  ;*        cmp     tpsflood_f
                     6273  ;*        bhs     HighTPS                             ; Is the TPS higher than the floodclear value?
                     6274  ;*        brclr   NosDcOk,EnhancedBits,floodClear     ; No so go back to clearing PW
                     6275  ;*        bclr    NosDcOk,EnhancedBits
                     6276  ;*        inc     TCCycles                            ; Temp storage of TPS counter
                     6277  ;*        lda     TCCycles
                     6278  ;*        cmp     #03T
                     6279  ;*        blo     floodClear                          ; If we havent done it 3 times then clear PW
                     6280  ;*        lda     ExtraCrFu_f
                     6281  ;*        sta     TCAccel
                     6282  ;*        bra     floodClear
                     6283  
                     6284  ;*HighTPS:
                     6285  
                     6286  ;*        brset   NosDcOk,EnhancedBits,floodClear   ; Have we done this?
                     6287  ;*        bset    NosDcOk,EnhancedBits              ; Set bit so we dont do this again
                     6288  ;*        bra     floodClear
                     6289  
                     6290  
                     6291  
                     6292  crankingPW:
                     6293  ;This section is redundant because variable overwritten below
                     6294  ;        clr     liX1                        ; -40 + 40
                     6295  ;        lda     #205T                       ; 165 + 40 degrees (because of
                     6296  ;                                    ; offset in lookup table)
                     6297  ;        sta     liX2
                     6298  ;        lda     cwu_f1
                     6299  ;        sta     liY1
                     6300  ;        lda     cwh_f1
                     6301  ;        sta     liY2
                     6302  
                     6303  ;* choose coolant, airtemp or average
                     6304  ;*        lda     feature11_f4
                     6305  ;*        bit     #matcrankb
                     6306  ;*        bne     crpwmat
                     6307  ;*crpwclt:                           ; if cltcrank bit is 1 or 0
 8A44 [03] B6CC      6308          lda     coolant
                     6309  ;*        bra     crpwint
                     6310  
                     6311  ;*crpwmat:
                     6312  
                     6313  ;*        lda     feature11_f4
                     6314  ;*        bit     #cltcrankb
                     6315  ;*        beq     CltOnlyPulse
                     6316  ;*        lda     airtemp
                     6317   ;*       add     coolant
                     6318  ;*;        bcc     Clt_IAT_NOFlow   ; why ????
                     6319  ;*;        lda     #255T
                     6320  ;*;Clt_IAT_NOFlow:
                     6321  ;*        rora                               ; ( airtemp + coolant ) /2
                     6322  ;*        bra     crpwint
                     6323  
                     6324  ;*CltOnlyPulse:
                     6325  ;*        lda     airtemp                 ; Air Temp only
                     6326  ;*crpwint:
 8A46 [03] B798      6327      sta     liX
                     6328  
                     6329  ; Table look up for Cranking PW, liX already contains temperature to look for - PR
                     6330  
 8A48 [05] 4E9897    6331      mov     liX,tmp4         ; tmp4 holds the variable to look
                     6332                                               ; for in the lookup table
 8A4B [05] 4E989D    6333      mov     liX,tmp10                ; Save away for later use below
 8A4E [03] 459E13    6334      ldhx    #WWURANGE
 8A51 [04] 3594      6335      sthx    tmp1
 8A53 [04] 6E0996    6336      mov     #$09,tmp3                ; 10 bits wide
 8A56 [05] CD9B48    6337      jsr     tableLookup              ; This finds the bins when the
                     6338                                               ; temperatures are set
 8A59 [01] 8C        6339      clrh
 8A5A [03] BE98      6340      ldx     tmp5
 8A5C [04] D6E820    6341      lda     CrankPWs_f,x
 8A5F [03] B797      6342      sta     liY2
 8A61 [01] 5A        6343      decx
 8A62 [04] D6E820    6344      lda     CrankPWs_f,x     ; This finds the values for the
                     6345                                               ; PW at the above temperatures
 8A65 [03] B796      6346      sta     liY1
 8A67 [05] 4E9D98    6347      mov     tmp10,liX
 8A6A [05] CD9B63    6348      jsr     LinInterp
                     6349  
                     6350  ; If TCAccel > 0 then we are multiplying the Crank PW by it
                     6351  
 8A6D [03] B6E0      6352      lda     TCAccel
 8A6F [03] 2713      6353      beq     MultiFacCrank   ; Do we have a value to use?
 8A71 [03] B79D      6354      sta     tmp10
 8A73 [03] 3F9E      6355      clr     tmp11
 8A75 [03] B699      6356      lda     tmp6
 8A77 [03] B79F      6357      sta     tmp12
 8A79 [03] 3FA0      6358      clr     tmp13
 8A7B [05] CD9D1B    6359      jsr     Supernorm
 8A7E [03] B69D      6360      lda     tmp10
 8A80 [03] BB99      6361      add     tmp6            ; Add original PW back
 8A82 [03] 2002      6362      bra     crankingDone
                     6363  
                     6364  MultiFacCrank:
 8A84 [03] B699      6365      lda     tmp6                     ; Leave it where expected.
                     6366  
                     6367  crankingDone:
 8A86 [03] B794      6368          sta     tmp1
                     6369  ;*        brclr   CrankingPW2,feature1,no_crankpw2
 8A88 [03] B795      6370          sta     tmp2                 ; Pulse bank 2 just like bank 1.
 8A8A [04] 81        6371         rts
                     6372  ;*no_crankpw2:
                     6373  ;*       clr     tmp2                        ; Zero out bank 2 while cranking.
                     6374  ;*        rts
                     6375  
                     6376  
                     6377  
                     6378  ***************************************************************************
                     6379  ** Roger Enns' Staged Injection System
                     6380  ** (Modded for MSnS-Extra by P Ringwood)
                     6381  ** Calculate staged mode pulse width:
                     6382  **
                     6383  ** PW_STAGED = ((TMP11 + TPSACCEL) * ScaleFac / 512) - INJOCFUEL + TMP6
                     6384  **
                     6385  ** ScaleFac = Primary inj size /(Prim + Sec inj size) * 512, should always
                     6386  ** be <=255.  If identically sized injectors, use 255.


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 48
MC68HC908GP32 User Bootloader


                     6387  ***************************************************************************
                     6388  ;*CALC_STAGED_PW:
                     6389  ;*        lda     tmp11
                     6390  ;*        add     TPSACCEL
                     6391  ;*   add     NosPW
                     6392  ;*        bcs     MAX_PWM_ALLOWED2
                     6393  ;*        tax                                ; move calc'd pw to x-register
                     6394  ;*        lda     SCALEFAC_f         ; load SCALEFAC constant into
                     6395                                       ; accumulator
                     6396  ;*        mul                                ; multipy the two together,
                     6397                                       ; 16-bit result in x:a
                     6398  ;*        txa                                ; transfer high byte of
                     6399                                       ; pw*ScaleFac to accumlator,
                     6400                                       ; overwriting existing lower byte.
                     6401  ;*        lsra                               ; Shift bit pattern to the right
                     6402  ;*        bcc     NO_INC                     ; if carry bit clear, skip increment
                     6403  ;*        inca                               ; otherwise, increment accumulator
                     6404  ;*NO_INC:
                     6405  ;*        add     tmp6                       ; then add open time
                     6406  ;*        bcc     FINISHED_PW_COMP
                     6407  ;*MAX_PWM_ALLOWED2:                  ; THIS SHOULD NEVER HAPPEN
                     6408  ;*        lda     #$FE
                     6409  ;*FINISHED_PW_COMP:
                     6410  ;*        sta     pw_staged
                     6411       ; figure out how much to bring in during each pw scheduling time.
                     6412  ;*   lda     StgCycles_f
                     6413  ; redundant  cmp     #00T
                     6414  ;*   beq     staged_same             ; if gradual transition is off branch
                     6415  
                     6416       ; if the transition is done, branch
                     6417  ;*        brset      StgTransDone,EnhancedBits6,staged_same
                     6418  
                     6419       ; calculate the secondary pulse-width using the following formula:
                     6420       ; pw_staged2 = (((pw_staged - tmp6 + TPSACCEL) / StgCycles_f)
                     6421       ;                 * stgTransitionCnt) + tmp6)
                     6422  
                     6423  ;*   pshh
                     6424  ;*   tax
                     6425  ;*   lda     pw_staged
                     6426  ;*        sta     tmp22        ; stash a copy of pw_staged in tmp22
                     6427  ;*   sub     tmp6
                     6428  ;*   add     TPSACCEL
                     6429  ;*   add     NosPW
                     6430  ;*   clrh
                     6431  ;*   div
                     6432  ;*   cmp     #00T
                     6433  ;*   bne     continue_pw_2
                     6434  ;*   lda     #1T             ; the div resulted in a 0 answer, round up
                     6435       ; ok, now we have in the a register, the amt to add to secondary
                     6436       ; during every ignition event, so do it
                     6437  ;*continue_pw_2:
                     6438  ;*   tax
                     6439  ;*   lda     stgTransitionCnt
                     6440                                 ; if the count is 0, change to 1 to avoid
                     6441                                 ; instant transition
                     6442  ; redundant  cmp     #00T
                     6443  ;*   bne     continue_mul_2
                     6444  ;*   lda     #1T
                     6445  ;*   sta     stgTransitionCnt
                     6446  ;*continue_mul_2:
                     6447  ;*   mul
                     6448       ; now we have the amt to set pw_staged2 to
                     6449       ; add back the open time
                     6450  ;*   add     tmp6
                     6451  ;*   sta     pw_staged2
                     6452  
                     6453       ; now figure it out for pw_staged using the following formula
                     6454       ; (tmp11 - ((((tmp11 + tmp6 + TPSACCEL) - pw_staged) / StgCycles_f) *
                     6455          ; stgTransitionCnt)) + tmp6
                     6456       ; we add tmp6 in the innermost set of parens b/c pw_staged already
                     6457          ; has the open time in it, and adding the open time to tmp 11 will
                     6458          ; give us the time without the open-time when we subtract.
                     6459  
                     6460  ;*   lda     StgCycles_f
                     6461  ;*   tax
                     6462  ;*   lda     tmp11
                     6463  ;*   add     tmp6
                     6464  ;*   add     TPSACCEL    ; add this since it was included in calc for pw_staged
                     6465  ;*   add     NosPW
                     6466  ;*   sub     pw_staged   ; figure out how far to go from tmp11 to pw_staged
                     6467  ;*   clrh
                     6468  ;*   div                 ; then figure out how much per step
                     6469  ;*   cmp     #00T
                     6470  ;*   bne     continue_pw_1   ; the div resulted in a 0 answer, round up
                     6471  ;*   lda     #1T
                     6472  ;*continue_pw_1:
                     6473  ;*   tax
                     6474  ;*   lda     stgTransitionCnt
                     6475  ;*   mul                 ; calculate the amount to subtract from tmp11
                     6476  ;*   sta     pw_staged   ; use pw_staged as temporary storage
                     6477  ;*   lda     tmp11
                     6478  ;*   add     TPSACCEL
                     6479  ;*   sub     pw_staged
                     6480  ;*   add     tmp6
                     6481  ;*   sta     pw_staged
                     6482  
                     6483  ;*   cmp     pw_staged2   ; if pw_staged2 is greater than pw_staged,
                     6484                            ; we probably rounded, so use the original
                     6485                            ; pw_staged instead
                     6486  ;*   pulh
                     6487  
                     6488  ;*   bhi     check_staged_on ; we're done here, go see if staging should be
                     6489                               ; on or not.
                     6490  
                     6491  ;*staged_early_done:
                     6492  ;*        lda     tmp22   ; overshot so use the value we saved earlier
                     6493  ;*   sta     pw_staged       ; store here in case staged_same not executed
                     6494  ;*        bra     ss_s
                     6495  
                     6496  ;*staged_same:
                     6497       ; gradual transition is off or the transition is done, set the done bit
                     6498       ; so the count stops
                     6499  ;*   lda     pw_staged
                     6500  ;*ss_s:
                     6501  ;*   sta     pw_staged2
                     6502  ;*   bset    StgTransDone,EnhancedBits6
                     6503  
                     6504  ***************************************************************************
                     6505  **
                     6506  ** Check for injector staging - RPE
                     6507  **
                     6508  ** Staged based on kpa, rpm, or map - selectable via config13 bits 6,7
                     6509  **
                     6510  ** If >= STGTRANS, staged mode on
                     6511  ** If <= (STGTRANS - STGDELTA), staged mode off
                     6512  ** STGDELTA provides user-definable hysteresis to prevent 'chattering' during
                     6513  ** transition phase.
                     6514  **
                     6515  ***************************************************************************
                     6516  ;*check_staged_on:
                     6517  ;*        lda     feature5_f
                     6518  ;*        bit     #stagedModeb
                     6519  ;*        bne     LastCheck   ; If this bit is set then not RPM
                     6520  
                     6521  ;*        lda     STGTRANS_f         ; RPM-based staging
                     6522  ;*        cmp     rpm


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 49
MC68HC908GP32 User Bootloader


                     6523  ;*        bls     STAGED_ON
                     6524  ;*        sub     STGDELTA_f
                     6525  ;*        cmp     rpm
                     6526  ;*        bhs     STAGED_OFF
                     6527  ;*        rts
                     6528  
                     6529  ;*LastCheck:
                     6530  ;*        lda     feature5_f
                     6531  ;*        bit     #stagedb
                     6532  ;*        beq     MAPSTAGED ; If this bit is set then not TPS
                     6533  
                     6534  ;*        lda     tps                        ; TPS-based staging
                     6535  ;*        cmp     STGTRANS_f
                     6536  ;*        bhs     STAGED_ON
                     6537  ;*        lda     STGTRANS_f
                     6538  ;*        sub     STGDELTA_f
                     6539  ;*        cmp     tps
                     6540  ;*        bhs     STAGED_OFF
                     6541  ;*        rts
                     6542  
                     6543  ;*MAPSTAGED:                         ; Must be MAP Based staging
                     6544  ;*        lda     STGTRANS_f
                     6545  ;*        cmp     kpa
                     6546  ;*        bls     STAGED_ON
                     6547  ;*        sub     STGDELTA_f
                     6548  ;*        cmp     kpa
                     6549  ;*        bhs     STAGED_OFF
                     6550  ;*        rts
                     6551  
                     6552  ;*STAGED_ON:                         ; set staged bit to 1
                     6553  ;*   brclr   StagedMAP2nd,feature7,cont_staged_on
                     6554  ;*   brclr   StagedAnd,feature7,cont_staged_on
                     6555       ; if here, both parameters must be on to turn on staging
                     6556  
                     6557  ;*check_2nd_param:
                     6558  ;*   lda     Stg2ndParmKPA_f
                     6559  ;*   cmp     kpa
                     6560  ;*   bls     cont_staged_on
                     6561  ;*   sub     Stg2ndParmDlt_f
                     6562  ;*   cmp     kpa
                     6563  ;*   bhs     cont_staged_off
                     6564  ;*   rts     ;shouldn't get here
                     6565  
                     6566  ;*cont_staged_on:
                     6567  ;*        bset    REStaging,EnhancedBits
                     6568  ;*        rts
                     6569  
                     6570  ;*STAGED_OFF:                                ; clear bit
                     6571  ;*   brclr   StagedMAP2nd,feature7,cont_staged_off
                     6572       ; if we get here, we need to see if And is on, because if it is
                     6573       ; we want to turn off staging... if it isn't, we want to see
                     6574       ; if staging should be on
                     6575  ;*   brset   StagedAnd,feature7,cont_staged_off
                     6576  ;*   bra     check_2nd_param
                     6577  
                     6578  ;*cont_staged_off:
                     6579  ;*        bclr    REStaging,EnhancedBits
                     6580  ;*   clra
                     6581  ;*   sta     stgTransitionCnt        ; staged is off, clear the staging
                     6582                                       ; transition count
                     6583  ;*   sta     pw_staged2
                     6584  ;*   bclr    StgTransDone,EnhancedBits6
                     6585  ;*        rts
                     6586  
                     6587  
                     6588  
                     6589  
                     6590  ****************************************************************
                     6591  
                     6592  VE_STEP_4:
 8A8B [05] 4EA094    6593          mov     tmp13,liX1           ; rpm low
 8A8E [05] 4EA195    6594          mov     tmp14,liX2           ; rpm high
 8A91 [05] 4EA296    6595          mov     tmp15,liY1           ; ve low
 8A94 [05] 4EA397    6596          mov     tmp16,liY2           ; ve high
 8A97 [05] 4E4D98    6597          mov     rpm,liX
 8A9A [05] CD9B63    6598          jsr     LinInterp
 8A9D [05] 4E99A6    6599          mov     tmp6,tmp19           ; ve at lower kPa/alpha bound
                     6600  
                     6601  VE_STEP_5:
 8AA0 [05] 4EA094    6602          mov     tmp13,liX1           ; rpm low
 8AA3 [05] 4EA195    6603          mov     tmp14,liX2           ; rpm high
 8AA6 [05] 4EA496    6604          mov     tmp17,liY1           ; ve low
 8AA9 [05] 4EA597    6605          mov     tmp18,liY2           ; ve high
 8AAC [05] 4E4D98    6606          mov     rpm,liX
 8AAF [05] CD9B63    6607          jsr     LinInterp
 8AB2 [05] 4E999E    6608          mov     tmp6,tmp11           ; ve at upper kPa/alpha bound
                     6609  
                     6610  VE_STEP_6:
 8AB5 [05] 4E9C94    6611          mov     tmp9,liX1            ; kPa/alpha low
 8AB8 [05] 4E9D95    6612          mov     tmp10,liX2           ; kPa/alpha high
 8ABB [05] 4EA696    6613          mov     tmp19,liY1           ; ve low
 8ABE [05] 4E9E97    6614          mov     tmp11,liY2           ; ve high
 8AC1 [03] B6DB      6615          lda     kpa_n
 8AC3 [03] B798      6616          sta     liX
 8AC5 [05] CD9B63    6617          jsr     LinInterp
 8AC8 [04] 81        6618          rts
                     6619  
                     6620  ******************************************************
                     6621  ** Boost Controller  table lookup macros
                     6622  ;these lookup macros are messed up because they refer to the
                     6623  ;wrong page and the ram lookup is from the wrong place
                     6624  ; i.e. if two table per flash page it is no good to do VE_r,x
                     6625  ; because that will return the wrong data
                     6626  ; 022i - commented out until they get fixed
                     6627  
                     6628                                       ; boost control TABLE 1
                     6629  ;*$MACRO bc1X                                ; gets a byte from page8 or RAM.
                     6630                                       ; On entry X contains index.
                     6631                                       ; Returns byte in A
                     6632  ;        lda     page
                     6633  ;        cmp     #08T    ; it isn't in page !!!!
                     6634  ;        bne     ve7xf
                     6635  ;        lda     VE_r,x
                     6636  ;        bra     ve7xc
                     6637  ;*ve7xf:  lda     bc_kpa_f,x
                     6638  ;*ve7xc:
                     6639  ;*$MACROEND
                     6640  
                     6641                                       ; boost control TABLE 2
                     6642  ;*$MACRO bc2X                                ; gets a byte from page8 or RAM.
                     6643                                       ; On entry X contains index.
                     6644                                       ; Returns byte in A
                     6645  ;        lda     page
                     6646  ;        cmp     #08T
                     6647  ;        bne     ve8xf
                     6648  ;        lda     VE_r,x
                     6649  ;        bra     ve8xc
                     6650  ;*ve8xf:  lda     bc_dc_f,x
                     6651  ;*ve8xc:
                     6652  ;*$MACROEND
                     6653  
                     6654                                       ; boost control TABLE 3 for
                     6655                                       ; switching boost table on the run
                     6656  ;*$MACRO bc3X                                ; gets a byte from page8 or RAM.
                     6657                                       ; On entry X contains index.
                     6658                                       ; Returns byte in A


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 50
MC68HC908GP32 User Bootloader


                     6659  ;        lda     page
                     6660  ;        cmp     #08T
                     6661  ;        bne     ve9xf
                     6662  ;        lda     VE_r,x
                     6663  ;        bra     ve9xc
                     6664  ;*ve9xf:  lda     bc3_kpa_f,x
                     6665  ;*ve9xc:
                     6666  ;*$MACROEND
                     6667  
                     6668                                       ; rotary trailing split                                 ; switching boost table on the run
 8AC9                6669  $MACRO rs1X                          ; gets a byte from flash or RAM.
                     6670                                       ; On entry X contains index.
                     6671                                       ; Returns byte in A
                     6672  ;just work from flash for now
                     6673          lda     page
                     6674          cmp     #07T
                     6675          bne     rs1xf
                     6676          lda     {VE_r+split_f-flash_table7},x   ; offset into ram copy
                     6677          bra     rs1xc
                     6678  rs1xf:  lda     split_f,x
                     6679  rs1xc:
 8AC9                6680  $MACROEND
                     6681  
                     6682  ;****************
                     6683  ;*; a few boost bits up here to be relative
                     6684  ;*boostZero:
                     6685  ;*        clra
                     6686  ;*        sta    bcDC
                     6687  ;*boostDone_dupe:
                     6688  ;*        rts
                     6689  
                     6690  ***************************************************************************
                     6691  ** Boost Controller
                     6692  **
                     6693  ** Sets bcDC to current pwm duty cycle for boost control.  Current
                     6694  ** implementation assumes Audi-style solenoid plumbing, such that
                     6695  ** zero DC reduces boost as much as possible, while 100% DC
                     6696  ** increases boost as much as possible.  Added change to direction option
                     6697  ** for 100%DC = decrease boost.
                     6698  **
                     6699  ** The closed loop calc is
                     6700  ** output = output + (kpaTarget-kpa)*pGain - (kpa-kpaLast)*dGain
                     6701  **
                     6702  ** kpaTarget is the target boost looked up on 6x6 (rpm,tps) map
                     6703  **
                     6704  ** if kpaTarget-kpa > diff max then output is lookup up on open loop 6x6 (rpm,tps) map
                     6705  **
                     6706  ***************************************************************************
                     6707  
                     6708  ;*bcSetPoint equ  tmp6
                     6709  ;*bcDelta    equ  tmp7
                     6710  ;*bcP        equ  tmp8
                     6711  
                     6712  ;*CalcBoostDC:
                     6713  
                     6714  ;*        lda     kpa
                     6715  ;*        cmp     Pambient
                     6716  ;*        blo     boostZero          ; If no boost sensed, don't burn
                     6717                                       ; up the solenoid.
                     6718                                       ; is this good or bad??
                     6719  
                     6720  ;*        lda     bcCtlClock         ; RTC-based updates.
                     6721                                       ; Would it be better to use engine revs
                     6722  ;*        cmp     bcUpdate_f         ; See if our clock has expired
                     6723  ;*        blo     boostDone_dupe
                     6724  ;*        clr     bcCtlClock
                     6725  
                     6726  **************************************************************************
                     6727  **  Compute the target boost value based upon TPS and RPM 6x6 table
                     6728  **************************************************************************
                     6729  
                     6730                                       ; boost control ALWAYS page 8
                     6731  ;*        mov     tps,kpa_n          ; (kpa_n also used in VE_STEP4)
                     6732  
                     6733  ;*;        brclr   BoostTable3,feature8,BoostT1
                     6734  ;*        lda     feature8_f
                     6735  ;*        bit     #BoostTable3b
                     6736  ;*        beq     BoostT1
                     6737  
                     6738  ;*        brclr   NosIn,portd,Table3_Boost; If using Boost Table 3 and input
                     6739                                       ; low then its time to use it
                     6740  
                     6741  ;bc1_STEP_1:
                     6742  ;*BoostT1:
                     6743  ;*        ldhx    #TPSRANGEbc_f
                     6744  ;*        sthx    tmp1
                     6745  ;*        mov     #$05,tmp3          ; 6x6
                     6746  ;*        mov     kpa_n,tmp4
                     6747  ;*        jsr     tableLookup
                     6748  ;*        mov     tmp5,tmp8          ; Index
                     6749  ;*        mov     tmp1,tmp9          ; X1
                     6750  ;*        mov     tmp2,tmp10         ; X2
                     6751  
                     6752  ;*bc1_STEP_2:
                     6753  ;*        ldhx    #RPMRANGEbc_f
                     6754  ;*        sthx    tmp1
                     6755  ;*        mov     #$05,tmp3          ; 6x6
                     6756  ;*        mov     rpm,tmp4
                     6757  ;*        jsr     tableLookup
                     6758  ;*        mov     tmp5,tmp11         ; Index
                     6759  ;*        mov     tmp1,tmp13         ; X1
                     6760  ;*        mov     tmp2,tmp14         ; X2
                     6761  ;*        bra     bc1_STEP_3
                     6762  
                     6763  ;*Table3_Boost:
                     6764  ;*        bra    Table3_Boost_J              ; Jump
                     6765  
                     6766  ;*bc1_STEP_3:
                     6767  ;*        clrh
                     6768  ;*        ldx     #$06                       ; 6x6
                     6769  ;*        lda     tmp8
                     6770  ;*        deca
                     6771  ;*        mul
                     6772  ;*        add     tmp11
                     6773  ;*        deca
                     6774  ;*        tax
                     6775  ;*        bc1X
                     6776  ;*        sta     tmp15
                     6777  ;*        incx
                     6778  ;*        bc1X
                     6779  ;*        sta     tmp16
                     6780  ;*        ldx     #$06                       ; 6x6
                     6781  ;*        lda     tmp8
                     6782  ;*        mul
                     6783  ;*        add     tmp11
                     6784  ;*        deca
                     6785  ;*        tax
                     6786  ;*        bc1X
                     6787  ;*        sta     tmp17
                     6788  ;*        incx
                     6789  ;*        bc1X
                     6790  ;*        sta     tmp18
                     6791  
                     6792  ;*        jsr     VE_STEP_4
                     6793  ;*        bra     No_BTable_3_J
                     6794  ;*;       result in tmp6, equ'd above to be bcSetPoint


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 51
MC68HC908GP32 User Bootloader


                     6795  
                     6796  *****************************************************************************
                     6797  **  Extra Boost Target Table put in for switching over on the run
                     6798  *****************************************************************************
                     6799                                       ; bc3_STEP_1:
                     6800  ;*Table3_Boost_J:
                     6801  ;*        ldhx    #TPSRANGE3bc_f
                     6802  ;*        sthx    tmp1
                     6803  ;*        mov     #$05,tmp3          ; 6x6
                     6804  ;*        mov     kpa_n,tmp4
                     6805  ;*        jsr     tableLookup
                     6806  ;*        mov     tmp5,tmp8          ; Index
                     6807  ;*        mov     tmp1,tmp9          ; X1
                     6808  ;*        mov     tmp2,tmp10         ; X2
                     6809  
                     6810  ;*bc3_STEP_2:
                     6811  ;*        ldhx    #RPMRANGE3bc_f
                     6812  ;*        sthx    tmp1
                     6813  ;*        mov     #$05,tmp3          ; 6x6
                     6814  ;*        mov     rpm,tmp4
                     6815  ;*        jsr     tableLookup
                     6816  ;*        mov     tmp5,tmp11         ; Index
                     6817  ;*        mov     tmp1,tmp13         ; X1
                     6818  ;*        mov     tmp2,tmp14         ; X2
                     6819  ;*        bra     bc3_STEP_3
                     6820  
                     6821  ;*No_BTable_3_J:
                     6822  ;*        bra     No_BTable_3                ; Jump
                     6823  
                     6824  ;*bc3_STEP_3:
                     6825  ;*        clrh
                     6826  ;*        ldx     #$06                       ; 6x6
                     6827  ;*        lda     tmp8
                     6828  ;*        deca
                     6829  ;*        mul
                     6830  ;*        add     tmp11
                     6831  ;*        deca
                     6832  ;*        tax
                     6833  ;*        bc3X
                     6834  ;*        sta     tmp15
                     6835  ;*        incx
                     6836  ;*        bc3X
                     6837  ;*        sta     tmp16
                     6838  ;*        ldx     #$06                       ; 6x6
                     6839  ;*        lda     tmp8
                     6840  ;*        mul
                     6841  ;*        add     tmp11
                     6842  ;*        deca
                     6843  ;*        tax
                     6844  ;*        bc3X
                     6845  ;*        sta     tmp17
                     6846  ;*        incx
                     6847  ;*        bc3X
                     6848  ;*        sta     tmp18
                     6849  ;*        jsr     VE_STEP_4
                     6850  
                     6851  ;*No_BTable_3:
                     6852                                       ; result in tmp6, equ'd above to
                     6853                                       ; be bcSetPoint
                     6854  *****************************************************************************
                     6855  ** Compute a delta for the current duty cycle.
                     6856  *****************************************************************************
                     6857                                       ; The real boost controller,
                     6858                                       ; compute delta.
                     6859  ;*        lda     bcSetPoint
                     6860  ;*        sub     KnockBoost         ; Subtract boost target with knock
                     6861                                       ; detection boost value
                     6862  ;*        sta     bcSetPoint
                     6863  
                     6864  *****************************************************************************
                     6865  **
                     6866  **  Remove 1 psi of boost per user defined amount of IAT when IAT
                     6867  **  above setpoint
                     6868  **
                     6869  *****************************************************************************
                     6870  ;*      clr   tmp31
                     6871  ;*      lda   iatBoostSt_f
                     6872  ;*      beq   noBoostIAT                     ; If zero then dont go any further.
                     6873  ;*      lda   iatBoost_f                     ; load the temp per 1 psi to remove.
                     6874  ;*      beq   noBoostIAT                     ; If zero then dont go any further.
                     6875  ;*      lsra                         ; Shift bit pattern to the right
                     6876                                       ; (Divide by 2)
                     6877  ;*      bcc   no_carry_B                     ; Check if carry bit clear,
                     6878                                       ; skip increment
                     6879  
                     6880  ;*      inca                         ; otherwise, increment accumulator
                     6881  
                     6882  ;*no_carry_B:
                     6883  ;*      sta   tmp32                  ; Stores half the iatDeg
                     6884  
                     6885  ;*      lda   tps
                     6886  ;*      cmp   tpsBooIAT_f                    ; Setpoint of tps for boost reduction
                     6887  ;*      blo   noBoostIAT
                     6888  
                     6889  ;*      lda   airTemp                        ; Actual IAT Temp
                     6890  ;*      cmp   iatBoostSt_f           ; Setpoint for start of Boost removal
                     6891  ;*      blo   noBoostIAT
                     6892  
                     6893  ;*      sub   iatBoostSt_f           ; How much higher are we?
                     6894                                       ; Leaves difference in accumulator
                     6895  ;*      clrh                         ; Zero out high 8 bits of 16-bit
                     6896                                       ; H:X register
                     6897                                       ; Accumulator contains low 8 bits
                     6898  ;*      ldx   iatBoost_f                     ; Set divisor
                     6899  ;*      div                          ; (H:A) /X -> A, with rem in H
                     6900  
                     6901  ;*      tax                          ; Move quotient to index register
                     6902  ;*      pshh                         ; Transfer remainder to accumulator
                     6903  ;*      pula
                     6904  ;*      cmp   tmp32                  ; See if the remainder is more
                     6905                                       ; than half of divisor
                     6906  ;*      blo   FinishBIAT
                     6907  ;*      incx                         ; It was a big remainder, round up.
                     6908  ;*FinishBIAT:
                     6909  ;*      lda  #07T                            ; Multiply by 7 KPa (1PSI)
                     6910  ;*      mul
                     6911  ;*      sta  tmp31                   ; Boost to remove
                     6912  ;*      lda  bcSetPoint
                     6913  ;*      sub  tmp31
                     6914  ;*      sta  bcSetPoint                      ; New boost target
                     6915  ;*noBoostIAT:
                     6916  
                     6917  *****************************************************************************
                     6918  ** Matt Dupuis idea
                     6919  ** if abs(target pressure - curr pressure ) > bc_max_diff
                     6920  **   then use bc_default duty cycle
                     6921  ** This can now make the controller open loop only by setting the
                     6922  ** max diff to zero
                     6923  *****************************************************************************
                     6924  
                     6925  ;*        lda     kpa                        ; Calc P for our PD controller.
                     6926  ;*        sub     bcSetPoint         ; result from interpolate tmp6
                     6927  ;*        bcc     mboostPos
                     6928  ;*        nega
                     6929  ;*mboostPos:
                     6930  ;*        cmp     bc_max_diff


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 52
MC68HC908GP32 User Bootloader


                     6931  ;*        bhi     boost_fixed
                     6932  
                     6933  ;*bc_eric:
                     6934  ;*;Originated Eric Fahlgren, closed loop method
                     6935  ;*        bclr    bcTableUse,squirt
                     6936  ;*        lda     kpa                        ; Calc P for our PD controller.
                     6937  ;*        sub     bcSetPoint         ; result from interpolate tmp6
                     6938  ;*        bcc     boostPos
                     6939  ;*        nega
                     6940  ;*boostPos:
                     6941  ;*        ldx     bcPgain_f          ; Proportional Gain in percent,
                     6942                                       ; 255=100%.
                     6943  ;*        mul                                ; returns in x:a
                     6944  ;*        stx     bcP                        ; just high byte
                     6945                               ; bcP = abs(kpa-bcSetpoint) * (Pgain / 256)
                     6946  
                     6947  ;*        lda     kpa                        ; now calc 'kpadot' in here at
                     6948                                       ; same rate
                     6949  ;*        sub     kpalast
                     6950  ;*        bcc     kpadotPos
                     6951  ;*        nega
                     6952  ;*kpadotPos:
                     6953  ;*        ldx     bcDgain_f          ; Differential Gain
                     6954  ;*        mul
                     6955  ;*        txa
                     6956  ;*        nega                               ; =  - abs(kpa-kpalast) * (dGain/255)
                     6957  
                     6958  ;*        add     bcP
                     6959  ;*        sta     bcDelta                    ; p term - d term
                     6960  
                     6961  *****************************************************************************
                     6962  ** We now have a setpoint and a delta, so adjust the duty cycle.
                     6963  *****************************************************************************
                     6964  
                     6965  ;*        lda     kpa
                     6966  ;*        cmp     bcSetPoint
                     6967  ;*        blo     boostInc           ; going up
                     6968  ;*        bra     boostDec           ; coming down
                     6969  
                     6970  ;*boostDec:
                     6971  ;*        lda     bcDC
                     6972  ;*        sub     bcDelta
                     6973  ;*        bcs     boostZero2
                     6974  ;*        bra     boostSet
                     6975  
                     6976  ;*boostInc:
                     6977  ;*        lda     bcDC
                     6978  ;*        add     bcDelta
                     6979  ;*        bcs     boostRail
                     6980  ;*        bra     boostSet
                     6981  
                     6982  ;*boostRail:
                     6983  ;*        lda     #255T
                     6984  ;*        bra     boostSet
                     6985  
                     6986  ;*boostZero2:
                     6987  ;*        clra
                     6988  
                     6989  ;*boostSet:
                     6990  ;*        sta    bcDC
                     6991  ;*boostDone:
                     6992  ;*        mov     kpa,kpalast
                     6993  ;*        rts
                     6994  
                     6995  ;*boost_fixed:
                     6996  ;lookup fixed duty cycle from table. 'out of range' open loop duty
                     6997  
                     6998  ;boost control ALWAYS page 8
                     6999  ;*        bset    bcTableUse,squirt
                     7000  ;*        mov     tps,kpa_n          ; (kpa_n also used in VE_STEP4)
                     7001  ;bc2_STEP_1:
                     7002  ;*        ldhx    #TPSRANGEbc_f2
                     7003  ;*        sthx    tmp1
                     7004  ;*        mov     #$05,tmp3          ; 6x6
                     7005  ;*        mov     kpa_n,tmp4
                     7006  ;*        jsr     tableLookup
                     7007  ;*        mov     tmp5,tmp8          ; Index
                     7008  ;*        mov     tmp1,tmp9          ; Y1
                     7009  ;*        mov     tmp2,tmp10         ; Y2
                     7010  
                     7011  ;*bc2_STEP_2:
                     7012  ;*        ldhx    #RPMRANGEbc_f2
                     7013  ;*        sthx    tmp1
                     7014  ;*        mov     #$05,tmp3          ; 6x6
                     7015  ;*        mov     rpm,tmp4
                     7016  ;*        jsr     tableLookup
                     7017  ;*        mov     tmp5,tmp11         ; Index
                     7018  ;*        mov     tmp1,tmp13         ; X1
                     7019  ;*        mov     tmp2,tmp14         ; X2
                     7020  
                     7021  ;*bc2_STEP_3:
                     7022  
                     7023  ;*        clrh
                     7024  ;*        ldx     #$06                       ; 6x6
                     7025  ;*        lda     tmp8
                     7026  ;*        deca
                     7027  ;*        mul
                     7028  ;*        add     tmp11
                     7029  ;*        deca
                     7030  ;*        tax
                     7031  ;*        bc2X
                     7032  ;*        sta     tmp15
                     7033  ;*        incx
                     7034  ;*        bc2X
                     7035  ;*        sta     tmp16
                     7036  ;*        ldx     #$06                       ; 6x6
                     7037  ;*        lda     tmp8
                     7038  ;*        mul
                     7039  ;*        add     tmp11
                     7040  ;*        deca
                     7041  ;*        tax
                     7042  ;*        bc2X
                     7043  ;*        sta     tmp17
                     7044  ;*        incx
                     7045  ;*        bc2X
                     7046  ;*        sta     tmp18
                     7047  
                     7048  ;*        jsr     VE_STEP_4
                     7049  ;*        mov     tmp6,bcDC
                     7050  ;*        mov     kpa,kpalast
                     7051  ;*        rts
                     7052  ***************************************************************************
                     7053  
 8AC9                7054  $MACRO TurnAllSpkOff                 ; gets called in stall or on
                     7055                                       ; entering bootloader mode
                     7056                                       ;turn spark outputs to inactive
                     7057          brclr    invspk,EnhancedBits4,soin
                     7058          ; inverting easy, just put all to zero
                     7059          bclr     iasc,porta
                     7060          bclr     sled,portc
                     7061          bclr     wled,portc
                     7062          bclr     aled,portc
                     7063          bclr     Output3,portd
                     7064          bclr     pin10,portc
                     7065          bclr     KnockIn,portd
                     7066          bra      soin_done


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 53
MC68HC908GP32 User Bootloader


                     7067  soin:   ; non inv
                     7068          brset    REUSE_FIDLE,outputpins,soin1
                     7069          bclr     iasc,porta
                     7070          bra      soin2
                     7071  soin1:  bset     iasc,porta
                     7072  soin2:  brset    REUSE_LED17,outputpins,soin3
                     7073          bclr     sled,portc
                     7074          bra      soin4
                     7075  soin3:  bset     sled,portc
                     7076  soin4:  brset    REUSE_LED19,outputpins,soin5
                     7077          bclr     aled,portc
                     7078          bra      soin6
                     7079  soin5:  bset     aled,portc
                     7080  soin6:  brclr    REUSE_LED18,outputpins,soin7
                     7081          brclr    REUSE_LED18_2,outputpins,soin7
                     7082          bset     wled,portc
                     7083          bra      soin8
                     7084  soin7:  bclr     wled,portc
                     7085  soin8:
                     7086          brclr    out3sparkd,feature2,soin9
                     7087          bset     Output3,portd
                     7088  soin9:
                     7089          lda   feature8_f
                     7090          bit      #spkeopb
                     7091          beq      soin10
                     7092          bset     pin10,portc
                     7093  soin10:
                     7094         lda       feature8_f
                     7095         bit       #spkfopb
                     7096         beq       soin11
                     7097         bset      KnockIn,portd
                     7098  soin11:
                     7099  soin_done:
                     7100  
                     7101  ;kill the dwell timers too just in case
                     7102          clr     SparkOnLeftah
                     7103          clr     SparkOnLeftal
                     7104          clr     SparkOnLeftbh
                     7105          clr     SparkOnLeftbl
                     7106          clr     SparkOnLeftch
                     7107          clr     SparkOnLeftcl
                     7108          clr     SparkOnLeftdh
                     7109          clr     SparkOnLeftdl
                     7110          clr     SparkOnLefteh
                     7111          clr     SparkOnLeftel
                     7112          clr     SparkOnLeftfh
                     7113          clr     SparkOnLeftfl
                     7114  
 8AC9                7115  $MACROEND
                     7116  
                     7117  ***************************************************************************
                     7118  
 8AC9                7119  $MACRO  SubDwell
                     7120                  lda     dwelltmpLop
                     7121                  sub     dwellusl     ; dwell target calc'd just earlier
                     7122                  sta     dwelltmpLop     ; temp result
                     7123                  lda     dwelltmpHop
                     7124                  sbc     dwellush
                     7125                  sta     dwelltmpHop
                     7126                  lda     dwelltmpXop
                     7127                  sbc     #0
                     7128                  sta     dwelltmpXop
 8AC9                7129  $MACROEND
 8AC9                7130  $MACRO DwellRail
                     7131  ; check if we've gone too low
                     7132                  lda     dwelltmpXop
                     7133                  beq     dwlnwchk
                     7134                  bit     #$80
                     7135                  bne     dwlnwrail       ; gone negative. Rail.
                     7136                  bra     dwlnwok         ; X byte>0 so dwell long enough
                     7137  dwlnwchk:
                     7138                  lda     dwelltmpHop
                     7139                  bne     dwlnwok         ; H byte>0 so dwell long enough
                     7140                  lda     dwelltmpLop
                     7141                  cmp     mindischg_f
                     7142                  bhs     dwlnwok
                     7143  dwlnwrail:
                     7144                  clr     dwelltmpXop     ; rail dwell delay at min discharge
                     7145                  clr     dwelltmpHop
                     7146                  lda     mindischg_f
                     7147                  sta     dwelltmpLop
                     7148  dwlnwok:
 8AC9                7149  $MACROEND
                     7150  
 8AC9                7151  $MACRO DwellDiv
                     7152                  ;store result. Convert us to 0.1ms
                     7153  ; don't use udvd32 - wasteful, only need 24/8bit divide
                     7154                  clrh
                     7155                  ldx     #100T
                     7156                  lda     dwelltmpXop
                     7157                  div                     ;A rem H = (H:A) / X
                     7158                  sta     dwelltmpXms
                     7159                  lda     dwelltmpHop
                     7160                  div
                     7161                  sta     dwelltmpHms
                     7162                  lda     dwelltmpLop
                     7163                  div
                     7164                  sta     dwelltmpLms
                     7165  
                     7166                  lda     dwelltmpXms
                     7167                  beq     dwlldend      ; too long, rail to max
                     7168                  lda     #255T
                     7169                  sta     dwelltmpHms
                     7170                  sta     dwelltmpLms
                     7171  
                     7172  dwlldend:
                     7173  
                     7174  ;check for high speed when dwell and period may be close
                     7175                  lda     dwelltmpHms
                     7176                  bne     save_dwell
                     7177  
                     7178                  lda     dwelltmpLms
                     7179                  cmp     mindischg_f  ; check if less than minimum period
                     7180                  bhi     save_dwell
                     7181  dwell_lim:                           ; target dwell period>available period
                     7182                  clr     dwelltmpHms
                     7183                  lda     mindischg_f
                     7184                  sta     dwelltmpLms  ; minimum X x 0.1ms non-dwell time
                     7185  
                     7186  save_dwell:
                     7187            ;move calculation variable into variable used by CalcDwellspk
                     7188                  ldhx    dwelltmpHms
 8AC9                7189  $MACROEND
                     7190  
                     7191  ***************************************************************************
                     7192  
                     7193  turnallsparkoff:
 8AC9 macro          7194          TurnAllSpkOff
 8AC9 [05] 0D6910    7195   BRCLR INVSPK,ENHANCEDBITS4,SOIN  
 8ACC [04] 1300      7196   BCLR IASC,PORTA  
 8ACE [04] 1102      7197   BCLR SLED,PORTC  
 8AD0 [04] 1502      7198   BCLR WLED,PORTC  
 8AD2 [04] 1302      7199   BCLR ALED,PORTC  
 8AD4 [04] 1103      7200   BCLR OUTPUT3,PORTD  
 8AD6 [04] 1702      7201   BCLR PIN10,PORTC  
 8AD8 [04] 1503      7202   BCLR KNOCKIN,PORTD  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 54
MC68HC908GP32 User Bootloader


 8ADA [03] 203E      7203   BRA SOIN_DONE  
                     7204  SOIN:  
 8ADC [05] 006204    7205   BRSET REUSE_FIDLE,OUTPUTPINS,SOIN1  
 8ADF [04] 1300      7206   BCLR IASC,PORTA  
 8AE1 [03] 2002      7207   BRA SOIN2  
 8AE3 [04] 1200      7208  SOIN1: BSET IASC,PORTA  
 8AE5 [05] 026204    7209  SOIN2: BRSET REUSE_LED17,OUTPUTPINS,SOIN3  
 8AE8 [04] 1102      7210   BCLR SLED,PORTC  
 8AEA [03] 2002      7211   BRA SOIN4  
 8AEC [04] 1002      7212  SOIN3: BSET SLED,PORTC  
 8AEE [05] 086204    7213  SOIN4: BRSET REUSE_LED19,OUTPUTPINS,SOIN5  
 8AF1 [04] 1302      7214   BCLR ALED,PORTC  
 8AF3 [03] 2002      7215   BRA SOIN6  
 8AF5 [04] 1202      7216  SOIN5: BSET ALED,PORTC  
 8AF7 [05] 056207    7217  SOIN6: BRCLR REUSE_LED18,OUTPUTPINS,SOIN7  
 8AFA [05] 076204    7218   BRCLR REUSE_LED18_2,OUTPUTPINS,SOIN7  
 8AFD [04] 1402      7219   BSET WLED,PORTC  
 8AFF [03] 2002      7220   BRA SOIN8  
 8B01 [04] 1502      7221  SOIN7: BCLR WLED,PORTC  
                     7222  SOIN8:  
 8B03 [05] 096402    7223   BRCLR OUT3SPARKD,FEATURE2,SOIN9  
 8B06 [04] 1003      7224   BSET OUTPUT3,PORTD  
                     7225  SOIN9:  
 8B08 [04] C6E074    7226   LDA FEATURE8_F  
 8B0B [02] A508      7227   BIT #SPKEOPB  
 8B0D [03] 2702      7228   BEQ SOIN10  
 8B0F [04] 1602      7229   BSET PIN10,PORTC  
                     7230  SOIN10:  
 8B11 [04] C6E074    7231   LDA FEATURE8_F  
 8B14 [02] A510      7232   BIT #SPKFOPB  
 8B16 [03] 2702      7233   BEQ SOIN11  
 8B18 [04] 1403      7234   BSET KNOCKIN,PORTD  
                     7235  SOIN11:  
                     7236  SOIN_DONE:  
 8B1A [03] 3FB3      7237   CLR SPARKONLEFTAH  
 8B1C [03] 3FB4      7238   CLR SPARKONLEFTAL  
 8B1E [03] 3FB5      7239   CLR SPARKONLEFTBH  
 8B20 [03] 3FB6      7240   CLR SPARKONLEFTBL  
 8B22 [03] 3FB7      7241   CLR SPARKONLEFTCH  
 8B24 [03] 3FB8      7242   CLR SPARKONLEFTCL  
 8B26 [03] 3FB9      7243   CLR SPARKONLEFTDH  
 8B28 [03] 3FBA      7244   CLR SPARKONLEFTDL  
 8B2A [03] 3FBB      7245   CLR SPARKONLEFTEH  
 8B2C [03] 3FBC      7246   CLR SPARKONLEFTEL  
 8B2E [03] 3FBD      7247   CLR SPARKONLEFTFH  
 8B30 [03] 3FBE      7248   CLR SPARKONLEFTFL  
 8B32 [04] 81        7249          rts
                     7250  ***************************************************************************
                     7251  * Spark and Dwell stuff
                     7252  * Some bits moved out of interrupt routines to save a few ticks
                     7253  ***************************************************************************
                     7254  * The following table is a dwell period vs battery voltage correction table
                     7255  * derived from
                     7256  * T = -L/R * ln(1- RI/V)
                     7257  ***************************************************************************
                     7258  
 8B33      33445566  7259  dwelltv: db     51T,68T,85T,102T,119T,136T   ; 6v,8v,10v,12v,14v,16v
           7788 
 8B39      FA7C5440  7260  dwelltf: db     250T,124T,84T,64T,51T,44T
           332C 
                     7261  ;Values in table are /4 (i.e. 250 = 250/256*4 = x 3.9)
                     7262  
                     7263  misc_spark:
 8B3F [05] 004200    7264          brset   running,engine,hei7_spd   ; skip next check
                     7265          ;if not running then make sure all spark outputs are OFF
                     7266          ;this is a bandaid, but better safe than sorry
                     7267  ;        TurnAllSpkOff     ; macro to stop them all  - moved to mainloop
                     7268  ;
                     7269  hei7_spd:
                     7270  ;moved from Sparktime - set/clr HEI7 output
                     7271  ;*        brclr   HEI7,personality,dwellornot
                     7272  ;*;024a changed the logic, now transitions when fully out of crank (+1 second)
                     7273  ;*; and over 400rpm
                     7274  ;*        brset   crank,engine,hei7zero
                     7275  ;*;cant_crank only gets set when above cranking rpm for over a second
                     7276  ;*        brclr   cant_crank,EnhancedBits2,hei7zero
                     7277  ;*        lda     rpm
                     7278  ;*        cmp     #4T     ; hardcoded 400rpm transisition
                     7279  ;*        blo     hei7zero
                     7280  ;*hei7five:
                     7281  ;*        bclr    aled,portc
                     7282  ;*        bra     dwellornot
                     7283  ;*hei7zero:
                     7284  ;*;If HEI and low speed set bypass to 0v
                     7285  ;*        bset    aled,portc
                     7286  
                     7287  ;*dwellornot:
                     7288  ;*        brclr   dwellcont,feature7,ms_dwell ; skip if not doing real dwell
                     7289  
                     7290  ;first lookup battery correction factor from above table
 8B42 [03] 458B33    7291          ldhx    #dwelltv
 8B45 [04] 3594      7292          sthx    tmp1
 8B47 [04] 6E0596    7293          mov     #5,tmp3                      ; 6 elements
 8B4A [05] 4E4897    7294          mov     batt,tmp4
 8B4D [05] CD9B48    7295          jsr     tableLookup
                     7296  
 8B50 [01] 8C        7297          clrh
 8B51 [03] BE98      7298          ldx     tmp5
 8B53 [04] D68B39    7299          lda     dwelltf,x
 8B56 [03] B797      7300          sta     liY2
 8B58 [01] 5A        7301          decx
 8B59 [04] D68B39    7302          lda     dwelltf,x
 8B5C [03] B796      7303          sta     liY1
 8B5E [03] B648      7304          lda     batt
 8B60 [03] B798      7305          sta     liX
 8B62 [05] CD9B63    7306          jsr     LinInterp
                     7307          ;result in tmp6
                     7308  
 8B65 [05] 024205    7309          brset   crank,engine,crankdwell
                     7310  
 8B68 [04] C6E06F    7311          lda     dwellrun_f
 8B6B [03] 2003      7312          bra     dwell_corr
                     7313  crankdwell:
 8B6D [04] C6E06E    7314          lda     dwellcrank_f
                     7315  dwell_corr:
 8B70 [03] BE99      7316          ldx     tmp6
 8B72 [05] 42        7317          mul                          ; result in x:a
                     7318  ;now multiply by 4 as factor table is /4 and dwell in 0.1ms units
                     7319  
 8B73 [01] 48        7320          lsla
 8B74 [01] 59        7321          rolx
 8B75 [03] 2504      7322          bcs     max_dwell
                     7323  
 8B77 [01] 48        7324          lsla
 8B78 [01] 59        7325          rolx
 8B79 [03] 2402      7326          bcc     do_dwell_us
                     7327  
                     7328  max_dwell:
 8B7B [02] AEFF      7329          ldx     #255T                        ; max dwell 25.5ms
                     7330  do_dwell_us:
 8B7D [03] BFF7      7331          stx     dwelldms             ; save corrected target dwell
                     7332                                       ; (in 0.1ms units)
                     7333  
                     7334  ;calculate this in us
 8B7F [02] A664      7335          lda     #100T
 8B81 [05] 42        7336          mul


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 55
MC68HC908GP32 User Bootloader


                     7337  
 8B82 [02] 9B        7338          sei                          ; no ints while we save these
 8B83 [03] BFF8      7339          stx     dwellush                ; this is the microsecond duration of coil-on
 8B85 [03] B7F9      7340          sta     dwellusl
 8B87 [02] 9A        7341          cli
                     7342  
                     7343  ; we've now calculated target dwell period
                     7344  
                     7345  ;used by dwell and duty cycle
                     7346  ms_dwell:
 8B88 [02] 9B        7347                  sei             ; avoid interruption between high/low bytes
 8B89 [05] 4EAE95    7348                  mov     iTimeX,dwelltmpX     ; dt-1
 8B8C [05] 4EAF96    7349                  mov     iTimeH,dwelltmpH
 8B8F [05] 4EB097    7350                  mov     iTimeL,dwelltmpL
 8B92 [05] 4EFC9F    7351                  mov     iTimepX,dwelltmpXp   ; dt-2
 8B95 [05] 4EFDA0    7352                  mov     iTimepH,dwelltmpHp
 8B98 [05] 4EFEA1    7353                  mov     iTimepL,dwelltmpLp
 8B9B [02] 9A        7354                  cli
                     7355  
                     7356  ;For a single period, can..
                     7357  ;predict this period iTime[this] = itime[last]) + (itime[last] - itime[previous])
                     7358  ;calculate acceleration factor (itime[last] - itime[previous]) and store in dwelltmp?ac
                     7359  ;024n sense changed now +ve is accel, -ve is decel. Unlikely to make any difference, but
                     7360  ;worth a try
                     7361  
                     7362  ;025n7, try reversing sense as it was doing more harm than good
                     7363  ;somehow I'd got the sense wrong.
                     7364  
 8B9C [03] B6A1      7365                  lda     dwelltmpLp
 8B9E [03] B097      7366                  sub     dwelltmpL
 8BA0 [03] B7A9      7367                  sta     dwelltmpLac     ; ddt
 8BA2 [03] B6A0      7368                  lda     dwelltmpHp
 8BA4 [03] B296      7369                  sbc     dwelltmpH
 8BA6 [03] B7A8      7370                  sta     dwelltmpHac
 8BA8 [03] B69F      7371                  lda     dwelltmpXp
 8BAA [03] B295      7372                  sbc     dwelltmpX
 8BAC [03] B7A7      7373                  sta     dwelltmpXac
                     7374  
                     7375  
                     7376  
                     7377  ;when in accel double the correction factor to compensate for increasing
                     7378  ; advance etc. and to err on the side of a bit more dwell
                     7379  ;               brclr    7,dwelltmpXac,not_dwell_accel ; if positive i.e. decel
                     7380  ;               lsl      dwelltmpLac
                     7381  ;               rol      dwelltmpHac
                     7382  ;               rol      dwelltmpXac
                     7383  
                     7384  not_dwell_accel:
                     7385  ;dwelltmp?ac now contains the acceleration factor  (-ddt)
                     7386  ;re-write of this whole next section (025i)
                     7387  ; instead of doing some calcs and then branching, have one big section of code for each
                     7388  ; option. Code space isn't a problem. Brain space is!
                     7389  ; Various code options.
                     7390  ; "dwell" duty cycle for 1,2,3,4 outputs - this is pretty much the earlier
                     7391  ; dwell control for 1,2,3,4, rotary2 outputs
                     7392  
                     7393  
                     7394  ;*                brclr   dwellcont,feature7,dwell_duty_calc
 8BAE [03] CC8BB1    7395                  jmp     true_dwell_calc
                     7396  ;*dwell_duty_calc:
                     7397  ;*                brset   wspk,EnhancedBits4,wasted_dwell ; wasted spark/multi-outputs
                     7398  ;*;just add on (-ddt)
                     7399  ;*                jmp     dwlprdcalc
                     7400  
                     7401  ;*wasted_dwell:
                     7402  
                     7403  ;see how many periods we want to dwell across
                     7404  ;Here we'll predict period between sparks on a channel
                     7405  ; i.e. if not wasted spark this is iTime(pred) but if wasted spark then
                     7406  ; we wait 360 degrees (could be 720 actually if someone does 4cyl COP)
                     7407  ;Would be desireable to go "back" only enough periods to give greater accuracy
                     7408  
                     7409  ;for waste spark outputs need to add lots more correction factor
                     7410  ; 2 outputs = 3x
                     7411  ; 3 outputs = 6x
                     7412  ; 4 outputs = 10x
                     7413  ; all assumes uniform acceleration
                     7414  ;residue of old code, checks how many outputs
                     7415  ;for now always calc all periods
                     7416  
                     7417  ;5th and 6th
                     7418  ;*                lda     feature8_f
                     7419  ;*                bit     #spkfopb
                     7420  ;*                bne     jcd_6dd
                     7421  ;*                bit     #spkeopb
                     7422  ;*                bne     jcd_5dd
                     7423  ;check if 4th spark output in use
                     7424  ;*                brset   out3sparkd,feature2,jcd_4dd ; if 4 ops
                     7425  ;check if 3rd spark output in use
                     7426  ;don't check for 2nd output, wouldn't have got here otherwise
                     7427  ;*                brclr   REUSE_LED18,outputpins,cd_2dd    ; want 1 } spark c
                     7428  ;*                brclr   REUSE_LED18_2,outputpins,cd_2dd  ; want 1 }
                     7429  ;*cd_3dd:
                     7430  ;3 periods = 3dt-1 + 3ddt
                     7431  ;3x dt-1
                     7432  ;save a copy in dwelltmp?p
                     7433  ;*                mov     dwelltmpL,dwelltmpLp
                     7434  ;*                mov     dwelltmpH,dwelltmpHp
                     7435  ;*                mov     dwelltmpX,dwelltmpXp
                     7436  
                     7437  ;*                lsl     dwelltmpL
                     7438  ;*                rol     dwelltmpH
                     7439  ;*                rol     dwelltmpX
                     7440  
                     7441  ;*                lda     dwelltmpL
                     7442  ;*                add     dwelltmpLp
                     7443  ;*                sta     dwelltmpL
                     7444  ;*                lda     dwelltmpH
                     7445  ;*                adc     dwelltmpHp
                     7446  ;*                sta     dwelltmpH
                     7447  ;*                lda     dwelltmpX
                     7448  ;*                adc     dwelltmpXp
                     7449  ;*                sta     dwelltmpX
                     7450  
                     7451  ;2x ddt
                     7452  ;*                lsl     dwelltmpLac
                     7453  ;*                rol     dwelltmpHac
                     7454  ;*                rol     dwelltmpXac
                     7455  ;+ ddt
                     7456  ;*                lda     dwelltmpL
                     7457  ;*                add     dwelltmpLac
                     7458  ;*                sta     dwelltmpL
                     7459  ;*                lda     dwelltmpH
                     7460  ;*                adc     dwelltmpHac
                     7461  ;*                sta     dwelltmpH
                     7462  ;*                lda     dwelltmpX
                     7463  ;*                adc     dwelltmpXac
                     7464  ;*                sta     dwelltmpX
                     7465  
                     7466  ;*                jmp     dwlprdcalc
                     7467  
                     7468  ;*jcd_4dd:        jmp     cd_4dd
                     7469  ;*jcd_5dd:        jmp     cd_5dd
                     7470  ;*jcd_6dd:        jmp     cd_6dd
                     7471  
                     7472  ;*cd_2dd:


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 56
MC68HC908GP32 User Bootloader


                     7473  ;2 periods = 2dt-1 + 2ddt
                     7474  ;2x dt-1
                     7475  ;*                lsl     dwelltmpL
                     7476  ;*                rol     dwelltmpH
                     7477  ;*                rol     dwelltmpX
                     7478  ;2x ddt
                     7479  ;*                lsl     dwelltmpLac
                     7480  ;*                rol     dwelltmpHac
                     7481  ;*                rol     dwelltmpXac
                     7482  
                     7483  ;*                jmp     dwlprdcalc
                     7484  
                     7485  cd_4dd:
                     7486  ;4 periods = 4dt-1 + 4ddt
                     7487  ;4x dt-1
                     7488  ;*                lsl     dwelltmpL
                     7489  ;*                rol     dwelltmpH
                     7490  ;*                rol     dwelltmpX
                     7491  
                     7492  ;*                lsl     dwelltmpL
                     7493  ;*                rol     dwelltmpH
                     7494  ;*                rol     dwelltmpX
                     7495  ;4x ddt
                     7496  ;*                lsl     dwelltmpLac
                     7497  ;*                rol     dwelltmpHac
                     7498  ;*                rol     dwelltmpXac
                     7499  
                     7500  ;*                lsl     dwelltmpLac
                     7501  ;*                rol     dwelltmpHac
                     7502  ;*                rol     dwelltmpXac
                     7503  
                     7504  
                     7505  ;*                jmp     dwlprdcalc
                     7506  
                     7507  ;*cd_5dd:
                     7508  ;5 periods = 5dt-1 + 5ddt
                     7509  ;3x dt-1
                     7510  ;save a copy in dwelltmp?p
                     7511  ;*                mov     dwelltmpL,dwelltmpLp
                     7512  ;*                mov     dwelltmpH,dwelltmpHp
                     7513  ;*                mov     dwelltmpX,dwelltmpXp
                     7514  
                     7515  ;*                lsl     dwelltmpL
                     7516  ;*                rol     dwelltmpH
                     7517  ;*                rol     dwelltmpX
                     7518  
                     7519  ;*                lsl     dwelltmpL
                     7520  ;*                rol     dwelltmpH
                     7521  ;*                rol     dwelltmpX
                     7522  
                     7523  ;*                lda     dwelltmpL
                     7524  ;*                add     dwelltmpLp
                     7525  ;*                sta     dwelltmpL
                     7526  ;*                lda     dwelltmpH
                     7527  ;*                adc     dwelltmpHp
                     7528  ;*                sta     dwelltmpH
                     7529  ;*                lda     dwelltmpX
                     7530  ;*                adc     dwelltmpXp
                     7531  ;*                sta     dwelltmpX
                     7532  ;*
                     7533  ;2x ddt
                     7534  ;*                lsl     dwelltmpLac
                     7535  ;*                rol     dwelltmpHac
                     7536  ;*                rol     dwelltmpXac
                     7537  ;2x ddt
                     7538  ;*                lsl     dwelltmpLac
                     7539  ;*                rol     dwelltmpHac
                     7540  ;*                rol     dwelltmpXac
                     7541  
                     7542  ;+ ddt
                     7543  ;*                lda     dwelltmpL
                     7544  ;*                add     dwelltmpLac
                     7545  ;*                sta     dwelltmpL
                     7546  ;*                lda     dwelltmpH
                     7547  ;*                adc     dwelltmpHac
                     7548  ;*                sta     dwelltmpH
                     7549  ;*                lda     dwelltmpX
                     7550  ;*                adc     dwelltmpXac
                     7551  ;*                sta     dwelltmpX
                     7552  
                     7553  ;*                bra     dwlprdcalc
                     7554  
                     7555  ;*cd_6dd:
                     7556  ;same as 3dd x 2
                     7557  ;3 periods = 3dt-1 + 3ddt
                     7558  ;3x dt-1
                     7559  ;save a copy in dwelltmp?p
                     7560  ;*                mov     dwelltmpL,dwelltmpLp
                     7561  ;*                mov     dwelltmpH,dwelltmpHp
                     7562  ;*                mov     dwelltmpX,dwelltmpXp
                     7563  
                     7564  ;*                lsl     dwelltmpL
                     7565  ;*                rol     dwelltmpH
                     7566  ;*                rol     dwelltmpX
                     7567  
                     7568  ;*                lda     dwelltmpL
                     7569  ;*                add     dwelltmpLp
                     7570  ;*                sta     dwelltmpL
                     7571  ;*                lda     dwelltmpH
                     7572  ;*                adc     dwelltmpHp
                     7573  ;*                sta     dwelltmpH
                     7574  ;*                lda     dwelltmpX
                     7575  ;*                adc     dwelltmpXp
                     7576  ;*                sta     dwelltmpX
                     7577  
                     7578  ;2x ddt
                     7579  ;*                lsl     dwelltmpLac
                     7580  ;*                rol     dwelltmpHac
                     7581  ;*                rol     dwelltmpXac
                     7582  ;+ ddt
                     7583  ;*                lda     dwelltmpL
                     7584  ;*                add     dwelltmpLac
                     7585  ;*                sta     dwelltmpL
                     7586  ;*                lda     dwelltmpH
                     7587  ;*                adc     dwelltmpHac
                     7588  ;*                sta     dwelltmpH
                     7589  ;*                lda     dwelltmpX
                     7590  ;*                adc     dwelltmpXac
                     7591  ;*                sta     dwelltmpX
                     7592  
                     7593  ;double it
                     7594  ;*                lsl     dwelltmpL  ; high byte
                     7595  ;*                rol     dwelltmpH  ; Divide by 2 to get 50% dwell
                     7596  ;*                rol     dwelltmpX
                     7597  ;double it
                     7598  ;*                lsl     dwelltmpLac
                     7599  ;*                rol     dwelltmpHac
                     7600  ;*                rol     dwelltmpXac
                     7601  
                     7602  ;*;                bra     dwlprdcalc
                     7603  
                     7604  
                     7605  ;*dwlprdcalc:
                     7606  ;*;add off the accel factor (-ve)
                     7607  ;*                lda     dwelltmpL
                     7608  ;*                add     dwelltmpLac


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 57
MC68HC908GP32 User Bootloader


                     7609  ;*                sta     dwelltmpL
                     7610  ;*                lda     dwelltmpH
                     7611  ;*                adc     dwelltmpHac
                     7612  ;*                sta     dwelltmpH
                     7613  ;*                lda     dwelltmpX
                     7614  ;*                adc     dwelltmpXac
                     7615  ;*                sta     dwelltmpX
                     7616  
                     7617  ;dwelltmp? now contains the predicted period between sparks on one ignition channel
                     7618  ;for single coil this is an ignition event, for wasted spark this is 360 or even 720
                     7619  ;we've now calculated the full period to dwell over so decide what to do with it
                     7620  
                     7621  ;save an un-mutilated copy for rotary
                     7622  ;*                mov     dwelltmpX,dwelltmpXac
                     7623  ;*                mov     dwelltmpH,dwelltmpHac
                     7624  ;*                mov     dwelltmpL,dwelltmpLac
                     7625  
                     7626  ;*                lsr     dwelltmpX  ; high byte
                     7627  ;*                ror     dwelltmpH  ; Divide by 2 to get 50% dwell
                     7628  ;*                ror     dwelltmpL
                     7629  ;
                     7630  ; original MSnS code uses 75%, but there was discussion that 50% might be
                     7631  ; more suitable for some ignition setups, so I changed it. Now made a
                     7632  ; config option.
                     7633  ;
                     7634  ;*                brset   dwellduty50,feature2,end_dwell
                     7635  ;*                lsr     dwelltmpX
                     7636  ;*                ror     dwelltmpH
                     7637  ;*                ror     dwelltmpL  ; divide by 2 again to get 75% dwell
                     7638  
                     7639  ;*end_dwell:
                     7640  ;now convert the precision calculation into a raw 0.1ms value
                     7641  ;use by both dwell and duty cylce outputs
                     7642  
                     7643  ; don't use udvd32 - wasteful, only need 24/8bit divide
                     7644  ;*                clrh
                     7645  ;*                ldx     #100T
                     7646  ;*                lda     dwelltmpX
                     7647  ;*                div                     ;A rem H = (H:A) / X
                     7648  ;*                sta     dwelltmpX
                     7649  ;*                lda     dwelltmpH
                     7650  ;*                div
                     7651  ;*                sta     dwelltmpH
                     7652  ;*                lda     dwelltmpL
                     7653  ;*                div
                     7654  ;*                sta     dwelltmpL
                     7655  
                     7656  ;*                lda     dwelltmpX
                     7657  ;*                beq     dwelldiv_end      ; too long, rail to max
                     7658  ;*                lda     #255T
                     7659  ;*                sta     dwelltmpH
                     7660  ;*                sta     dwelltmpL
                     7661  
                     7662  ;*dwelldiv_end:
                     7663  
                     7664  ; decide where to save it given new scheme
                     7665  ;*                ldhx    dwelltmpH
                     7666  ;*                brset   rotary2,EnhancedBits5,sd_1  ; are we doing rotary split
                     7667  ;*                brclr   wspk,EnhancedBits4,sd_1 ; or non-wasted, then single output
                     7668  ;*                lda     feature8_f
                     7669  ;*                bit     #spkfopb
                     7670  ;*                bne     sd_6
                     7671  ;*                bit     #spkeopb
                     7672  ;*                bne     sd_5
                     7673  ;check if 4th spark output in use
                     7674  ;*                brset   out3sparkd,feature2,sd_4 ; if 4 ops
                     7675  ;check if 3rd spark output in use
                     7676  ;don't check for 2nd output, wouldn't have got here otherwise
                     7677  ;*                brclr   REUSE_LED18,outputpins,sd_2    ; want 1 } spark c
                     7678  ;*                brclr   REUSE_LED18_2,outputpins,sd_2  ; want 1 }
                     7679  ;*sd_3:
                     7680  ;*                sthx    dwelldelay3
                     7681  ;*                ldhx    #0
                     7682  ;*                sthx    dwelldelay1
                     7683  ;*                sthx    dwelldelay2
                     7684  ;*                bra     sd_done
                     7685  ;*sd_1:
                     7686  ;*                sthx    dwelldelay1
                     7687  ;*                bra     sd_done
                     7688  
                     7689  ;*sd_2:
                     7690  ;*                sthx    dwelldelay2
                     7691  ;*                ldhx    #0
                     7692  ;*                sthx    dwelldelay1
                     7693  ;*                bra     sd_done
                     7694  
                     7695  ;*sd_4:
                     7696  ;*                sthx    dwelldelay4
                     7697  ;*                ldhx    #0
                     7698  ;*                sthx    dwelldelay1
                     7699  ;*                sthx    dwelldelay2
                     7700  ;*                sthx    dwelldelay3
                     7701  ;*                bra     sd_done
                     7702  ;*sd_5:
                     7703  ;*                sthx    dwelldelay5
                     7704  ;*                ldhx    #0
                     7705  ;*                sthx    dwelldelay1
                     7706  ;*                sthx    dwelldelay2
                     7707  ;*                sthx    dwelldelay3
                     7708  ;*                sthx    dwelldelay4
                     7709  ;*                bra     sd_done
                     7710  ;*sd_6:
                     7711  ;*                sthx    dwelldelay6
                     7712  ;*                ldhx    #0
                     7713  ;*                sthx    dwelldelay1
                     7714  ;*                sthx    dwelldelay2
                     7715  ;*                sthx    dwelldelay3
                     7716  ;*                sthx    dwelldelay4
                     7717  ;*                sthx    dwelldelay5
                     7718  ;*;                bra     sd_done
                     7719  ;*sd_done:
                     7720  ;*                jmp     really_done_dwell
                     7721  
                     7722  
                     7723  
                     7724  true_dwell_calc:
                     7725  ; One section of code depending on number of spark outputs now
                     7726  ; so code can apply delay of 1,2,3,4 periods back depending on rpm/advance
                     7727  ; this is supposed to improve dwell stability at medium speeds when engine conditions
                     7728  ; could have changed a lot between setting the dwell timer and the dwell starting.
                     7729  
                     7730  ; Fixed duty cycle doesn't really need this lot as we always "dwell" across the whole time
                     7731  ; between sparks on one channel.
                     7732  ; Most of the comments in here are related to real dwell control.
                     7733  
                     7734  ;WAS....
                     7735  ;dwellduty1 = dt-1 + acc factor - dwell       dt-1 +   ddt
                     7736  ;dwellduty2 = dwellduty1 + dt-1 + ac + ac    2dt-1 +  3ddt
                     7737  ;dwellduty3 = dwellduty2 + dt-1 + ac + 2ac   3dt-1 +  6ddt
                     7738  ;dwellduty4 = dwellduty3 + dt-1 + 4ac        4dt-1 + 10ddt
                     7739  
                     7740  ;But the massive loads of correction factor seemed to do more harm than good,
                     7741  ;NOW....
                     7742  ;dwellduty1 = dt-1 + acc factor - dwell       dt-1 +   ddt
                     7743  ;dwellduty2 = dwellduty1 + dt-1 + ac + ac    2dt-1 +  2ddt
                     7744  ;dwellduty3 = dwellduty2 + dt-1 + ac + 2ac   3dt-1 +  3ddt


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 58
MC68HC908GP32 User Bootloader


                     7745  ;dwellduty4 = dwellduty3 + dt-1 + 4ac        4dt-1 + 4ddt
                     7746  
                     7747  ;add off the accel factor (-ve)    dt = dt-1 + (-ddt) (predicted next period)
 8BB1 [03] B697      7748                  lda     dwelltmpL     ; dt-1
 8BB3 [03] BBA9      7749                  add     dwelltmpLac   ; ac
 8BB5 [03] B7A1      7750                  sta     dwelltmpLp    ; used if wspk
 8BB7 [03] B79A      7751                  sta     dwelltmpLop   ; output value
 8BB9 [03] B696      7752                  lda     dwelltmpH
 8BBB [03] B9A8      7753                  adc     dwelltmpHac
 8BBD [03] B7A0      7754                  sta     dwelltmpHp
 8BBF [03] B799      7755                  sta     dwelltmpHop
 8BC1 [03] B695      7756                  lda     dwelltmpX
 8BC3 [03] B9A7      7757                  adc     dwelltmpXac
 8BC5 [03] B79F      7758                  sta     dwelltmpXp
 8BC7 [03] B798      7759                  sta     dwelltmpXop
                     7760  
 8BC9 macro          7761                  SubDwell        ; subtract dwell
 8BC9 [03] B69A      7762   LDA DWELLTMPLOP  
 8BCB [03] B0F9      7763   SUB DWELLUSL  
 8BCD [03] B79A      7764   STA DWELLTMPLOP  
 8BCF [03] B699      7765   LDA DWELLTMPHOP  
 8BD1 [03] B2F8      7766   SBC DWELLUSH  
 8BD3 [03] B799      7767   STA DWELLTMPHOP  
 8BD5 [03] B698      7768   LDA DWELLTMPXOP  
 8BD7 [02] A200      7769   SBC #0  
 8BD9 [03] B798      7770   STA DWELLTMPXOP  
                     7771  
                     7772  ;*                brset   rotary2,EnhancedBits5,cd0
                     7773  ;*                brset   wspk,EnhancedBits4,cd1_start
                     7774  
                     7775  ;*cd0:
                     7776  ;*;we are either have one spark output or rotary. We dwell across a single period only.
                     7777  ;*                DwellRail     ; check if negative or less than mindischarge
                     7778  ;*                DwellDiv         ; convert microseconds to 0.1ms units
                     7779  ;*                sthx    dwelldelay1
                     7780  ;*                jmp     really_done_dwell
                     7781  
                     7782  ;*cd1_start:
                     7783                  ;check to see if value we _would_ store in dwelldelay1 is negative
                     7784                  ; ie. top bit set
 8BDB [03] B698      7785                  lda     dwelltmpXop
 8BDD [03] 2B32      7786                  bmi     cd_1rail   ; if pos ok, else set to zero  ?? is BMI correct?
 8BDF macro          7787                  DwellDiv
 8BDF [01] 8C        7788   CLRH  
 8BE0 [02] AE64      7789   LDX #100T  
 8BE2 [03] B698      7790   LDA DWELLTMPXOP  
 8BE4 [07] 52        7791   DIV  
 8BE5 [03] B79B      7792   STA DWELLTMPXMS  
 8BE7 [03] B699      7793   LDA DWELLTMPHOP  
 8BE9 [07] 52        7794   DIV  
 8BEA [03] B79C      7795   STA DWELLTMPHMS  
 8BEC [03] B69A      7796   LDA DWELLTMPLOP  
 8BEE [07] 52        7797   DIV  
 8BEF [03] B79D      7798   STA DWELLTMPLMS  
 8BF1 [03] B69B      7799   LDA DWELLTMPXMS  
 8BF3 [03] 2706      7800   BEQ DWLLDEND  
 8BF5 [02] A6FF      7801   LDA #255T  
 8BF7 [03] B79C      7802   STA DWELLTMPHMS  
 8BF9 [03] B79D      7803   STA DWELLTMPLMS  
                     7804  DWLLDEND:  
 8BFB [03] B69C      7805   LDA DWELLTMPHMS  
 8BFD [03] 260E      7806   BNE SAVE_DWELL  
 8BFF [03] B69D      7807   LDA DWELLTMPLMS  
 8C01 [04] C1E08F    7808   CMP MINDISCHG_F  
 8C04 [03] 2207      7809   BHI SAVE_DWELL  
                     7810  DWELL_LIM:  
 8C06 [03] 3F9C      7811   CLR DWELLTMPHMS  
 8C08 [04] C6E08F    7812   LDA MINDISCHG_F  
 8C0B [03] B79D      7813   STA DWELLTMPLMS  
                     7814  SAVE_DWELL:  
 8C0D [04] 559C      7815   LDHX DWELLTMPHMS  
 8C0F [03] 2003      7816                  bra     cd_1store
                     7817  cd_1rail:
 8C11 [03] 450000    7818                  ldhx    #0
                     7819  cd_1store:
 8C14 [04] 35E7      7820                  sthx    dwelldelay1
                     7821  cd_2:
                     7822  ;dd2 = dd1 +dt-1 + ac + ac
 8C16 [03] B6A1      7823                  lda     dwelltmpLp ; period without dwell removed
 8C18 [03] BB97      7824                  add     dwelltmpL
 8C1A [03] B7A1      7825                  sta     dwelltmpLp  ; now 2 periods ready for next calc
 8C1C [03] B79A      7826                  sta     dwelltmpLop
 8C1E [03] B6A0      7827                  lda     dwelltmpHp
 8C20 [03] B996      7828                  adc     dwelltmpH
 8C22 [03] B7A0      7829                  sta     dwelltmpHp
 8C24 [03] B799      7830                  sta     dwelltmpHop
 8C26 [03] B69F      7831                  lda     dwelltmpXp
 8C28 [03] B995      7832                  adc     dwelltmpX
 8C2A [03] B79F      7833                  sta     dwelltmpXp
 8C2C [03] B798      7834                  sta     dwelltmpXop
                     7835  
 8C2E [03] B69A      7836                  lda     dwelltmpLop
 8C30 [03] BBA9      7837                  add     dwelltmpLac
 8C32 [03] B79A      7838                  sta     dwelltmpLop
 8C34 [03] B699      7839                  lda     dwelltmpHop
 8C36 [03] B9A8      7840                  adc     dwelltmpHac
 8C38 [03] B799      7841                  sta     dwelltmpHop
 8C3A [03] B698      7842                  lda     dwelltmpXop
 8C3C [03] B9A7      7843                  adc     dwelltmpXac
 8C3E [03] B798      7844                  sta     dwelltmpXop
                     7845  
 8C40 macro          7846                  SubDwell        ; subtract dwell
 8C40 [03] B69A      7847   LDA DWELLTMPLOP  
 8C42 [03] B0F9      7848   SUB DWELLUSL  
 8C44 [03] B79A      7849   STA DWELLTMPLOP  
 8C46 [03] B699      7850   LDA DWELLTMPHOP  
 8C48 [03] B2F8      7851   SBC DWELLUSH  
 8C4A [03] B799      7852   STA DWELLTMPHOP  
 8C4C [03] B698      7853   LDA DWELLTMPXOP  
 8C4E [02] A200      7854   SBC #0  
 8C50 [03] B798      7855   STA DWELLTMPXOP  
                     7856  
                     7857  ;*                brclr   REUSE_LED18,outputpins,cd2_done    ; want 1 } spark c
                     7858  ;*                brclr   REUSE_LED18_2,outputpins,cd2_done  ; want 1 }
                     7859  ;*                bra     cd2_cont
                     7860  ;*cd2_done:
 8C52 macro          7861                  DwellRail     ; check if negative or less than mindischarge
 8C52 [03] B698      7862   LDA DWELLTMPXOP  
 8C54 [03] 2706      7863   BEQ DWLNWCHK  
 8C56 [02] A580      7864   BIT #$80  
 8C58 [03] 260D      7865   BNE DWLNWRAIL  
 8C5A [03] 2014      7866   BRA DWLNWOK  
                     7867  DWLNWCHK:  
 8C5C [03] B699      7868   LDA DWELLTMPHOP  
 8C5E [03] 2610      7869   BNE DWLNWOK  
 8C60 [03] B69A      7870   LDA DWELLTMPLOP  
 8C62 [04] C1E08F    7871   CMP MINDISCHG_F  
 8C65 [03] 2409      7872   BHS DWLNWOK  
                     7873  DWLNWRAIL:  
 8C67 [03] 3F98      7874   CLR DWELLTMPXOP  
 8C69 [03] 3F99      7875   CLR DWELLTMPHOP  
 8C6B [04] C6E08F    7876   LDA MINDISCHG_F  
 8C6E [03] B79A      7877   STA DWELLTMPLOP  
                     7878  DWLNWOK:  
 8C70 macro          7879                  DwellDiv         ; convert microseconds to 0.1ms units
 8C70 [01] 8C        7880   CLRH  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 59
MC68HC908GP32 User Bootloader


 8C71 [02] AE64      7881   LDX #100T  
 8C73 [03] B698      7882   LDA DWELLTMPXOP  
 8C75 [07] 52        7883   DIV  
 8C76 [03] B79B      7884   STA DWELLTMPXMS  
 8C78 [03] B699      7885   LDA DWELLTMPHOP  
 8C7A [07] 52        7886   DIV  
 8C7B [03] B79C      7887   STA DWELLTMPHMS  
 8C7D [03] B69A      7888   LDA DWELLTMPLOP  
 8C7F [07] 52        7889   DIV  
 8C80 [03] B79D      7890   STA DWELLTMPLMS  
 8C82 [03] B69B      7891   LDA DWELLTMPXMS  
 8C84 [03] 2706      7892   BEQ DWLLDEND  
 8C86 [02] A6FF      7893   LDA #255T  
 8C88 [03] B79C      7894   STA DWELLTMPHMS  
 8C8A [03] B79D      7895   STA DWELLTMPLMS  
                     7896  DWLLDEND:  
 8C8C [03] B69C      7897   LDA DWELLTMPHMS  
 8C8E [03] 260E      7898   BNE SAVE_DWELL  
 8C90 [03] B69D      7899   LDA DWELLTMPLMS  
 8C92 [04] C1E08F    7900   CMP MINDISCHG_F  
 8C95 [03] 2207      7901   BHI SAVE_DWELL  
                     7902  DWELL_LIM:  
 8C97 [03] 3F9C      7903   CLR DWELLTMPHMS  
 8C99 [04] C6E08F    7904   LDA MINDISCHG_F  
 8C9C [03] B79D      7905   STA DWELLTMPLMS  
                     7906  SAVE_DWELL:  
 8C9E [04] 559C      7907   LDHX DWELLTMPHMS  
 8CA0 [04] 35E9      7908                  sthx    dwelldelay2
                     7909  ;                ldhx    #0
                     7910  ;                sthx    dwelldelay3
                     7911  ;                sthx    dwelldelay4
 8CA2 [03] CC8CA5    7912                  jmp     really_done_dwell
                     7913  
                     7914  ;*cd2_cont:
                     7915  ;*                ;check to see if value we _would_ store in dwelldelay2 is negative
                     7916  ;*                ; ie. top bit set
                     7917  ;*                lda     dwelltmpXop
                     7918  ;*                bmi     cd_2rail   ; if pos ok, else set to zero  ?? is BPL correct?
                     7919  ;*                DwellDiv
                     7920  ;*                bra     cd_2store
                     7921  ;*cd_2rail:
                     7922  ;*                ldhx    #0
                     7923  ;*cd_2store:
                     7924  ;*                sthx    dwelldelay2
                     7925  
                     7926  ;*cd_3:
                     7927  ;3 periods = 3dt-1 + 3ddt
                     7928  ;3x dt-1
                     7929  ;save a copy in dwelltmp?p
                     7930  
                     7931  ;*                lda     dwelltmpLp ; period without dwell removed
                     7932  ;*                add     dwelltmpL
                     7933  ;*                sta     dwelltmpLp  ; now 3 periods ready for next calc
                     7934  ;*                sta     dwelltmpLop
                     7935  ;*                lda     dwelltmpHp
                     7936  ;*                adc     dwelltmpH
                     7937  ;*                sta     dwelltmpHp
                     7938  ;*                sta     dwelltmpHop
                     7939  ;*                lda     dwelltmpXp
                     7940  ;*                adc     dwelltmpX
                     7941  ;*                sta     dwelltmpXp
                     7942  ;*                sta     dwelltmpXop
                     7943  
                     7944  ;*                lda     dwelltmpLop
                     7945  ;*                add     dwelltmpLac
                     7946  ;*                sta     dwelltmpLop
                     7947  ;*                lda     dwelltmpHop
                     7948  ;*                adc     dwelltmpHac
                     7949  ;*                sta     dwelltmpHop
                     7950  ;*                lda     dwelltmpXop
                     7951  ;*                adc     dwelltmpXac
                     7952  ;*                sta     dwelltmpXop
                     7953  
                     7954  ;*                SubDwell        ; subtract dwell
                     7955  
                     7956  ;*                brset   out3sparkd,feature2,cd3_cont ; if 4 outputs
                     7957  ;*cd3_done:
                     7958  ;*                DwellRail     ; check if negative or less than mindischarge
                     7959  ;*                DwellDiv         ; convert microseconds to 0.1ms units
                     7960  ;*                sthx    dwelldelay3
                     7961  ;*;                ldhx    #0
                     7962  ;*;                sthx    dwelldelay4
                     7963  ;*                jmp     really_done_dwell
                     7964  
                     7965  ;*cd3_cont:
                     7966                  ;check to see if value we _would_ store in dwelldelay3 is negative
                     7967                  ; ie. top bit set
                     7968  ;*                lda     dwelltmpXop
                     7969  ;*                bmi     cd_3rail   ; if pos ok, else set to zero  ?? is BPL correct?
                     7970  ;*                DwellDiv
                     7971  ;*                bra     cd_3store
                     7972  ;*cd_3rail:
                     7973  ;*                ldhx    #0
                     7974  ;*cd_3store:
                     7975  ;*                sthx    dwelldelay3
                     7976  
                     7977  
                     7978  
                     7979  ;*cd_4:
                     7980  ; suspicion that this calc is not working right
                     7981  ;4 periods = 4dt-1 + 10ddt
                     7982  ;double ac factor again to make it -4ddt ; but we wanted -10ddt ?!
                     7983  ;*                lsl     dwelltmpLac
                     7984  ;*                rol     dwelltmpHac
                     7985  ;*                rol     dwelltmpXac
                     7986  
                     7987  ;*                lda     dwelltmpLp ; period without dwell removed
                     7988  ;*                add     dwelltmpL
                     7989  ;*;                sta     dwelltmpLp  ; now 4 periods ready for next calc
                     7990  ;*                sta     dwelltmpLop
                     7991  ;*                lda     dwelltmpHp
                     7992  ;*                adc     dwelltmpH
                     7993  ;*;                sta     dwelltmpHp
                     7994  ;*                sta     dwelltmpHop
                     7995  ;*                lda     dwelltmpXp
                     7996  ;*                adc     dwelltmpX
                     7997  ;*;                sta     dwelltmpXp
                     7998  ;*                sta     dwelltmpXop
                     7999  
                     8000  ;*                lda     dwelltmpLop
                     8001  ;*                add     dwelltmpLac
                     8002  ;*                sta     dwelltmpLop
                     8003  ;*                lda     dwelltmpHop
                     8004  ;*                adc     dwelltmpHac
                     8005  ;*                sta     dwelltmpHop
                     8006  ;*                lda     dwelltmpXop
                     8007  ;*                adc     dwelltmpXac
                     8008  ;*                sta     dwelltmpXop
                     8009  
                     8010  ;*                SubDwell        ; subtract dwell
                     8011  
                     8012  ;*                lda     feature8_f
                     8013  ;*                bit     #spkeopb
                     8014  ;*                bne     cd4_cont     ; if 5 outputs
                     8015  ;*cd4_done:
                     8016  ;*                DwellRail     ; check if negative or less than mindischarge


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 60
MC68HC908GP32 User Bootloader


                     8017  ;*                DwellDiv         ; convert microseconds to 0.1ms units
                     8018  ;*                sthx    dwelldelay4
                     8019  ;*;                ldhx    #0
                     8020  ;*;                sthx    dwelldelay5
                     8021  ;*                jmp     really_done_dwell
                     8022  
                     8023  ;*cd4_cont:
                     8024                  ;check to see if value we _would_ store in dwelldelay4 is negative
                     8025                  ; ie. top bit set
                     8026  ;*                lda     dwelltmpXop
                     8027  ;*                bmi     cd_4rail   ; if pos ok, else set to zero  ?? is BPL correct?
                     8028  ;*                DwellDiv
                     8029  ;*                bra     cd_4store
                     8030  ;*cd_4rail:
                     8031  ;*                ldhx    #0
                     8032  ;*cd_4store:
                     8033  ;*                sthx    dwelldelay4
                     8034  
                     8035  ;*cd_5:
                     8036  ;----------------------
                     8037  ;5 periods = 5dt-1 + 10ddt
                     8038  ;double ac factor again to make it -4ddt ; but we wanted -10ddt ?!
                     8039  ;*                lsl     dwelltmpLac  ; really ??
                     8040  ;*                rol     dwelltmpHac
                     8041  ;*                rol     dwelltmpXac
                     8042  
                     8043  ;*                lda     dwelltmpLp ; period without dwell removed
                     8044  ;*                add     dwelltmpL
                     8045  ;*;                sta     dwelltmpLp  ; now 4 periods ready for next calc
                     8046  ;*                sta     dwelltmpLop
                     8047  ;*                lda     dwelltmpHp
                     8048  ;*                adc     dwelltmpH
                     8049  ;*;                sta     dwelltmpHp
                     8050  ;*                sta     dwelltmpHop
                     8051  ;*                lda     dwelltmpXp
                     8052  ;*                adc     dwelltmpX
                     8053  ;*;                sta     dwelltmpXp
                     8054  ;*                sta     dwelltmpXop
                     8055  
                     8056  ;*                lda     dwelltmpLop
                     8057  ;*                add     dwelltmpLac
                     8058  ;*                sta     dwelltmpLop
                     8059  ;*                lda     dwelltmpHop
                     8060  ;*                adc     dwelltmpHac
                     8061  ;*                sta     dwelltmpHop
                     8062  ;*                lda     dwelltmpXop
                     8063  ;*                adc     dwelltmpXac
                     8064  ;*                sta     dwelltmpXop
                     8065  
                     8066  ;*                SubDwell        ; subtract dwell
                     8067  
                     8068  ;*               lda     feature8_f
                     8069  ;*               bit     #spkfopb
                     8070  ;*               bne     cd5_cont     ; if 6 outputs
                     8071  ;*cd5_done:
                     8072  ;*                DwellRail     ; check if negative or less than mindischarge
                     8073  ;*                DwellDiv         ; convert microseconds to 0.1ms units
                     8074  ;*                sthx    dwelldelay5
                     8075  ;*                jmp     really_done_dwell
                     8076  
                     8077  ;*cd5_cont:
                     8078                  ;check to see if value we _would_ store in dwelldelay4 is negative
                     8079                  ; ie. top bit set
                     8080  ;*                lda     dwelltmpXop
                     8081  ;*                bmi     cd_5rail   ; if pos ok, else set to zero  ?? is BPL correct?
                     8082  ;*                DwellDiv
                     8083  ;*                bra     cd_5store
                     8084  ;*cd_5rail:
                     8085  ;*                ldhx    #0
                     8086  ;*cd_5store:
                     8087  ;*                sthx    dwelldelay5
                     8088  
                     8089  
                     8090  ;*cd_6:
                     8091  ;----------------------
                     8092  ;6 periods = 6dt-1 + ??ddt
                     8093  ;double ac factor again to make it -4ddt ; but we wanted -10ddt ?!
                     8094  ;these calculations need some serious thought for 5 & 6
                     8095  ;*                lsl     dwelltmpLac  ; really ??
                     8096  ;*                rol     dwelltmpHac
                     8097  ;*                rol     dwelltmpXac
                     8098  
                     8099  ;*                lda     dwelltmpLp ; period without dwell removed
                     8100  ;*                add     dwelltmpL
                     8101  ;*;                sta     dwelltmpLp  ; now 4 periods ready for next calc
                     8102  ;*                sta     dwelltmpLop
                     8103  ;*                lda     dwelltmpHp
                     8104  ;*                adc     dwelltmpH
                     8105  ;*;                sta     dwelltmpHp
                     8106  ;*                sta     dwelltmpHop
                     8107  ;*                lda     dwelltmpXp
                     8108  ;*                adc     dwelltmpX
                     8109  ;*;                sta     dwelltmpXp
                     8110  ;*                sta     dwelltmpXop
                     8111  
                     8112  ;*                lda     dwelltmpLop
                     8113  ;*                add     dwelltmpLac
                     8114  ;*                sta     dwelltmpLop
                     8115  ;*                lda     dwelltmpHop
                     8116  ;*                adc     dwelltmpHac
                     8117  ;*                sta     dwelltmpHop
                     8118  ;*                lda     dwelltmpXop
                     8119  ;*                adc     dwelltmpXac
                     8120  ;*                sta     dwelltmpXop
                     8121  
                     8122  ;*                SubDwell        ; subtract dwell
                     8123  
                     8124  ;*;cd6_done:
                     8125  ;*                DwellRail     ; check if negative or less than mindischarge
                     8126  ;*                DwellDiv         ; convert microseconds to 0.1ms units
                     8127  ;*                sthx    dwelldelay6
                     8128  ;*;                jmp     really_done_dwell
                     8129  
                     8130  really_done_dwell:
                     8131  ;finally we've calculated everything we need to for dwell and saved it away - phew!
                     8132  
                     8133  ;*                brset   rotary2,EnhancedBits5,rotary_split  ; are we doing rotary split
 8CA5 [03] CC8CA8    8134                  jmp     misc_spark_end
                     8135  ;****************
                     8136  ; Rotary trailing split
                     8137  ;
                     8138  ; first check if using a fixed split
                     8139  ;****************
                     8140  ;*rotary_split:
                     8141  ;*                mov     dwelltmpHp,dwelltmpHac    ;save delay for rotary
                     8142  ;*                mov     dwelltmpLp,dwelltmpLac
                     8143  ;*                lda     page
                     8144  ;*                cmp     #7
                     8145  ;*                bne     fixspl_fl
                     8146  ;*                lda     {VE_r+FixedSplit_f-flash_table7} ; load ram value
                     8147  ;*                bra     fixspl_c
                     8148  ;*fixspl_fl:      lda     FixedSplit_f
                     8149  ;*fixspl_c:
                     8150  ;*                cmp     #$03
                     8151  ;*                blo     rs_STEP_1  ; Added this as MT doesnt
                     8152  ;*                                   ; send a perfect 00T


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 61
MC68HC908GP32 User Bootloader


                     8153  ;*                sta     tmp6       ; else use this fixed advance
                     8154  ;*                jmp     split_lookup_done
                     8155  
                     8156  ;*rs_STEP_1:
                     8157  ;*        ldhx    #KPARANGEsplit_f
                     8158  ;*        sthx    tmp1
                     8159  ;*        mov     #$05,tmp3          ; 6x6
                     8160  ;*        mov     kpa_n,tmp4
                     8161  ;*        jsr     tableLookup
                     8162  ;*        mov     tmp5,tmp8          ; Index
                     8163  ;*        mov     tmp1,tmp9          ; X1
                     8164  ;*        mov     tmp2,tmp10         ; X2
                     8165  
                     8166  ;*rs1_STEP_2:
                     8167  ;*        ldhx    #RPMRANGEsplit_f
                     8168  ;*        sthx    tmp1
                     8169  ;*        mov     #$05,tmp3          ; 6x6
                     8170  ;*        mov     rpm,tmp4
                     8171  ;*        jsr     tableLookup
                     8172  ;*        mov     tmp5,tmp11         ; Index
                     8173  ;*        mov     tmp1,tmp13         ; X1
                     8174  ;*        mov     tmp2,tmp14         ; X2
                     8175  
                     8176  ;*rs1_STEP_3:
                     8177  ;*        clrh
                     8178  ;*        ldx     #$06                       ; 6x6
                     8179  ;*        lda     tmp8
                     8180  ;*        deca
                     8181  ;*        mul
                     8182  ;*        add     tmp11
                     8183  ;*        deca
                     8184  ;*        tax
                     8185  ;*        rs1X
                     8186  ;*        sta     tmp15
                     8187  ;*        incx
                     8188  ;*        rs1X
                     8189  ;*        sta     tmp16
                     8190  ;*        ldx     #$06                       ; 6x6
                     8191  ;*        lda     tmp8
                     8192  ;*        mul
                     8193  ;*        add     tmp11
                     8194  ;*        deca
                     8195  ;*        tax
                     8196  ;*        rs1X
                     8197  ;*        sta     tmp17
                     8198  ;*        incx
                     8199  ;*        rs1X
                     8200  ;*        sta     tmp18
                     8201  
                     8202  ;*        jsr     VE_STEP_4
                     8203  ;       result in tmp6 - contains split degrees (0-255 = 0-89.5 deg)
                     8204  
                     8205  
                     8206  ;*split_lookup_done:
                     8207  ;special values
                     8208  ; 0 deg = no split, simultaneous
                     8209  ; >20 deg = do not fire trailing at all
                     8210  ;*        lda    tmp6
                     8211  ;*        cmp    #85T ; 20deg
                     8212  ;*        bhi    trail_off  ; now set >20deg for no trailing
                     8213  ;*        cmp    #74T ; 16deg
                     8214  ;*        bhs    sld2
                     8215  ;*        bset   rsh_s,EnhancedBits5 ; set split hysteresis bit
                     8216  ;*sld2:
                     8217  ;*        cmp    #31T ; (31T = 1 deg)
                     8218  ;*        blo    trail_simult
                     8219  ;        lda    dwelltmpXac
                     8220  ;        beq    trail_split      ; only do split if fast enough
                     8221  ;        ;at slow speeds < 537rpm no trailing
                     8222  ;        ; this is a technical limitation because the trailing split would need
                     8223  ;        ; re-writing using the 0.1ms spark as well. No plans to do this at the mo.
                     8224   ;*        bra    trail_split   ; changed by KC
                     8225  
                     8226  ;*trail_off:
                     8227  ;*        mov    #85T,tmp6   ; rail calc at 20deg, disabling handled elsewhere
                     8228  ;*        bclr   rsh_s,EnhancedBits5 ; clear split hysteresis bit
                     8229  ;*        jmp    split_calc_done
                     8230  
                     8231  ;*trail_simult:
                     8232  ;*        clra
                     8233  ;*        sei
                     8234  ;*        sta    splitdelH
                     8235  ;*        sta    splitdelL
                     8236  ;*        cli
                     8237  ;*        jmp    split_calc_done
                     8238  ; the above gives intermittent spark? so rail at 1 deg minimum
                     8239  ;*;        mov    #31T,tmp6
                     8240  
                     8241  ;*trail_split:
                     8242  ;*        lda     tmp6
                     8243  ;*        sub     #28T   ; remove 10 deg offset
                     8244  ;*        sta     tmp6   ; can't go neg
                     8245  
                     8246  ; now convert this split into a delay, leading to trailing
                     8247  ;dwelltmp?ac contains predicted period = 180 deg
                     8248  ;divide by 2 to get 90deg time
                     8249  ; already determined dwelltmpXac is zero above
                     8250  
                     8251  ;*        lsr    dwelltmpHac  ; not working ??
                     8252  ;*        ror    dwelltmpLac  ;
                     8253  
                     8254  ;*rs_mult:
                     8255  ;nb Sparkdlt? is equ'd to tmp17,18,19 at top
                     8256          ; Calculate time for delay angle
                     8257          ; Time for 90 deg * Angle (256=90 deg)/256
                     8258  ;*        lda     tmp6        ; split angle
                     8259  ;*        ldx     dwelltmpLac
                     8260  ;*        mul
                     8261  ;*        stx     SparkdltL
                     8262          ;don't care for A
                     8263  
                     8264  ;*        lda     tmp6
                     8265  ;*        ldx     dwelltmpHac
                     8266  ;*        mul
                     8267  ;*        stx     SparkdltH
                     8268  ;*        add     SparkdltL
                     8269  ;*        sta     SparkdltL
                     8270  ;*        bcc     rsm_ok
                     8271  ;*        inc     SparkdltH
                     8272  
                     8273  ;*rsm_ok:
                     8274          ;now we've calculated, save to working vars
                     8275  ;*        sei
                     8276  ;*        lda     SparkdltH
                     8277  ;*        sta     splitdelH
                     8278  ;*        lda     SparkdltL
                     8279  ;*        sta     splitdelL
                     8280  ;*        cli
                     8281  ;*split_calc_done:
                     8282  ;now do rpm based hysteresis of trailing on/off
                     8283  ;*        lda     rpm
                     8284  ;*        cmp     #7T
                     8285  ;*        blo     spcd2
                     8286  ;*        cmp     #8T
                     8287  ;*        blo     trail_hys_ck
                     8288  ;*        bset    rsh_r,EnhancedBits5 ; set rpm hysteresis bit


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 62
MC68HC908GP32 User Bootloader


                     8289  ;*        bra     trail_hys_ck
                     8290  ;*spcd2:
                     8291  ;*        bclr    rsh_r,EnhancedBits5 ; clear rpm hysteresis bit
                     8292  ;*        bra     trail_dwell_kill
                     8293  ;*trail_hys_ck:
                     8294  ;*        brset   rsh_s,EnhancedBits5,misc_spark_end
                     8295  
                     8296  ;*trail_dwell_kill:
                     8297  ;make sure we don't charge the trailing coil
                     8298  ;*        clr     SparkOnleftch
                     8299  ;*        clr     SparkOnleftcl
                     8300  ;*        clr     SparkOnleftdh
                     8301  ;*        clr     SparkOnleftdl
                     8302  
                     8303  misc_spark_end:
 8CA8 [04] 81        8304          rts
                     8305  
                     8306  ***************************************************************************
                     8307  **
                     8308  ** * * * * Interrupt Section * * * * *
                     8309  **
                     8310  ** Following interrupt service routines:
                     8311  **  - Timer Overflow
                     8312  **  - ADC Conversion Complete
                     8313  **  - IRQ input line transistion from high to low
                     8314  **  - Serial Communication received character
                     8315  **  - Serial Communications transmit buffer empty (send another character)
                     8316  **
                     8317  ***************************************************************************
                     8318  
                     8319  ;First some Macros used within the interrupt sections
                     8320  
 8CA9                8321  $MACRO COILNEG
                     8322          brset   REUSE_FIDLE,outputpins,dslsx
                     8323          brset   rotary2,EnhancedBits5,rot2neg ; twin rotor code
                     8324          brclr   TOY_DLI,outputpins,nils      ; note, Toyota Multiplex only
                     8325                                       ; NON-inverted
                     8326          brset   coilabit,coilsel,fcnita
                     8327          brset   coilbbit,coilsel,fcnitb
                     8328          brset   coilcbit,coilsel,fcnitc
                     8329  fcnita:
                     8330          bclr    coilb,portc
                     8331          bclr    wled,portc
                     8332          bra     dslsa
                     8333  fcnitb:
                     8334          bset    coilb,portc
                     8335          bclr    wled,portc
                     8336          bra     dslsa
                     8337  fcnitc:
                     8338          bclr    coilb,portc
                     8339          bset    wled,portc
                     8340          bra     dslsa
                     8341  rot2neg:
                     8342          brset   rotaryFDign,feature1,fireFD
                     8343          brset   coilcbit,coilsel,rot2cn
                     8344          brset   coildbit,coilsel,rot2dn
                     8345  ;either A or B both fire the single leading coil on LED17
                     8346          bra     dslsa
                     8347  rot2cn:
                     8348          bclr    wled,portc   ; select
                     8349          bset    coilb,portc
                     8350          bra     cn_end
                     8351  rot2dn:
                     8352          bset    wled,portc
                     8353          bset    coilb,portc
                     8354          bra     cn_end
                     8355  nils:                                        ; normal sparking non inverted
                     8356          brset   coilabit,coilsel,dslsa
                     8357          brset   coilbbit,coilsel,dslsb
                     8358          brset   coilcbit,coilsel,dslsc
                     8359          brset   coildbit,coilsel,dslsd
                     8360          brset   coilebit,coilsel,dslse
                     8361          brset   coilfbit,coilsel,dslsf
                     8362          bra     cn_end                       ; should never get here
                     8363  
                     8364  fireFD:
                     8365       brset   coilcbit,coilsel,dslsb
                     8366       brset   coildbit,coilsel,dslsc
                     8367  
                     8368  dslsa:
                     8369          bset    coila,portc          ; Set spark on
                     8370          bra     cn_end
                     8371  
                     8372  dslsb:
                     8373          bset    coilb,portc          ; Set spark on
                     8374          bra     cn_end
                     8375  dslsc:
                     8376          bset    wled,portc           ; Set spark on
                     8377          bra     cn_end
                     8378  dslsd:
                     8379          bset    output3,portd                ; Set spark on
                     8380          bra     cn_end
                     8381  dslse:
                     8382          bset    pin10,portc          ; Set spark on
                     8383          bra     cn_end
                     8384  dslsf:
                     8385          bset    knockin,portd                ; Set spark on
                     8386          bra     cn_end
                     8387  dslsx:
                     8388          bset    iasc,porta
                     8389  cn_end:
 8CA9                8390  $MACROEND
                     8391  
                     8392  ***************************************************************************
                     8393  
 8CA9                8394  $MACRO COILPOS
                     8395          brset   REUSE_FIDLE,outputpins,ilsox
                     8396          brset   rotary2,EnhancedBits5,rot2pos
                     8397                                       ; note no Toyota, because
                     8398                                       ; never inverted - ??? is this right
                     8399          brset   coilabit,coilsel,ilsoa
                     8400          brset   coilbbit,coilsel,ilsob
                     8401          brset   coilcbit,coilsel,ilsoc
                     8402          brset   coildbit,coilsel,ilsod
                     8403          brset   coilebit,coilsel,ilsoe
                     8404          brset   coilfbit,coilsel,ilsof
                     8405          bra     fc_end                       ; should never get here
                     8406  rot2pos:
                     8407          brset   rotaryFDign,feature1,chargeFD
                     8408          brset   coilcbit,coilsel,rot2cp
                     8409          brset   coildbit,coilsel,rot2dp
                     8410  ;either A or B both fire the single leading coil on LED17
                     8411          bra     ilsoa
                     8412  rot2cp:
                     8413  ;        bclr    wled,portc   ; select. Commented by KC, b/c there's no
                     8414                             ; rotary inverted... if using stock hardware.
                     8415          bclr    coilb,portc
                     8416          bra     fc_end
                     8417  rot2dp:
                     8418  ;        bset    wled,portc
                     8419          bclr    coilb,portc
                     8420          bra     fc_end
                     8421  chargeFD:
                     8422       brset   coilcbit,coilsel,ilsoc
                     8423       brset   coildbit,coilsel,ilsob
                     8424  ilsoa:


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 63
MC68HC908GP32 User Bootloader


                     8425          bclr    coila,portc
                     8426          bra     fc_end
                     8427  ilsob:
                     8428          bclr    coilb,portc
                     8429          bra     fc_end
                     8430  ilsoc:
                     8431          bclr    wled,portc
                     8432          bra     fc_end
                     8433  ilsod:
                     8434          bclr    output3,portd
                     8435          bra     fc_end
                     8436  ilsoe:
                     8437          bclr    pin10,portc
                     8438          bra     fc_end
                     8439  ilsof:
                     8440          bclr    knockin,portd
                     8441          bra     fc_end
                     8442  ilsox:
                     8443          bclr    iasc,porta
                     8444  fc_end:
 8CA9                8445  $MACROEND
                     8446  
                     8447  ***************************************************************************
                     8448  **
                     8449  ** Timer Rollover - Occurs every 1/10 of a millisecond - main timing clock
                     8450  **
                     8451  **
                     8452  ** Generate time rates:
                     8453  **  1/10 milliseconds
                     8454  **  1 milliseconds
                     8455  **  1/10 seconds
                     8456  **  seconds
                     8457  **
                     8458  ** Also, in 1/10 millisecond section, turn on/off injector and
                     8459  **  check RPM for stall condition
                     8460  ** In milliseconds section, fire off ADC conversion for next channel (5 total),
                     8461  **  and wrap back when all channels done
                     8462  **
                     8463  ***************************************************************************
                     8464  
 8CA9                8465  $MACRO CalcDwellspk
                     8466  ; This is now one massive macro. There is a section of code depending on how many spark
                     8467  ; outputs there are - 1,2,3,4,5,6
                     8468  ;022g - macro is now used to apply dwelldelay value calculated in main loop.
                     8469  ; macro only used after spark when mainloop will??? have had time to calc since trigger
                     8470  ;*                brset   wspk,EnhancedBits4,wastedwell
                     8471  ;for single output dwell always use dwelldelay1
                     8472  ;*                ldhx    dwelldelay1
                     8473  ;*                brset   coilabit,coilsel,dd_a
                     8474  ;*                brset   coilbbit,coilsel,dd_b  ; surely these will never happen though
                     8475  ;*                brset   coilcbit,coilsel,dd_c
                     8476  ;*                brset   coildbit,coilsel,dd_d
                     8477  ; no need to consider 5th, 6th because wpsk will always be set
                     8478  ;*                bra     jdd_end            ; how?
                     8479  ;*dd_a:           sthx    SparkOnLeftah      ; Store time to keep output the same
                     8480  ;*                bra     jdd_end
                     8481  ;*dd_b:           sthx    SparkOnLeftbh      ; Store time to keep output the same
                     8482  ;*                bra     jdd_end
                     8483  ;*dd_c:           sthx    SparkOnLeftch      ; Store time to keep output the same
                     8484  ;*                bra     jdd_end
                     8485  ;*dd_d:           sthx    SparkOnLeftdh      ; Store time to keep output the same
                     8486  ;*jdd_end:        jmp     dd_end
                     8487  
                     8488  ;*jwdwell6op:     jmp     wdwell6op
                     8489  ;*jwdwell5op:     jmp     wdwell5op
                     8490  
                     8491  ;*jwdwell4op:     jmp     wdwell4op
                     8492  jwdwell2op:     jmp     wdwell2op
                     8493  
                     8494  ;*wastedwell:
                     8495  ;one section each for 2,3,4,5,6 outputs
                     8496  ;nothing needed for rotary, it's not considered wasted spark
                     8497  ;*                lda     feature8_f
                     8498  ;*                bit     #spkfopb
                     8499  ;*                bne     jwdwell6op
                     8500  ;*                bit     #spkeopb
                     8501  ;*                bne     jwdwell5op
                     8502  
                     8503  ;*                brset   out3sparkd,feature2,jwdwell4op ; if 4 o/ps
                     8504  ;check if 3rd spark output in use
                     8505  ;no need to check for 2nd output, wouldn't have got here otherwise (wspk above)
                     8506  ;*                brclr   REUSE_LED18,outputpins,jwdwell2op    ; want 1 } spark c
                     8507  ;*                brclr   REUSE_LED18_2,outputpins,jwdwell2op  ; want 1 }
                     8508  ;*wdwell3op:
                     8509  ;first off always store a 360deg dwell delay
                     8510  ;*                ldhx    dwelldelay3    ; precalculated to rail at mindischg
                     8511  ;*                brset   coilabit,coilsel,wd3a360
                     8512  ;*                brset   coilbbit,coilsel,wd3b360
                     8513  ;*                brset   coilcbit,coilsel,wd3c360
                     8514  ;*wd3a360:        sthx    SparkOnLeftah
                     8515  ;*                bra     wd3end360
                     8516  ;*wd3b360:        sthx    SparkOnLeftbh
                     8517  ;*                bra     wd3end360
                     8518  ;*wd3c360:        sthx    SparkOnLeftch
                     8519  ;*wd3end360:
                     8520  
                     8521  ;we've now set the 360deg wait, see if we can delay off previous spark (120deg)
                     8522  ;*                lda     dwelldelay1
                     8523  ;*                bne     wd3ok120
                     8524  ;*                lda     dwelldelay1+1
                     8525  ;*                cmp     #2
                     8526  ;*                blo     wd3skip120   ; check if more than 0.2ms
                     8527                  ; if less then dwell might get missed
                     8528  ;*wd3ok120:
                     8529  ;*                ldhx    dwelldelay1
                     8530  ;*                brset   coilabit,coilsel,wd3a120
                     8531  ;*                brset   coilbbit,coilsel,wd3b120
                     8532  ;*                brset   coilcbit,coilsel,wd3c120
                     8533  ;*wd3a120:        sthx    SparkOnLeftbh
                     8534  ;*                bra     wd3end120
                     8535  ;*wd3b120:        sthx    SparkOnLeftch
                     8536  ;*                bra     wd3end120
                     8537  ;*wd3c120:        sthx    SparkOnLeftah
                     8538  ;*wd3end120:
                     8539  ;*;;;;;;;;;;      jmp     dd_end ; always apply all three
                     8540  
                     8541  ;*wd3skip120:
                     8542  ;not enough time in 120deg period, see if 240deg will work
                     8543  ;*                lda     dwelldelay2
                     8544  ;*                bne     wd3ok240
                     8545  ;*                lda     dwelldelay2+1
                     8546  ;*                cmp     #2
                     8547  ;*                blo     wd3end240   ; check if more than 0.2ms
                     8548  ;*                ; if less then dwell might get missed
                     8549  ;*wd3ok240:
                     8550  ;*                ldhx    dwelldelay2
                     8551  ;*                brset   coilabit,coilsel,wd3a240
                     8552  ;*                brset   coilbbit,coilsel,wd3b240
                     8553  ;*                brset   coilcbit,coilsel,wd3c240
                     8554  ;*wd3a240:        sthx    SparkOnLeftch
                     8555  ;*                bra     wd3end240
                     8556  ;*wd3b240:        sthx    SparkOnLeftah
                     8557  ;*                bra     wd3end240
                     8558  ;*wd3c240:        sthx    SparkOnLeftbh
                     8559  ;*wd3end240:      jmp     dd_end
                     8560  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 64
MC68HC908GP32 User Bootloader


                     8561  ;****************
                     8562  wdwell2op:
                     8563  ;first off always store a 360deg dwell delay
                     8564                  ldhx    dwelldelay2    ; precalculated to rail at mindischg
                     8565  ;;redundant     brset   coilabit,coilsel,wd2a360
                     8566                  brset   coilbbit,coilsel,wd2b360
                     8567  wd2a360:        sthx    SparkOnLeftah
                     8568                  bra     wd2end360
                     8569  wd2b360:        sthx    SparkOnLeftbh
                     8570  wd2end360:
                     8571  ;consider oddfire, do not delay from previous spark
                     8572  ;*                lda     SparkConfig1_f
                     8573  ;*                bit     #M_SC1oddfire
                     8574  ;*                bne     wd2skip
                     8575  
                     8576  ;we've now set the 360deg wait, see if we can delay off previous spark (180deg)
                     8577                  lda     dwelldelay1
                     8578                  bne     wd2ok
                     8579                  lda     dwelldelay1+1
                     8580                  cmp     #2
                     8581                  blo     wd2skip   ; check if more than 0.2ms
                     8582                  ; if less then dwell might get missed
                     8583  wd2ok:
                     8584                  ldhx    dwelldelay1
                     8585                  brset   coilabit,coilsel,wd2a180
                     8586                  brset   coilbbit,coilsel,wd2b180
                     8587  wd2a180:        sthx    SparkOnLeftbh
                     8588                  bra     wd2end180
                     8589  wd2b180:        sthx    SparkOnLeftah
                     8590  wd2end180:
                     8591  
                     8592  wd2skip:        jmp     dd_end
                     8593  
                     8594  ;****************
                     8595  
                     8596  ;*wdwell4op:
                     8597  ;first off always store a 360deg dwell delay
                     8598  ;*                ldhx    dwelldelay4    ; precalculated to rail at mindischg
                     8599  ;*                brset   coilabit,coilsel,wd4a360
                     8600  ;*                brset   coilbbit,coilsel,wd4b360
                     8601  ;*                brset   coilcbit,coilsel,wd4c360
                     8602  ;*                brset   coildbit,coilsel,wd4d360
                     8603  ;*wd4a360:        sthx    SparkOnLeftah
                     8604  ;*                bra     wd4end360
                     8605  ;*wd4b360:        sthx    SparkOnLeftbh
                     8606  ;*                bra     wd4end360
                     8607  ;*wd4c360:        sthx    SparkOnLeftch
                     8608  ;*                bra     wd4end360
                     8609  ;*wd4d360:        sthx    SparkOnLeftdh
                     8610  ;*wd4end360:
                     8611  
                     8612  ;consider oddfire, do not delay from previous spark
                     8613  ;*                lda     sparkconfig1_f
                     8614  ;*                bit     #M_SC1oddfire
                     8615  ;*                bne     wd4skip90
                     8616  
                     8617  ;we've now set the 360deg wait, see if we can delay off previous spark (90deg)
                     8618  ;*                lda     dwelldelay1
                     8619  ;*                bne     wd4ok90 ; if non zero then long delay so ok
                     8620  ;*                lda     dwelldelay1+1
                     8621  ;*                cmp     #2
                     8622  ;*                blo     wd4skip90   ; check if more than 0.2ms
                     8623                  ; if less, then dwell might get missed
                     8624  ;*wd4ok90:
                     8625  ;*                ldhx    dwelldelay1
                     8626  ;*                brset   coilabit,coilsel,wd4a90
                     8627  ;*                brset   coilbbit,coilsel,wd4b90
                     8628  ;*                brset   coilcbit,coilsel,wd4c90
                     8629  ;*                brset   coildbit,coilsel,wd4d90
                     8630  ;*wd4a90:        sthx    SparkOnLeftbh
                     8631  ;*                bra     wd4end90
                     8632  ;*wd4b90:        sthx    SparkOnLeftch
                     8633  ;*                bra     wd4end90
                     8634  ;*wd4c90:        sthx    SparkOnLeftdh
                     8635  ;*                bra     wd4end90
                     8636  ;*wd4d90:        sthx    SparkOnLeftah
                     8637  ;*wd4end90:
                     8638  ;*;;;       bra     dd_end
                     8639  ;;note! may want to change this so that intermediate periods are set too so that there
                     8640  ;is a smoother transition from 90deg dwell to 180deg etc.
                     8641  
                     8642  ;*wd4skip90:
                     8643  ;not enough time in 90deg period, see if 180deg will work
                     8644  ;*                lda     dwelldelay2
                     8645  ;*                bne     wd4ok180
                     8646  ;*                lda     dwelldelay2+1
                     8647  ;*                cmp     #2
                     8648  ;*                blo     wd4skip180   ; check if more than 0.2ms
                     8649                  ; if less then dwell might get missed
                     8650  ;*wd4ok180:
                     8651  ;*                ldhx    dwelldelay2
                     8652  ;*                brset   coilabit,coilsel,wd4a180
                     8653  ;*                brset   coilbbit,coilsel,wd4b180
                     8654  ;*                brset   coilcbit,coilsel,wd4c180
                     8655  ;*                brset   coildbit,coilsel,wd4d180
                     8656  ;*wd4a180:        sthx    SparkOnLeftch
                     8657  ;*                bra     wd4end180
                     8658  ;*wd4b180:        sthx    SparkOnLeftdh
                     8659  ;*                bra     wd4end180
                     8660  ;*wd4c180:        sthx    SparkOnLeftah
                     8661  ;*                bra     wd4end180
                     8662  ;*wd4d180:        sthx    SparkOnLeftbh
                     8663  ;*wd4end180:
                     8664  ;*;;      bra     dd_end
                     8665  
                     8666  ;*wd4skip180:
                     8667  ;*;consider oddfire, do not delay from previous spark
                     8668  ;*                lda     sparkconfig1_f
                     8669  ;*                bit     #M_SC1oddfire
                     8670  ;*                bne     wd4end270
                     8671  
                     8672  ;not enough time in 180deg period, see if 270deg will work
                     8673  ;*                lda     dwelldelay3
                     8674  ;*                bne     wd4ok270
                     8675  ;*                lda     dwelldelay3+1
                     8676  ;*                cmp     #2
                     8677  ;*                blo     wd4end270   ; check if more than 0.2ms
                     8678                  ; if less then dwell might get missed
                     8679  ;*wd4ok270:
                     8680  ;*                ldhx    dwelldelay3
                     8681  ;*                brset   coilabit,coilsel,wd4a270
                     8682  ;*                brset   coilbbit,coilsel,wd4b270
                     8683  ;*                brset   coilcbit,coilsel,wd4c270
                     8684  ;*                brset   coildbit,coilsel,wd4d270
                     8685  ;*wd4a270:        sthx    SparkOnLeftdh
                     8686  ;*                bra     wd4end270
                     8687  ;*wd4b270:        sthx    SparkOnLeftah
                     8688  ;*                bra     wd4end270
                     8689  ;*wd4c270:        sthx    SparkOnLeftbh
                     8690  ;*                bra     wd4end270
                     8691  ;*wd4d270:        sthx    SparkOnLeftch
                     8692  ;*wd4end270:
                     8693  ;*                jmp     dd_end
                     8694  
                     8695  ;*******************
                     8696  ; 5 spark outputs, angular names as if V10, will actually be double if 5cyl COP


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 65
MC68HC908GP32 User Bootloader


                     8697  ;*******************
                     8698  ;*wdwell5op:
                     8699  ;first off always store a 360deg dwell delay
                     8700  ;*                ldhx    dwelldelay5    ; precalculated to rail at mindischg
                     8701  ;*                brset   coilabit,coilsel,wd5a360
                     8702  ;*                brset   coilbbit,coilsel,wd5b360
                     8703  ;*                brset   coilcbit,coilsel,wd5c360
                     8704  ;*                brset   coildbit,coilsel,wd5d360
                     8705  ;*                brset   coilebit,coilsel,wd5e360
                     8706  ;*wd5a360:        sthx    SparkOnLeftah
                     8707  ;*                bra     wd5end360
                     8708  ;*wd5b360:        sthx    SparkOnLeftbh
                     8709  ;*                bra     wd5end360
                     8710  ;*wd5c360:        sthx    SparkOnLeftch
                     8711  ;*                bra     wd5end360
                     8712  ;*wd5d360:        sthx    SparkOnLeftdh
                     8713  ;*                bra     wd5end360
                     8714  ;*wd5e360:        sthx    SparkOnLefteh
                     8715  ;*wd5end360:
                     8716  ;we've now set the 360deg wait, see if we can delay off previous spark (72deg)
                     8717  ;*                lda     dwelldelay1
                     8718  ;*                bne     wd5ok72 ; if non zero then long delay so ok
                     8719  ;*                lda     dwelldelay1+1
                     8720  ;*                cmp     #2
                     8721  ;*                blo     wd5skip72   ; check if more than 0.2ms
                     8722                  ; if less, then dwell might get missed
                     8723  ;*wd5ok72:
                     8724  ;*                ldhx    dwelldelay1
                     8725  ;*                brset   coilabit,coilsel,wd5a72
                     8726  ;*                brset   coilbbit,coilsel,wd5b72
                     8727  ;*                brset   coilcbit,coilsel,wd5c72
                     8728  ;*                brset   coildbit,coilsel,wd5d72
                     8729  ;*                brset   coilebit,coilsel,wd5e72
                     8730  ;*wd5a72:         sthx    SparkOnLeftbh
                     8731  ;*                bra     wd5end72
                     8732  ;*wd5b72:         sthx    SparkOnLeftch
                     8733  ;*                bra     wd5end72
                     8734  ;*wd5c72:         sthx    SparkOnLeftdh
                     8735  ;*                bra     wd5end72
                     8736  ;*wd5d72:         sthx    SparkOnLefteh
                     8737  ;*                bra     wd5end72
                     8738  ;*wd5e72:         sthx    SparkOnLeftah
                     8739  ;*wd5end72:
                     8740  ;*;;;       bra     dd_end
                     8741  ;;note! may want to change this so that intermediate periods are set too so that there
                     8742  ;is a smoother transition from 72deg dwell to 144deg etc.
                     8743  
                     8744  ;*wd5skip72:
                     8745  
                     8746  ;*                lda     dwelldelay2
                     8747  ;*                bne     wd5ok144
                     8748  ;*                lda     dwelldelay2+1
                     8749  ;*                cmp     #2
                     8750  ;*                blo     wd5skip144   ; check if more than 0.2ms
                     8751                  ; if less then dwell might get missed
                     8752  ;*wd5ok144:
                     8753  ;*                ldhx    dwelldelay2
                     8754  ;*                brset   coilabit,coilsel,wd5a144
                     8755  ;*                brset   coilbbit,coilsel,wd5b144
                     8756  ;*                brset   coilcbit,coilsel,wd5c144
                     8757  ;*                brset   coildbit,coilsel,wd5d144
                     8758  ;*                brset   coilebit,coilsel,wd5e144
                     8759  ;*wd5a144:        sthx    SparkOnLeftch
                     8760  ;*                bra     wd5end144
                     8761  ;*wd5b144:        sthx    SparkOnLeftdh
                     8762  ;*                bra     wd5end144
                     8763  ;*wd5c144:        sthx    SparkOnLefteh
                     8764  ;*                bra     wd5end144
                     8765  ;*wd5d144:        sthx    SparkOnLeftah
                     8766  ;*                bra     wd5end144
                     8767  ;*wd5e144:        sthx    SparkOnLeftbh
                     8768  ;*wd5end144:
                     8769  ;*;;      bra     dd_end
                     8770  
                     8771  ;*wd5skip144:
                     8772  ;not enough time in 144deg period, see if 216deg will work
                     8773  ;*                lda     dwelldelay3
                     8774  ;*                bne     wd5ok216
                     8775  ;*                lda     dwelldelay3+1
                     8776  ;*                cmp     #2
                     8777  ;*                blo     wd5skip216   ; check if more than 0.2ms
                     8778                  ; if less then dwell might get missed
                     8779  ;*wd5ok216:
                     8780  ;*                ldhx    dwelldelay3
                     8781  ;*                brset   coilabit,coilsel,wd5a216
                     8782  ;*                brset   coilbbit,coilsel,wd5b216
                     8783  ;*                brset   coilcbit,coilsel,wd5c216
                     8784  ;*                brset   coildbit,coilsel,wd5d216
                     8785  ;*                brset   coilebit,coilsel,wd5e216
                     8786  ;*wd5a216:        sthx    SparkOnLeftdh
                     8787  ;*                bra     wd5end216
                     8788  ;*wd5b216:        sthx    SparkOnLefteh
                     8789  ;*                bra     wd5end216
                     8790  ;*wd5c216:        sthx    SparkOnLeftah
                     8791  ;*                bra     wd5end216
                     8792  ;*wd5d216:        sthx    SparkOnLeftbh
                     8793  ;*                bra     wd5end216
                     8794  ;*wd5e216:        sthx    SparkOnLeftch
                     8795  ;*wd5end216:
                     8796  ;*;      bra     dd_end
                     8797  
                     8798  ;*wd5skip216:
                     8799  ;not enough time in 216deg period, see if 288deg will work
                     8800  ;*                lda     dwelldelay4
                     8801  ;*                bne     wd5ok288
                     8802  ;*                lda     dwelldelay4+1
                     8803  ;*                cmp     #2
                     8804  ;*                blo     wd5skip288   ; check if more than 0.2ms
                     8805                  ; if less then dwell might get missed
                     8806  ;*wd5ok288:
                     8807  ;*                ldhx    dwelldelay4
                     8808  ;*                brset   coilabit,coilsel,wd5a288
                     8809  ;*                brset   coilbbit,coilsel,wd5b288
                     8810  ;*                brset   coilcbit,coilsel,wd5c288
                     8811  ;*                brset   coildbit,coilsel,wd5d288
                     8812  ;*                brset   coilebit,coilsel,wd5e288
                     8813  ;*wd5a288:        sthx    SparkOnLefteh
                     8814  ;*                bra     wd5end288
                     8815  ;*wd5b288:        sthx    SparkOnLeftah
                     8816  ;*                bra     wd5end288
                     8817  ;*wd5c288:        sthx    SparkOnLeftbh
                     8818  ;*                bra     wd5end288
                     8819  ;*wd5d288:        sthx    SparkOnLeftch
                     8820  ;*                bra     wd5end288
                     8821  ;*wd5e288:        sthx    SparkOnLeftdh
                     8822  ;*wd5end288:
                     8823  ;*wd5skip288:
                     8824  ;*                jmp     dd_end
                     8825  
                     8826  ;*******************
                     8827  ; 6 spark outputs, angular names as if V12, will actually be double if 6cyl COP
                     8828  ;*******************
                     8829  ;*wdwell6op:
                     8830  ;first off always store a 360deg dwell delay
                     8831  ;*                ldhx    dwelldelay6    ; precalculated to rail at mindischg
                     8832  ;*;                brset   coilabit,coilsel,wd6a360


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 66
MC68HC908GP32 User Bootloader


                     8833  ;*                brset   coilbbit,coilsel,wd6b360
                     8834  ;*                brset   coilcbit,coilsel,wd6c360
                     8835  ;*                brset   coildbit,coilsel,wd6d360
                     8836  ;*                brset   coilebit,coilsel,wd6e360
                     8837  ;*                brset   coilfbit,coilsel,wd6f360
                     8838  ;*wd6a360:        sthx    SparkOnLeftah
                     8839  ;*                bra     wd6end360
                     8840  ;*wd6b360:        sthx    SparkOnLeftbh
                     8841  ;*                bra     wd6end360
                     8842  ;*wd6c360:        sthx    SparkOnLeftch
                     8843  ;*                bra     wd6end360
                     8844  ;*wd6d360:        sthx    SparkOnLeftdh
                     8845  ;*                bra     wd6end360
                     8846  ;*wd6e360:        sthx    SparkOnLefteh
                     8847  ;*                bra     wd6end360
                     8848  ;*wd6f360:        sthx    SparkOnLeftfh
                     8849  ;*wd6end360:
                     8850  ;consider oddfire, do not delay from previous spark
                     8851  ;*                lda     sparkconfig1_f
                     8852  ;*                bit     #M_SC1oddfire
                     8853  ;*                bne     wd6skip60
                     8854  
                     8855  ;we've now set the 360deg wait, see if we can delay off previous spark (60deg)
                     8856  ;*                lda     dwelldelay1
                     8857  ;*                bne     wd6ok60 ; if non zero then long delay so ok
                     8858  ;*                lda     dwelldelay1+1
                     8859  ;*                cmp     #5
                     8860  ;*                blo     wd6skip60   ; check if more than 0.2ms
                     8861                  ; if less, then dwell might get missed
                     8862  ;*wd6ok60:
                     8863  ;*                ldhx    dwelldelay1
                     8864  ;*                brset   coilabit,coilsel,wd6a60
                     8865  ;*                brset   coilbbit,coilsel,wd6b60
                     8866  ;*                brset   coilcbit,coilsel,wd6c60
                     8867  ;*                brset   coildbit,coilsel,wd6d60
                     8868  ;*                brset   coilebit,coilsel,wd6e60
                     8869  ;*                brset   coilfbit,coilsel,wd6f60
                     8870  ;*wd6a60:         sthx    SparkOnLeftbh
                     8871  ;*                bra     wd6end60
                     8872  ;*wd6b60:         sthx    SparkOnLeftch
                     8873  ;*                bra     wd6end60
                     8874  ;*wd6c60:         sthx    SparkOnLeftdh
                     8875  ;*                bra     wd6end60
                     8876  ;*wd6d60:         sthx    SparkOnLefteh
                     8877  ;*                bra     wd6end60
                     8878  ;*wd6e60:         sthx    SparkOnLeftfh
                     8879  ;*                bra     wd6end60
                     8880  ;*wd6f60:         sthx    SparkOnLeftah
                     8881  ;*wd6end60:
                     8882  ;*;;;       bra     dd_end
                     8883  ;;note! may want to change this so that intermediate periods are set too so that there
                     8884  ;is a smoother transition from 60deg dwell to 120deg etc.
                     8885  
                     8886  ;*wd6skip60:
                     8887  ;not enough time in 60deg period, see if 120deg will work
                     8888  ;*                lda     dwelldelay2
                     8889  ;*                bne     wd6ok120
                     8890  ;*                lda     dwelldelay2+1
                     8891  ;*                cmp     #5
                     8892  ;*                blo     wd6skip120   ; check if more than 0.2ms
                     8893                  ; if less then dwell might get missed
                     8894  ;*wd6ok120:
                     8895  ;*                ldhx    dwelldelay2
                     8896  ;*                brset   coilabit,coilsel,wd6a120
                     8897  ;*                brset   coilbbit,coilsel,wd6b120
                     8898  ;*                brset   coilcbit,coilsel,wd6c120
                     8899  ;*                brset   coildbit,coilsel,wd6d120
                     8900  ;*                brset   coilebit,coilsel,wd6e120
                     8901  ;*                brset   coilfbit,coilsel,wd6f120
                     8902  ;*wd6a120:        sthx    SparkOnLeftch
                     8903  ;*                bra     wd6end120
                     8904  ;*wd6b120:        sthx    SparkOnLeftdh
                     8905  ;*                bra     wd6end120
                     8906  ;*wd6c120:        sthx    SparkOnLefteh
                     8907  ;*                bra     wd6end120
                     8908  ;*wd6d120:        sthx    SparkOnLeftfh
                     8909  ;*                bra     wd6end120
                     8910  ;*wd6e120:        sthx    SparkOnLeftah
                     8911  ;*                bra     wd6end120
                     8912  ;*wd6f120:        sthx    SparkOnLeftbh
                     8913  ;*wd6end120:
                     8914  ;*;;      bra     dd_end
                     8915  
                     8916  ;*wd6skip120:
                     8917  ;consider oddfire, do not delay from previous spark
                     8918  ;*                lda     sparkconfig1_f
                     8919  ;*                bit     #M_SC1oddfire
                     8920  ;*                bne     wd6skip180
                     8921  
                     8922  ;not enough time in 120deg period, see if 180deg will work
                     8923  ;*                lda     dwelldelay3
                     8924  ;*                bne     wd6ok180
                     8925  ;*                lda     dwelldelay3+1
                     8926  ;*                cmp     #5
                     8927  ;*                blo     wd6skip180   ; check if more than 0.2ms
                     8928                  ; if less then dwell might get missed
                     8929  ;*wd6ok180:
                     8930  ;*                ldhx    dwelldelay3
                     8931  ;*                brset   coilabit,coilsel,wd6a180
                     8932  ;*                brset   coilbbit,coilsel,wd6b180
                     8933  ;*                brset   coilcbit,coilsel,wd6c180
                     8934  ;*                brset   coildbit,coilsel,wd6d180
                     8935  ;*                brset   coilebit,coilsel,wd6e180
                     8936  ;*                brset   coilfbit,coilsel,wd6f180
                     8937  ;*wd6a180:        sthx    SparkOnLeftdh
                     8938  ;*                bra     wd6end180
                     8939  ;*wd6b180:        sthx    SparkOnLefteh
                     8940  ;*                bra     wd6end180
                     8941  ;*wd6c180:        sthx    SparkOnLeftfh
                     8942  ;*                bra     wd6end180
                     8943  ;*wd6d180:        sthx    SparkOnLeftah
                     8944  ;*                bra     wd6end180
                     8945  ;*wd6e180:        sthx    SparkOnLeftbh
                     8946  ;*                bra     wd6end180
                     8947  ;*wd6f180:        sthx    SparkOnLeftch
                     8948  ;*wd6end180:
                     8949  ;*                bra     dd_end
                     8950  
                     8951  ;*wd6skip180:
                     8952  ;not enough time in 180deg period, see if 240deg will work
                     8953  ;*                lda     dwelldelay4
                     8954  ;*                bne     wd6ok240
                     8955  ;*                lda     dwelldelay4+1
                     8956  ;*                cmp     #5
                     8957  ;*                blo     wd6skip240   ; check if more than 0.2ms
                     8958                  ; if less then dwell might get missed
                     8959  ;*wd6ok240:
                     8960  ;*                ldhx    dwelldelay4
                     8961  ;*                brset   coilabit,coilsel,wd6a240
                     8962  ;*                brset   coilbbit,coilsel,wd6b240
                     8963  ;*                brset   coilcbit,coilsel,wd6c240
                     8964  ;*                brset   coildbit,coilsel,wd6d240
                     8965  ;*                brset   coilebit,coilsel,wd6e240
                     8966  ;*                brset   coilfbit,coilsel,wd6f240
                     8967  ;*wd6a240:        sthx    SparkOnLefteh
                     8968  ;*                bra     wd6end240


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 67
MC68HC908GP32 User Bootloader


                     8969  ;*wd6b240:        sthx    SparkOnLeftfh
                     8970  ;*                bra     wd6end240
                     8971  ;*wd6c240:        sthx    SparkOnLeftah
                     8972  ;*                bra     wd6end240
                     8973  ;*wd6d240:        sthx    SparkOnLeftbh
                     8974  ;*                bra     wd6end240
                     8975  ;*wd6e240:        sthx    SparkOnLeftch
                     8976  ;*                bra     wd6end240
                     8977  ;*wd6f240:        sthx    SparkOnLeftdh
                     8978  ;*wd6end240:
                     8979  ;*;                jmp     dd_end
                     8980  
                     8981  ;*wd6skip240:
                     8982  ;consider oddfire, do not delay from previous spark
                     8983  ;*                lda     sparkconfig1_f
                     8984  ;*                bit     #M_SC1oddfire
                     8985  ;*                bne     wd6skip300
                     8986  
                     8987  ;not enough time in 240deg period, see if 300deg will work
                     8988  ;*                lda     dwelldelay5
                     8989  ;*                bne     wd6ok300
                     8990  ;*                lda     dwelldelay5+1
                     8991  ;*                cmp     #5
                     8992  ;*                blo     wd6skip300   ; check if more than 0.2ms
                     8993                  ; if less then dwell might get missed
                     8994  ;*wd6ok300:
                     8995  ;*                ldhx    dwelldelay5
                     8996  ;*                brset   coilabit,coilsel,wd6a300
                     8997  ;*                brset   coilbbit,coilsel,wd6b300
                     8998  ;*                brset   coilcbit,coilsel,wd6c300
                     8999  ;*                brset   coildbit,coilsel,wd6d300
                     9000  ;*                brset   coilebit,coilsel,wd6e300
                     9001  ;*                brset   coilfbit,coilsel,wd6f300
                     9002  ;*wd6a300:        sthx    SparkOnLefteh
                     9003  ;*                bra     wd6end300
                     9004  ;*wd6b300:        sthx    SparkOnLeftfh
                     9005  ;*                bra     wd6end300
                     9006  ;*wd6c300:        sthx    SparkOnLeftah
                     9007  ;*                bra     wd6end300
                     9008  ;*wd6d300:        sthx    SparkOnLeftbh
                     9009  ;*                bra     wd6end300
                     9010  ;*wd6e300:        sthx    SparkOnLeftch
                     9011  ;*                bra     wd6end300
                     9012  ;*wd6f300:        sthx    SparkOnLeftdh
                     9013  ;*wd6end300:
                     9014  
                     9015  ;*wd6skip300:
                     9016  
                     9017  
                     9018  dd_end:
 8CA9                9019  $MACROEND
                     9020  
                     9021  ********************************************************************************
                     9022  ** EDIS control section up here to permit relative jumps in 0.1ms section
                     9023  ** 2nd EDIS output control
                     9024  ********************************************************************************
                     9025  
                     9026  ;*edis2_fire:
                     9027  ;*        brclr   REUSE_LED19,outputpins,go_inj_fire2        ; if 2nd output not
                     9028                                       ;enabled then skip
                     9029  ;*        ldhx    SparkOnLeftah              ; skip if already zero
                     9030  ;*        beq     go_inj_fire2
                     9031  
                     9032  ;*        aix     #-1                        ; is it time to start 2nd SAW
                     9033  ;*        sthx    SparkOnLeftah
                     9034  ;*        cphx    #0
                     9035  ;*        bne     go_inj_fire2               ; skip if non-zero
                     9036  
                     9037  ; start 2nd SAW here and set timer to turn it off
                     9038  ;*        clr     coilsel
                     9039  ;*        bset    coilbbit,coilsel   ; only support 2nd spark output
                     9040          ; assume that other outputs cannot get set
                     9041  ;*        bset    sparkon,revlimbits ; note that spark is on
                     9042  
                     9043  ;*        brset   invspk,EnhancedBits4,InvSparkOn2
                     9044  ;*        bset    coilb,portc
                     9045  ;*        bra     set_saw_on2
                     9046  ;*InvSparkOn2:
                     9047  ;*        bclr    coilb,portc
                     9048  
                     9049  ;*set_saw_on2:                               ; now set timer for SAW on period
                     9050                                       ; using sawh/l calculated in main loop
                     9051  
                     9052  ; Calculate width of SAW pulse
                     9053  ; grab current timer values - uses same variable as squirt section below.
                     9054  ; But no  cli  so ok
                     9055  ;
                     9056  ;*        lda     T2CNTL                     ; unlatch low byte
                     9057  ;*        ldx     T2CNTH
                     9058  ;*        stx     T2CurrH                    ; Save current counter value
                     9059  ;*        lda     T2CNTL
                     9060  ;*        sta     T2CurrL                    ; Save current counter value
                     9061  
                     9062  ;*        brclr   crank,engine,SAW_COUNTER2
                     9063  ;*        lda     feature4_f
                     9064  ;*        bit     #multisparkb
                     9065  ;*        beq     SAW_COUNTER2
                     9066  ;*;        brclr   multispark,feature4,SAW_COUNTER2
                     9067  ; at crank we always send 2048us as calibration and multi-spark init
                     9068  ;*        lda     #$00
                     9069  ;*        sta     sawl
                     9070  ;*        lda     #$08
                     9071  ;*        sta     sawh
                     9072  
                     9073  ;Read the calculated width and store in timer
                     9074  ;*SAW_COUNTER2:
                     9075  ;*        lda     sawl
                     9076  ;*        add     T2CurrL
                     9077  ;*        tax
                     9078  ;*        lda     sawh
                     9079  ;*        adc     T2CurrH
                     9080  ;*        sta     T2CH1H
                     9081  ;*        stx     T2CH1L
                     9082  
                     9083  ;*        bclr    SparkTrigg,Sparkbits       ; Clear spark trigg. Next time we get int turn off SAW
                     9084  
                     9085  ;*        bclr    TOF,T2SC1          ; clear any pending interrupt
                     9086  ;*        bset    TOIE,T2SC1         ; Enable timer interrupt
                     9087  ;*go_inj_fire2:
                     9088  ;*        jmp     INJ_FIRE_CTL
                     9089  ;***** end of 2nd EDIS bit **
                     9090  ;*edis2_fire_a:
                     9091  ;*        bra     edis2_fire         ; to permit relative jump below
                     9092  
                     9093  ******************************************************************************
                     9094  ;some timerroll equates - local variables that can only be used with irqs blocked
                     9095  ;we'll start using itmp00 - itmp0f in here
                     9096  
                     9097  TIMERROLL:
                     9098  
 8CA9 [04] 136A      9099                   bclr    checkbit,EnhancedBits5
 8CAB [02] 8B        9100                   pshh                        ; Stack h
 8CAC [03] B630      9101                  lda     T2SC0                ; ack the interrupt
 8CAE [04] 1F30      9102                  bclr    CHxF,T2SC0   ; clear pending bit
 8CB0 [03] B62D      9103                  lda     T2CNTL               ; unlatch any previous read (added JSM)
                     9104  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 68
MC68HC908GP32 User Bootloader


                     9105  ;* revised section - from Dan Hiebert's TFI code
 8CB2 [04] 5531      9106                   ldhx    T2CH0H              ; Load index register with value
                     9107                                       ; in TIM2 CH0
                     9108                                       ; register H:L (output compare value)
 8CB4 [02] AF64      9109                   aix     #100T               ; Add decimal 100 (100 uS)
 8CB6 [04] 3531      9110                   sthx    T2CH0H              ; Copy result to TIM2 CH0 register
                     9111                                       ;(new output compare value)
                     9112  ;* end revised section
                     9113  
                     9114  ;if we are stalled don't increment these or we might skip the wheeldecoder
 8CB8 [05] 014206    9115          brclr    running,engine,TIMER_DONE
                     9116  
 8CBB [04] 3CF6      9117          inc      lowresL             ; 16bit 0.1ms timer
 8CBD [03] 2602      9118          bne      TIMER_DONE
 8CBF [04] 3CF5      9119          inc      lowresH
                     9120                                       ; otherwise done
                     9121  TIMER_DONE:
 8CC1 [04] 1D30      9122                  bclr     TOIE,T2SC0  ; disable 0.1ms interrupt to
                     9123                                       ; prevent re-entry
 8CC3 [02] 9A        9124                  cli                     ; allow interrupts during the large
                     9125                                       ; chunk of code below. This
                     9126                                       ; significantly reduces spark
                     9127                                          ; jitter. Without it there is
                     9128                                       ; ~6deg at 9000rpm
                     9129                                          ; only really want IRQ to be allowed
                     9130  
                     9131  ***************************************************************************
                     9132  ***************** 0.1 millisecond section ********************************
                     9133  ***************************************************************************
                     9134  
                     9135  ;*        brset    config_error,feature2,error_exit
 8CC4 [04] 3C7D      9136          inc      mms                 ; bump up 0.1 millisec variable
                     9137  
                     9138  ; Added for boost control - Hope it doesnt screw up the timer -
                     9139  ; James will kill me if it does
                     9140  ;*        brclr    BoostControl,feature2,bcActDone
                     9141  ;*        inc      mmsDiv                    ; Counts up to bcFreqDiv.
                     9142  ;*        lda      mmsDiv                    ; Counter at multiples of 0.1 ms
                     9143  ;*        cmp      bcFreqDiv_f               ; 1=39.1 Hz, 2=19.5, 3=13.0 and so on.
                     9144  ;*        blo      bcActDone
                     9145  ;*        clr      mmsDiv
                     9146  ;*        inc      bcActClock
                     9147  ;*        lda      bcActClock
                     9148  ;*bcActDone:
                     9149  
                     9150  ;*        brset   TFI,personality,j_tfi_spk
                     9151  ;*        brset   EDIS,personality,go_inj_fire3
                     9152  ;*        brset   MSNEON,personality,neon_irq
                     9153  ;*        brset   WHEEL,personality,wheel_irq
                     9154  
                     9155  ;*        lda     personality
                     9156  ;*        bne     no_wd_trig              ; any other spark modes skip over 2nd irq bits
                     9157  ;*        jmp     INJ_FIRE_CTL               ; skip this section if not
                     9158                                       ; controlling spark
                     9159  ;*error_exit:
                     9160  ;*        pulh
                     9161  ;*        rti
                     9162  
                     9163  ;*go_inj_fire3:
                     9164  ;*        brset   DUALEDIS,personality,edis2_fire_a
                     9165  ;*        jmp     INJ_FIRE_CTL
                     9166  
                     9167  ;*j_tfi_spk:
                     9168  ;*        jmp     tfi_spk                    ; branch to next chunk
                     9169  
                     9170  ;*neon_irq:
                     9171  ; Neon crank decoding
                     9172  ; See if we have seen a rising IRQ edge and save it
                     9173  
                     9174  ;*        bil     no_wd_trig
                     9175  
                     9176  ;*        brset   rise,sparkbits,no_wd_trig  ; only store the rising edge
                     9177  ;*        bset    rise,sparkbits
                     9178  
                     9179  ;*        mov    lowresL,SparkTempL
                     9180  ;*        mov    lowresH,SparkTempH
                     9181  
                     9182  ;*        bra    no_wd_trig        ; we've done the Neon bit
                     9183  
                     9184  
                     9185  ;*wheel_irq:
                     9186  ;more bloat... check for second "reset" spark input
                     9187  ;*      brclr   wd_2trig,feature1,no_wd_trig
                     9188  
                     9189  ;*      lda     dtmode_f
                     9190  ;*      bit     #trig2risefallb
                     9191  ;*      bne     wd_risefall      ; do rising & falling
                     9192  
                     9193  ;*      bit     #trig2fallb
                     9194  ;*      bne     wd_inv
                     9195  
                     9196  ;on rising edge of input reset wheelcount to zero
                     9197  ;*      brset   rise,sparkbits,wd_rise ; already found so see if ready to clear
                     9198  ;not already in high state so see if pin has been asserted
                     9199  ;*      brclr   pin11,portc,no_wd_trig   ; inactive
                     9200  ;we've found a rising edge of pin11, so clear wheelcount (tooth zero) and set rise bit
                     9201  ;*      bset    rise,sparkbits           ; this bit used to monitor the edge of the input
                     9202  ;*      bra     wd_2_flag
                     9203  ;*wd_rise:
                     9204  ;*      brset   pin11,portc,no_wd_trig
                     9205  ;*      bclr    rise,sparkbits
                     9206  ;*      bra     no_wd_trig
                     9207  
                     9208  ;*wd_inv:
                     9209  ;on falling edge of input reset wheelcount to zero
                     9210  ;*      brset   rise,sparkbits,wd_fall ; already found so see if ready to clear
                     9211  ;not already in high state so see if pin has been asserted
                     9212  ;*      brclr   pin11,portc,no_wd_trig   ; inactive
                     9213  ;*      bset    rise,sparkbits
                     9214  ;*      bra     no_wd_trig
                     9215  ;*wd_fall:
                     9216  ;*      brset   pin11,portc,no_wd_trig
                     9217  ;we've found a falling edge of pin11, so clear wheelcount (tooth zero) and set rise bit
                     9218  ;*      bclr    rise,sparkbits           ; this bit used to monitor the edge of the input
                     9219  ;*      bra     wd_2_flag
                     9220  
                     9221  ;*wd_risefall:
                     9222  ;on rising and falling edge of input reset wheelcount to zero
                     9223  ;*      brset   rise,sparkbits,wd_rf1 ; was high
                     9224  ;*      brclr   pin11,portc,no_wd_trig   ; still low
                     9225  ;*      bset    rise,sparkbits
                     9226  ;*      bra     wd_2_flag
                     9227  
                     9228  ;*wd_rf1:
                     9229  ;*      brset   pin11,portc,no_wd_trig ; still high
                     9230  ;*      bclr    rise,sparkbits
                     9231  ;*;      bra     wd_2_flag
                     9232  
                     9233  ;*wd_2_flag:
                     9234  ;*      bset    trigger2,EnhancedBits6   ; flag the trigger
                     9235  
                     9236  no_wd_trig:
                     9237  
                     9238  ; now with multi-dwell check them all each time (how much delay to
                     9239  ; 0.1ms routine?) this routine is flawed but only slightly - when one
                     9240  ; coil gets to zero those below don't get decremented so will be 0.1ms


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 69
MC68HC908GP32 User Bootloader


                     9241  ; late. a jsr would be nice.
                     9242  ;
 8CC6 [02] 9B        9243          sei                          ; no ints while we are
                     9244                                       ; stealing this variable
 8CC7 [05] 4E68C3    9245          mov     coilsel,SparkCarry; temporary
                     9246  
 8CCA [05] 096900    9247       brclr   indwell,EnhancedBits4,sin_a
                     9248  ;*   brset   rotary2,EnhancedBits5,clr_a_b
                     9249  
                     9250  sin_a:
 8CCD [04] 55B3      9251          ldhx    SparkOnLeftah
 8CCF [03] 270F      9252          beq     sin_b
 8CD1 [02] AFFF      9253          aix     #-1                  ; is it time to start charging
 8CD3 [04] 35B3      9254          sthx    SparkOnLeftah
 8CD5 [03] 650000    9255          cphx    #0
 8CD8 [03] 2606      9256          bne     sin_b
 8CDA [03] 3F68      9257          clr     coilsel
 8CDC [04] 1068      9258          bset    coilabit,coilsel
 8CDE [03] 202A      9259          bra     lowspdspk
                     9260  sin_b:
 8CE0 [04] 55B5      9261          ldhx    SparkOnLeftbh
 8CE2 [03] 270F      9262          beq     sin_c
 8CE4 [02] AFFF      9263          aix     #-1                  ; is it time to start charging
 8CE6 [04] 35B5      9264          sthx    SparkOnLeftbh
 8CE8 [03] 650000    9265          cphx    #0
 8CEB [03] 2606      9266          bne     sin_c
 8CED [03] 3F68      9267          clr     coilsel
 8CEF [04] 1268      9268          bset    coilbbit,coilsel
 8CF1 [03] 2017      9269          bra     lowspdspk
                     9270  ;*clr_a_b:
                     9271  ;*   ldhx    #0
                     9272  ;*   sthx    SparkOnLeftah
                     9273  ;*   sthx    SparkOnLeftbh
                     9274  sin_c:
 8CF3 [04] 55B7      9275          ldhx    SparkOnLeftch
 8CF5 [03] 2700      9276          beq     sin_d
                     9277  ;*        aix     #-1                        ; is it time to start charging
                     9278  ;*        sthx    SparkOnLeftch
                     9279  ;*        cphx    #0
                     9280  ;*        bne     sin_d
                     9281  ;*        clr     coilsel
                     9282  ;*        bset    coilcbit,coilsel
                     9283  ;*        bra     lowspdspk
                     9284  sin_d:
 8CF7 [04] 55B9      9285          ldhx    SparkOnLeftdh
 8CF9 [03] 2700      9286          beq     sin_e
                     9287  ;*        aix     #-1                        ; is it time to start charging
                     9288  ;*        sthx    SparkOnLeftdh
                     9289  ;*        cphx    #0
                     9290  ;*        bne     sin_e
                     9291  ;*        clr     coilsel
                     9292  ;*        bset    coildbit,coilsel
                     9293  ;*        bra     lowspdspk
                     9294  
                     9295  sin_e:
 8CFB [04] 55BB      9296          ldhx    SparkOnLefteh
 8CFD [03] 2700      9297          beq     sin_f
                     9298  ;*        aix     #-1                        ; is it time to start charging
                     9299  ;*        sthx    SparkOnLefteh
                     9300  ;*        cphx    #0
                     9301  ;*        bne     sin_f
                     9302  ;*        clr     coilsel
                     9303  ;*        bset    coilebit,coilsel
                     9304  ;*        bra     lowspdspk
                     9305  sin_f:
 8CFF [04] 55BD      9306          ldhx    SparkOnLeftfh
 8D01 [03] 2700      9307          beq     j_CSL
                     9308  ;*        aix     #-1                        ; is it time to start charging
                     9309  ;*        sthx    SparkOnLeftfh
                     9310  ;*        cphx    #0
                     9311  ;*        bne     j_CSL
                     9312  ;*        clr     coilsel
                     9313  ;*        bset    coilfbit,coilsel
                     9314  ;*        bra     lowspdspk
                     9315  
                     9316  j_CSL:
 8D03 [02] 9A        9317          cli
 8D04 [03] CC8DE3    9318          jmp     CHECK_SPARK_LATE
                     9319  
                     9320  go_inj_fire:
 8D07 [03] CC8EF5    9321          jmp     INJ_FIRE_CTL
                     9322  
                     9323  
                     9324  lowspdspk:
                     9325  ;*                brclr   rotary2,EnhancedBits5,chkindwell
                     9326  ;*                brset   coilabit,coilsel,chkindwell
                     9327  ;*                brset   coilbbit,coilsel,chkindwell
                     9328  ;*                lda     splitdelH
                     9329  ;*                cmp     #$FF     ; if trailing is OFF then don't charge coil
                     9330  ;*                beq     blssd
                     9331  ;*lss2:
                     9332       ; add check for rotary, which checks for coilcbit/coildbit
                     9333  ;*chkcoilcd: ; make sure that we dwell coil c/d even if indwell.
                     9334  ;*   brset   coilcbit,coilsel,dodwell
                     9335  ;*   brset   coildbit,coilsel,dodwell
                     9336  ;*chkindwell:
 8D0A [05] 086961    9337          brset   indwell,EnhancedBits4,blssd  ; if doing hi-res
                     9338                                       ; dwell then don't turn on coil now
                     9339  dodwell:
 8D0D [04] 1760      9340          bclr    sparkon,revlimbits   ; spark now off
                     9341  ;this used to be in SPARKTIME but could have overheated ignitors
 8D0F [03] B6D8      9342          lda     SparkCutCnt  ; Check Spark Counter
 8D11 [01] 4C        9343          inca
 8D12 [04] C1E04E    9344          cmp     SparkCutBase_f       ; How many sparks to count to
 8D15 [03] 2502      9345          blo     Dont_ResetCnt
 8D17 [02] A601      9346          lda     #01T
                     9347  Dont_ResetCnt:
 8D19 [03] B7D8      9348          sta     SparkCutCnt  ; Store new value to spark counter
 8D1B [05] 0A6050    9349          brset   sparkCut,RevLimBits,blssd    ; If in spark cut
                     9350                                       ; mode jump past spark
                     9351  
 8D1E [05] 0C694F    9352          brset   invspk,EnhancedBits4,lsspk_inv ; check if noninv or inv spark
 8D21 macro          9353          COILPOS                              ; charge coil for non-inverted
 8D21 [05] 006248    9354   BRSET REUSE_FIDLE,OUTPUTPINS,ILSOX  
 8D24 [05] 006A14    9355   BRSET ROTARY2,ENHANCEDBITS5,ROT2POS  
 8D27 [05] 00682A    9356   BRSET COILABIT,COILSEL,ILSOA  
 8D2A [05] 02682B    9357   BRSET COILBBIT,COILSEL,ILSOB  
 8D2D [05] 04682C    9358   BRSET COILCBIT,COILSEL,ILSOC  
 8D30 [05] 06682D    9359   BRSET COILDBIT,COILSEL,ILSOD  
 8D33 [05] 08682E    9360   BRSET COILEBIT,COILSEL,ILSOE  
 8D36 [05] 0A682F    9361   BRSET COILFBIT,COILSEL,ILSOF  
 8D39 [03] 2033      9362   BRA FC_END  
                     9363  ROT2POS:  
 8D3B [05] 086310    9364   BRSET ROTARYFDIGN,FEATURE1,CHARGEFD  
 8D3E [05] 046805    9365   BRSET COILCBIT,COILSEL,ROT2CP  
 8D41 [05] 066806    9366   BRSET COILDBIT,COILSEL,ROT2DP  
 8D44 [03] 200E      9367   BRA ILSOA  
                     9368  ROT2CP:  
 8D46 [04] 1302      9369   BCLR COILB,PORTC  
 8D48 [03] 2024      9370   BRA FC_END  
                     9371  ROT2DP:  
 8D4A [04] 1302      9372   BCLR COILB,PORTC  
 8D4C [03] 2020      9373   BRA FC_END  
                     9374  CHARGEFD:  
 8D4E [05] 04680B    9375   BRSET COILCBIT,COILSEL,ILSOC  
 8D51 [05] 066804    9376   BRSET COILDBIT,COILSEL,ILSOB  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 70
MC68HC908GP32 User Bootloader


                     9377  ILSOA:  
 8D54 [04] 1102      9378   BCLR COILA,PORTC  
 8D56 [03] 2016      9379   BRA FC_END  
                     9380  ILSOB:  
 8D58 [04] 1302      9381   BCLR COILB,PORTC  
 8D5A [03] 2012      9382   BRA FC_END  
                     9383  ILSOC:  
 8D5C [04] 1502      9384   BCLR WLED,PORTC  
 8D5E [03] 200E      9385   BRA FC_END  
                     9386  ILSOD:  
 8D60 [04] 1103      9387   BCLR OUTPUT3,PORTD  
 8D62 [03] 200A      9388   BRA FC_END  
                     9389  ILSOE:  
 8D64 [04] 1702      9390   BCLR PIN10,PORTC  
 8D66 [03] 2006      9391   BRA FC_END  
                     9392  ILSOF:  
 8D68 [04] 1503      9393   BCLR KNOCKIN,PORTD  
 8D6A [03] 2002      9394   BRA FC_END  
                     9395  ILSOX:  
 8D6C [04] 1300      9396   BCLR IASC,PORTA  
                     9397  FC_END:  
                     9398  blssd:
 8D6E [03] 206F      9399          bra     lsspk_done
                     9400  lsspk_inv:
 8D70 macro          9401          COILNEG                              ; charge coil for inverted
 8D70 [05] 00626A    9402   BRSET REUSE_FIDLE,OUTPUTPINS,DSLSX  
 8D73 [05] 006A1E    9403   BRSET ROTARY2,ENHANCEDBITS5,ROT2NEG  
 8D76 [05] 0F6232    9404   BRCLR TOY_DLI,OUTPUTPINS,NILS  
 8D79 [05] 006806    9405   BRSET COILABIT,COILSEL,FCNITA  
 8D7C [05] 026809    9406   BRSET COILBBIT,COILSEL,FCNITB  
 8D7F [05] 04680C    9407   BRSET COILCBIT,COILSEL,FCNITC  
                     9408  FCNITA:  
 8D82 [04] 1302      9409   BCLR COILB,PORTC  
 8D84 [04] 1502      9410   BCLR WLED,PORTC  
 8D86 [03] 203D      9411   BRA DSLSA  
                     9412  FCNITB:  
 8D88 [04] 1202      9413   BSET COILB,PORTC  
 8D8A [04] 1502      9414   BCLR WLED,PORTC  
 8D8C [03] 2037      9415   BRA DSLSA  
                     9416  FCNITC:  
 8D8E [04] 1302      9417   BCLR COILB,PORTC  
 8D90 [04] 1402      9418   BSET WLED,PORTC  
 8D92 [03] 2031      9419   BRA DSLSA  
                     9420  ROT2NEG:  
 8D94 [05] 086328    9421   BRSET ROTARYFDIGN,FEATURE1,FIREFD  
 8D97 [05] 046805    9422   BRSET COILCBIT,COILSEL,ROT2CN  
 8D9A [05] 066808    9423   BRSET COILDBIT,COILSEL,ROT2DN  
 8D9D [03] 2026      9424   BRA DSLSA  
                     9425  ROT2CN:  
 8D9F [04] 1502      9426   BCLR WLED,PORTC  
 8DA1 [04] 1202      9427   BSET COILB,PORTC  
 8DA3 [03] 203A      9428   BRA CN_END  
                     9429  ROT2DN:  
 8DA5 [04] 1402      9430   BSET WLED,PORTC  
 8DA7 [04] 1202      9431   BSET COILB,PORTC  
 8DA9 [03] 2034      9432   BRA CN_END  
                     9433  NILS:  
 8DAB [05] 006817    9434   BRSET COILABIT,COILSEL,DSLSA  
 8DAE [05] 026818    9435   BRSET COILBBIT,COILSEL,DSLSB  
 8DB1 [05] 046819    9436   BRSET COILCBIT,COILSEL,DSLSC  
 8DB4 [05] 06681A    9437   BRSET COILDBIT,COILSEL,DSLSD  
 8DB7 [05] 08681B    9438   BRSET COILEBIT,COILSEL,DSLSE  
 8DBA [05] 0A681C    9439   BRSET COILFBIT,COILSEL,DSLSF  
 8DBD [03] 2020      9440   BRA CN_END  
                     9441  FIREFD:  
 8DBF [05] 046807    9442   BRSET COILCBIT,COILSEL,DSLSB  
 8DC2 [05] 066808    9443   BRSET COILDBIT,COILSEL,DSLSC  
                     9444  DSLSA:  
 8DC5 [04] 1002      9445   BSET COILA,PORTC  
 8DC7 [03] 2016      9446   BRA CN_END  
                     9447  DSLSB:  
 8DC9 [04] 1202      9448   BSET COILB,PORTC  
 8DCB [03] 2012      9449   BRA CN_END  
                     9450  DSLSC:  
 8DCD [04] 1402      9451   BSET WLED,PORTC  
 8DCF [03] 200E      9452   BRA CN_END  
                     9453  DSLSD:  
 8DD1 [04] 1003      9454   BSET OUTPUT3,PORTD  
 8DD3 [03] 200A      9455   BRA CN_END  
                     9456  DSLSE:  
 8DD5 [04] 1602      9457   BSET PIN10,PORTC  
 8DD7 [03] 2006      9458   BRA CN_END  
                     9459  DSLSF:  
 8DD9 [04] 1403      9460   BSET KNOCKIN,PORTD  
 8DDB [03] 2002      9461   BRA CN_END  
                     9462  DSLSX:  
 8DDD [04] 1200      9463   BSET IASC,PORTA  
                     9464  CN_END:  
                     9465  lsspk_done:
 8DDF [05] 4EC368    9466          mov     SparkCarry,coilsel; put it back as we found it
 8DE2 [02] 9A        9467          cli
                     9468  
                     9469  CHECK_SPARK_LATE:
 8DE3 [05] 055F16    9470          brclr   SparkLSpeed,SparkBits,jINJ_FIRE_CTL  ; Skip if not low
                     9471                                       ; speed sparking
 8DE6 [05] 015F13    9472          brclr   sparktrigg,sparkbits,jINJ_FIRE_CTL   ; Skip if spark
                     9473                                       ; already done
                     9474  
                     9475  ;        brclr   crank,engine,timebased      ; if not cranking don't do
                     9476  ;                                    ; irq_spark (NEW 021v)
                     9477  ;Phil R reports problems with this, so try cant_crank instead
                     9478  ;this will give a 1-2 second delay before timebased is used
                     9479  ; hopefully this will not be a problem
 8DE9 [05] 066702    9480          brset   cant_crank,EnhancedBits2,timebased
                     9481  
                     9482  ;*        lda     SparkConfig1_f             ; check if noninv or inv spark
                     9483  ;*        bit     #M_SC1TimCrnk              ; Check if spark on time or IRQ
                     9484                                       ; return (SparkConfig1 already in A)
                     9485  ;*        beq     IRQ_SPARK
 8DEC [03] 2011      9486            bra     IRQ_SPARK
                     9487  
                     9488  timebased:
                     9489          ;Check if time for spark
 8DEE [03] B672      9490          lda     rpmch
 8DF0 [03] B1B1      9491          cmp     SparkDelayH
 8DF2 [03] 2608      9492          bne     jINJ_FIRE_CTL
 8DF4 [03] B673      9493          lda     rpmcl
 8DF6 [03] B1B2      9494          cmp     SparkDelayL
 8DF8 [03] 2602      9495          bne     jINJ_FIRE_CTL
 8DFA [03] 2003      9496          bra     ChkHold
                     9497  
                     9498  jINJ_FIRE_CTL:                               ; convenient place to branch to
 8DFC [03] CC8EF5    9499          jmp     INJ_FIRE_CTL
                     9500  ;**
                     9501  
                     9502  IRQ_SPARK:
                     9503  ;*        brset   MSNEON,personality,irq_spark_neon
                     9504  ;*        brset   WHEEL,personality,irq_spark_neon
                     9505  ;*        bil     jINJ_FIRE_CTL              ; IRQ still low? then skip
                     9506  
                     9507  ChkHold:
                     9508  ;*        bclr    sparktrigg,sparkbits       ; No more sparks for this IRQ
                     9509  ;*        brset   MSNEON,personality,DoSparkLSpeed
                     9510  ;*        brset   WHEEL,personality,DoSparkLSpeed    ; no hold off on wheel decoder
                     9511  ;*        lda     wheelcount         ; (HoldSpark)
                     9512                                       ; Check if spark is held (after


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 71
MC68HC908GP32 User Bootloader


                     9513                                       ; stall and restart)
                     9514  ;*        beq     DoSparkLSpeed
                     9515  ;*        dec     wheelcount         ; (HoldSpark)
                     9516                                       ; One spark has been held, x to go
                     9517  ;*        jmp     INJ_FIRE_CTL
                     9518  
                     9519  ; This will not work with wheel decoder, need to use a flag
                     9520  ;        Treat end of third pulse as trigger return
                     9521  ;*irq_spark_neon:
                     9522  ;*        brclr   trigret,SparkBits,jINJ_FIRE_CTL
                     9523  ;*        bclr    trigret,SparkBits  ; clear it now
                     9524  ;*        bclr    sparktrigg,sparkbits       ; No more sparks for this IRQ
                     9525  
                     9526  DoSparkLSpeed:
 8DFF [04] 1660      9527          bset    sparkon,revlimbits   ; spark now on
                     9528  
 8E01 [05] 0C6971    9529          brset   invspk,EnhancedBits4,dosls_inv
 8E04 macro          9530          COILNEG                              ; macro = fire coil for non-inverted
 8E04 [05] 00626A    9531   BRSET REUSE_FIDLE,OUTPUTPINS,DSLSX  
 8E07 [05] 006A1E    9532   BRSET ROTARY2,ENHANCEDBITS5,ROT2NEG  
 8E0A [05] 0F6232    9533   BRCLR TOY_DLI,OUTPUTPINS,NILS  
 8E0D [05] 006806    9534   BRSET COILABIT,COILSEL,FCNITA  
 8E10 [05] 026809    9535   BRSET COILBBIT,COILSEL,FCNITB  
 8E13 [05] 04680C    9536   BRSET COILCBIT,COILSEL,FCNITC  
                     9537  FCNITA:  
 8E16 [04] 1302      9538   BCLR COILB,PORTC  
 8E18 [04] 1502      9539   BCLR WLED,PORTC  
 8E1A [03] 203D      9540   BRA DSLSA  
                     9541  FCNITB:  
 8E1C [04] 1202      9542   BSET COILB,PORTC  
 8E1E [04] 1502      9543   BCLR WLED,PORTC  
 8E20 [03] 2037      9544   BRA DSLSA  
                     9545  FCNITC:  
 8E22 [04] 1302      9546   BCLR COILB,PORTC  
 8E24 [04] 1402      9547   BSET WLED,PORTC  
 8E26 [03] 2031      9548   BRA DSLSA  
                     9549  ROT2NEG:  
 8E28 [05] 086328    9550   BRSET ROTARYFDIGN,FEATURE1,FIREFD  
 8E2B [05] 046805    9551   BRSET COILCBIT,COILSEL,ROT2CN  
 8E2E [05] 066808    9552   BRSET COILDBIT,COILSEL,ROT2DN  
 8E31 [03] 2026      9553   BRA DSLSA  
                     9554  ROT2CN:  
 8E33 [04] 1502      9555   BCLR WLED,PORTC  
 8E35 [04] 1202      9556   BSET COILB,PORTC  
 8E37 [03] 203A      9557   BRA CN_END  
                     9558  ROT2DN:  
 8E39 [04] 1402      9559   BSET WLED,PORTC  
 8E3B [04] 1202      9560   BSET COILB,PORTC  
 8E3D [03] 2034      9561   BRA CN_END  
                     9562  NILS:  
 8E3F [05] 006817    9563   BRSET COILABIT,COILSEL,DSLSA  
 8E42 [05] 026818    9564   BRSET COILBBIT,COILSEL,DSLSB  
 8E45 [05] 046819    9565   BRSET COILCBIT,COILSEL,DSLSC  
 8E48 [05] 06681A    9566   BRSET COILDBIT,COILSEL,DSLSD  
 8E4B [05] 08681B    9567   BRSET COILEBIT,COILSEL,DSLSE  
 8E4E [05] 0A681C    9568   BRSET COILFBIT,COILSEL,DSLSF  
 8E51 [03] 2020      9569   BRA CN_END  
                     9570  FIREFD:  
 8E53 [05] 046807    9571   BRSET COILCBIT,COILSEL,DSLSB  
 8E56 [05] 066808    9572   BRSET COILDBIT,COILSEL,DSLSC  
                     9573  DSLSA:  
 8E59 [04] 1002      9574   BSET COILA,PORTC  
 8E5B [03] 2016      9575   BRA CN_END  
                     9576  DSLSB:  
 8E5D [04] 1202      9577   BSET COILB,PORTC  
 8E5F [03] 2012      9578   BRA CN_END  
                     9579  DSLSC:  
 8E61 [04] 1402      9580   BSET WLED,PORTC  
 8E63 [03] 200E      9581   BRA CN_END  
                     9582  DSLSD:  
 8E65 [04] 1003      9583   BSET OUTPUT3,PORTD  
 8E67 [03] 200A      9584   BRA CN_END  
                     9585  DSLSE:  
 8E69 [04] 1602      9586   BSET PIN10,PORTC  
 8E6B [03] 2006      9587   BRA CN_END  
                     9588  DSLSF:  
 8E6D [04] 1403      9589   BSET KNOCKIN,PORTD  
 8E6F [03] 2002      9590   BRA CN_END  
                     9591  DSLSX:  
 8E71 [04] 1200      9592   BSET IASC,PORTA  
                     9593  CN_END:  
 8E73 [03] 204D      9594          bra     dosls_done
                     9595  dosls_inv:
 8E75 macro          9596          COILPOS                              ; macro = fire coil for inverted
 8E75 [05] 006248    9597   BRSET REUSE_FIDLE,OUTPUTPINS,ILSOX  
 8E78 [05] 006A14    9598   BRSET ROTARY2,ENHANCEDBITS5,ROT2POS  
 8E7B [05] 00682A    9599   BRSET COILABIT,COILSEL,ILSOA  
 8E7E [05] 02682B    9600   BRSET COILBBIT,COILSEL,ILSOB  
 8E81 [05] 04682C    9601   BRSET COILCBIT,COILSEL,ILSOC  
 8E84 [05] 06682D    9602   BRSET COILDBIT,COILSEL,ILSOD  
 8E87 [05] 08682E    9603   BRSET COILEBIT,COILSEL,ILSOE  
 8E8A [05] 0A682F    9604   BRSET COILFBIT,COILSEL,ILSOF  
 8E8D [03] 2033      9605   BRA FC_END  
                     9606  ROT2POS:  
 8E8F [05] 086310    9607   BRSET ROTARYFDIGN,FEATURE1,CHARGEFD  
 8E92 [05] 046805    9608   BRSET COILCBIT,COILSEL,ROT2CP  
 8E95 [05] 066806    9609   BRSET COILDBIT,COILSEL,ROT2DP  
 8E98 [03] 200E      9610   BRA ILSOA  
                     9611  ROT2CP:  
 8E9A [04] 1302      9612   BCLR COILB,PORTC  
 8E9C [03] 2024      9613   BRA FC_END  
                     9614  ROT2DP:  
 8E9E [04] 1302      9615   BCLR COILB,PORTC  
 8EA0 [03] 2020      9616   BRA FC_END  
                     9617  CHARGEFD:  
 8EA2 [05] 04680B    9618   BRSET COILCBIT,COILSEL,ILSOC  
 8EA5 [05] 066804    9619   BRSET COILDBIT,COILSEL,ILSOB  
                     9620  ILSOA:  
 8EA8 [04] 1102      9621   BCLR COILA,PORTC  
 8EAA [03] 2016      9622   BRA FC_END  
                     9623  ILSOB:  
 8EAC [04] 1302      9624   BCLR COILB,PORTC  
 8EAE [03] 2012      9625   BRA FC_END  
                     9626  ILSOC:  
 8EB0 [04] 1502      9627   BCLR WLED,PORTC  
 8EB2 [03] 200E      9628   BRA FC_END  
                     9629  ILSOD:  
 8EB4 [04] 1103      9630   BCLR OUTPUT3,PORTD  
 8EB6 [03] 200A      9631   BRA FC_END  
                     9632  ILSOE:  
 8EB8 [04] 1702      9633   BCLR PIN10,PORTC  
 8EBA [03] 2006      9634   BRA FC_END  
                     9635  ILSOF:  
 8EBC [04] 1503      9636   BCLR KNOCKIN,PORTD  
 8EBE [03] 2002      9637   BRA FC_END  
                     9638  ILSOX:  
 8EC0 [04] 1300      9639   BCLR IASC,PORTA  
                     9640  FC_END:  
                     9641  dosls_done:
                     9642  ; changed - low speed and dwell control, schedule dwell at same time
                     9643  ; as we schedule the spark to maintain a consistent dwell
                     9644  ;
                     9645  ;*        brset   dwellcont,feature7,b_INJFC2        ; don't schedule chg time
                     9646                                       ; here (low speed)
                     9647  ;*        brset   min_dwell,feature2,b_INJFC2        ; don't schedule chg time here
                     9648  ;*        bra     dosls_cd


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 72
MC68HC908GP32 User Bootloader


                     9649  ;*b_INJFC2:
 8EC2 [03] CC8EF5    9650          jmp     INJ_FIRE_CTL
                     9651  dosls_fd:
                     9652  ; if doing dwell control, figure out when to schedule dwell.
 8EC5 [05] 034200    9653          brclr   crank,engine,dosls_cd
                     9654  ;*        brset   min_dwell,feature2,b_INJFC2        ; don't schedule chg time here
                     9655  ; in dwell mode min_dwell means turn coil to charge at trigger point,
                     9656  ; but this can give a very long dwell period which won't be good for IGBTs
                     9657  ;
                     9658  dosls_cd:
 8EC8 [02] 9B        9659          sei
 8EC9 macro          9660          CalcDwellspk                 ; Calculate spark on time
 8EC9 [03] CC8ECC    9661  JWDWELL2OP: JMP WDWELL2OP  
                     9662  WDWELL2OP:  
 8ECC [04] 55E9      9663   LDHX DWELLDELAY2  
 8ECE [05] 026804    9664   BRSET COILBBIT,COILSEL,WD2B360  
 8ED1 [04] 35B3      9665  WD2A360: STHX SPARKONLEFTAH  
 8ED3 [03] 2002      9666   BRA WD2END360  
 8ED5 [04] 35B5      9667  WD2B360: STHX SPARKONLEFTBH  
                     9668  WD2END360:  
 8ED7 [03] B6E7      9669   LDA DWELLDELAY1  
 8ED9 [03] 2606      9670   BNE WD2OK  
 8EDB [03] B6E8      9671   LDA DWELLDELAY1+1  
 8EDD [02] A102      9672   CMP #2  
 8EDF [03] 250E      9673   BLO WD2SKIP  
                     9674  WD2OK:  
 8EE1 [04] 55E7      9675   LDHX DWELLDELAY1  
 8EE3 [05] 006803    9676   BRSET COILABIT,COILSEL,WD2A180  
 8EE6 [05] 026804    9677   BRSET COILBBIT,COILSEL,WD2B180  
 8EE9 [04] 35B5      9678  WD2A180: STHX SPARKONLEFTBH  
 8EEB [03] 2002      9679   BRA WD2END180  
 8EED [04] 35B3      9680  WD2B180: STHX SPARKONLEFTAH  
                     9681  WD2END180:  
 8EEF [03] CC8EF2    9682  WD2SKIP: JMP DD_END  
                     9683  DD_END:  
 8EF2 [02] 9A        9684          cli
                     9685  b_INJFC:
 8EF3 [03] 2000      9686          bra     INJ_FIRE_CTL
                     9687  
                     9688  ;fresh section for TFI spark to keep things clearer
                     9689  ;*TFI_spk:
                     9690          ;if tfi & sparkon & low speed & irq high then follow
                     9691  ; ??? next line irrelevant ??? commented 027b 20th Nov 05
                     9692  ;*;        brclr   sparkon,revlimbits,INJ_FIRE_CTL   ; if output not active then
                     9693                                       ; skip
                     9694  ;*;        brclr   sparktrigg,sparkbits,INJ_FIRE_CTL ; if sparktrigg???
                     9695                                       ; not active then skip
                     9696  ;*        brclr   SparkLSpeed,Sparkbits,tfi_fast     ; if not slow then do high
                     9697                                       ; speed calc
                     9698  ;*        bil     INJ_FIRE_CTL               ; if IRQ still low then skip
                     9699  ;*        bra     tfispkoff          ; irq has risen, de-activate output
                     9700  
                     9701  ;*tfi_fast:
                     9702          ; if high speed only need to worry about trailing (rising) edge
                     9703       ; of output as the firing (falling) edge of the output is done
                     9704       ; by the hi-res timer section
                     9705          ;
                     9706  ;*        ldhx    SparkOnLeftah
                     9707  ;*        beq     INJ_FIRE_CTL               ; shouldn't happen, but just in case
                     9708  ;*        aix     #-1
                     9709  ;*        sthx    SparkOnLeftah
                     9710  ;*        cphx    #0
                     9711  ;*        bne     INJ_FIRE_CTL
                     9712  
                     9713  ;*tfispkoff:
                     9714  ;*        bclr    sparkon,revlimbits ; spark now off
                     9715          ; with TFI as envisaged it only really makes sense to have one
                     9716       ; kind of wiring but keep inverted/non-inverted. Only one output
                     9717          ;
                     9718  
                     9719  ;*        brclr   invspk,EnhancedBits4,tfioutoff
                     9720  ;inverted
                     9721  ;*        brset   REUSE_FIDLE,outputpins,tfiif
                     9722  ;*        bset    coila,portc
                     9723  ;*        bra     INJ_FIRE_CTL
                     9724  ;*tfiif:
                     9725  ;*        bset    iasc,porta
                     9726  ;*        bra     INJ_FIRE_CTL
                     9727  
                     9728  ;*tfioutoff:
                     9729  ;*        brset   REUSE_FIDLE,outputpins,tfiof
                     9730  ;*        bclr    coila,portc
                     9731  ;*        bra     INJ_FIRE_CTL
                     9732  ;*tfiof:
                     9733  ;*        bclr    iasc,porta
                     9734  ;*;        bra     INJ_FIRE_CTL
                     9735  
                     9736  INJ_FIRE_CTL:
                     9737  ;======== Injector Firing Control ========
                     9738  ;===== Main Injector Control Logic =======
 8EF5 [05] 04410C    9739          brset    sched1,squirt,NEW_SQUIRT1
                     9740  INJF1:
 8EF8 [05] 08411F    9741          brset    sched2,squirt,NEW_SQUIRT2
                     9742  INJF2:
 8EFB [05] 064134    9743          brset    firing1,squirt,CHK_DONE_1
                     9744  INJF3:
 8EFE [05] 0A4145    9745          brset    firing2,squirt,CHK_DONE_2JMP
 8F01 [03] CC8F9F    9746          jmp      inj2done
                     9747  
                     9748  ;=== Injector #1 - Start New Injection ===
                     9749  NEW_SQUIRT1:
 8F04 [04] 1641      9750          bset     firing1,squirt              ; Turn on "firing" bit
 8F06 [04] 1541      9751          bclr     sched1,squirt               ; Turn off schedule bit (is
                     9752                                       ; now current operation)
 8F08 [04] 1041      9753          bset     inj1,squirt
 8F0A [03] 3F6C      9754          clr      pwrun1
                     9755  ;*        brset    REUSE_LED17,outputpins,nsq1
                     9756  ;*        bset     sled,portc                ; squrt LED is ON
                     9757  nsq1:
 8F0C [04] 6E0026    9758          mov      #$00,T1CH0H
 8F0F [04] C6E199    9759          lda      INJPWM_f1
 8F12 [03] B727      9760          sta      T1CH0L
 8F14 [04] 1E00      9761       bset     7,PORTA                ; ** Flyback Damper - turn on X0
                     9762                                       ; for Inj1
                     9763  No_FlyBk:
 8F16 [04] 1903      9764          bclr     inject1,portd               ; ^* * * Turn on Injector #1
                     9765                                       ; (inverted drive)
 8F18 [03] 20DE      9766       bra      INJF1
                     9767  
                     9768  ;=== Injector #2 - Start New Injection ===
                     9769  NEW_SQUIRT2:
 8F1A [04] 1A41      9770          bset     firing2,squirt              ; Turn on "firing" bit
 8F1C [04] 1941      9771          bclr     sched2,squirt               ; Turn off schedule bit (is now
                     9772                                       ; current operation)
 8F1E [04] 1241      9773          bset     inj2,squirt
 8F20 [03] 3F6D      9774          clr      pwrun2
                     9775  ;*        brset    REUSE_LED17,outputpins,nsq2
                     9776  ;*        bset     sled,portc                ; squrt LED is ON
                     9777  ;*nsq2:
 8F22 [04] 6E0029    9778          mov      #$00,T1CH1H
                     9779  ;*        lda      DTmode_f
                     9780  ;*        bit      #alt_i2t2
                     9781  ;*        beq      nsq2single
                     9782  
                     9783  ;*        lda      INJPWM_f2
                     9784  ;*        bra      nsq2cont


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 73
MC68HC908GP32 User Bootloader


                     9785  ;*nsq2single:
 8F25 [04] C6E199    9786          lda      INJPWM_f1
                     9787  nsq2cont:
 8F28 [03] B72A      9788          sta      T1CH1L
 8F2A [04] 1C00      9789          bset     6,PORTA             ; ** Flyback Damper - turn on X1
                     9790                                       ; for Injector 2
 8F2C [04] 1B03      9791          bclr     inject2,portd               ; ^* * * Turn on Injector #2
                     9792                                       ; (inverted drive)
                     9793  
                     9794  ;*         lda     feature3_f
                     9795  ;*         bit     #WaterInjb
                     9796  ;*         beq     INJF2
                     9797  ;*;        brclr    WaterInj,feature3,INJF2
                     9798  ;*        brset    water,porta,inject_water  ; If water needed go to
                     9799                                       ; inject water
 8F2E [03] 20CB      9800         bra        INJF2
                     9801  ;*inject_water:
                     9802  ;*       brset  Nitrous,feature1,INJF2       ; If NOS Selected dont turn on
                     9803                                       ; water pulsed output
                     9804  ;*       bset   water2,porta         ; Turn water injector on with
                     9805                                       ; fuel inj 2
                     9806  ;*       bra    INJF2                        ; Carry on as normal
                     9807  INJF3JMP:
 8F30 [03] 20CC      9808         bra    INJF3
                     9809  ;=== Injector #1 - Check for end of Injection ===
                     9810  CHK_DONE_1:
 8F32 [04] 3C6C      9811          inc      pwrun1
 8F34 [03] B66C      9812          lda      pwrun1
 8F36 [03] B14E      9813          cmp      pw1
 8F38 [03] 270E      9814          beq      OFF_INJ_1
 8F3A [05] 0242C1    9815       brset    crank,engine,INJF3     ; do not perform PWM limiting
                     9816                                       ; when cranking
 8F3D [03] B66C      9817          lda      pwrun1
 8F3F [04] C1E19A    9818          cmp      INJPWMT_f1
 8F42 [03] 271A      9819          beq      PWM_LIMIT_1
 8F44 [03] 20B8      9820       bra      INJF3
                     9821  CHK_DONE_2JMP:
 8F46 [03] 2022      9822          bra      CHK_DONE_2          ; Jump added
                     9823  OFF_INJ_1:
 8F48 [04] 1741      9824          bclr     firing1,squirt
 8F4A [04] 1541      9825          bclr     sched1,squirt
 8F4C [04] 1141      9826          bclr     inj1,squirt
 8F4E [04] 1F00      9827       bclr     7,PORTA                ; ** Flyback Damper - turn off X0
 8F50 [04] 1803      9828          bset     inject1,portd               ; ^* * * Turn Off Injector #1
                     9829                                       ; (inverted drive)
 8F52 [04] 6E3220    9830          mov      #T1Timerstop,T1SC
 8F55 [04] 6E1025    9831          mov      #t1scx_NO_PWM,T1SC0
 8F58 [04] 6E0220    9832          mov      #Timergo_NO_INT,T1SC
                     9833  ;        bra      INJF3
 8F5B [03] CC8EFE    9834          jmp      INJF3
                     9835  PWM_LIMIT_1:
 8F5E [04] 6E3220    9836          mov      #T1Timerstop,T1SC
 8F61 [04] 6E1E25    9837          mov      #T1SCX_PWM,T1SC0
 8F64 [04] 6E0220    9838          mov      #Timergo_NO_INT,T1SC
                     9839  ;        bra      INJF3JMP
 8F67 [03] CC8EFE    9840          jmp      INJF3
                     9841  
                     9842  ;=== Injector #2 - Check for end of Injection ===
                     9843  CHK_DONE_2:
 8F6A [04] 3C6D      9844          inc      pwrun2
 8F6C [03] B66D      9845          lda      pwrun2
 8F6E [03] B153      9846          cmp      pw2
 8F70 [03] 270F      9847          beq      OFF_INJ_2
                     9848  ;    brset    crank,engine,CHECK_RPM ; do not perform PWM limiting
                     9849                                       ; when cranking
 8F72 [05] 034203    9850       brclr    crank,engine,CKDN2
 8F75 [03] CC8FCC    9851          jmp      CHECK_RPM
                     9852  CKDN2:
                     9853  ;*        lda      DTmode_f
                     9854  ;*        bit      #alt_i2t2
                     9855  ;*        beq      ckd2single                ; dt=0
                     9856  
                     9857  ;*        lda      pwrun2                    ; use PWM settings from second table
                     9858  ;*        cmp      INJPWMT_f2
                     9859  ;*        beq      PWM_LIMIT_2
                     9860  ;*   bra      inj2done
                     9861  ckd2single:
 8F78 [03] B66D      9862          lda      pwrun2                      ; use PWM settings from first table
 8F7A [04] C1E19A    9863          cmp      INJPWMT_f1
 8F7D [03] 2717      9864          beq      PWM_LIMIT_2
 8F7F [03] 201E      9865       bra      inj2done
                     9866  
                     9867  OFF_INJ_2:
 8F81 [04] 1B41      9868          bclr     firing2,squirt
 8F83 [04] 1941      9869          bclr     sched2,squirt
 8F85 [04] 1341      9870          bclr     inj2,squirt
 8F87 [04] 1D00      9871       bclr     6,PORTA                ; ** Flyback Damper - turn off X1
                     9872                                       ; (for Inj 2)
 8F89 [04] 1A03      9873          bset     inject2,portd               ; ^* * * Turn Off Injector #2
                     9874                                       ; (inverted drive)
                     9875  ;*         lda     feature3_f
                     9876  ;*         bit     #WaterInjb
                     9877  ;*         beq     Dont_Clr_Water2
                     9878  ;*;        brclr    WaterInj,feature3,Dont_Clr_Water2        ; if not using water
                     9879                                       ; then skip
                     9880  ;*        bclr     water2,porta              ; Turn off water injection pulse
                     9881  Dont_Clr_Water2:
 8F8B [04] 6E3220    9882          mov      #T1Timerstop,T1SC
 8F8E [04] 6E1028    9883          mov      #t1scx_NO_PWM,T1SC1
 8F91 [04] 6E0220    9884          mov      #Timergo_NO_INT,T1SC
 8F94 [03] 2009      9885          bra      inj2done
                     9886  PWM_LIMIT_2:
 8F96 [04] 6E3220    9887          mov      #T1Timerstop,T1SC
 8F99 [04] 6E1E28    9888          mov      #T1SCX_PWM,T1SC1
 8F9C [04] 6E0220    9889          mov      #Timergo_NO_INT,T1SC
                     9890  
                     9891  inj2done:
                     9892  ;*        brset    REUSE_FIDLE,outputpins,idleActDone
                     9893  
                     9894  *****************************************************************************
                     9895  ** Idle Control PWM Actuator
                     9896  **
                     9897  ** Runs at 10000/100 = 100 Hz.  Must be before RPM check.
                     9898  *****************************************************************************
                     9899  
                     9900  idleActuator:
 8F9F [05] 024224    9901          brset    crank,engine,idleActOn      ; if cranking then keep it
                     9902                                       ; shut (rmd changed from off to on)
 8FA2 [05] 014225    9903          brclr    running,engine,idleActOff   ; if not running then close it
 8FA5 [04] C6E810    9904          lda      feature13_f         ; skip if on/off mode
 8FA8 [02] A501      9905          bit      #pwmidleb
 8FAA [03] 270B      9906          beq      idleActCheck
                     9907  
 8FAC [04] 3CD3      9908          inc      idleActClock                ; Adjust idle PWM count
 8FAE [03] B6D3      9909          lda      idleActClock
 8FB0 [04] C1E80B    9910          cmp      idlefreq_f
 8FB3 [03] 2602      9911          bne      idleActCheck
 8FB5 [03] 3FD3      9912          clr      idleActClock
                     9913  
                     9914  idleActCheck:
 8FB7 [03] B655      9915          lda      idleDC
 8FB9 [02] A100      9916          cmp      #0T
 8FBB [03] 270D      9917          beq      idleActOff
 8FBD [04] C1E80B    9918          cmp      idlefreq_f  ; #255T KG
 8FC0 [03] 2704      9919          beq      idleActOn
 8FC2 [03] B1D3      9920          cmp      idleActClock


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 74
MC68HC908GP32 User Bootloader


 8FC4 [03] 2304      9921          bls      idleActOff
                     9922  
                     9923  idleActOn:
 8FC6 [04] 1200      9924          bset     iasc,porta
 8FC8 [03] 2002      9925          bra      idleActDone
                     9926  
                     9927  idleActOff:
 8FCA [04] 1300      9928          bclr     iasc,porta
                     9929  
                     9930  idleActDone:
                     9931  
                     9932  *****************************************************************************
                     9933  **  Boost Controller PWM
                     9934  **
                     9935  **  Set bcDC to 0 (0% duty cycle) to 255 (100% DC).  PWM frequency is
                     9936  **  user-defined by bcFreqDiv, see above.
                     9937  **
                     9938  **
                     9939  **  020w3  0% = low boost, 100% = high boost  in calculations
                     9940  **  can invert the output to reverse the sense
                     9941  *****************************************************************************
                     9942  
                     9943  ;*        brclr  BoostControl,feature2,doneBoostControl
                     9944  ;*doBoostControl:
                     9945  ;*        lda     bcDC
                     9946  ;*        beq     boostOff           ; Turn it off, if duty cycle is zero.
                     9947  ;*        cmp     bcActClock
                     9948  ;*        blo     boostOff
                     9949  
                     9950  ;*boostOn:
                     9951  ;*        lda     feature6_f
                     9952  ;*        bit     #BoostDirb
                     9953  ;*        bne     bcClrout
                     9954  ;*;        brset   BoostDir,feature6,bcClrout        ; Change dir for high
                     9955                                       ; pulsewidth reduce boost
                     9956  ;*        bra     bcSetout
                     9957  ;*boostOff:
                     9958  ;*        lda     feature6_f
                     9959  ;*        bit     #BoostDirb
                     9960  ;*        bne     bcSetout
                     9961  ;*;        brset   BoostDir,feature6,bcSetout        ; Change dir for high
                     9962  ;*                                   ; pulsewidth reduce boost
                     9963  ;*        bra     bcClrout
                     9964  
                     9965  ;*bcSetout:
                     9966  ;*        bset    boostP,porta
                     9967  ;*        bra     doneBoostControl
                     9968  
                     9969  ;*bcClrout:
                     9970  ;*        bclr    boostP,porta
                     9971  
                     9972  ;*doneBoostControl:
                     9973  
                     9974  ;=======Check RPM Section=====
                     9975  CHECK_RPM:
 8FCC [05] 014212    9976          brclr    running,engine,b_ENABLE; Branch if not running
                     9977                                       ; right now
 8FCF [05] 064103    9978          brset    firing1,squirt,CHK_RE_ENABLE
 8FD2 [05] 0A4100    9979          brset    firing2,squirt,CHK_RE_ENABLE
                     9980  ;*        brset    REUSE_LED17,outputpins,CHK_RE_ENABLE
                     9981  ;*        bclr     sled,portc                ; squrt LED is OFF - nothing
                     9982                                       ; is injecting
                     9983  
                     9984  CHK_RE_ENABLE:
                     9985  ;====== Check for re-enabling of IRQ input pulses
 8FD5 [03] B670      9986          lda      rpmph                       ; Get high byte of last rpm interval
 8FD7 [03] 270B      9987          beq      RPMLOWBYTECHK               ; If zero go ahead check for
                     9988                                       ; half interval
 8FD9 [03] B673      9989          lda      rpmcl                       ; Check current rpm interval
 8FDB [02] A180      9990          cmp      #128T                       ; 12.8 milliseconds is maximum
                     9991                                       ; (JSM changed this and cause 'stumble')
 8FDD [03] 270C      9992          beq      REARM_IRQ           ; time to re-arm IRQ
 8FDF [03] 200E      9993          bra      INCRPMER            ; Jump around rpm half interval check
                     9994  
 8FE1 [03] CC90C0    9995  b_ENABLE: jmp    ENABLE_THE_IRQ
                     9996  
                     9997  RPMLOWBYTECHK:
 8FE4 [03] B671      9998       lda      rpmpl                  ; Load in the latched previous RPM value
 8FE6 [01] 44        9999          lsra
 8FE7 [03] B173      10000      cmp      rpmcl                  ; Is it the same value as current RPM Counter?
 8FE9 [03] 2604      10001      bne      INCRPMER               ; If not then jump around this
                     10002  
                     10003  REARM_IRQ:
                     10004  ; Also do tacho output in here to give 50% output duty
                     10005  ;*        lda      tachconf_f
                     10006  ;*        and      #$7f
                     10007  ;*        beq      CHK_REARM
                     10008  ;tachoff:
                     10009  ;*        cbeqa    #1T,tachoff_x2
                     10010  ;*        cbeqa    #2T,tachoff_x3
                     10011  ;*        cbeqa    #3T,tachoff_x4
                     10012  ;*        cbeqa    #4T,tachoff_x5
                     10013  ;*        cbeqa    #5T,tachoff_out3
                     10014  ;*        cbeqa    #6T,tachoff_pin10
                     10015  ;*        bra      CHK_REARM
                     10016  ;*tachoff_x2:
                     10017  ;*        bclr     water,porta
                     10018  ;*        bra      CHK_REARM
                     10019  ;*tachoff_x3:
                     10020  ;*        bclr     water2,porta
                     10021  ;*        bra      CHK_REARM
                     10022  ;*tachoff_x4:
                     10023  ;*        bclr     output1,porta
                     10024  ;*        bra      CHK_REARM
                     10025  ;*tachoff_x5:
 8FEB [04] 1500      10026          bclr     output2,porta
 8FED [03] 2000      10027          bra      CHK_REARM
                     10028  ;*tachoff_out3:
                     10029  ;*        bclr     output3,portd
                     10030  ;*        bra      CHK_REARM
                     10031  ;*tachoff_pin10:
                     10032  ;*        bclr     pin10,portc
                     10033  ;*        bra      CHK_REARM
                     10034  
                     10035  CHK_REARM:
                     10036  ;*        brset    MSNEON,personality,INCRPMER      ; irq always on in Neon mode
                     10037  ;*        brset    WHEEL,personality,INCRPMER       ; irq always on in Wheel mode
                     10038  
                     10039  ;*        lda      feature6_f
                     10040  ;*        bit      #falsetrigb           ; can disable false trigger protection for testing
                     10041  ;*        bne      INCRPMER
                     10042  
                     10043  ;*  bset     ACK,INTSCR             ; clear out any latched interrupts
                     10044  ;*  bclr     IMASK,INTSCR           ; enable interrupts again for IRQ
                     10045  
                     10046  INCRPMER:
 8FEF [02] 9B        10047          sei
 8FF0 [04] 3C73      10048          inc      rpmcl
 8FF2 [03] 2611      10049          bne      jCHECK_MMS
 8FF4 [04] 3C72      10050          inc      rpmch
 8FF6 [05] 01420C    10051          brclr    running,engine,jCHECK_MMS  ; don't do stall check if
                     10052                                      ; not running
 8FF9 [03] B672      10053          lda      rpmch
 8FFB [05] 07670A    10054          brclr    cant_crank,EnhancedBits2,incrpm_crank      ; if we've fully
                     10055                                      ; exited crank mode
 8FFE [02] A11E      10056          cmp      #30T                       ; then 0.75 seconds timeout


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 75
MC68HC908GP32 User Bootloader


                     10057                                      ; (<360rpm on a 2cyl) (was 0.25s)
 9000 [03] 2503      10058          blo      jCHECK_MMS
 9002 [02] 9A        10059          cli                         ; ok, we can be interrupted again
                     10060  
 9003 [03] 2008      10061          bra      stall
 9005 [03] CC90C2    10062  jCHECK_MMS:      jmp  CHECK_MMS
                     10063  incrpm_crank:
 9008 [02] A164      10064          cmp      #$64                       ; If RPMPH is 100 (or RPMPeriod =
                     10065                                      ; 2.5 sec) then engine stalled
 900A [03] 25F9      10066          blo      jCHECK_MMS
 900C [02] 9A        10067          cli                         ; ok, we can be interrupted again
                     10068  stall:
 900D [03] 3F42      10069          clr      engine                     ; Engine is stalled, clear all
                     10070                                      ; in engine
 900F [04] 1100      10071          bclr     fuelp,porta                ; Turn off fuel Pump
 9011 [03] 3F72      10072          clr      rpmch
 9013 [03] 3F73      10073          clr      rpmcl
                     10074  
 9015 [02] A600      10075          lda      #00T
 9017 [03] B7E4      10076          sta      TCCycles               ; If stalled then clear these 3 for Extra
 9019 [03] B7E0      10077          sta      TCAccel                ; fuel during cranking
 901B [04] 1166      10078          bclr     NosDcOk,EnhancedBits   ;
                     10079  
 901D [02] A6FF      10080          lda      #$FF   ; changed 025n, was zero. Causing problems with wheel pickup?
 901F [03] B7B0      10081          sta      iTimeL
 9021 [03] B7AF      10082          sta      iTimeH
 9023 [03] B7AE      10083          sta      iTimeX
                     10084  
 9025 [03] 3F4E      10085          clr      pw1                        ; zero out pulsewidth
 9027 [03] 3F53      10086          clr      pw2                        ; zero out pulsewidth
 9029 [03] 3F4D      10087          clr      rpm
                     10088  
 902B [04] 1767      10089          bclr     cant_crank,EnhancedBits2   ; if we stalled we can
                     10090                                      ; crank again
                     10091  
 902D macro          10092          TurnAllSpkOff                       ; macro to turn off all spark outputs
 902D [05] 0D6910    10093   BRCLR INVSPK,ENHANCEDBITS4,SOIN  
 9030 [04] 1300      10094   BCLR IASC,PORTA  
 9032 [04] 1102      10095   BCLR SLED,PORTC  
 9034 [04] 1502      10096   BCLR WLED,PORTC  
 9036 [04] 1302      10097   BCLR ALED,PORTC  
 9038 [04] 1103      10098   BCLR OUTPUT3,PORTD  
 903A [04] 1702      10099   BCLR PIN10,PORTC  
 903C [04] 1503      10100   BCLR KNOCKIN,PORTD  
 903E [03] 203E      10101   BRA SOIN_DONE  
                     10102  SOIN:  
 9040 [05] 006204    10103   BRSET REUSE_FIDLE,OUTPUTPINS,SOIN1  
 9043 [04] 1300      10104   BCLR IASC,PORTA  
 9045 [03] 2002      10105   BRA SOIN2  
 9047 [04] 1200      10106  SOIN1: BSET IASC,PORTA  
 9049 [05] 026204    10107  SOIN2: BRSET REUSE_LED17,OUTPUTPINS,SOIN3  
 904C [04] 1102      10108   BCLR SLED,PORTC  
 904E [03] 2002      10109   BRA SOIN4  
 9050 [04] 1002      10110  SOIN3: BSET SLED,PORTC  
 9052 [05] 086204    10111  SOIN4: BRSET REUSE_LED19,OUTPUTPINS,SOIN5  
 9055 [04] 1302      10112   BCLR ALED,PORTC  
 9057 [03] 2002      10113   BRA SOIN6  
 9059 [04] 1202      10114  SOIN5: BSET ALED,PORTC  
 905B [05] 056207    10115  SOIN6: BRCLR REUSE_LED18,OUTPUTPINS,SOIN7  
 905E [05] 076204    10116   BRCLR REUSE_LED18_2,OUTPUTPINS,SOIN7  
 9061 [04] 1402      10117   BSET WLED,PORTC  
 9063 [03] 2002      10118   BRA SOIN8  
 9065 [04] 1502      10119  SOIN7: BCLR WLED,PORTC  
                     10120  SOIN8:  
 9067 [05] 096402    10121   BRCLR OUT3SPARKD,FEATURE2,SOIN9  
 906A [04] 1003      10122   BSET OUTPUT3,PORTD  
                     10123  SOIN9:  
 906C [04] C6E074    10124   LDA FEATURE8_F  
 906F [02] A508      10125   BIT #SPKEOPB  
 9071 [03] 2702      10126   BEQ SOIN10  
 9073 [04] 1602      10127   BSET PIN10,PORTC  
                     10128  SOIN10:  
 9075 [04] C6E074    10129   LDA FEATURE8_F  
 9078 [02] A510      10130   BIT #SPKFOPB  
 907A [03] 2702      10131   BEQ SOIN11  
 907C [04] 1403      10132   BSET KNOCKIN,PORTD  
                     10133  SOIN11:  
                     10134  SOIN_DONE:  
 907E [03] 3FB3      10135   CLR SPARKONLEFTAH  
 9080 [03] 3FB4      10136   CLR SPARKONLEFTAL  
 9082 [03] 3FB5      10137   CLR SPARKONLEFTBH  
 9084 [03] 3FB6      10138   CLR SPARKONLEFTBL  
 9086 [03] 3FB7      10139   CLR SPARKONLEFTCH  
 9088 [03] 3FB8      10140   CLR SPARKONLEFTCL  
 908A [03] 3FB9      10141   CLR SPARKONLEFTDH  
 908C [03] 3FBA      10142   CLR SPARKONLEFTDL  
 908E [03] 3FBB      10143   CLR SPARKONLEFTEH  
 9090 [03] 3FBC      10144   CLR SPARKONLEFTEL  
 9092 [03] 3FBD      10145   CLR SPARKONLEFTFH  
 9094 [03] 3FBE      10146   CLR SPARKONLEFTFL  
                     10147  
                     10148  stall_cont:
                     10149  ;*        brset    EDIS,personality,pass_store
 9096 [04] C6E3A8    10150          lda      TriggAngle_f               ; Calculate crank delay angle
 9099 [04] C0E3AB    10151          sub      CrankAngle_f
 909C [02] AB1C      10152          add      #28T                       ; - -10 deg
 909E [04] C70106    10153          sta      DelayAngle
                     10154  pass_store:
 90A1 [04] C6E3AB    10155          lda      CrankAngle_f               ; Update spark angle for user interface
 90A4 [03] B758      10156          sta      SparkAngle
 90A6 [04] C6E3AC    10157          lda      SparkHoldCyc_f             ; Hold spark after stall
 90A9 [03] B7E6      10158          sta      wheelcount         ; (HoldSpark)
                     10159  ;*        brset    MSNEON,personality,wc_wheel
                     10160  ;*        brset    WHEEL,personality,wc_wheel
                     10161  ;*        bra      ENABLE_THE_IRQ
                     10162  wc_wheel:
 90AB [04] 6EC3E6    10163          mov     #WHEELINIT,wheelcount       ; set !sync,holdoff, 3 teeth holdoff
 90AE [04] 136B      10164          bclr    wsync,EnhancedBits6
 90B0 [04] 146B      10165          bset    whold,EnhancedBits6
 90B2 [02] A600      10166          lda     #0
 90B4 [03] B7F3      10167          sta     avgtoothh
 90B6 [03] B7F4      10168          sta     avgtoothl
                     10169  
 90B8 [03] 3FF5      10170          clr     lowresH                     ; low res (0.1ms) timer
 90BA [03] 3FF6      10171          clr     lowresL                     ;
                     10172  
 90BC [04] 1068      10173          bset    coilabit,coilsel
 90BE [04] 1860      10174          bset    coilerr,RevLimBits
                     10175  
                     10176  ENABLE_THE_IRQ:
 90C0 [04] 131D      10177      bclr     IMASK,INTSCR           ; Enable IRQ
                     10178  
                     10179  CHECK_MMS:
 90C2 [02] 9A        10180          cli
 90C3 [03] B67D      10181          lda      mms
 90C5 [02] A109      10182          cmp      #$09
 90C7 [03] 2203      10183          bhi      MSEC                       ;(was #$0A  beq)
 90C9 [03] CC9184    10184          jmp      RTC_DONE
                     10185  
                     10186  ****************************************************************************
                     10187  ********************* millisecond section ********************************
                     10188  ****************************************************************************
                     10189  
                     10190  MSEC:
                     10191  ;*;        brset     egoIgnCount,feature1,No_Ego_mSec       ; Are we using mSec
                     10192                                      ; for ego counter?


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 76
MC68HC908GP32 User Bootloader


                     10193  ;*        lda       feature14_f1
                     10194  ;*        bit       #egoIgnCountb
                     10195  ;*        bne       No_Ego_mSec
                     10196  ;*        inc       egocount                ; Increment EGO step counter
                     10197  
                     10198  No_Ego_mSec:
                     10199  
 90CC [04] 3C7E      10200          inc      ms                 ; bump up millisec
 90CE [03] 3F7D      10201          clr      mms
                     10202  
                     10203  ;*        brclr    REUSE_LED18,outputpins,FIRE_ADC  ; only do this if
                     10204                                      ; using as IRQ monitor
                     10205  ;*        brset    REUSE_LED18_2,outputpins,FIRE_ADC        ; not if spark c
                     10206  ;*        bil      IRQ_LOW          ; Check if IRQ pin low
                     10207  ;*        bclr     wled,portc               ; Turn OFF IRQ led
                     10208  
                     10209  ;*        bra      FIRE_ADC
                     10210  
                     10211  ;*IRQ_LOW:
                     10212  ;*        brset    MSNEON,personality,FIRE_ADC      ; irrelevant
                     10213  ;*        brset    WHEEL,personality,FIRE_ADC       ; irrelevant
                     10214  ;*        bset     wled,portc               ; Turn ON IRQ led (in case of
                     10215                                      ; bouncing points or what ever)
                     10216  
                     10217  FIRE_ADC:
                     10218  ; Fire off another ADC conversion, channel is pointed to by ADSEL
 90D0 [03] B68E      10219      lda     adsel
 90D2 [02] AA40      10220      ora     #%01000000
 90D4 [03] B73C      10221      sta     adscr
                     10222  
 90D6 [04] 3CD5      10223          inc      bcCtlClock
                     10224  
                     10225  MSDONE:
                     10226  ***************************************************************************
                     10227  ********************* 1/100 second section ********************************
                     10228  ***************************************************************************
 90D8 [03] B67E      10229          lda      ms
 90DA [04] 41001D    10230          cbeqa    #00,one00th    ; surely there's a better/quicker way than this?
 90DD [04] 410A1A    10231          cbeqa    #10T,one00th
 90E0 [04] 411417    10232          cbeqa    #20T,one00th
 90E3 [04] 411E14    10233          cbeqa    #30T,one00th
 90E6 [04] 412811    10234          cbeqa    #40T,one00th
 90E9 [04] 41320E    10235          cbeqa    #50T,one00th
 90EC [04] 413C0B    10236          cbeqa    #60T,one00th
 90EF [04] 414608    10237          cbeqa    #70T,one00th
 90F2 [04] 415005    10238          cbeqa    #80T,one00th
 90F5 [04] 415A02    10239          cbeqa    #90T,one00th
 90F8 [03] 2000      10240          bra      end100th
                     10241  
                     10242  one00th:
                     10243  ;*        brclr   Launch,portd,nol_timer            ; Button is pressed so skip timer
                     10244  ;*        lda     n2olaunchdel
                     10245  ;*        beq     nol_timer               ; already zero
                     10246  ;*        sub     #1
                     10247  ;*        sta     n2olaunchdel
                     10248  nol_timer:
                     10249  
                     10250  ;        ;do similar for nitrous fuel hold on
                     10251  ;        brclr   ?????,????,non2o_timer             ; Nitrous on so skip timer
                     10252  ;        lda     n2ohold
                     10253  ;        beq     non2o_timer            ; already zero
                     10254  ;        sub     #1
                     10255  ;        sta     n2ohold
                     10256  ;non2o_timer:
                     10257  
                     10258  end100th:
 90FA [03] B67E      10259          lda      ms
 90FC [02] A164      10260          cmp      #$64
 90FE [03] 2549      10261          blo      RTC_DONEJMP
                     10262  ***************************************************************************
                     10263  ********************* 1/10 second section *********************************
                     10264  ***************************************************************************
                     10265  
                     10266  ONETENTH:
 9100 [03] 3F7E      10267          clr      ms
                     10268  ;see if need to restart tooth logger
 9102 [04] C60105    10269          lda      page
 9105 [04] 41F005    10270          cbeqa    #$F0,restart_F0
 9108 [04] 41F10F    10271          cbeqa    #$F1,restart_F1
 910B [03] 201A      10272          bra      oneten_notlog
                     10273  
                     10274  restart_F0:
 910D [05] 046A17    10275          brset    toothlog,EnhancedBits5,oneten_notlog
 9110 [03] B68A      10276          lda      txcnt
 9112 [03] 2613      10277          bne      oneten_notlog   ; if sending data then do not restart
 9114 [04] 146A      10278          bset     toothlog,EnhancedBits5    ; turn logger back on (after send)
 9116 [04] 176A      10279          bclr     triglog,EnhancedBits5    ; turn logger back on (after send)
 9118 [03] 200D      10280          bra      oneten_notlog
                     10281  
                     10282  restart_F1:
 911A [05] 066A0A    10283          brset    triglog,EnhancedBits5,oneten_notlog
 911D [03] B68A      10284          lda      txcnt
 911F [03] 2606      10285          bne      oneten_notlog   ; if sending data then do not restart
 9121 [04] 166A      10286          bset     triglog,EnhancedBits5    ; turn logger back on (after send)
 9123 [04] 156A      10287          bclr     toothlog,EnhancedBits5    ; turn logger back on (after send)
 9125 [03] 2000      10288          bra      oneten_notlog
                     10289  
                     10290  oneten_notlog:
 9127 [04] 3C7F      10291          inc      tenth
 9129 [04] 3CE5      10292          inc      Out3Timer
 912B [03] B64D      10293          lda      rpm
 912D [04] C70103    10294          sta      rpmlast
                     10295  
 9130 [03] B6DE      10296          lda      ST2Timer
 9132 [03] 2702      10297          beq      ST2Timer_zero
 9134 [04] 3ADE      10298          dec      ST2Timer
                     10299  ST2Timer_zero:
 9136 [03] B6DF      10300          lda     VE3Timer            ; VE Table3 delay timer
 9138 [03] 2702      10301          beq     VE3Timer_zero
 913A [04] 3ADF      10302          dec     VE3Timer
                     10303  VE3Timer_zero:
                     10304  ;*       brset   UseVE3,EnhancedBits,No_VE3_delay   ; Are we running from VE3?
 913C [04] C6E05D    10305         lda     VE3Delay_f
 913F [03] B7DF      10306         sta     VE3Timer
                     10307  No_VE3_delay:
 9141 [05] 030305    10308          brclr   NosIn,portd,No_St2Delay
 9144 [04] C6E057    10309          lda     Spark2Delay_f               ; If input not low reset ST2
                     10310                                      ; delay timer
 9147 [03] B7DE      10311          sta     ST2Timer
                     10312  No_St2Delay:
                     10313  
                     10314  ;*        brset    taeIgnCount,feature1,No_TPSCount
                     10315  ;*        inc      tpsaclk
                     10316  
                     10317  ; Save current TPS reading in last_tps variable to compute TPSDOT
                     10318  ; in acceleration enrichment section
                     10319  
                     10320  ;*       lda     feature4_f
                     10321  ;*       bit     #KpaDotSetb
                     10322  ;*       beq     tps_dot_mode
                     10323  ;*;       brclr   KpaDotSet,feature4,tps_dot_mode   ; If not in KPA dot mode
                     10324                                      ;jump past KPa settings
                     10325  ;*       lda     kpa
                     10326  ;*       bra     Kpa_Dot_Mode
                     10327  ;******
                     10328  RTC_DONEJMP:


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 77
MC68HC908GP32 User Bootloader


 9149 [03] CC9184    10329         jmp     RTC_DONE
                     10330  ;******
                     10331  ;*tps_dot_mode:
                     10332  ;*       lda      tps
                     10333  ;*Kpa_Dot_Mode:
                     10334  ;*       sta      TPSlast
                     10335  
                     10336  No_TPSCount:
                     10337  
                     10338  ; Check Magnus rev limit times
                     10339  
 914C [03] B6C4      10340          lda      SRevLimTimeLeft    ; Check if time left already zero
 914E [03] 2706      10341          beq      TimeLeft
 9150 [04] 3AC4      10342          dec      SRevLimTimeLeft    ; Count down time left
 9152 [03] 2602      10343          bne      TimeLeft           ; Time left done
 9154 [04] 1260      10344          bset     RevLimHSoft,RevLimBits     ; Set soft rev limiter fuel cut bit
                     10345  TimeLeft:
                     10346  
 9156 [03] B67F      10347          lda      tenth
 9158 [02] A10A      10348          cmp      #$0A
 915A [03] 2528      10349          blo      RTC_DONE
                     10350  
                     10351  ****************************************************************************
                     10352  ********************** seconds section ***********************************
                     10353  ****************************************************************************
                     10354  SECONDS:
 915C [04] 3CD7      10355          inc      OverRunTime
                     10356  
                     10357  ;*  brclr    IdleAdvTimeOK,EnhancedBits6,knock_timer_checks
                     10358  ;*  lda      idlAdvHld
                     10359  ;*  inca
                     10360  ;*  sta      idlAdvHld
                     10361  
                     10362  knock_timer_checks:
 915E [03] B6D9      10363          lda      KnockTimLft                ; Load the knock timer
 9160 [02] A100      10364          cmp      #00T
 9162 [03] 2703      10365          beq      Secs                       ; If its zero carry on with seconds
 9164 [01] 4A        10366          deca                                ; If not dec it
 9165 [03] B7D9      10367          sta      KnocktimLft
                     10368  Secs:
                     10369  ;*        lda      feature10_f5
                     10370  ;*        bit      #ASEIgnCountb
                     10371  ;*        beq      sec_cont
 9167 [04] 3C83      10372          inc      ASEcount
                     10373  sec_cont:
                     10374  ; crank mode inhibit
                     10375  ; make a 1-2 second delay
                     10376  ; if running and !cranking and !cant_delay then set cant_delay
                     10377  ; if running and !cranking and cant_delay then set cant_crank
                     10378  ; else clear cant_delay
 9169 [05] 02420E    10379          brset    crank,engine,cant_off
 916C [05] 01420B    10380          brclr    running,engine,cant_off
 916F [05] 086704    10381          brset    cant_delay,EnhancedBits2,cant_set
 9172 [04] 1867      10382          bset     cant_delay,EnhancedBits2
 9174 [03] 2006      10383          bra      sec_fin
                     10384  cant_set:
 9176 [04] 1667      10385          bset     cant_crank,EnhancedBits2
 9178 [03] 2002      10386          bra      sec_fin
                     10387  cant_off:
 917A [04] 1967      10388          bclr     cant_delay,EnhancedBits2
                     10389  sec_fin:
 917C [03] 3F7F      10390          clr      tenth
 917E [04] 3C40      10391          inc      secl                       ; bump up second count
 9180 [03] 2602      10392          bne      RTC_DONE
 9182 [04] 3C80      10393          inc      sech
                     10394  
                     10395  RTC_DONE:
                     10396  ; now check that we haven't already missed the target
 9184 [02] 9B        10397          sei
 9185 [03] B62D      10398          lda     T2CNTL ; unlatch any previous read
 9187 [03] B62C      10399          lda     T2CNTH
 9189 [04] C701ED    10400          sta     itmp00
 918C [03] B62D      10401          lda     T2CNTL
 918E [04] C701EE    10402          sta     itmp01
                     10403  
 9191 [03] B632      10404          lda     T2CH0L
 9193 [04] C001EE    10405          sub     itmp01
 9196 [04] C701F0    10406          sta     itmp03
 9199 [03] B631      10407          lda     T2CH0H
 919B [04] C201ED    10408          sbc     itmp00
                     10409  ;        sta     itmp02
                     10410  ;assume we need at least 5us? from setting and RTIing before output compare will work
 919E [03] 2607      10411          bne     RTC_reset  ; if high byte non zero then we've already missed it
 91A0 [04] C601F0    10412          lda     itmp03
 91A3 [02] A10A      10413          cmp     #10T
 91A5 [03] 220F      10414          bhi     RTC_DONE2     ; if less than 5us then we are likely to miss it
                     10415  RTC_reset:
 91A7 [04] C601EE    10416          lda     itmp01
 91AA [02] AB0A      10417          add     #10T   ; allow 10us from here to be sure we don't miss it
                     10418                         ; this will cause a "lazy" 0.1ms if it happens often
                     10419                         ; but should eliminate total dropout
 91AC [01] 97        10420          tax
 91AD [04] C601ED    10421          lda     itmp00
 91B0 [02] A900      10422          adc     #0T
 91B2 [03] B731      10423          sta     T2CH0H
 91B4 [03] BF32      10424          stx     T2CH0L
                     10425  
                     10426  RTC_DONE2:
                     10427  ;        bclr    TOF,T2SC0
 91B6 [04] 1C30      10428          bset    TOIE,T2SC0          ; re-enable 0.1ms interrupt
                     10429  NOTSPKTIME:                         ; close branch for below
 91B8 [02] 8A        10430          pulh
 91B9 [07] 80        10431      rti
                     10432  
                     10433  ***************************************************************************
                     10434  **
                     10435  ** Spark timing
                     10436  **
                     10437  ***************************************************************************
 91BA [03] CC92CD    10438  INT_SPARK_OFFa:   jmp   INT_SPARK_OFF
 91BD [03] CC924C    10439  j_hires_dwell:    jmp   hires_dwell
                     10440  
                     10441  SPARKTIME:
 91C0 [02] 8B        10442                  pshh
 91C1 [03] B633      10443                  lda     T2SC1               ; Read interrupt
 91C3 [04] 1F33      10444                  bclr    CHxF,T2SC1  ; Reset interrupt
                     10445  
 91C5 [05] 035FF0    10446                  brclr   SparkHSpeed,SparkBits,NOTSPKTIME    ; Don't spark
                     10447                                      ; on time when going slow
 91C8 [05] 0869F2    10448                  brset   indwell,EnhancedBits4,j_hires_dwell ; start dwell
                     10449                                      ; period
                     10450  ;*                brset   EDIS,personality,set_spkon
                     10451  ;*                brclr   SparkTrigg,Sparkbits,NOTSPKTIME   ; Should never do this
                     10452  
                     10453  ;spark cut used to be here, but moved to TIMERROLL to eliminate chance of
                     10454  ;overheating ignitors when in spark-cut because coils were left switched ON
                     10455  
                     10456  set_spkon:
 91CB [05] 015FEC    10457                  brclr   SparkTrigg,Sparkbits,INT_SPARK_OFFa ; Check for
                     10458                                      ; spark trigg, used end of pulse
                     10459  set_spkon2:
 91CE [04] 1660      10460                  bset    sparkon,revlimbits  ; spark now on
                     10461  ;*                brset   invspk,EnhancedBits4,sson_inv
                     10462  ;*                COILNEG                   ; macro = fire coil for non-inverted
                     10463  ;*                bra     SparkOnDone
                     10464  sson_inv:


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 78
MC68HC908GP32 User Bootloader


 91D0 macro          10465                  COILPOS                     ; macro = fire coil for inverted
 91D0 [05] 006248    10466   BRSET REUSE_FIDLE,OUTPUTPINS,ILSOX  
 91D3 [05] 006A14    10467   BRSET ROTARY2,ENHANCEDBITS5,ROT2POS  
 91D6 [05] 00682A    10468   BRSET COILABIT,COILSEL,ILSOA  
 91D9 [05] 02682B    10469   BRSET COILBBIT,COILSEL,ILSOB  
 91DC [05] 04682C    10470   BRSET COILCBIT,COILSEL,ILSOC  
 91DF [05] 06682D    10471   BRSET COILDBIT,COILSEL,ILSOD  
 91E2 [05] 08682E    10472   BRSET COILEBIT,COILSEL,ILSOE  
 91E5 [05] 0A682F    10473   BRSET COILFBIT,COILSEL,ILSOF  
 91E8 [03] 2033      10474   BRA FC_END  
                     10475  ROT2POS:  
 91EA [05] 086310    10476   BRSET ROTARYFDIGN,FEATURE1,CHARGEFD  
 91ED [05] 046805    10477   BRSET COILCBIT,COILSEL,ROT2CP  
 91F0 [05] 066806    10478   BRSET COILDBIT,COILSEL,ROT2DP  
 91F3 [03] 200E      10479   BRA ILSOA  
                     10480  ROT2CP:  
 91F5 [04] 1302      10481   BCLR COILB,PORTC  
 91F7 [03] 2024      10482   BRA FC_END  
                     10483  ROT2DP:  
 91F9 [04] 1302      10484   BCLR COILB,PORTC  
 91FB [03] 2020      10485   BRA FC_END  
                     10486  CHARGEFD:  
 91FD [05] 04680B    10487   BRSET COILCBIT,COILSEL,ILSOC  
 9200 [05] 066804    10488   BRSET COILDBIT,COILSEL,ILSOB  
                     10489  ILSOA:  
 9203 [04] 1102      10490   BCLR COILA,PORTC  
 9205 [03] 2016      10491   BRA FC_END  
                     10492  ILSOB:  
 9207 [04] 1302      10493   BCLR COILB,PORTC  
 9209 [03] 2012      10494   BRA FC_END  
                     10495  ILSOC:  
 920B [04] 1502      10496   BCLR WLED,PORTC  
 920D [03] 200E      10497   BRA FC_END  
                     10498  ILSOD:  
 920F [04] 1103      10499   BCLR OUTPUT3,PORTD  
 9211 [03] 200A      10500   BRA FC_END  
                     10501  ILSOE:  
 9213 [04] 1702      10502   BCLR PIN10,PORTC  
 9215 [03] 2006      10503   BRA FC_END  
                     10504  ILSOF:  
 9217 [04] 1503      10505   BCLR KNOCKIN,PORTD  
 9219 [03] 2002      10506   BRA FC_END  
                     10507  ILSOX:  
 921B [04] 1300      10508   BCLR IASC,PORTA  
                     10509  FC_END:  
                     10510  SparkOnDone:
                     10511  ;*                brclr   EDIS,personality,sod_ne
                     10512  ;*                jmp     set_saw_on
                     10513  ;*jsod_cd_done:   jmp     sod_cd_done
                     10514  
                     10515  sod_ne:
 921D [04] 1D33      10516                  bclr    TOIE,T2SC1  ; Disable interrupts
                     10517  ;*                brset   dwellcont,feature7,sod_cd
                     10518  ;*                brset   min_dwell,feature2,jsod_cd_done   ; don't schedule
                     10519                                      ; here if minimal dwell wanted
                     10520  sod_cd:
 921F macro          10521                  CalcDwellspk                ; Set spark on time
 921F [03] CC9222    10522  JWDWELL2OP: JMP WDWELL2OP  
                     10523  WDWELL2OP:  
 9222 [04] 55E9      10524   LDHX DWELLDELAY2  
 9224 [05] 026804    10525   BRSET COILBBIT,COILSEL,WD2B360  
 9227 [04] 35B3      10526  WD2A360: STHX SPARKONLEFTAH  
 9229 [03] 2002      10527   BRA WD2END360  
 922B [04] 35B5      10528  WD2B360: STHX SPARKONLEFTBH  
                     10529  WD2END360:  
 922D [03] B6E7      10530   LDA DWELLDELAY1  
 922F [03] 2606      10531   BNE WD2OK  
 9231 [03] B6E8      10532   LDA DWELLDELAY1+1  
 9233 [02] A102      10533   CMP #2  
 9235 [03] 250E      10534   BLO WD2SKIP  
                     10535  WD2OK:  
 9237 [04] 55E7      10536   LDHX DWELLDELAY1  
 9239 [05] 006803    10537   BRSET COILABIT,COILSEL,WD2A180  
 923C [05] 026804    10538   BRSET COILBBIT,COILSEL,WD2B180  
 923F [04] 35B5      10539  WD2A180: STHX SPARKONLEFTBH  
 9241 [03] 2002      10540   BRA WD2END180  
 9243 [04] 35B3      10541  WD2B180: STHX SPARKONLEFTAH  
                     10542  WD2END180:  
 9245 [03] CC9248    10543  WD2SKIP: JMP DD_END  
                     10544  DD_END:  
                     10545  sod_cd_done:
                     10546  ;now check if we should schedule a trailing spark
                     10547  ;*                brset   rotary2,EnhancedBits5,chktrail
                     10548  sparktime_exit:
 9248 [04] 115F      10549                  bclr    SparkTrigg,Sparkbits        ; No more sparks for this IRQ
                     10550  NOT_SPARK_TIME:
 924A [02] 8A        10551                  pulh
 924B [07] 80        10552                  rti
                     10553  
                     10554  ;if in twin rotor mode, check to see if we should schedule or fire the trailing
                     10555  ;*chktrail:
                     10556  ;*                brset   coilcbit,coilsel,sparktime_exit   ; already done - exit
                     10557  ;*                brset   coildbit,coilsel,sparktime_exit   ; already done - exit
                     10558  
                     10559  ;*                brset   coilbbit,coilsel,ctb
                     10560  ;*                clr     coilsel
                     10561  ;*                bset    coilcbit,coilsel        ; was coila, now coilc
                     10562  ;*                bra     ct_done
                     10563  ;*ctb:
                     10564  ;*                clr     coilsel
                     10565  ;*                bset    coildbit,coilsel        ; was coilc, now coild
                     10566  ;*ct_done:
                     10567  ;       if trailing split off still "fire the coil" now just in case we have
                     10568  ;       already started charging it - don't want to burn out coil as we
                     10569  ;       transition from trailing to no trailing
                     10570  ; "lowspdspk" code checks and doesn't turn coil on if trailing is off,
                     10571  ; see that section within 0.1ms
                     10572  
                     10573  ;*                brclr   rsh_s,EnhancedBits5,force_trail_off  ; if split out of range then OFF
                     10574  ;*                brclr   rsh_r,EnhancedBits5,force_trail_off  ; if rpm out of range then OFF
                     10575  
                     10576  ;*                lda     splitdelH
                     10577  ;*                beq     split_min      ; is zero so check for short split
                     10578  ;*                cmp     #$FF
                     10579  ;*                bne     split_timed
                     10580  ;*                jmp     force_trail_off     ; ensure trailing coil off
                     10581                  ;maybe need some hysteresis with this to avoid jittery behaviour
                     10582  
                     10583  ;check if split < 64us, then fire now
                     10584  ;*split_min:
                     10585  ;*                lda     splitdelL
                     10586  ;*                cmp     #64T             ; 64us
                     10587  ;*                bhi     split_timed
                     10588  ;split_min_set:
                     10589  ;                clr     splitdelL
                     10590  ;                mov     #64T,splitdelH
                     10591  ;*                jmp     set_spkon2     ; jump back up to fire next spark
                     10592  ;*split_timed:
                     10593  ;*                lda     T2CNTL            ; unlatch low byte
                     10594  
                     10595  ;*                ldx     T2CNTH
                     10596  ;*                stx     T2CurrH           ; Save current counter value
                     10597  ;*                lda     T2CNTL
                     10598  ;*                sta     T2CurrL           ; Save current counter value
                     10599  
                     10600  ;*                lda     T2CurrL


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 79
MC68HC908GP32 User Bootloader


                     10601  ;*                add     splitdelL
                     10602  ;*                tax
                     10603  ;*                lda     T2CurrH
                     10604  ;*                adc     splitdelH
                     10605  ;*                sta     T2CH1H
                     10606  ;*                stx     T2CH1L
                     10607  
                     10608  ;*                bset    SparkTrigg,Sparkbits      ; keep spark enabled
                     10609  
                     10610  ;*                bclr    TOF,T2SC1 ; clear any pending interrupt
                     10611  ;*                bset    TOIE,T2SC1        ; Enable timer interrupt
                     10612  ;*          pulh
                     10613  ;*                rti
                     10614  
                     10615  ;*force_trail_off:
                     10616            ;ensure trailing coil is really off
                     10617  ;*          bset    wled,portc
                     10618  ;*                brset   invspk,EnhancedBits4,to_inv
                     10619  ;*                bset    coilb,portc
                     10620  ;*                bra     to_exit
                     10621  ;*to_inv:         bclr    coilb,portc
                     10622  ;*to_exit:
                     10623  ;*                bclr    SparkTrigg,Sparkbits      ; No more sparks for this IRQ
                     10624  ;*;kill the dwell timers for trailing in the mainloop
                     10625  ;*                pulh
                     10626  ;*                rti
                     10627  
                     10628  hires_dwell:
                     10629                  ; never do trailing dwell in "hi-res" so no need to
                     10630                  ; consider trailing here
                     10631  
                     10632  ;first turn on coil, then reset T2 to spark point saved in sparktargetH/L
                     10633  ;spark cut- actually cut the coil-on
                     10634  ;*                lda     SparkCutCnt       ; Check Spark Counter
                     10635  ;*                inca
                     10636  ;*                cmp     SparkCutBase_f    ; How many sparks to count to
                     10637  ;*                blo     Dont_ResetCnt2
                     10638  ;*                lda     #01T
                     10639  ;*Dont_ResetCnt2:
                     10640  ;*                sta     SparkCutCnt       ; Store new value to spark counter
                     10641  ;*                brset   sparkCut,RevLimBits,bhrds ; If in spark cut
                     10642                                      ; mode jump past spark
                     10643  
                     10644  ;*                brset   invspk,EnhancedBits4,hrd_inv
                     10645  ;*                COILPOS                   ; macro = charge coil for non-inverted
                     10646  ;*bhrds:
                     10647  ;*                bra     hrd_set
                     10648  hrd_inv:
 924C macro          10649                  COILNEG                     ; macro = charge coil for inverted
 924C [05] 00626A    10650   BRSET REUSE_FIDLE,OUTPUTPINS,DSLSX  
 924F [05] 006A1E    10651   BRSET ROTARY2,ENHANCEDBITS5,ROT2NEG  
 9252 [05] 0F6232    10652   BRCLR TOY_DLI,OUTPUTPINS,NILS  
 9255 [05] 006806    10653   BRSET COILABIT,COILSEL,FCNITA  
 9258 [05] 026809    10654   BRSET COILBBIT,COILSEL,FCNITB  
 925B [05] 04680C    10655   BRSET COILCBIT,COILSEL,FCNITC  
                     10656  FCNITA:  
 925E [04] 1302      10657   BCLR COILB,PORTC  
 9260 [04] 1502      10658   BCLR WLED,PORTC  
 9262 [03] 203D      10659   BRA DSLSA  
                     10660  FCNITB:  
 9264 [04] 1202      10661   BSET COILB,PORTC  
 9266 [04] 1502      10662   BCLR WLED,PORTC  
 9268 [03] 2037      10663   BRA DSLSA  
                     10664  FCNITC:  
 926A [04] 1302      10665   BCLR COILB,PORTC  
 926C [04] 1402      10666   BSET WLED,PORTC  
 926E [03] 2031      10667   BRA DSLSA  
                     10668  ROT2NEG:  
 9270 [05] 086328    10669   BRSET ROTARYFDIGN,FEATURE1,FIREFD  
 9273 [05] 046805    10670   BRSET COILCBIT,COILSEL,ROT2CN  
 9276 [05] 066808    10671   BRSET COILDBIT,COILSEL,ROT2DN  
 9279 [03] 2026      10672   BRA DSLSA  
                     10673  ROT2CN:  
 927B [04] 1502      10674   BCLR WLED,PORTC  
 927D [04] 1202      10675   BSET COILB,PORTC  
 927F [03] 203A      10676   BRA CN_END  
                     10677  ROT2DN:  
 9281 [04] 1402      10678   BSET WLED,PORTC  
 9283 [04] 1202      10679   BSET COILB,PORTC  
 9285 [03] 2034      10680   BRA CN_END  
                     10681  NILS:  
 9287 [05] 006817    10682   BRSET COILABIT,COILSEL,DSLSA  
 928A [05] 026818    10683   BRSET COILBBIT,COILSEL,DSLSB  
 928D [05] 046819    10684   BRSET COILCBIT,COILSEL,DSLSC  
 9290 [05] 06681A    10685   BRSET COILDBIT,COILSEL,DSLSD  
 9293 [05] 08681B    10686   BRSET COILEBIT,COILSEL,DSLSE  
 9296 [05] 0A681C    10687   BRSET COILFBIT,COILSEL,DSLSF  
 9299 [03] 2020      10688   BRA CN_END  
                     10689  FIREFD:  
 929B [05] 046807    10690   BRSET COILCBIT,COILSEL,DSLSB  
 929E [05] 066808    10691   BRSET COILDBIT,COILSEL,DSLSC  
                     10692  DSLSA:  
 92A1 [04] 1002      10693   BSET COILA,PORTC  
 92A3 [03] 2016      10694   BRA CN_END  
                     10695  DSLSB:  
 92A5 [04] 1202      10696   BSET COILB,PORTC  
 92A7 [03] 2012      10697   BRA CN_END  
                     10698  DSLSC:  
 92A9 [04] 1402      10699   BSET WLED,PORTC  
 92AB [03] 200E      10700   BRA CN_END  
                     10701  DSLSD:  
 92AD [04] 1003      10702   BSET OUTPUT3,PORTD  
 92AF [03] 200A      10703   BRA CN_END  
                     10704  DSLSE:  
 92B1 [04] 1602      10705   BSET PIN10,PORTC  
 92B3 [03] 2006      10706   BRA CN_END  
                     10707  DSLSF:  
 92B5 [04] 1403      10708   BSET KNOCKIN,PORTD  
 92B7 [03] 2002      10709   BRA CN_END  
                     10710  DSLSX:  
 92B9 [04] 1200      10711   BSET IASC,PORTA  
                     10712  CN_END:  
                     10713  hrd_set:
 92BB [04] 1969      10714                  bclr    indwell,EnhancedBits4       ; turn it off so next
                     10715                                      ; sparktime fires coil
 92BD [04] 1760      10716                  bclr    sparkon,revlimbits  ; spark now on
                     10717  ;store pre-calculated spark time into timer and set it off
 92BF [03] B6FA      10718                  lda     SparkTargetH
 92C1 [03] B734      10719                  sta     T2CH1H
 92C3 [03] B6FB      10720                  lda     SparkTargetL
 92C5 [03] B735      10721                  sta     T2CH1L
                     10722  
 92C7 [04] 1F33      10723                  bclr    TOF,T2SC1   ; clear any pending interrupt
 92C9 [04] 1C33      10724                  bset    TOIE,T2SC1  ; Enable timer interrupt
                     10725  
 92CB [02] 8A        10726                  pulh
 92CC [07] 80        10727                  rti
                     10728  
                     10729  ;*set_saw_on:                               ; now set timer for SAW on period
                     10730                                      ; using sawh/l calculated in main loop
                     10731  
                     10732  ;Calculate width of SAW pulse
                     10733  ;grab current timer values - uses same variable as squirt section below. But no  cli  so ok
                     10734  ;*                lda     T2CNTL            ; unlatch low byte
                     10735  ;*                ldx     T2CNTH
                     10736  ;*                stx     T2CurrH           ; Save current counter value


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 80
MC68HC908GP32 User Bootloader


                     10737  ;*                lda     T2CNTL
                     10738  ;*                sta     T2CurrL           ; Save current counter value
                     10739  
                     10740  ;*                brclr   crank,engine,SAW_COUNTER
                     10741  ;*                lda     feature4_f
                     10742  ;*                bit     #multisparkb
                     10743  ;*                beq     SAW_COUNTER
                     10744  ;*;                brclr   multispark,feature4,SAW_COUNTER
                     10745  
                     10746  ; at crank we always send 2048us as calibration and multi-spark init
                     10747  ;*                clr     sawl
                     10748  ;*                mov     #$08,sawh
                     10749  
                     10750  ;Read the calculated width and store in timer
                     10751  ;*SAW_COUNTER:
                     10752  ;*                lda     sawl
                     10753  ;*                add     T2CurrL
                     10754  ;*                tax
                     10755  ;*                lda     sawh
                     10756  ;*                adc     T2CurrH
                     10757  ;*                sta     T2CH1H
                     10758  ;*                stx     T2CH1L
                     10759  
                     10760  ;*                bclr    SparkTrigg,Sparkbits      ; Clear spark trigg.
                     10761  ;*                                  ; Next time we get int turn off SAW
                     10762  
                     10763  ;*                bclr    TOF,T2SC1 ; clear any pending interrupt
                     10764  ;*                bset    TOIE,T2SC1        ; Enable timer interrupt
                     10765  
                     10766  ;*                brset   DUALEDIS,personality,set_edis2
                     10767  ;*                pulh
                     10768  ;*                rti
                     10769  ;*set_edis2:
                     10770  ;*                CalcDwellspk              ; set time before the other SAW starts
                     10771  ;*                pulh
                     10772  ;*                rti                       ; uses 0.1ms timer for 1/2 cycle time
                     10773  
                     10774  
                     10775  INT_SPARK_OFF:                              ; this is only used for EDIS so
                     10776                                      ; coilc has no meaning (yet!)
                     10777  ;*                brset   invspk,EnhancedBits4,InvSparkOff
                     10778  
                     10779  ;*                brset   REUSE_FIDLE,outputpins,stimef2
                     10780  ;*                brset   coilbbit,coilsel,stimeb2
                     10781  ;*                bclr    coila,portc       ; Set spark on
                     10782  ;*                bra     SparkOffDone
                     10783  ;*stimeb2:
                     10784  ;*                bclr    coilb,portc
                     10785  ;*                bra     SparkOffDone
                     10786  ;*stimef2:
                     10787  ;*                bclr    iasc,porta
                     10788  ;*                bra     SparkOffDone
                     10789  InvSparkOff:
                     10790  ;*                brset   REUSE_FIDLE,outputpins,isof2
 92CD [05] 026804    10791                  brset   coilbbit,coilsel,isob2
 92D0 [04] 1002      10792                  bset    coila,portc ; Set inverted spark on
 92D2 [03] 2006      10793                  bra     SparkOffDone
                     10794  isob2:
 92D4 [04] 1202      10795                  bset    coilb,portc
 92D6 [03] 2002      10796                  bra     SparkOffDone
                     10797  isof2:
 92D8 [04] 1200      10798                  bset    iasc,porta
                     10799  SparkOffDone:
 92DA [04] 115F      10800                  bclr    SparkTrigg,Sparkbits        ; No more sparks for this IRQ
 92DC [04] 1D33      10801                  bclr    TOIE,T2SC1  ; Disable interrupts
 92DE [02] 8A        10802                  pulh
 92DF [07] 80        10803                  rti
                     10804  *** end EDIS ***
                     10805  
                     10806  ***************************************************************************
                     10807  **
                     10808  ** IRQ - Input trigger for new pulse event
                     10809  **
                     10810  ** This line is connected to the input trigger (i.e TACH signal from ignition
                     10811  **  system), and schedules a new injector shot (injector actually opened in
                     10812  **  1/10 timer section above)
                     10813  **
                     10814  **  Wheel encoders now removed (020p2) and available as encoder???.s19
                     10815  ***************************************************************************
                     10816  ;as we don't get interrupted can safely use some of burner area
                     10817  ;but beware that this is non-zero page ram hence slower instructions.
                     10818  ;if enough ram may put back into ZP for a small speed increase
 92E0                10819  stX:         equ   itmp10          ; temp space used in Neon
 92E0                10820  stH:         equ   itmp11
 92E0                10821  stL:         equ   itmp12
                     10822  
 92E0                10823  cTimeHcp:    equ   itmp13         ; copy of predicted period
 92E0                10824  cTimeLcp:    equ   itmp14
                     10825  
 92E0                10826  T2CurrX:     equ   itmp15         ; value of T2 at start of handler
 92E0                10827  T2CurrH:     equ   itmp16
 92E0                10828  T2CurrL:     equ   itmp17
                     10829  
 92E0                10830  currtth14h:  equ   itmp18    ; 1/4 current tooth
 92E0                10831  currtth14l:  equ   itmp19    ; 1/4 current tooth
 92E0                10832  avgtth14h:   equ   itmp1a    ; 1/4 avg tooth
 92E0                10833  avgtth14l:   equ   itmp1b    ; 1/4 avg tooth
                     10834  
 92E0                10835  avgtth12h:   equ   itmp1c    ; 1/2 of avg tooth
 92E0                10836  avgtth12l:   equ   itmp1d    ; 1/2 of avg tooth
                     10837  
 92E0                10838  offsetstep:  equ   itmp1e    ; offset step (used by oddfire)
 92E0                10839  offsetang:   equ   itmp1f    ; offset angle (used by oddfire)
                     10840  
                     10841  DOSQUIRT:
 92E0 [02] 8B        10842          pshh
                     10843  ;First thing to do is read the current T2 value
                     10844  ;this should ensure the maximum spark accuracy. Delay value will be based on timer HERE
                     10845  ;rather than after all the other missing tooth calcs by the time we reach done_decode
 92E1 [03] B62D      10846          lda     T2CNTL                      ; Unlatch any previous reads
 92E3 [03] BE2C      10847          ldx     T2CNTH
 92E5 [04] CF0203    10848          stx     T2CurrH                     ; Save current counter value
 92E8 [03] B62D      10849          lda     T2CNTL
 92EA [04] C70204    10850          sta     T2CurrL                     ; Save current counter value
 92ED [03] B6AA      10851          lda     T2CNTX                  ;sw byte
 92EF [02] A300      10852          cpx     #0
 92F1 [03] 2604      10853          bne     no_rollchk
 92F3 [05] 036901    10854          brclr   roll2,EnhancedBits4,no_rollchk     ; we were't about to rollover
                     10855                                                     ; a few ms ago or byte already
                     10856                                                     ; cleared by handler - so skip
 92F6 [01] 4C        10857          inca                                    ; Missed a rollover so inc top byte
                     10858  no_rollchk:
 92F7 [04] C70202    10859          sta     T2CurrX
                     10860  
                     10861  ;new in 029e - surely we must be running if we got an IRQ
 92FA [04] 1042      10862          bset      running,engine    ; Set engine running value
                     10863  
                     10864  
                     10865  ;check for simulator first
                     10866  ;*        brset   whlsim,feature1,jwheelsim
                     10867  
                     10868  ;*        brset   MSNEON,personality,decode_neon
                     10869  ;*        brset   WHEEL,personality,jdecode_wheel
                     10870  ;set just single coil output
                     10871  ;*        clr     coilsel
                     10872  ;*        bset    coilabit,coilsel


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 81
MC68HC908GP32 User Bootloader


                     10873  ;*        jmp     done_decode               ; everything else that doesn't
                     10874                                      ; need wheel decoding
                     10875  
                     10876  jdecode_wheel:
                     10877  ;*        brset   wd_2trig,feature1,jdecode_wheel2
 92FC [03] CC92FF    10878          jmp   decode_wheel
                     10879  ;*jdecode_wheel2:
                     10880  ;*        jmp   decode_wheel2
                     10881  
                     10882  ;*jwheelsim:
                     10883  ;*        jmp   wheelsim
                     10884  
                     10885  ;*decode_neon:
                     10886  
                     10887  ;new - are we logging teeth?
                     10888  ;*        brclr   toothlog,EnhancedBits5,n_notlog
                     10889  ;*        ;we are logging so record something
                     10890  ;*        clrh
                     10891  ;*        ldx     VE_r+PAGESIZE-2
                     10892  ;*        lda     cTimeH
                     10893  ;*        sta     VE_r,x
                     10894  ;*        incx
                     10895  ;*        lda     cTimeL
                     10896  ;*        sta     VE_r,x
                     10897  ;*        incx
                     10898  ;*        cpx     #PAGESIZE-4
                     10899  ;*        blo     ntl
                     10900  ;*        clrx
                     10901  ;*        lda     numteeth_f
                     10902  ;*        cmp     #23T                      ; hard coded lowres/highres
                     10903                                      ; transition (was 20T)
                     10904  ;*        bhi     nth
                     10905  ;*        lda     #1                      ; 1 = 0.1ms units
                     10906  ;*        bra     nts
                     10907  ;*nth:
                     10908  ;*        clra                            ; 0 = 1us units
                     10909  ;*nts:
                     10910  ;*        sta     VE_r+PAGESIZE-1
                     10911  ;*ntl:
                     10912  ;*        stx     VE_r+PAGESIZE-2
                     10913  ;*n_notlog:
                     10914  
                     10915  ;*        bclr    rise,sparkbits            ; reset flag so we can detect
                     10916                                      ; next rising IRQ edge
                     10917  ; 020r3 - do all decoding using 0.1ms timer, count the short teeth
                     10918  ; (0.2ms wide at 8000rpm)
                     10919  ;use lowres timer for calcs
                     10920  ;cTime is zero page space for faster calcs, holds time since last tooth
                     10921  ;sH/L is temp storage as we are about to clear lowres
                     10922  ;*        lda     lowresL
                     10923  ;*        sta     stL
                     10924  ;*        sta     cTimeL
                     10925  ;*        lda     lowresH
                     10926  ;*        sta     stH
                     10927  ;*        sta     cTimeH
                     10928  
                     10929  ;*        clr     lowresL                   ; reset to zero ready for next 0.1ms int
                     10930  ;*        clr     lowresH
                     10931  
                     10932  ;*tooth_sync:                               ; ignore first few pulses
                     10933  ;*        brclr   6,wheelcount,tooth_decode2        ; if bit 6 clr then we've
                     10934  ;*                                  ; done holdoff
                     10935  ;*        dec     wheelcount
                     10936  ;*        bne     tooth_rti
                     10937  ;*        bclr    6,wheelcount
                     10938  ;*tooth_rti:
                     10939  ;save gap between teeth
                     10940  ;*        lda     stL
                     10941  ;*        sta     stLp
                     10942  ;*        lda     stH
                     10943  ;*        sta     stHp
                     10944  ;*        pulh
                     10945  ;*        rti
                     10946  
                     10947  ;*tooth_decode2:
                     10948  
                     10949  ;*        bclr    trigret,SparkBits
                     10950  ;*        brset   7,wheelcount,tooth_decode3        ; bit 7 is !sync.
                     10951                                      ; if not synced then look for
                     10952                                      ; the long trigger
                     10953  ;*        lda     wheelcount                ; ignore the three short pulses
                     10954                                      ; after primary trigger
                     10955  ;*        beq     tooth_decode3             ; =0
                     10956  ;*        dec     wheelcount
                     10957  ;*        bne     tooth_rti         ; >0
                     10958  ;*        bset    trigret,SparkBits ; =0, set trigger return
                     10959  ;*        bra     tooth_rti
                     10960  ;*tooth_decode3:
                     10961  ;*        ; divide this cycle time 2
                     10962  ;*        lsr     cTimeH
                     10963  ;*        ror     cTimeL    ; was rol - typo!
                     10964  
                     10965          ;now see if this period/4 > previous
                     10966  ;*        lda     cTimeH
                     10967  ;*        cmp     stHp
                     10968  ;*        blo     tooth_rti
                     10969  ;*        bhi     tooth_found
                     10970  ;*        lda     cTimeL
                     10971  ;*        cmp     stLp
                     10972  ;*        bhi     tooth_found
                     10973  ;*        bra     tooth_rti
                     10974  
                     10975  ;*tooth_found:  ; this is when we've found the first tooth of the sequence
                     10976  
                     10977  ;*        mov     #3T,wheelcount            ; clear !sync bit in process
                     10978  ;move save lowres values into "previous" variable
                     10979  ;*        lda     stL
                     10980  ;*        sta     stLp
                     10981  ;*        lda     stH
                     10982  ;*        sta     stHp
                     10983  
                     10984  ;calculate how long first high pulse was to determine coil pack
                     10985  ; using SparkTemp to store rising edge time of "irq" to conserve RAM
                     10986  ; The variable should be safe as it is only used in this interrupt handler
                     10987  ; The 0.1ms section monitors the irq line and stores the lowresH/L
                     10988  ; value into SparkTemp if it detects a rising edge.
                     10989  ; calc how long ago the input went high sparktemp = current - sparktemp
                     10990  
                     10991  ;*        lda     stL
                     10992  ;*        sub     SparkTempL
                     10993  ;*        sta     SparkTempL
                     10994  ;*        lda     stH
                     10995  ;*        sbc     SparkTempH
                     10996  ;*        sta     SparkTempH
                     10997  
                     10998  ;*        lsr     cTimeH
                     10999  ;*        ror     cTimeL
                     11000  
                     11001  ;See if the high pulse > iTimet/4
                     11002  ;*        lda     SparkTempH
                     11003  ;*        cmp     cTimeH
                     11004  ;*        bhi     coil_detecta
                     11005  ;*        blo     coil_detectb
                     11006  ;*        lda     SparkTempL
                     11007  ;*        cmp     cTimeL
                     11008  ;*        bhi     coil_detecta


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 82
MC68HC908GP32 User Bootloader


                     11009  ;*        bra     coil_detectb
                     11010  
                     11011  ; sequence detection
                     11012  ;
                     11013  ;*coil_detecta:
                     11014  ;*        brset   coilerr,revlimbits,set_a_clr
                     11015  ;*        brset   coilbbit,coilsel,set_a_clr        ; we are expecting this
                     11016  ;*        bset    coilerr,revlimbits        ; out of sync once, so ignore
                     11017                                      ; and follow instinct
                     11018  ;*        bra     set_b_detect
                     11019  ;*set_a_clr:
                     11020  ;*        bclr    coilerr,revlimbits        ; reset error bit
                     11021  ;*set_a_detect:
                     11022  ;*        clr     coilsel
                     11023  ;*        bset    coilabit,coilsel
                     11024  ;*        bra     j_done_cd
                     11025  
                     11026  ;*coil_detectb:
                     11027  ;*        brset   coilerr,revlimbits,set_b_clr
                     11028  ;*        brset   coilabit,coilsel,set_b_clr        ; we are expecting this
                     11029  ;*        bset    coilerr,revlimbits        ; out of sync once, so ignore
                     11030                                      ; and follow instinct
                     11031  ;*        bra     set_a_detect
                     11032  ;*set_b_clr:
                     11033  ;*        bclr    coilerr,revlimbits        ; reset error bit
                     11034  ;*set_b_detect:
                     11035  ;*        clr     coilsel
                     11036  ;*        bset    coilbbit,coilsel
                     11037  
                     11038  ;*j_done_cd:  jmp   done_decode
                     11039  
                     11040  ****************************************************************************
                     11041  **  Wheel simulator. Allows any special decoders to be tested on the stim
                     11042  **  doesn't look for any pattern, just cycles through outputs. Trigger
                     11043  **  return WILL NOT WORK
                     11044  **  Flash variable determines how many outputs, use wheelcount as counter
                     11045  ****************************************************************************
                     11046  ;*wheelsim:
                     11047  ;*       lda      wheelcount
                     11048  ;*       inca
                     11049  ;*       cmp      whlsimcnt
                     11050  ;*       bne      whlsimdecode
                     11051  ;*whlsimreset:
                     11052  ;*       clra
                     11053  ;*whlsimdecode:
                     11054  ;*       sta      wheelcount
                     11055  ;*       clr      coilsel
                     11056  ;*;       cbeqa    #0,wsda
                     11057  ;*       cbeqa    #1,wsdb
                     11058  ;*       cbeqa    #2,wsdc
                     11059  ;*       cbeqa    #3,wsdd
                     11060  ;*       cbeqa    #4,wsde
                     11061  ;*       cbeqa    #5,wsdf
                     11062  ;*;wsda:
                     11063  ;*       bset     coilabit,coilsel
                     11064  ;*       bra      wheelsimdone
                     11065  ;*wsdb:
                     11066  ;*       bset     coilbbit,coilsel
                     11067  ;*       bra      wheelsimdone
                     11068  ;*wsdc:
                     11069  ;*       bset     coilcbit,coilsel
                     11070  ;*       bra      wheelsimdone
                     11071  ;*wsdd:
                     11072  ;*       bset     coildbit,coilsel
                     11073  ;*       bra      wheelsimdone
                     11074  ;*wsde:
                     11075  ;*       bset     coilebit,coilsel
                     11076  ;*       bra      wheelsimdone
                     11077  ;*wsdf:
                     11078  ;*       bset     coilfbit,coilsel
                     11079  ;*;       bra      wheelsimdone
                     11080  
                     11081  ;*wheelsimdone:
                     11082  ;*       jmp      done_decode
                     11083  ****************************************************************************
                     11084  **  Wheel decoder 2. No missing teeth but a second wheel with "reset" tabs
                     11085  **
                     11086  **  The 0.1ms section looks out for the second pulse but we check here too
                     11087  **  on the rising edge the wheelcount is reset to zero so the next real pulse
                     11088  **  is tooth no.1
                     11089  **  This is what the Mazda and Toyota guys are after.
                     11090  **  Could also be used to do COP on a 4cyl by mounting the "reset" tab on the
                     11091  **  cam and having two tabs on the crank.
                     11092  ****************************************************************************
                     11093  ;*decode_wheel2:
                     11094  
                     11095  ;repeat check in here, in case two triggers come at once
                     11096  ;on rising edge of input reset wheelcount to zero
                     11097  ;*      brset   trigger2,EnhancedBits6,no_wd_trig2 ; already found
                     11098  
                     11099  ;*      lda     dtmode_f
                     11100  ;*      bit     #trig2risefallb
                     11101  ;*      bne     wd_risefall2   ; do rising and falling
                     11102  ;*      bit     #trig2fallb
                     11103  ;*      bne     wd_inv2
                     11104  
                     11105  ;on rising edge of input reset wheelcount to zero
                     11106  ;*      brset   rise,sparkbits,no_wd_trig2 ; already high so bail out
                     11107  ;not already in high state so see if pin has been asserted
                     11108  ;*      brclr   pin11,portc,no_wd_trig2   ; inactive
                     11109  
                     11110  ;we've found a rising edge of pin11
                     11111  ;*      bset    rise,sparkbits           ; this bit used to monitor the edge of the input
                     11112  ;*      bra     wd2_2_flag               ; flag the trigger
                     11113  
                     11114  ;*wd_inv2:
                     11115  ;on falling edge of input reset wheelcount to zero
                     11116  ;*      brclr   rise,sparkbits,no_wd_trig2 ; already low so bail out
                     11117  ;*      brset   pin11,portc,no_wd_trig2
                     11118  
                     11119  ;we've found a falling edge of pin11
                     11120  ;*      bclr    rise,sparkbits           ; this bit used to monitor the edge of the input
                     11121  ;*      bra     wd2_2_flag               ; flag the trigger
                     11122  
                     11123  ;*wd_risefall2:
                     11124  ;on rising and falling edge of input reset wheelcount to zero
                     11125  ;*      brset   rise,sparkbits,wd2_rf1 ; was high
                     11126  ;*      brclr   pin11,portc,no_wd_trig2   ; still low
                     11127  ;*      bset    rise,sparkbits
                     11128  ;*      bra     wd2_2_flag
                     11129  
                     11130  ;*wd2_rf1:
                     11131  ;*      brset   pin11,portc,no_wd_trig2 ; still high
                     11132  ;*      bclr    rise,sparkbits
                     11133  ;*;      bra     wd2_2_flag               ; flag the trigger
                     11134  
                     11135  ;*wd2_2_flag:
                     11136  ;*      bset    trigger2,EnhancedBits6   ; flag the trigger
                     11137  
                     11138  ;*no_wd_trig2:
                     11139  
                     11140  ;are we doing missing tooth or non-missing tooth with the 2nd trigger
                     11141  ;*      lda     feature4_f
                     11142  ;*      bit     #miss2ndb
                     11143  ;*      bne     decode_wheel    ; miss + 2nd
                     11144  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 83
MC68HC908GP32 User Bootloader


                     11145  ;new - are we logging teeth?
                     11146  ;*        brclr   toothlog,EnhancedBits5,w2dec_notlog
                     11147          ;we are logging so record something
                     11148  ;*        clrh
                     11149  ;*        ldx     VE_r+PAGESIZE-2
                     11150  ;*        lda     cTimeH
                     11151  ;*        sta     VE_r,x
                     11152  ;*        incx
                     11153  ;*        lda     cTimeL
                     11154  ;*        sta     VE_r,x
                     11155  ;*        incx
                     11156  ;*        cpx     #PAGESIZE-4
                     11157  ;*        blo     wd2tl
                     11158  ;*        clrx
                     11159  ;*        lda     numteeth_f
                     11160  ;*        cmp     #23T                      ; hard coded lowres/highres
                     11161                                      ; transition (was 20T)
                     11162  ;*        bhi     wd2th
                     11163  ;*        lda     #1                      ; 1 = 0.1ms units
                     11164  ;*        bra     wd2ts
                     11165  ;*wd2th:
                     11166  ;*        clra                            ; 0 = 1us units
                     11167  ;*wd2ts:
                     11168  ;*        sta     VE_r+PAGESIZE-1
                     11169  ;*wd2tl:
                     11170  ;*        stx     VE_r+PAGESIZE-2
                     11171  ;*w2dec_notlog:
                     11172  
                     11173  ;this is "real" start of 2nd trigger.
                     11174  ;see if 2nd trigger came in since last time we were in here
                     11175  ;*      brclr   trigger2,EnhancedBits6,cksync2      ; no it didn't
                     11176  ;*      bclr    trigger2,EnhancedBits6              ; clear it
                     11177  ;*      bset    wsync,EnhancedBits6
                     11178  ;*      clr     wheelcount
                     11179  ;*      bra     no_wd_trig3
                     11180  ;*cksync2:
                     11181  ;*      brset   wsync,EnhancedBits6,no_wd_trig3
                     11182  ;*      jmp     w_rti             ; go to exit for normal wheel decoder
                     11183  
                     11184  ;*no_wd_trig3:
                     11185  
                     11186  ;*      lda     wheelcount
                     11187  ;*      cmp     numteeth_f
                     11188  ;*      blo     wd2_cont
                     11189        ;we should have received a "reset" tab by now.. declare unsynced and
                     11190        ;wait for another reset tab
                     11191  ;*      bclr    wsync,EnhancedBits6
                     11192  ;*      clr     wheelcount
                     11193  ;*      jmp     w_rti             ; go to exit for normal wheel decoder
                     11194  
                     11195  ;*wd2_cont:
                     11196  ;*      inc     wheelcount
                     11197  ;*      jmp     wc_op             ; jump to wheel decoder o/p selection
                     11198  ****************************************************************************
                     11199  **  generic wheel decoder
                     11200  **  -1 Missing tooth when iTimet > 1.5 * iTimep
                     11201  **  -2 Missing teeth when iTimet > 1.5 * iTimep (was 2.5*) (changed 029k)
                     11202  **  We don't get here until we've had a few teeth. When we've found
                     11203  ** missing tooth then clr top bit of wheelcount
                     11204  **
                     11205  ****************************************************************************
                     11206  decode_wheel:
 92FF [04] C6E05A    11207          lda     numteeth_f
 9302 [02] A117      11208          cmp     #23T                        ; hard coded lowres/highres
                     11209                                      ; transition (was 20T)
 9304 [03] 2208      11210          bhi     w_high
                     11211  ;XXXX
                     11212  ;        brclr    crank,engine,w_high  ;; XXXX try this to get rpm below 100
                     11213  w_low:
                     11214  ;as per Neon, use cTimeH/L where poss as it is zp
                     11215          ;use lowres timer for calcs
 9306 [05] 4EF6C0    11216          mov     lowresL,cTimeL
 9309 [05] 4EF5BF    11217          mov     lowresH,cTimeH
                     11218  
 930C [03] 2027      11219          bra     w_decode
                     11220  
                     11221  w_high:
 930E [03] B64D      11222          lda     rpm
 9310 [03] 2615      11223          bne     w_high_fast
                     11224          ;check for very slow rpm that will cause timer overflow.
                     11225          ;-1 does *1.5 so max time is 65/1.5 = 43ms  -> 38rpm on 36-1
                     11226          ;-2 does *2.5                       = 26ms  -> 38rpm on 60-2
                     11227          ;if this check omitted then wacky rpm displayed when really very slow
                     11228          ;65ms = $28F x0.1ms
                     11229  ;029q3 put it back in
 9312 [03] B6F5      11230          lda     lowresH
 9314 [02] A102      11231          cmp     #2
 9316 [03] 250F      11232          blo     w_high_fast  ; fast enough
 9318 [03] 2206      11233          bhi     j_lost_sync2        ; must re-sync - too slow
 931A [03] B6F6      11234          lda     lowresL             ; lowresH=2, so check low byte
 931C [02] A188      11235          cmp     #$88                ; give a little leeway (64.8ms)
 931E [03] 2507      11236          blo     w_high_fast         ; if less then ok, otherwise re-sync
                     11237  ;029e. Shouldn't check against 26ms then? Try 25.6ms as it is so easy.
                     11238  ;X        lda     lowresH
                     11239  ;X        beq     w_high_fast  ; fast enough
                     11240  j_lost_sync2:
 9320 [03] 3FF6      11241          clr     lowresL     ; always reset the lowres ready for next int
 9322 [03] 3FF5      11242          clr     lowresH
 9324 [03] CC949E    11243          jmp     lost_sync_w
                     11244  w_high_fast:
                     11245         ;T2 already read at start of handler
 9327 [04] C60204    11246          lda     T2CurrL
 932A [03] B0C7      11247          sub     T2PrevL                     ; Calculate cycle time
 932C [03] B7C0      11248          sta     cTimeL
 932E [04] C60203    11249          lda     T2CurrH
 9331 [03] B2C6      11250          sbc     T2PrevH
 9333 [03] B7BF      11251          sta     cTimeH
                     11252  
                     11253  ;now try to decode pattern
                     11254  w_decode:
                     11255  ;new - are we logging teeth?
 9335 [05] 056A27    11256          brclr   toothlog,EnhancedBits5,w_dec_notlog
                     11257          ;we are logging so record something
 9338 [01] 8C        11258          clrh
 9339 [04] CE01CD    11259          ldx     VE_r+PAGESIZE-2
 933C [03] B6BF      11260          lda     cTimeH
 933E [04] D70112    11261          sta     VE_r,x
 9341 [01] 5C        11262          incx
 9342 [03] B6C0      11263          lda     cTimeL
 9344 [04] D70112    11264          sta     VE_r,x
 9347 [01] 5C        11265          incx
 9348 [02] A3B9      11266          cpx     #PAGESIZE-4
 934A [03] 2510      11267          blo     wdtl
 934C [01] 5F        11268          clrx
 934D [04] C6E05A    11269          lda     numteeth_f
 9350 [02] A117      11270          cmp     #23T                        ; hard coded lowres/highres
                     11271                                      ; transition (was 20T)
 9352 [03] 2204      11272          bhi     wdth
 9354 [02] A601      11273          lda     #1                      ; 1 = 0.1ms units
 9356 [03] 2001      11274          bra     wdts
                     11275  wdth:
 9358 [01] 4F        11276          clra                            ; 0 = 1us units
                     11277  wdts:
 9359 [04] C701CE    11278          sta     VE_r+PAGESIZE-1
                     11279  wdtl:
 935C [04] CF01CD    11280          stx     VE_r+PAGESIZE-2


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 84
MC68HC908GP32 User Bootloader


                     11281  w_dec_notlog:
                     11282  
                     11283  ; added in 029p - always use 024s9 during cranking
 935F [05] 024224    11284          brset   crank,engine,w_decode_ok     ; do not do this while cranking
                     11285  
                     11286  ;Ryan reports problems with the NEW routine below, so now config option to use 024s9
                     11287  ;style decoder instead. This way can swap versions on the fly
                     11288  ;*        lda     feature6_f
                     11289  ;*        bit     #wheel_oldb
                     11290  ;*        beq     decoder_new ; 0 = new decoder
                     11291  
                     11292          ;bypass the tooth false trigger
                     11293          ;load up old vars into new ones
                     11294  ;*;        mov     stHp,avgtoothh   ; now the same thing
                     11295  ;*;        mov     stLp,avgtoothl
                     11296  ;*        bra     w_decode_ok
                     11297  
                     11298  decoder_new:
                     11299  ;NEW
                     11300  ;calculate half of average tooth time
 9362 [03] B6F3      11301          lda     avgtoothh
 9364 [01] 44        11302          lsra
 9365 [04] C70209    11303          sta     avgtth12h
 9368 [03] B6F4      11304          lda     avgtoothl
 936A [01] 46        11305          rora
 936B [04] C7020A    11306          sta     avgtth12l
                     11307  
 936E [05] 046B15    11308          brset   whold,EnhancedBits6,w_decode_ok ; still in holdoff, so no check
 9371 [05] 036B12    11309          brclr   wsync,EnhancedBits6,w_decode_ok ; not synced yet, so no check
                     11310  ;check to see if obvious false trigger
 9374 [03] B6BF      11311          lda     cTimeH
 9376 [04] C10209    11312          cmp     avgtth12h  ; divided by two before storage
 9379 [03] 220B      11313          bhi     w_decode_ok
 937B [03] 2507      11314          blo     w_decode_false
 937D [03] B6C0      11315          lda     cTimeL
 937F [04] C1020A    11316          cmp     avgtth12l
 9382 [03] 2202      11317          bhi     w_decode_ok
                     11318  
                     11319  w_decode_false:
 9384 [02] 8A        11320          pulh
 9385 [07] 80        11321          rti    ; get out of here - false trigger
                     11322  
                     11323  w_decode_ok:
                     11324  ;END NEW
 9386 [03] 3FF6      11325          clr     lowresL     ; always reset the lowres ready for next int
 9388 [03] 3FF5      11326          clr     lowresH
                     11327          ; ignore first few pulses
 938A [05] 056B1E    11328          brclr   whold,EnhancedBits6,w_decode2       ; if bit 6 clr then we've done holdoff
 938D [04] 3AE6      11329          dec     wheelcount
 938F [03] B6E6      11330          lda     wheelcount
 9391 [02] A43F      11331          and     #$3F               ; ignore top bits during holdoff downcount
                     11332                                     ; keeps wheelcount compatible with Neon mode
 9393 [03] 2602      11333          bne     w_rti
 9395 [04] 156B      11334          bclr    whold,EnhancedBits6
                     11335  w_rti:
 9397 [04] C60203    11336          lda     T2CurrH
 939A [03] B7C6      11337          sta     T2PrevH             ; Make current value tooth last
 939C [04] C60204    11338          lda     T2CurrL
 939F [03] B7C7      11339          sta     T2PrevL
                     11340  
                     11341  ;this section only runs during tooth holdoff - just store last tooth into average
 93A1 [03] B6C0      11342          lda     cTimeL
 93A3 [03] B7F4      11343          sta     avgtoothl
 93A5 [03] B6BF      11344          lda     cTimeH
 93A7 [03] B7F3      11345          sta     avgtoothh
 93A9 [02] 8A        11346          pulh
 93AA [07] 80        11347          rti
                     11348  
                     11349  w_decode2:
                     11350  ;NEW... don't just use previous tooth - use average instead
                     11351  
                     11352  ;        brset   WHEEL2,personality,w_dec2m2  commented 029k
                     11353          ;mult iTimeH/Lp * .5
 93AB [03] B6F3      11354          lda     avgtoothh
 93AD [01] 44        11355          lsra
 93AE [03] B7C1      11356          sta     SparkTempH
 93B0 [03] B6F4      11357          lda     avgtoothl
 93B2 [01] 46        11358          rora
 93B3 [03] B7C2      11359          sta     SparkTempL
                     11360          ; add iTimep so * 1.5 for -1 teeth
 93B5 [03] B6C2      11361          lda     SparkTempL
 93B7 [03] BBF4      11362          add     avgtoothl
 93B9 [03] B7C2      11363          sta     SparkTempL
 93BB [03] B6C1      11364          lda     SparkTempH
 93BD [03] B9F3      11365          adc     avgtoothh
 93BF [03] B7C1      11366          sta     SparkTempH
                     11367  ;        bra     w_comp
                     11368  ;
                     11369  ;w_dec2m2:
                     11370  ;        ; do * 2, for -2 teeth
                     11371  ;        lda     avgtoothl
                     11372  ;        lsla
                     11373  ;        sta     SparkTempL
                     11374  ;        lda     avgtoothh
                     11375  ;        rola
                     11376  ;        sta     SparkTempH
                     11377  
                     11378  w_comp:
                     11379  ; now compare current hires time
 93C1 [03] B6BF      11380          lda     cTimeH
 93C3 [03] B1C1      11381          cmp     SparkTempH
 93C5 [03] 220A      11382          bhi     is_miss
 93C7 [03] 2517      11383          blo     not_miss
 93C9 [03] B6C0      11384          lda     cTimeL
 93CB [03] B1C2      11385          cmp     SparkTempL
 93CD [03] 2202      11386          bhi     is_miss
 93CF [03] 200F      11387          bra     not_miss
                     11388  
                     11389  is_miss:
 93D1 [03] 3FE6      11390          clr     wheelcount          ; declare we are synced and
                     11391                                      ; reset counter
                     11392  ;now check if 2nd trigger input is set, if so start 2nd revolution at num teeth
                     11393  ; i.e. on a 60-2,  0-359 deg =  0-59
                     11394  ;                360-719 deg = 60-119
                     11395  
 93D3 [05] 076B08    11396          brclr   trigger2,EnhancedBits6,not_2ndmiss
 93D6 [04] C6E05A    11397          lda     numteeth_f   ; from 028c now holds 2 revs number (i.e. 60-2 -> 120)
 93D9 [01] 44        11398          lsra
 93DA [03] B7E6      11399          sta     wheelcount
 93DC [04] 176B      11400          bclr    trigger2,EnhancedBits6    ; clear flag
                     11401  not_2ndmiss:
 93DE [04] 126B      11402          bset    wsync,EnhancedBits6
                     11403  ;*        brclr   WHEEL2,personality,not_miss
                     11404  ;*        inc     wheelcount
                     11405  not_miss:
                     11406  
 93E0 [05] 024203    11407          brset   crank,engine,tooth_noavg    ; do not use 025 style during cranking
                     11408  ;check if using old decoder
 93E3 [04] C6E05C    11409          lda     feature6_f
                     11410  ;*        bit     #wheel_oldb
                     11411  ;*        beq     tooth_avg
                     11412  
                     11413  tooth_noavg:
                     11414  ;like old method, just store previoud period
 93E6 [03] B6BF      11415          lda     cTimeH
 93E8 [03] B7F3      11416          sta     avgtoothh


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 85
MC68HC908GP32 User Bootloader


 93EA [03] B6C0      11417          lda     cTimeL
 93EC [03] B7F4      11418          sta     avgtoothl
 93EE [03] 2050      11419          bra     not_miss_skip ; 1 = old decoder
                     11420  
                     11421  tooth_avg:
                     11422  ;NEW
                     11423  ;update average tooth count
                     11424  ;new average = 3/4 old avg + 1/4 current tooth
                     11425  ;
                     11426  ;get 1/4 current tooth
 93F0 [03] B6BF      11427          lda     cTimeH
 93F2 [01] 44        11428          lsra
 93F3 [04] C70205    11429          sta     currtth14h
 93F6 [03] B6C0      11430          lda     cTimeL
 93F8 [01] 46        11431          rora
 93F9 [04] C70206    11432          sta     currtth14l
 93FC [04] C60205    11433          lda     currtth14h
 93FF [01] 44        11434          lsra
 9400 [04] C70205    11435          sta     currtth14h
 9403 [04] C60206    11436          lda     currtth14l
 9406 [01] 46        11437          rora
 9407 [04] C70206    11438          sta     currtth14l
                     11439  ;get 1/4 avg tooth
 940A [03] B6F3      11440          lda     avgtoothh
 940C [01] 44        11441          lsra
 940D [04] C70207    11442          sta     avgtth14h
 9410 [03] B6F4      11443          lda     avgtoothl
 9412 [01] 46        11444          rora
 9413 [04] C70208    11445          sta     avgtth14l
 9416 [04] C60207    11446          lda     avgtth14h
 9419 [01] 44        11447          lsra
 941A [04] C70207    11448          sta     avgtth14h
 941D [04] C60208    11449          lda     avgtth14l
 9420 [01] 46        11450          rora
 9421 [04] C70208    11451          sta     avgtth14l
                     11452  ;avg tooth - 1/4 avg tooth
 9424 [03] B6F4      11453          lda     avgtoothl
 9426 [04] C00208    11454          sub     avgtth14l
 9429 [03] B7F4      11455          sta     avgtoothl
 942B [03] B6F3      11456          lda     avgtoothh
 942D [04] C20207    11457          sbc     avgtth14h
 9430 [03] B7F3      11458          sta     avgtoothh
                     11459  ;3/4 avg tooth + 1/4 new tooth
 9432 [03] B6F4      11460          lda     avgtoothl
 9434 [04] CB0206    11461          add     currtth14l
 9437 [03] B7F4      11462          sta     avgtoothl
 9439 [03] B6F3      11463          lda     avgtoothh
 943B [04] C90205    11464          adc     currtth14h
 943E [03] B7F3      11465          sta     avgtoothh
                     11466  ;END NEW
                     11467  not_miss_skip:
 9440 [05] 036B0F    11468          brclr   wsync,EnhancedBits6,jretw  ; if non synced then wheelcount is meaningless
 9443 [04] 3CE6      11469          inc     wheelcount
 9445 [03] B6E6      11470          lda     wheelcount
 9447 [04] C1E05A    11471          cmp     numteeth_f
 944A [03] 2303      11472          bls     not_miss_ok
 944C [03] CC949E    11473          jmp     lost_sync_w
                     11474  not_miss_ok:
 944F [05] 026B03    11475          brset   wsync,EnhancedBits6,wc_op
                     11476  jretw:
 9452 [03] CC9486    11477          jmp     ret_w
                     11478  wc_op:
                     11479  ;see if our tooth matches the user input trigger point
 9455 [03] B6E6      11480          lda     wheelcount
                     11481  ;*        brclr   nextcyl,EnhancedBits4,wc_op2
                     11482  ;*        brclr   wspk,EnhancedBits4,wc_op2   ; if not multi output doesn't matter
                     11483  
                     11484  ;if running next-cyl and wheel decoder we would send running output to the
                     11485  ;wrong coil unless we take this action here...
                     11486  ;(doesn't work?)
                     11487  
                     11488  ;check if 4th spark output in use
                     11489  ;*                brset   out3sparkd,feature2,wdnc4
                     11490  ;check if 3rd spark output in use
                     11491  ;don't check for 2nd output, wouldn't have got here otherwise
                     11492  ;*                brclr   REUSE_LED18,outputpins,wdnc2    ; want 1 } spark c
                     11493  ;*                brclr   REUSE_LED18_2,outputpins,wdnc2  ; want 1 }
                     11494  ;*wdnc3:
                     11495  ;*        cmp     trig1_f
                     11496  ;*        beq     w_trig2
                     11497  ;*        cmp     trig2_f
                     11498  ;*        beq     w_trig3
                     11499  ;*        cmp     trig3_f
                     11500  ;*        beq     w_trig1
                     11501  ;*        jmp     wc_op3
                     11502  ;*wdnc4:
                     11503  ;*        cmp     trig1_f
                     11504  ;*        beq     w_trig2
                     11505  ;*        cmp     trig2_f
                     11506  ;*        beq     w_trig3
                     11507  ;*        cmp     trig3_f
                     11508  ;*        beq     w_trig4
                     11509  ;*        cmp     trig4_f
                     11510  ;*        beq     w_trig1
                     11511  ;*        jmp     wc_op3
                     11512  ;*wdnc2:
                     11513  ;*        cmp     trig1_f
                     11514  ;*        beq     w_trig2
                     11515  ;*        cmp     trig2_f
                     11516  ;*        beq     w_trig1
                     11517  ;*        jmp     wc_op3
                     11518  
                     11519  
                     11520  wc_op2:
                     11521  ; decode multiple outputs
 9457 [04] C1E019    11522          cmp     trig1_f
 945A [03] 2717      11523          beq     w_trig1
 945C [04] C1E01A    11524          cmp     trig2_f
 945F [03] 2719      11525          beq     w_trig2
 9461 [04] C1E01B    11526          cmp     trig3_f
                     11527  ;*        beq     w_trig3
                     11528  ;*        cmp     trig4_f
                     11529  ;*        beq     w_trig4
                     11530  ;*        cmp     trig5_f
                     11531  ;*        beq     w_trig5
                     11532  ;*        cmp     trig6_f
                     11533  ;*        beq     w_trig6
                     11534  
                     11535  wc_op3:
 9464 [05] 0A6A1F    11536      brset   rsh_r,EnhancedBits5,ret_w ; don't check if doing trailing
 9467 [04] C1E01D    11537          cmp     trig1ret_f
 946A [03] 2726      11538          beq     w_trigret1
 946C [04] C1E01E    11539          cmp     trig2ret_f
 946F [03] 2727      11540          beq     w_trigret2
                     11541  ;*        cmp     trig3ret_f
                     11542  ;*        beq     w_trigret3
                     11543  ;*        cmp     trig4ret_f
                     11544  ;*        beq     w_trigret4
                     11545  ;*        cmp     trig5ret_f
                     11546  ;*        beq     w_trigret5
                     11547  ;*        cmp     trig6ret_f
                     11548  ;*        beq     w_trigret6
 9471 [03] 2013      11549          bra     ret_w
                     11550  
                     11551  w_trig1:
 9473 [03] 3F68      11552          clr     coilsel


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 86
MC68HC908GP32 User Bootloader


 9475 [04] 1068      11553          bset    coilabit,coilsel
 9477 [03] CC9517    11554          jmp     w_store2
                     11555  
                     11556  w_trig2:
 947A [05] 0962F6    11557          brclr   REUSE_LED19,outputpins,w_trig1      ; if spark B not defined
                     11558                                      ; then just one o/p
 947D [03] 3F68      11559          clr     coilsel
 947F [04] 1268      11560          bset    coilbbit,coilsel
 9481 [03] CC9517    11561          jmp     w_store2
                     11562  
                     11563  ;*w_trig3:
                     11564  ;*        brclr   REUSE_LED19,outputpins,w_trig1
                     11565  ;*        clr     coilsel
                     11566  ;*        bset    coilcbit,coilsel
                     11567  ;*        jmp     w_store2
                     11568  
                     11569  ;*w_trig4:
                     11570  ;*        brclr   REUSE_LED19,outputpins,w_trig1
                     11571  ;*        clr     coilsel
                     11572  ;*        bset    coildbit,coilsel
                     11573  ;*        jmp     w_store2
                     11574  
                     11575  ;*w_trig5:
                     11576  ;*        brclr   REUSE_LED19,outputpins,w_trig1
                     11577  ;*        clr     coilsel
                     11578  ;*        bset    coilebit,coilsel
                     11579  ;*        jmp     w_store2
                     11580  
                     11581  ;*w_trig6:
                     11582  ;*        brclr   REUSE_LED19,outputpins,w_trig1
                     11583  ;*        clr     coilsel
                     11584  ;*        bset    coilfbit,coilsel
                     11585  ;*        jmp     w_store2
                     11586  
                     11587  ret_w2:
 9484 [04] 1C5F      11588          bset    trigret,SparkBits
                     11589  
                     11590  ret_w:
 9486 [04] C60203    11591          lda     T2CurrH
 9489 [03] B7C6      11592          sta     T2PrevH             ; Make current value tooth last
 948B [04] C60204    11593          lda     T2CurrL
 948E [03] B7C7      11594          sta     T2PrevL
 9490 [02] 8A        11595          pulh
 9491 [07] 80        11596          rti
                     11597  
                     11598  ; now the "trigger return" tooth for cranking timing
                     11599  w_trigret1:
 9492 [03] 3F68      11600          clr     coilsel
 9494 [04] 1068      11601          bset    coilabit,coilsel
 9496 [03] 20EC      11602          bra     ret_w2
                     11603  
                     11604  w_trigret2:
                     11605  ;*        brclr   REUSE_LED19,outputpins,w_trigret1 ; if spark B not
                     11606                                      ; defined then just one o/p
 9498 [03] 3F68      11607          clr     coilsel
 949A [04] 1268      11608          bset    coilbbit,coilsel
 949C [03] 20E6      11609          bra     ret_w2
                     11610  
                     11611  ;*w_trigret3:
                     11612  ;*        brclr   REUSE_LED19,outputpins,w_trigret1
                     11613  ;*        clr     coilsel
                     11614  ;*        bset    coilcbit,coilsel
                     11615  ;*        bra     ret_w2
                     11616  
                     11617  ;*w_trigret4:
                     11618  ;*        brclr   REUSE_LED19,outputpins,w_trigret1
                     11619  ;*        clr     coilsel
                     11620  ;*        bset    coildbit,coilsel
                     11621  ;*        bra     ret_w2
                     11622  
                     11623  ;*w_trigret5:
                     11624  ;*        brclr   REUSE_LED19,outputpins,w_trigret1
                     11625  ;*        clr     coilsel
                     11626  ;*        bset    coilebit,coilsel
                     11627  ;*        bra     ret_w2
                     11628  
                     11629  ;*w_trigret6:
                     11630  ;*        brclr   REUSE_LED19,outputpins,w_trigret1
                     11631  ;*        clr     coilsel
                     11632  ;*        bset    coilfbit,coilsel
                     11633  ;*        bra     ret_w2
                     11634  
                     11635  lost_sync_w:                                ; we found too many teeth after
                     11636                                      ; the missing one, start syncing again
                     11637                                      ; also do holdoff. This should be
                     11638                                      ; rare, but if we lost sync that
                     11639                                      ; bad we'd better start all over
 949E [04] 6EC3E6    11640          mov     #WHEELINIT,wheelcount       ; was %10000000 (missing #)
 94A1 [04] 136B      11641          bclr    wsync,EnhancedBits6
 94A3 [04] 146B      11642          bset    whold,EnhancedBits6
                     11643  ;NEW
 94A5 [02] A600      11644          lda     #0
 94A7 [03] B7F3      11645          sta     avgtoothh
 94A9 [03] B7F4      11646          sta     avgtoothl
                     11647  ;NEW
                     11648  
                     11649  ;worth killing the dwell timers to avoid dwells starting
 94AB macro          11650          TurnAllSpkOff        ; call macro to turn off all
 94AB [05] 0D6910    11651   BRCLR INVSPK,ENHANCEDBITS4,SOIN  
 94AE [04] 1300      11652   BCLR IASC,PORTA  
 94B0 [04] 1102      11653   BCLR SLED,PORTC  
 94B2 [04] 1502      11654   BCLR WLED,PORTC  
 94B4 [04] 1302      11655   BCLR ALED,PORTC  
 94B6 [04] 1103      11656   BCLR OUTPUT3,PORTD  
 94B8 [04] 1702      11657   BCLR PIN10,PORTC  
 94BA [04] 1503      11658   BCLR KNOCKIN,PORTD  
 94BC [03] 203E      11659   BRA SOIN_DONE  
                     11660  SOIN:  
 94BE [05] 006204    11661   BRSET REUSE_FIDLE,OUTPUTPINS,SOIN1  
 94C1 [04] 1300      11662   BCLR IASC,PORTA  
 94C3 [03] 2002      11663   BRA SOIN2  
 94C5 [04] 1200      11664  SOIN1: BSET IASC,PORTA  
 94C7 [05] 026204    11665  SOIN2: BRSET REUSE_LED17,OUTPUTPINS,SOIN3  
 94CA [04] 1102      11666   BCLR SLED,PORTC  
 94CC [03] 2002      11667   BRA SOIN4  
 94CE [04] 1002      11668  SOIN3: BSET SLED,PORTC  
 94D0 [05] 086204    11669  SOIN4: BRSET REUSE_LED19,OUTPUTPINS,SOIN5  
 94D3 [04] 1302      11670   BCLR ALED,PORTC  
 94D5 [03] 2002      11671   BRA SOIN6  
 94D7 [04] 1202      11672  SOIN5: BSET ALED,PORTC  
 94D9 [05] 056207    11673  SOIN6: BRCLR REUSE_LED18,OUTPUTPINS,SOIN7  
 94DC [05] 076204    11674   BRCLR REUSE_LED18_2,OUTPUTPINS,SOIN7  
 94DF [04] 1402      11675   BSET WLED,PORTC  
 94E1 [03] 2002      11676   BRA SOIN8  
 94E3 [04] 1502      11677  SOIN7: BCLR WLED,PORTC  
                     11678  SOIN8:  
 94E5 [05] 096402    11679   BRCLR OUT3SPARKD,FEATURE2,SOIN9  
 94E8 [04] 1003      11680   BSET OUTPUT3,PORTD  
                     11681  SOIN9:  
 94EA [04] C6E074    11682   LDA FEATURE8_F  
 94ED [02] A508      11683   BIT #SPKEOPB  
 94EF [03] 2702      11684   BEQ SOIN10  
 94F1 [04] 1602      11685   BSET PIN10,PORTC  
                     11686  SOIN10:  
 94F3 [04] C6E074    11687   LDA FEATURE8_F  
 94F6 [02] A510      11688   BIT #SPKFOPB  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 87
MC68HC908GP32 User Bootloader


 94F8 [03] 2702      11689   BEQ SOIN11  
 94FA [04] 1403      11690   BSET KNOCKIN,PORTD  
                     11691  SOIN11:  
                     11692  SOIN_DONE:  
 94FC [03] 3FB3      11693   CLR SPARKONLEFTAH  
 94FE [03] 3FB4      11694   CLR SPARKONLEFTAL  
 9500 [03] 3FB5      11695   CLR SPARKONLEFTBH  
 9502 [03] 3FB6      11696   CLR SPARKONLEFTBL  
 9504 [03] 3FB7      11697   CLR SPARKONLEFTCH  
 9506 [03] 3FB8      11698   CLR SPARKONLEFTCL  
 9508 [03] 3FB9      11699   CLR SPARKONLEFTDH  
 950A [03] 3FBA      11700   CLR SPARKONLEFTDL  
 950C [03] 3FBB      11701   CLR SPARKONLEFTEH  
 950E [03] 3FBC      11702   CLR SPARKONLEFTEL  
 9510 [03] 3FBD      11703   CLR SPARKONLEFTFH  
 9512 [03] 3FBE      11704   CLR SPARKONLEFTFL  
 9514 [03] CC9486    11705          jmp     ret_w
                     11706  
                     11707  w_store2:
 9517 [04] 1D5F      11708          bclr    trigret,SparkBits
                     11709  
                     11710  w_store:
 9519 [04] C60203    11711          lda     T2CurrH
 951C [03] B7C6      11712          sta     T2PrevH             ; Make current value tooth last
 951E [04] C60204    11713          lda     T2CurrL
 9521 [03] B7C7      11714          sta     T2PrevL
                     11715  *****************************************************************************
                     11716  ** When getting here we should have decoded crank signal into one pulse
                     11717  ** per ignition event so we can just drop into the standard MSnS code.
                     11718  ** A smarter implementation would use the individual teeth for more
                     11719  ** accurate timing
                     11720  *****************************************************************************
                     11721  done_decode:
                     11722  ;*        brclr   REUSE_LED18,outputpins,dcd_no_led
                     11723  ;*        brset   REUSE_LED18_2,outputpins,dcd_no_led       ; if coil c
                     11724  ;*        bset    wled,portc                ; Turn on IRQ led, orig MSnS code
                     11725  ;*dcd_no_led:
                     11726  
                     11727  ;tacho output
 9523 [04] C6E090    11728          lda     tachconf_f
 9526 [02] A57F      11729          bit     #$7f
 9528 [03] 271E      11730          beq     tach_done
 952A [02] A580      11731          bit     #$80     ; see if in divide by 2 mode
 952C [03] 270A      11732          beq     tach_full
 952E [03] B66A      11733          lda     EnhancedBits5
 9530 [02] A880      11734          eor     #ctodivb
 9532 [03] B76A      11735          sta     EnhancedBits5
 9534 [02] A580      11736          bit     #ctodivb
 9536 [03] 2710      11737          beq     tach_done
                     11738  tach_full:
                     11739  
                     11740  ; Tacho ouput
 9538 [04] C6E090    11741          lda      tachconf_f
 953B [02] A47F      11742          and      #$7f
 953D [03] 2709      11743          beq      tach_done
                     11744  ;tachon:
                     11745  ;*        cbeqa    #1T,tachon_x2
                     11746  ;*        cbeqa    #2T,tachon_x3
                     11747  ;*        cbeqa    #3T,tachon_x4
 953F [04] 410402    11748          cbeqa    #4T,tachon_x5
                     11749  ;*        cbeqa    #5T,tachon_out3
                     11750  ;*        cbeqa    #6T,tachon_pin10
 9542 [03] 2004      11751          bra      tach_done
                     11752  ;*tachon_x2:
                     11753  ;*        bset     water,porta
                     11754  ;*        bra      tach_done
                     11755  ;*tachon_x3:
                     11756  ;*        bset     water2,porta
                     11757  ;*        bra      tach_done
                     11758  ;*tachon_x4:
                     11759  ;*        bset     output1,porta
                     11760  ;*        bra      tach_done
                     11761  tachon_x5:
 9544 [04] 1400      11762          bset     output2,porta
 9546 [03] 2000      11763          bra      tach_done
                     11764  ;*tachon_out3:
                     11765  ;*        bset     output3,portd
                     11766  ;*        bra      tach_done
                     11767  ;*tachon_pin10:
                     11768  ;*        bset     pin10,portc
                     11769  ;*;        bra      tach_done
                     11770  
                     11771  tach_done:
                     11772  ;save old values
 9548 [05] 4EAEFC    11773          mov       iTimeX,iTimepX
 954B [05] 4EAFFD    11774          mov       iTimeH,iTimepH
 954E [05] 4EB0FE    11775          mov       iTimeL,iTimepL
                     11776  
                     11777  ;T2 read at start of DOSQUIRT
 9551 [04] C60204    11778          lda     T2CurrL
 9554 [03] B0AD      11779          sub     T2LastL                     ; Calculate cycle time
 9556 [03] B7B0      11780          sta     iTimeL                  ; global var
 9558 [04] C60203    11781          lda     T2CurrH
 955B [03] B2AC      11782          sbc     T2LastH
 955D [03] B7AF      11783          sta     iTimeH
 955F [04] C60202    11784          lda     T2CurrX
 9562 [03] B2AB      11785          sbc     T2LastX
 9564 [03] B7AE      11786          sta     iTimeX
                     11787  
                     11788  ;Must check to see if iTime has gone negative. This can occur if the interrupt to increment
                     11789  ; the top byte of the timer gets missed. The roll_chk code obviously does not work correctly.
                     11790  
                     11791  ;;;;CODE TO FIX DROPOUT
 9566 [05] 0FAE0A    11792          brclr   7,iTimeX,noitx_err
                     11793  ;if top bit of iTimeX is set then software rollover must have got missed
                     11794  ;giving a negative time
 9569 [04] C60202    11795          lda     T2CurrX
 956C [02] AB01      11796          add     #1     ; increment the saved "current" value of the timer
 956E [04] C70202    11797          sta     T2CurrX
                     11798  ;assume value should really be zero
 9571 [03] 3FAE      11799          clr     iTimeX ; assume top byte is zero
                     11800  noitx_err:
                     11801  ;;;;CODE TO FIX DROPOUT
                     11802  
                     11803  ;check for dual dizzy feature
                     11804  ;*        brclr   WHEEL,personality,nondualdizzy  ; if not wheel decoder then skip
                     11805  ;*        lda     feature6_f
                     11806  ;*        bit     #dualdizzyb
                     11807  ;*        beq     nondualdizzy
                     11808  ;*        brset   coilbbit,coilsel,dualdb
                     11809  ;*        brset   coilcbit,coilsel,dualda
                     11810  ;*        brset   coildbit,coilsel,dualdb
                     11811  ;*        brset   coilebit,coilsel,dualda
                     11812  ;*        brset   coilfbit,coilsel,dualdb
                     11813  ;*dualda:
                     11814  ;*        clr     coilsel
                     11815  ;*        bset    coilabit,coilsel
                     11816  ;*        bra     nondualdizzy
                     11817  ;*dualdb:
                     11818  ;*        clr     coilsel
                     11819  ;*        bset    coilbbit,coilsel
                     11820  
                     11821  ;*nondualdizzy:
                     11822  *************
                     11823  ; If we are running next cyl and low advance and get a lot of engine
                     11824  ; accel then we can sometime receive the next trigger pulse before


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 88
MC68HC908GP32 User Bootloader


                     11825  ; we've actually sparked.  We'll know if this happens because sparktrigg
                     11826  ; will be set when we get here. If this is the case then we'd better
                     11827  ; fire the coil right now.
                     11828  ;
                     11829  ;*        brclr   nextcyl,EnhancedBits4,j_miss_ckskp  ; ONLY for next-cylinder
                     11830  ;the nextcyl bit is only set for valid personalities
                     11831  
                     11832  ;*        brset   crank,engine,miss_chk         ; at crank we ALWAYS fire at trigger
                     11833  ;*        brset   SparkTrigg,Sparkbits,miss_chk ; if set then we missed one
                     11834  
                     11835  ;*j_miss_ckskp:    jmp     miss_chk_skip
                     11836  ;*miss_chk:
                     11837  
                     11838  ;*        brset   invspk,EnhancedBits4,mc_inv
                     11839  ;*        COILNEG  ; macro = fire coil for non-inverted
                     11840  ;*        bra     mc_fire_done
                     11841  
                     11842  ;*j_miss_ckdn2:    jmp     miss_chk_done
                     11843  ;*mc_inv:
                     11844  ;*        COILPOS                           ; macro = fire coil for inverted
                     11845  ;*mc_fire_done:
                     11846  ;*        bclr    TOIE,T2SC1                ; Disable timer interrupt
                     11847                                      ; (never got there)
                     11848  ;*        brclr   dwellcont,feature7,mc_fd
                     11849          ;if next_cyl and cranking then skip
                     11850  ;*        brclr   nextcyl,EnhancedBits4,mc_fd2
                     11851  ;*        brset   crank,engine,mc_cd   ; can cause a conflict
                     11852  ;*mc_fd2:
                     11853  ;*        brset   SparkLSpeed,SparkBits,jmcd        ; low speed & dwell
                     11854                                      ; so don't schedule now
                     11855  ;*mc_fd:
                     11856  ;*        brclr   min_dwell,feature2,mc_cd  ; don't schedule here
                     11857  ;*jmcd:     jmp     miss_chk_done                   ; if minimal dwell wanted
                     11858  ;*mc_cd:
                     11859  ;*        CalcDwellspk                      ; Set spark on time
                     11860  ;*miss_chk_done:
                     11861  ;*        brclr   crank,engine,miss_chk_skip ; if not cranking then continue as normal
                     11862  ;*        jmp     SKIP_CYCLE_CALC
                     11863  *****************************************************************************
                     11864  
                     11865  ;*miss_chk_skip:
 9573 [04] 105F      11866          bset    SparkTrigg,Sparkbits        ; IRQ triggered, but no spark yet
                     11867  
 9575 [04] 3CD2      11868          inc     idleCtlClock                ; Idle PWM Clock counter
 9577 [04] C60111    11869      lda     idleDelayClock          ; Idle PWM delay counter
 957A [03] 2704      11870      beq     delay_done
 957C [01] 4A        11871      deca                            ; idle seconds clock
 957D [04] C70111    11872      sta     idleDelayClock
                     11873  delay_done:
                     11874  ;*  brclr   REStaging,EnhancedBits,cont_inc_counters
                     11875  ;*  brset   StgTransDone,EnhancedBits6,cont_inc_counters
                     11876      ; if we're here, we're supposed to be incrementing the staging counter
                     11877  ;*  lda     stgTransitionCnt
                     11878  ;*  inca
                     11879  ;*  sta     stgTransitionCnt
                     11880  
                     11881  
                     11882  cont_inc_counters:
 9580 [03] B684      11883              lda     igncount1
 9582 [03] 2608      11884      bne     EGOBUMP                ; Only increment counters if
                     11885                                      ; cylinder count is zero
                     11886  ;*        lda     feature10_f5
                     11887  ;*        bit     #ASEIgnCountb
                     11888  ;*        bne     TPS_COUNTER
 9584 [04] 3C83      11889          inc      asecount           ; Increment after-start enrichment
                     11890                                      ; counter
                     11891  
                     11892  TPS_COUNTER:
                     11893  ;*      brclr    taeIgnCount,feature1,EGOBUMP       ; Are we in Cycle counter
                     11894                                      ; mode for TPS Accel?
 9586 [04] 3C81      11895        inc      tpsaclk                      ; Yes so increment counter
                     11896  
                     11897  ; Save current TPS reading in last_tps variable to compute TPSDOT in
                     11898  ; acceleration enrichment section or KPa in KPa last if in MAP dot
                     11899  
                     11900  ;*       lda     feature4_f
                     11901  ;*       bit     #KpaDotSetb
                     11902  ;*       beq     tps_dot_on
                     11903  ;*;       brclr   KpaDotSet,feature4,tps_dot_on     ; If not in KPA dot mode
                     11904                                      ; jump past KPa settings
                     11905  ;*       lda     kpa
                     11906  ;*       bra     Kpa_Dot_on
                     11907  tps_dot_on:
 9588 [03] B647      11908         lda      tps
                     11909  Kpa_Dot_on:
 958A [03] B7D1      11910         sta      TPSlast
                     11911  
                     11912  EGOBUMP:
 958C [03] B64D      11913              lda       rpm
                     11914  ;   sta       old_rpm1      ; Used in odd-fire code - save the last computed RPM for average
                     11915  
                     11916  ;        brclr     egoIgnCount,feature1,No_Ego_Cnt
 958E [04] C6E1BC    11917          lda       feature14_f1
 9591 [02] A501      11918          bit       #egoIgnCountb
 9593 [03] 2702      11919          beq       No_Ego_Cnt
 9595 [04] 3C82      11920          inc       egocount          ; Increment EGO step counter
                     11921  No_Ego_Cnt:
 9597 [05] 004203    11922          brset   running,engine,CYCLE_CALC   ; should always be running
                     11923                                      ; if we get here
 959A [03] CC96FD    11924          jmp     SKIP_CYCLE_CALC
                     11925  CYCLE_CALC:
                     11926  
                     11927  ; revised section new in 015d
                     11928  ; hi-res timer is only 16bit and runs at 1MHz. 1 tick = 1us
                     11929  ; so timer rollover occurs at about 65.5ms. Hence if period > 65.5ms
                     11930  ; we have to use the lo-res spark calculation i.e. use the 0.1ms
                     11931  ; routine instead of the hi-res output compare method in "SPARKTIME"
                     11932  ; 70ms equates to rpmh = $2, rpml = $BC.  Choose set point as $200 as
                     11933  ; simpler.  65ms is $28F
                     11934  ;
                     11935  
                     11936  ;022b 0 T2 is now 24 bit with the extra software byte but may slow this routine
                     11937  ;excessively if we do 24bit maths here in an interrupt handler.
                     11938  ;Stick with Magnus' 0.1ms method for now as it works.
                     11939  
                     11940  ;*        brclr   EDIS,personality,non_edis
                     11941  ;*        jmp     edis_speed
                     11942  non_edis:
                     11943  ;are we doing oddfire wheel ?
                     11944  ;*        lda     SparkConfig1_f
                     11945  ;*        bit     #M_SC1oddfire
                     11946  ;*        beq     CCnot_odd
                     11947  ;*        brset   coilabit,coilsel,CCofa
                     11948  ;*        brset   coilbbit,coilsel,CCofb
                     11949  ;*        brset   coilcbit,coilsel,CCofc
                     11950  ;*        brset   coildbit,coilsel,CCofd
                     11951  ;*        brset   coildbit,coilsel,CCofe
                     11952  ;*        brset   coildbit,coilsel,CCoff
                     11953  ;*        bra     CCnot_odd
                     11954  ;*CCofa:
                     11955  ;*        lda      outaoffs_f
                     11956  ;*        sta      offsetstep
                     11957  ;*        lda      outaoffv_f
                     11958  ;*        sta      offsetang
                     11959  ;*        bra      CC_cont
                     11960  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 89
MC68HC908GP32 User Bootloader


                     11961  ;*CCofb:
                     11962  ;*        lda      outboffs_f
                     11963  ;*        sta      offsetstep
                     11964  ;*        lda      outboffv_f
                     11965  ;*        sta      offsetang
                     11966  ;*        bra      CC_cont
                     11967  
                     11968  ;*CCofc:
                     11969  ;*        lda      outcoffs_f
                     11970  ;*        sta      offsetstep
                     11971  ;*        lda      outcoffv_f
                     11972  ;*        sta      offsetang
                     11973  ;*        bra      CC_cont
                     11974  
                     11975  ;*CCofd:
                     11976  ;*        lda      outdoffs_f
                     11977  ;*        sta      offsetstep
                     11978  ;*        lda      outdoffv_f
                     11979  ;*        sta      offsetang
                     11980  ;*        bra      CC_cont
                     11981  
                     11982  ;*CCofe:
                     11983  ;*        lda      outeoffs_f
                     11984  ;*        sta      offsetstep
                     11985  ;*        lda      outeoffv_f
                     11986  ;*        sta      offsetang
                     11987  ;*        bra      CC_cont
                     11988  
                     11989  ;*CCoff:
                     11990  ;*        lda      outfoffs_f
                     11991  ;*        sta      offsetstep
                     11992  ;*        lda      outfoffv_f
                     11993  ;*        sta      offsetang
                     11994  ;*        bra      CC_cont
                     11995  
                     11996  CCnot_odd:
 959D [02] A600      11997          lda     #0
 959F [04] C7020C    11998          sta     offsetang
 95A2 [04] C7020B    11999          sta     offsetstep
                     12000  CC_cont:
 95A5 [03] B672      12001           lda     rpmch
 95A7 [02] A101      12002           cmp     #$1
 95A9 [03] 220A      12003           bhi     LOW_SPEED          ; rpmc > $200  slow
 95AB [03] 250E      12004           blo     HIGH_SPEED         ;      < $100  fast
 95AD [03] B673      12005           lda     rpmcl
 95AF [02] A180      12006           cmp     #$80
 95B1 [03] 2508      12007           blo     HIGH_SPEED         ;      < $180  fast
 95B3 [03] 2006      12008           bra     ASIS_SPEED         ; in between leave as it was
                     12009  
                     12010  ;*edis_speed:
                     12011  ;*        clr     coilsel
                     12012  ;*        bset    coilabit,coilsel
                     12013  ;If trigg angle zero used fixed delay
                     12014  ;*        lda     TriggAngle_f
                     12015  ;*        sta     DelayAngle
                     12016  ;*        bne     VARIABLE_DELAY
                     12017  ;*        lda     #$40                      ; 10us delay. Try 64us
                     12018  ;*        sta     SparkDelayL
                     12019  ;*        lda     #$00
                     12020  ;*        sta     SparkDelayH
                     12021  ;*        bset    SparkHSpeed,SparkBits     ; Turn on high speed ignition
                     12022  ;*        bclr    SparkLSpeed,SparkBits     ; Turn off low speed ignition
                     12023  ;*        mov     iTimeL,cTimeL             ; Prepare to calculate with
                     12024  ;*        mov     iTimeH,cTimeH           ; highres time
                     12025  ;*        jmp     set_spk_timer
                     12026  
                     12027  LOW_SPEED:
 95B5 [04] 135F      12028          bclr    SparkHSpeed,SparkBits       ; Turn off high speed ignition
 95B7 [04] 145F      12029          bset    SparkLSpeed,SparkBits       ; Turn on low speed ignition
                     12030  ;*        brclr   TFI,personality,LOW_cont
                     12031  ;TFI mode - set the output now (follow IRQ at low speed)
                     12032  ;*        bset    sparkon,revlimbits        ; spark now on
                     12033  ;*        bclr    sparktrigg,sparkbits      ; don't want another one
                     12034  
                     12035  ;*        brset   invspk,EnhancedBits4,InvLSparkOn2
                     12036  ;; Don't support coils b,c,d in TFI
                     12037  
                     12038  ;*NInvLSparkOn2:
                     12039  ;*        brset   REUSE_FIDLE,outputpins,dslsf2
                     12040  ;*        bset    coila,portc               ; Set spark on
                     12041  ;*        bra     tfi_cont
                     12042  ;*dslsf2:
                     12043  ;*        bset    iasc,porta
                     12044  ;*        bra     tfi_cont
                     12045  ;*InvLSparkOn2:
                     12046  ;*        brset   REUSE_FIDLE,outputpins,ilsof2
                     12047  ;*        bclr    coila,portc               ; Set inverted spark on
                     12048  ;*        bra     tfi_cont
                     12049  ;*ilsof2:
                     12050  ;*        bclr     iasc,porta
                     12051  ;*tfi_cont:
                     12052  ;*        jmp     SKIP_CYCLE_CALC
                     12053  
                     12054  LOW_cont:
                     12055  
 95B9 [03] 2004      12056          bra     DELAY_CALC
                     12057  
                     12058  ASIS_SPEED:
                     12059          ;need to check for low speed+TFI or we'll miss the output
                     12060  ;*        brclr   TFI,personality,DELAY_CALC
                     12061  ;*        brclr   SparkLSpeed,SparkBits,DELAY_CALC
                     12062  ;*        bra     LOW_SPEED
                     12063  
                     12064  ;*VARIABLE_DELAY:
                     12065  
                     12066  HIGH_SPEED:
                     12067  ;*;        brclr   TFI,personality,HIGH_cont
                     12068  ;*;        lda     rpm
                     12069  ;*;        cmp     #6                       ; if < 600rpm and TFI then low speed
                     12070  ;*;        blo     LOW_SPEED
                     12071  ;*HIGH_cont:
                     12072  ;hei7 bypass now in main loop
 95BB [04] 125F      12073          bset    SparkHSpeed,SparkBits       ; Turn on high speed ignition
 95BD [04] 155F      12074          bclr    SparkLSpeed,SparkBits       ; Turn off low speed ignition
                     12075  
                     12076  DELAY_CALC:
 95BF [04] C6E1B6    12077          lda     config11_f1         ; Get engine config
 95C2 [03] 62        12078          nsa
 95C3 [02] A40F      12079          and     #$0f                        ; Mask out cylinders  (was $07)
 95C5 [01] 4C        12080          inca                                ; Prepare loop counter
 95C6 [01] 97        12081          tax                         ; stick in into X for safe keeping
                     12082  
                     12083  ; accel/decel correction..
                     12084  ; If engine is accelerating or decelerating predict our expected next
                     12085  ; cycle time for more accurate spark control. Tom Hafner reported a big
                     12086  ; improvement with a similar method in his MegaSpark.
                     12087  ; Calc is as follows: predicted ctime = ctime + (ctime - ctime prev) =
                     12088  ; 2x ctime - ctimep
                     12089  
 95C7 [05] 045F20    12090          brset   SparkLSpeed,SparkBits,dc_low
 95CA [05] 4EB0C0    12091          mov     iTimeL,cTimeL               ; Prepare to calculate with
                     12092                                      ; highres time
 95CD [05] 4EAFBF    12093          mov     iTimeH,cTimeH
                     12094  
                     12095  ;do high speed accel/decel correction
 95D0 [03] B6FD      12096          lda     iTimepH


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 90
MC68HC908GP32 User Bootloader


 95D2 [03] 2604      12097          bne     hispdcorr
 95D4 [03] B6FE      12098          lda     iTimepL
 95D6 [03] 2730      12099          beq     ReCalcDelay         ; if previous is zero then skip routine
                     12100  hispdcorr:
                     12101  ;        clr     SparkCarry
 95D8 [04] 38C0      12102          lsl     cTimeL
 95DA [04] 39BF      12103          rol     cTimeH
                     12104  ;        rol     SparkCarry         ; redundant. If it overflows we'll
                     12105                                      ; only subtract it in a sec
 95DC [03] B6C0      12106          lda     cTimeL
 95DE [03] B0FE      12107          sub     iTimepL
 95E0 [03] B7C0      12108          sta     cTimeL
 95E2 [03] B6BF      12109          lda     cTimeH
 95E4 [03] B2FD      12110          sbc     iTimepH
 95E6 [03] B7BF      12111          sta     cTimeH
                     12112  
 95E8 [03] 201E      12113          bra      ReCalcDelay
                     12114  dc_low:
 95EA [05] 4E73C0    12115          mov     rpmcl,cTimeL                ; Prepare to calculate with lowres time
 95ED [05] 4E72BF    12116          mov     rpmch,cTimeH
                     12117  ;do low speed accel/decel correction
 95F0 [03] B670      12118          lda     rpmph
 95F2 [03] 2604      12119          bne     lospdcorr
 95F4 [03] B671      12120          lda     rpmpl
 95F6 [03] 2710      12121          beq     ReCalcDelay         ; if previous is zero then skip routine
                     12122  lospdcorr:
                     12123  ;        clr     SparkCarry
 95F8 [04] 38C0      12124          lsl     cTimeL
 95FA [04] 39BF      12125          rol     cTimeH
                     12126  ;        rol     SparkCarry         ; redundant. If it overflows we'll
                     12127                                      ; only subtract it in a sec
 95FC [03] B6C0      12128          lda     cTimeL
 95FE [03] B071      12129          sub     rpmpl
 9600 [03] B7C0      12130          sta     cTimeL
 9602 [03] B6BF      12131          lda     cTimeH
 9604 [03] B270      12132          sbc     rpmph
 9606 [03] B7BF      12133          sta     cTimeH
                     12134  
                     12135  ReCalcDelay:
 9608 [05] 4EC0C2    12136          mov     cTimeL,SparkTempL
 960B [05] 4EBFC1    12137          mov     cTimeH,SparkTempH
 960E [03] 3FC3      12138          clr     SparkCarry
                     12139  ;take a copy - used later by next-cyl calcs
 9610 [03] B6C0      12140          lda     cTimeL
 9612 [04] C70201    12141          sta     ctimeLcp
 9615 [03] B6BF      12142          lda     cTimeH
 9617 [04] C70200    12143          sta     ctimeHcp
                     12144  
 961A [01] 9F        12145          txa
                     12146  ;*        cmp     #4
                     12147  ;*        bhi     more4cyl          ; more than 4cyl
                     12148  ;*        cbeqa   #3T,cyl3          ; 3cyl does 2/4 stroke internally
                     12149  
                     12150  ;*        tax                               ;1,2,4 are so simple do them here
                     12151  ;*        lda     config11_f1
                     12152  ;*        bit     #M_TwoStroke
                     12153  ;*        beq     lt4_4s                    ; eq 0 so branch 4 stroke
                     12154          ; 2 stroke for 1,2,4
                     12155  ;*        txa
                     12156  ;*        cbeqa   #1T,jsmd4
                     12157  ;*        cbeqa   #2T,jsmd2
                     12158  ;*        cbeqa   #4T,jsmt
                     12159          ; 4 stroke for 1,2,4
                     12160  ;*lt4_4s:
                     12161  ;*        txa
                     12162  ;*        cbeqa   #1T,jsmd8
                     12163  ;*        cbeqa   #2T,jsmd4
                     12164  ;*        cbeqa   #4T,jsmd2
                     12165  
                     12166  ;*more4cyl:
                     12167  ;*        tax
                     12168  ;*        lda     config11_f1
                     12169  ;*        bit     #M_TwoStroke
                     12170  ;*        bne     cyl_invalid               ; don't support 2 stroke >4 cyl
                     12171  ;*        txa
                     12172  ;*        cbeqa   #5T,cyl5          ; quick calc routines for speed
                     12173  ;*        cbeqa   #6T,cyl6
                     12174  ;*        cbeqa   #8T,cyl8a
                     12175  ;*        cbeqa   #10T,cyl10a
                     12176  ;*        cbeqa   #12T,cyl12a
                     12177  ;*        cbeqa   #16T,cyl16a
                     12178  ;*cyl_invalid:
                     12179  ;*        jmp     SKIP_CYCLE_CALC           ; if 7,9,11,13,14,15 don't do timing
                     12180  
                     12181  ;*cyl8a:  jmp     cyl8
                     12182  ;*cyl10a: jmp     cyl10
                     12183  ;*cyl12a: jmp     cyl12
                     12184  ;*cyl16a: jmp     cyl16
                     12185  
                     12186  ;**********
                     12187  ;some jumps
                     12188  ;*jsmd8:  jmp    spk_mult_div8
                     12189  ;*jsmd4:  jmp    spk_mult_div4
                     12190  ;*jsmd2:  jmp    spk_mult_div2
                     12191  ;*jsmt:   jmp    spk_mult
                     12192  
                     12193  ;** special faster routines to calculate the delay. **
                     12194  ;**********
                     12195  ;*cyl3:   ;  *3 / 8
                     12196  ;*        lsl     sparkTempL                ; *2
                     12197  ;*        rol     sparkTempH
                     12198  ;*        rol     SparkCarry
                     12199  
                     12200  ;*        lda     SparkTempL                ; +1 more
                     12201  ;*        add     cTimeL
                     12202  ;*        sta     SparkTempL
                     12203  ;*        lda     SparkTempH
                     12204  ;*        adc     cTimeH
                     12205  ;*        sta     SparkTempH
                     12206  ;*        bcc     cyl3nc
                     12207  ;*        inc     SparkCarry
                     12208  ;*cyl3nc:
                     12209  ;*        lda     config11_f1
                     12210  ;*        bit     #M_TwoStroke
                     12211  ;*        bne     bsmd4                     ; if 2 stroke div4. 4 stroke div8
                     12212  ;*        bra     bsmd8
                     12213  
                     12214  ;**********
                     12215  ;*cyl5:  ; *5 /8
                     12216  
                     12217  ;*        lsl     SparkTempL                ; *2
                     12218  ;*        rol     SparkTempH
                     12219  ;*        rol     SparkCarry
                     12220  
                     12221  ;*        lsl     SparkTempL                ; *2
                     12222  ;*        rol     SparkTempH
                     12223  ;*        rol     SparkCarry
                     12224  
                     12225  ;*        lda     SparkTempL                ; +1 more
                     12226  ;*        add     cTimeL
                     12227  ;*        sta     SparkTempL
                     12228  ;*        lda     SparkTempH
                     12229  ;*        adc     cTimeH
                     12230  ;*        sta     SparkTempH
                     12231  ;*        bcc     spk_mult_div8
                     12232  ;*        inc     SparkCarry


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 91
MC68HC908GP32 User Bootloader


                     12233  ;*        bra     spk_mult_div8
                     12234  
                     12235  ;**********
                     12236  ;*cyl6:   ;  *3 / 4
                     12237  ;*        lsl     sparkTempL                ; *2
                     12238  ;*        rol     sparkTempH
                     12239  ;*        rol     SparkCarry
                     12240  
                     12241  ;*        lda     SparkTempL                ; +1 more
                     12242  ;*        add     cTimeL
                     12243  ;*        sta     SparkTempL
                     12244  ;*        lda     SparkTempH
                     12245  ;*        adc     cTimeH
                     12246  ;*        sta     SparkTempH
                     12247  ;*        bcc     spk_mult_div4
                     12248  ;*        inc     SparkCarry
                     12249  ;*        bra     spk_mult_div4
                     12250  
                     12251  ;**********
                     12252  ;some relative jumps
                     12253  ;*bsmd8:  bra    spk_mult_div8
                     12254  ;*bsmd4:  bra    spk_mult_div4
                     12255  ;*bsmd2:  bra    spk_mult_div2
                     12256  ;*bsm:   bra    spk_mult
                     12257  ;**********
                     12258  ;*cyl8:   ; no change, period - 90 deg already
                     12259  ;*        mov     cTimeL,SparkTempL
                     12260  ;*        mov     cTimeH,SparkTempH
                     12261  ;*        bra     spk_mult
                     12262  
                     12263  ;*cyl10:  ; *5 /4
                     12264  ;*        mov     cTimeL,SparkTempL
                     12265  ;*        mov     cTimeH,SparkTempH
                     12266  ;*        clr     SparkCarry
                     12267  
                     12268  ;*        lsl     SparkTempL                ; *2
                     12269  ;*        rol     SparkTempH
                     12270  ;*        rol     SparkCarry
                     12271  
                     12272  ;*        lsl     SparkTempL                ; *2
                     12273  ;*        rol     SparkTempH
                     12274  ;*        rol     SparkCarry
                     12275  
                     12276  ;*        lda     SparkTempL                ; +1 more
                     12277  ;*        add     cTimeL
                     12278  ;*        sta     SparkTempL
                     12279  ;*        lda     SparkTempH
                     12280  ;*        adc     cTimeH
                     12281  ;*        sta     SparkTempH
                     12282  ;*        bcc     spk_mult_div4
                     12283  ;*        inc     SparkCarry
                     12284  ;*        bra     spk_mult_div4
                     12285  
                     12286  ;**********
                     12287  ;*cyl12:
                     12288  ;*        mov     cTimeL,SparkTempL
                     12289  ;*        mov     cTimeH,SparkTempH
                     12290  ;*        clr     SparkCarry
                     12291  
                     12292  ;*        lsl     sparkTempL                ; *2
                     12293  ;*        rol     sparkTempH
                     12294  ;*        rol     SparkCarry
                     12295  
                     12296  ;*        lda     SparkTempL                ; +1 more
                     12297  ;*        add     cTimeL
                     12298  ;*        sta     SparkTempL
                     12299  ;*        lda     SparkTempH
                     12300  ;*        adc     cTimeH
                     12301  ;*        sta     SparkTempH
                     12302  ;*        bcc     spk_mult_div2
                     12303  ;*        inc     SparkCarry
                     12304  ;*        bra     spk_mult_div2
                     12305  ;**********
                     12306  ;*cyl16:  ; x2 to get 90 deg period (we will lose a bit below 150 rpm)
                     12307  ;*        mov     cTimeL,SparkTempL
                     12308  ;*        mov     cTimeH,SparkTempH
                     12309  ;*        lsl     sparkTempL
                     12310  ;*        rol     sparkTempH
                     12311  ;*        bra     spk_mult
                     12312  
                     12313  ;**********
                     12314  ;*spk_mult_div8:
                     12315  ;*        lsr     SparkCarry                ; /2
                     12316  ;*        ror     SparkTempH
                     12317  ;*        ror     SparkTempL
                     12318  
                     12319  ;*spk_mult_div4:
                     12320  ;*        lsr     SparkCarry                ; /2
                     12321  ;*        ror     SparkTempH
                     12322  ;*        ror     SparkTempL
                     12323  
                     12324  ;*spk_mult_div2:
 961B [04] 34C3      12325          lsr     SparkCarry          ; /2
 961D [04] 36C1      12326          ror     SparkTempH
 961F [04] 36C2      12327          ror     SparkTempL
                     12328  
                     12329  spk_mult:
                     12330          ; Calculate time for delay angle
                     12331          ; Time for 90 deg * Angle (256=90 deg)/256
 9621 [04] C60106    12332          lda     DelayAngle
 9624 [04] CB020C    12333          add     offsetang    ; for oddfire, zero otherwise
 9627 [03] BEC1      12334          ldx     SparkTempH
 9629 [05] 42        12335          mul
 962A [03] BFB1      12336          stx     SparkDelayH
 962C [03] B7C3      12337          sta     SparkCarry
 962E [04] C60106    12338          lda     DelayAngle
 9631 [04] CB020C    12339          add     offsetang    ; for oddfire, zero otherwise
 9634 [03] BEC2      12340          ldx     SparkTempL
 9636 [05] 42        12341          mul
 9637 [01] 9F        12342          txa
 9638 [03] BBC3      12343          add     SparkCarry
 963A [03] B7B2      12344          sta     SparkDelayL
 963C [03] 2402      12345          bcc     NoSparkCarry
 963E [04] 3CB1      12346          inc     SparkDelayH
                     12347  
                     12348  NoSparkCarry:
                     12349  
                     12350  ;check for oddfire offset
                     12351  ;*        lda     SparkConfig1_f
                     12352  ;*        bit     #M_SC1oddfire
                     12353  ;*        beq     ck_xlong       ; not oddfire, use normal method
                     12354  ;now add oddfire triggers
                     12355  ;*        lda     offsetstep
                     12356  ;*        beq     ck_nextcyl     ; if no offset step then skip
                     12357  
                     12358  ;*        bit     #outoff_45b
                     12359  ;*        bne     of45           ; add 45 deg
                     12360  
                     12361  ;*        lda     offsetstep
                     12362  ;*        bit     #outoff_90b
                     12363  ;*        bne     AddLongTrigg   ; already contains 90 deg time, add it
                     12364  ;shouldn't get here
                     12365  ;*        bra     ck_nextcyl
                     12366  
                     12367  ;*of45:
                     12368  ;*        lsr     SparkTempH


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 92
MC68HC908GP32 User Bootloader


                     12369  ;*        ror     SparkTempL
                     12370  ;*        bra     AddLongTrigg
                     12371  
                     12372  ;*ck_xlong:
                     12373          ; Check for long trigger (more than 90 deg)
                     12374  ;*        lda     SparkConfig1_f
                     12375  ;*        bit     #M_SC1LngTrg
                     12376  ;*        beq     ck_nextcyl
                     12377  
                     12378  ;*xl45:
                     12379          ; Divide 90 deg time by 2 to get 45 deg time (112.5 to 135 deg)
                     12380  ;*        lsr     SparkTempH
                     12381  ;*        ror     SparkTempL
                     12382  
                     12383          ; Jump out if extra long trigger
                     12384  ;*        bit     #M_SC1XLngTrg
                     12385  ;*        bne     AddLongTrigg
                     12386  
                     12387  ;*xl22:
                     12388          ; Divide 45 deg time by 2 to get 22.5 deg time (90 to 112.5 deg)
                     12389  ;*        lsr     SparkTempH
                     12390  ;*        ror     SparkTempL
                     12391  
                     12392  ;*AddLongTrigg:
                     12393          ; Add extra time for long trigger
                     12394  ;*        lda     SparkDelayL
                     12395  ;*        add     SparkTempL
                     12396  ;*        sta     SparkDelayL
                     12397  ;*        lda     SparkDelayH
                     12398  ;*        adc     SparkTempH
                     12399  ;*        sta     SparkDelayH
                     12400  
                     12401  ;*ck_nextcyl:
                     12402  ;check for next cyl mode - only get here if NOT in long-trigger
                     12403  ;*        brclr   nextcyl,EnhancedBits4,SDelayDone
                     12404  
                     12405  ;now actual delay = itime - "spark delay"
                     12406  ;i.e. if trigger = 10, advance = 17 -> want 7 degrees ahead of trigger
                     12407  ; so we calc the time for 7 deg and then take that time off the iTime
                     12408  ;cTime?cp was saved earlier as the predicted time for this period
                     12409  ;*        lda     cTimeLcp
                     12410  ;*        sub     SparkDelayL
                     12411  ;*        sta     SparkDelayL
                     12412  ;*        lda     cTimeHcp
                     12413  ;*        sbc     SparkDelayH
                     12414  ;*        sta     SparkDelayH
                     12415  
                     12416  ;*SDelayDone:
                     12417  
 9640 [05] 025F31    12418          brset   SparkHSpeed,SparkBits,set_spk_timer ; High speed set timer
 9643 [05] 036521    12419          brclr   dwellcont,feature7,j_SSC
                     12420  ;if next_cyl and cranking then skip
 9646 [05] 0B6903    12421          brclr   nextcyl,EnhancedBits4,sdd2
 9649 [05] 02421B    12422          brset   crank,engine,j_SSC   ; can cause a conflict
                     12423  
                     12424  sdd2:
                     12425  ; low speed dwell
                     12426  ; a copy of some of Calcdwell, but simplified...
                     12427  
                     12428  ; uses SparkTempH/L for temporary space
                     12429  
 964C [03] B6B2      12430          lda     SparkDelayL
 964E [03] B0F7      12431          sub     dwelldms
 9650 [03] B7C2      12432          sta     SparkTempL
 9652 [03] B6B1      12433          lda     SparkDelayH
 9654 [02] A200      12434          sbc     #0
 9656 [03] B7C1      12435          sta     SparkTempH
 9658 [03] 2405      12436          bcc     lsd_done
                     12437  ; < zero = OOOPS! set minimal period
                     12438  lsd_min:                            ; target dwell period>available period
 965A [01] 8C        12439          clrh
 965B [02] AE01      12440          ldx     #1                  ; turn on coil as soon as we can
 965D [03] 2002      12441          bra     lsd_done2
                     12442  lsd_done:
 965F [04] 55C1      12443          ldhx    SparkTempH
                     12444  lsd_done2:
 9661 [05] 006806    12445          brset   coilabit,coilsel,lsd_a
 9664 [05] 026808    12446          brset   coilbbit,coilsel,lsd_b
                     12447  ;*        brset   coilcbit,coilsel,lsd_c
                     12448  ;*        brset   coildbit,coilsel,lsd_d
                     12449  ;*        brset   coilebit,coilsel,lsd_e
                     12450  ;*        brset   coilfbit,coilsel,lsd_f
                     12451  j_SSC:
 9667 [03] CC96FD    12452          jmp     SKIP_CYCLE_CALC
 966A [04] 35B3      12453  lsd_a:  sthx    SparkOnLeftah               ; Store time to keep output the same
 966C [03] CC96FD    12454          jmp     SKIP_CYCLE_CALC
 966F [04] 35B5      12455  lsd_b:  sthx    SparkOnLeftbh               ; Store time to keep output the same
 9671 [03] CC96FD    12456          jmp     SKIP_CYCLE_CALC
                     12457  ;*lsd_c:  sthx    SparkOnLeftch             ; Store time to keep output the same
                     12458  ;*        jmp     SKIP_CYCLE_CALC
                     12459  ;*lsd_d:  sthx    SparkOnLeftdh             ; Store time to keep output the same
                     12460  ;*        jmp     SKIP_CYCLE_CALC
                     12461  ;*lsd_e:  sthx    SparkOnLefteh             ; Store time to keep output the same
                     12462  ;*        jmp     SKIP_CYCLE_CALC
                     12463  ;*lsd_f:  sthx    SparkOnLeftfh             ; Store time to keep output the same
                     12464  ;*        jmp     SKIP_CYCLE_CALC
                     12465  
                     12466  set_spk_timer:
 9674 [05] 03654D    12467          brclr   dwellcont,feature7,do_set_spk
                     12468  ;if next_cyl and cranking then skip
                     12469  ;*        brclr   nextcyl,EnhancedBits4,sst2
                     12470  ;*        brset   crank,engine,do_set_spk   ; can cause a conflict
                     12471  ;*sst2:
                     12472  ; now see if we've time for dwell before spark
                     12473  ; this will work when rpm/advance are low and dwell doesn't start
                     12474  ; before trigger this doesn't leave any margin... could be trying to start
                     12475  ; dwell too soon after now and due to latency we'll miss it?
                     12476  
                     12477  ;026g add hysteresis to hrd mode to see if it helps my "1500rpm miss"
                     12478  ; if time < 0.512ms then OFF
                     12479  ; if time > 0.768ms then ON
                     12480  ;in between follows last state
                     12481  
 9677 [03] B6B2      12482          lda     SparkDelayL
 9679 [03] B0F9      12483          sub     dwellusl
 967B [01] 97        12484          tax
 967C [03] B6B1      12485          lda     SparkDelayH
 967E [03] B2F8      12486          sbc     dwellush
 9680 [03] 250E      12487          bcs     hrd_off     ; if negative then OFF
 9682 [02] A101      12488          cmp     #1
 9684 [03] 230A      12489          bls     hrd_off     ; <= .511ms so OFF
 9686 [02] A102      12490          cmp     #2
 9688 [03] 2202      12491          bhi     hrd_on      ; > 0.768ms so ON
 968A [03] 2006      12492          bra     hrd_ck      ; in between so no change
                     12493  
                     12494  hrd_on:
                     12495  ; for testing we can disable hi-res dwell altogether
                     12496  ;        lda     feature6_f
                     12497  ;        bit     #hrd_disableb
                     12498  ;        bne     hrd_off        ; disabled
 968C [04] 106B      12499          bset    hrdwon,EnhancedBits6
 968E [03] 2002      12500          bra     hrd_ck
                     12501  hrd_off:
 9690 [04] 116B      12502          bclr    hrdwon,EnhancedBits6
                     12503  hrd_ck:
 9692 [05] 016B2F    12504          brclr    hrdwon,EnhancedBits6,do_set_spk   ; hrd bit off, so skip


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 93
MC68HC908GP32 User Bootloader


                     12505  
                     12506  ; now want to work out the dwell delay.
                     12507  ;first work out the target time for the spark and store away
                     12508  dwl_ok:
 9695 [03] B6B2      12509          lda     SparkDelayL
 9697 [04] CB0204    12510          add     T2CurrL
 969A [03] B7FB      12511          sta     SparkTargetL                ; Store low byte in target area
 969C [03] B6B1      12512          lda     SparkDelayH
 969E [04] C90203    12513          adc     T2CurrH
 96A1 [03] B7FA      12514          sta     SparkTargetH
                     12515  
                     12516  ;now calc dwell start point into SparkDelay
 96A3 [03] B6B2      12517          lda     SparkDelayL
 96A5 [03] B0F9      12518          sub     dwellusl
 96A7 [03] B7B2      12519          sta     SparkDelayL         ; now dwell delay L
 96A9 [03] B6B1      12520          lda     SparkDelayH
 96AB [03] B2F8      12521          sbc     dwellush
 96AD [03] B7B1      12522          sta     SparkDelayH         ; H
 96AF [04] 1869      12523          bset    indwell,EnhancedBits4       ; flag that we are doing dwell
                     12524                                      ; delay not spark delay
                     12525  
                     12526  ; make sure lowres dwell timers are zero to prevent early less accurate dwell
                     12527  ; change... don't reset the timer. If the timer gets there first it
                     12528  ; should be ignored, but that doesn't FFFFING work???!?!? so zero out the
                     12529  ; timers here anyway
                     12530  ;
 96B1 [03] 450000    12531          ldhx    #0
 96B4 [05] 006805    12532          brset   coilabit,coilsel,zd_a
 96B7 [05] 026806    12533          brset   coilbbit,coilsel,zd_b
                     12534  ;*        brset   coilcbit,coilsel,zd_c
                     12535  ;*        brset   coildbit,coilsel,zd_d
                     12536  ;*        brset   coilebit,coilsel,zd_e
                     12537  ;*        brset   coilfbit,coilsel,zd_f
 96BA [03] 2008      12538          bra     do_set_spk          ; how?
 96BC [04] 35B3      12539  zd_a:   sthx    SparkOnLeftah               ; Store time to keep output the same
 96BE [03] 2004      12540          bra     do_set_spk
 96C0 [04] 35B5      12541  zd_b:   sthx    SparkOnLeftbh               ; Store time to keep output the same
 96C2 [03] 2000      12542          bra     do_set_spk
                     12543  ;*zd_c:   sthx    SparkOnLeftch             ; Store time to keep output the same
                     12544  ;*        bra     do_set_spk
                     12545  ;*zd_d:   sthx    SparkOnLeftdh             ; Store time to keep output the same
                     12546  ;*        bra     do_set_spk
                     12547  ;*zd_e:   sthx    SparkOnLefteh             ; Store time to keep output the same
                     12548  ;*        bra     do_set_spk
                     12549  ;*zd_f:   sthx    SparkOnLeftfh             ; Store time to keep output the same
                     12550  
                     12551  do_set_spk:
 96C4 [03] B6B2      12552          lda     SparkDelayL
 96C6 [04] C0E022    12553      sub     latency_f
 96C9 [03] B7B2      12554      sta     SparkDelayL
 96CB [03] B6B1      12555      lda     SparkDelayH
 96CD [02] A200      12556      sbc     #0
 96CF [03] B7B1      12557      sta     SparkDelayH
 96D1 [03] 2406      12558      bcc     dss2
 96D3 [03] 3FB1      12559      clr     SparkDelayH
 96D5 [02] A640      12560      lda     #$40
 96D7 [03] 2010      12561      bra     setit2
                     12562  dss2:
                     12563  ;check not too soon - minimum delay of 64us
 96D9 [03] B6B1      12564          lda     SparkDelayH
 96DB [03] 260A      12565          bne     setit
 96DD [03] B6B2      12566          lda     SparkDelayL
 96DF [02] A140      12567          cmp     #$40
 96E1 [03] 2204      12568          bhi     setit
 96E3 [02] A640      12569          lda     #$40
 96E5 [03] 2002      12570          bra     setit2
                     12571  setit:
                     12572          ; Add total highres spark delay time to timer value from IRQ
                     12573      ; start and set interrupt
 96E7 [03] B6B2      12574          lda     SparkDelayL
                     12575  setit2:
 96E9 [04] CB0204    12576          add     T2CurrL
 96EC [01] 97        12577          tax                         ; Store low byte
 96ED [03] B6B1      12578          lda     SparkDelayH
 96EF [04] C90203    12579          adc     T2CurrH
 96F2 [03] B734      12580          sta     T2CH1H                      ; Write high byte timer output
                     12581                                      ; compare first
 96F4 [03] BF35      12582          stx     T2CH1L                      ; Then low byte
                     12583  
 96F6 [04] 1F33      12584          bclr    TOF,T2SC1           ; clear pending interrupt
 96F8 [04] 1C33      12585          bset    TOIE,T2SC1          ; Enable timer interrupt
                     12586  
                     12587      ; rotary low revs ...
                     12588  
                     12589  ;*  brclr   rotary2,EnhancedBits5,skip_rotary_jmp
                     12590  ;*  brset   indwell,EnhancedBits4,do_rotary_dwl
                     12591  ;*skip_rotary_jmp:
 96FA [03] CC96FD    12592      jmp     SKIP_CYCLE_CALC
                     12593  
                     12594  ;*do_rotary_dwl:
                     12595  ;*  brclr   rsh_s,EnhancedBits5,SKIP_CYCLE_CALC
                     12596  ;*  brclr   rsh_r,EnhancedBits5,SKIP_CYCLE_CALC
                     12597  
                     12598      ; Add rotary split to the SparkDelay
                     12599  
                     12600  ;*  lda     SparkDelayL
                     12601  ;*  add     splitdelL
                     12602  ;*  sta     SparkTempL
                     12603  ;*  lda     SparkDelayH
                     12604  ;*  adc     splitdelH
                     12605  ;*  sta     SparkTempH
                     12606  
                     12607      ; Div by 100 to get 1/10th ms value
                     12608  
                     12609  ;*  clrh
                     12610  ;*  ldx     #100T
                     12611  ;*  lda     SparkTempH
                     12612  ;*  div
                     12613  ;*  sta     SparkTempH
                     12614  ;*  lda     SparkTempL
                     12615  ;*  div
                     12616  ;*  sta     SparkTempL
                     12617  
                     12618      ; now pick which coil gets the dwell, and store it there.
                     12619  
                     12620  ;*        ldhx    #0T
                     12621  ;*        sthx    SparkOnLeftch
                     12622  ;*        sthx    SparkOnLeftdh
                     12623  ;*  ldhx    SparkTempH
                     12624  ;*  brset   rotaryFDign,feature1,set_FD_coils
                     12625  ;*  brset   coilabit,coilsel,rotary_set_coilc
                     12626  ;*  brset   coilbbit,coilsel,rotary_set_coild
                     12627  ;*  bra     end_rotary_dwell ; shouldn't get here
                     12628  
                     12629  ;*set_FD_coils:
                     12630  ;*  brset   coilabit,coilsel,rotary_set_coild
                     12631  ;*  brset   coilbbit,coilsel,rotary_set_coilc
                     12632  ;*  bra     end_rotary_dwell ; shouldn't get here
                     12633  
                     12634  ;*rotary_set_coilc:
                     12635  ;*  sthx    SparkOnLeftch
                     12636  ;*  bra     end_rotary_dwell
                     12637  
                     12638  ;*rotary_set_coild:
                     12639  ;*  sthx    SparkOnLeftdh
                     12640  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 94
MC68HC908GP32 User Bootloader


                     12641  ;*end_rotary_dwell:
                     12642  
                     12643  SKIP_CYCLE_CALC:
                     12644  ; are we logging triggers?
 96FD [05] 076A36    12645          brclr   triglog,EnhancedBits5,w_dec_notlogt
                     12646          ;we are logging so record something
 9700 [01] 8C        12647          clrh
                     12648  
 9701 [04] CE01CD    12649          ldx     VE_r+PAGESIZE-2
 9704 [05] 025F0F    12650          brset   SparkHSpeed,SparkBits,tl_high
                     12651  ;tl_low:
 9707 [02] A601      12652          lda     #1
 9709 [04] C701CE    12653          sta     VE_r+PAGESIZE-1
 970C [03] B672      12654          lda     rpmch
 970E [04] D70112    12655          sta     VE_r,x
 9711 [01] 5C        12656          incx
 9712 [03] B673      12657          lda     rpmcl
 9714 [03] 2014      12658          bra     tl_cont
                     12659  tl_high:
 9716 [01] 4F        12660          clra
 9717 [04] C701CE    12661          sta     VE_r+PAGESIZE-1
 971A [03] B6AF      12662          lda     iTimeH
 971C [03] 2602      12663          bne     tlhh
 971E [02] A6FF      12664          lda     #$FF
                     12665  tlhh:
 9720 [04] D70112    12666          sta     VE_r,x
 9723 [01] 5C        12667          incx
 9724 [03] B6B0      12668          lda     iTimeL
 9726 [03] 2602      12669          bne     tl_cont
 9728 [02] A6FF      12670          lda     #$FF
                     12671  tl_cont:
 972A [04] D70112    12672          sta     VE_r,x
 972D [01] 5C        12673          incx
 972E [02] A3B9      12674          cpx     #PAGESIZE-4
 9730 [03] 2501      12675          blo     wdtlt
 9732 [01] 5F        12676          clrx
                     12677  wdtlt:
 9733 [04] CF01CD    12678          stx     VE_r+PAGESIZE-2
                     12679  w_dec_notlogt:
                     12680  
 9736 [04] C60202    12681          lda     T2CurrX
 9739 [03] B7AB      12682          sta     T2LastX             ; Make current value last
 973B [04] C60203    12683          lda     T2CurrH
 973E [03] B7AC      12684          sta     T2LastH
 9740 [04] C60204    12685          lda     T2CurrL
 9743 [03] B7AD      12686          sta     T2LastL
                     12687  
 9745 [05] 4E7270    12688          mov       rpmch,rpmph
 9748 [05] 4E7371    12689          mov       rpmcl,rpmpl
                     12690  
 974B [03] 3F72      12691          clr       rpmch
 974D [03] 3F73      12692          clr       rpmcl
 974F [04] 1000      12693          bset      fuelp,porta               ; Turn on fuel Pump
                     12694  ;scc_run:
 9751 [04] 1042      12695          bset      running,engine    ; Set engine running value
                     12696  ;*        brclr     dwellcont,feature7,no_dwell
                     12697          ;figure out if we want to schedule dwell now
                     12698  ;;        brclr   crank,engine,bsc1 ; we don't
                     12699          ; if in crank mode then min_dwell does same thing
 9753 [03] CC9756    12700          jmp       squirtCheck1
                     12701  
                     12702  ;*no_dwell:
                     12703  ;*        brclr     min_dwell,feature2,bsc1
                     12704          ; if minimal dwell set coil to charge in 0.1ms
                     12705          ; this should help HEI4 pin until I've written dwell
                     12706      ; control as the high time starts at the trigger
                     12707  ;*scc_hei4:
                     12708  ;*        bclr    sparkon,revlimbits        ; spark now off
                     12709  ;*        brset   invspk,EnhancedBits4,sccr_inv
                     12710  ;*        COILPOS                           ; charge coil for non-inverted
                     12711  ;*bsc1:
                     12712  ;*        bra     squirtCheck1
                     12713  ;*sccr_inv:
                     12714  ;*        COILNEG                           ; charge coil for inverted
                     12715  
                     12716  *********** now schedule some fuel injection ************
                     12717  
                     12718  squirtCheck1:
 9756 [05] 024218    12719          brset     crank,engine,schedule1a   ; Squirt on every pulse
                     12720                                      ; if cranking
                     12721  
 9759 [04] 3C84      12722          inc       IgnCount1         ; Check to see if we are to
                     12723                                      ; squirt or skip
 975B [03] B684      12724          lda       IgnCount1
 975D [04] C1E195    12725          cmp       divider_f1    ;* divider_f1 = 4T
 9760 [03] 2708      12726          beq       schedule1
 9762 [02] A110      12727          cmp       #16T                      ; The maximum allowed - reset if match
 9764 [03] 2514      12728          blo       squirtDone1
 9766 [03] 3F84      12729          clr       IgnCount1
 9768 [03] 2010      12730          bra       squirtDone1
                     12731  
                     12732  schedule1:
 976A [03] 3F84      12733          clr       IgnCount1
                     12734  
                     12735   ;       lda       DTmode_f         ; check if DT in use
                     12736   ;       bit       #alt_i2t2
                     12737   ;       bne       schedule1a               ; i2t2=1
                     12738  
                     12739  ;*        lda       alternate_f1
                     12740  ;*        beq       schedule1a
 976C [04] 3C86      12741          inc       altcount1
 976E [05] 008609    12742          brset     0,altcount1,squirtDone1
                     12743  schedule1a:
 9771 [05] 4E6E4E    12744          mov       pwcalc1,pw1
 9774 [03] 2704      12745          beq       squirtDone1               ; check for zero pulse
 9776 [04] 1441      12746          bset      sched1,squirt
 9778 [04] 1041      12747          bset      inj1,squirt
                     12748  squirtDone1:
                     12749  
                     12750  ;-------------------------------------------------------------------------------
                     12751  
                     12752  squirtCheck2:
                     12753  ;*        lda       DTmode_f                ; check if DT in use
                     12754  ;*        bit       #alt_i2t2
                     12755  ;*        bne       sc2dual         ; i2t2=1
                     12756  
                     12757  sc2single:
 977A [05] 02421F    12758          brset     crank,engine,schedule2sa  ; Squirt on every pulse
                     12759                                      ; if cranking
                     12760  
 977D [04] 3C85      12761          inc       IgnCount2         ; Check to see if we are to
                     12762                                      ; squirt or skip
 977F [03] B685      12763          lda       IgnCount2
 9781 [04] C1E195    12764          cmp       divider_f1     ;* divider_f1 = 4T
 9784 [03] 270A      12765          beq       schedule2s
 9786 [03] B685      12766          lda       IgnCount2
 9788 [02] A110      12767          cmp       #16T                      ; The maximum allowed - reset if match
 978A [03] 2546      12768          blo       squirtDone2
 978C [03] 3F85      12769          clr       IgnCount2
 978E [03] 2042      12770          bra       squirtDone2
                     12771  
                     12772  schedule2s:
 9790 [03] 3F85      12773          clr       IgnCount2
 9792 [04] C6E196    12774          lda       alternate_f1       ;* alternate_f1 = 1 (alternate)
 9795 [03] 2705      12775          beq       schedule2sa
 9797 [04] 3C87      12776          inc       altcount2


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 95
MC68HC908GP32 User Bootloader


 9799 [05] 018736    12777          brclr     0,altcount2,squirtDone2
                     12778  schedule2sa:
 979C [05] 4E6F53    12779          mov       pwcalc2,pw2
 979F [03] 2731      12780          beq       squirtDone2               ; check for zero pulse
 97A1 [04] 1841      12781          bset      sched2,squirt
 97A3 [04] 1241      12782          bset      inj2,squirt
 97A5 [03] 202B      12783          bra       squirtDone2
                     12784  
                     12785  sc2dual:
 97A7 [05] 02421F    12786          brset     crank,engine,schedule2da  ; Squirt on every pulse
                     12787                                      ; if cranking
                     12788  
 97AA [04] 3C85      12789          inc       IgnCount2         ; Check to see if we are to
                     12790                                      ; squirt or skip
 97AC [03] B685      12791          lda       IgnCount2
 97AE [04] C1E295    12792          cmp       divider_f2     ;* divider_f2 = 4T
 97B1 [03] 270A      12793          beq       schedule2d
 97B3 [03] B685      12794          lda       IgnCount2
 97B5 [02] A110      12795          cmp       #16T                      ; The maximum allowed - reset if match
 97B7 [03] 2619      12796          bne       squirtDone2
 97B9 [03] 3F85      12797          clr       IgnCount2
 97BB [03] 2015      12798          bra       squirtDone2
                     12799  
                     12800  schedule2d:
 97BD [03] 3F85      12801          clr       IgnCount2
 97BF [04] C6E196    12802          lda       alternate_f1   ;* alternate_f1 = 1 (alternate)
 97C2 [03] 2705      12803          beq       schedule2da
 97C4 [04] 3C87      12804          inc       altcount2
 97C6 [05] 018709    12805          brclr     0,altcount2,squirtDone2
                     12806  schedule2da:
 97C9 [05] 4E6F53    12807          mov       pwcalc2,pw2
 97CC [03] 2704      12808          beq       squirtDone2               ; check for zero pulse
 97CE [04] 1841      12809          bset      sched2,squirt
 97D0 [04] 1241      12810          bset      inj2,squirt
                     12811  
                     12812  squirtDone2:
                     12813  
                     12814  ;*IRQ_EXIT:
                     12815  ;*        brset     MSNEON,personality,IRQ_EXIT2
                     12816  ;*        brset     WHEEL,personality,IRQ_EXIT2
                     12817  ;*        lda       feature6_f
                     12818  ;*        bit       #falsetrigb           ; can disable false trigger protection for testing
                     12819  ;*        bne       IRQ_EXIT2
                     12820  ; These are used to reduce/prevent false triggers but no good for
                     12821  ; the multi-toothed wheels
                     12822  ;*  bset      ACK,INTSCR            ; Flush out any new interrupts pending
                     12823  ;*  bset      IMASK,INTSCR          ; Disable IRQ interrupts
                     12824  ;*        bset      IRQF,INTSCR             ; read only ?!?! Won't do anything
                     12825  ;*IRQ_EXIT2:
 97D2 [02] 8A        12826          pulh
 97D3 [07] 80        12827          rti
                     12828  
                     12829  ***************************************************************************
                     12830  **
                     12831  ** ADC - Interrupt for ADC conversion complete
                     12832  **
                     12833  ***************************************************************************
                     12834  ADCDONE:
 97D4 [02] 8B        12835          pshh                                ; Do this because processor does
                     12836                                      ; not stack H
                     12837  
 97D5 [01] 8C        12838          clrh
                     12839  ; Store previous values for derivative
 97D6 [03] B68E      12840          lda     adsel
 97D8 [03] 2702      12841          beq     KPa_ADC_Check           ; If doing ADC 0 then check for fixed KPa
                     12842  ;*        cmp     #$06
                     12843  ;*        beq     FUEL_JUMP         ; Check the fuel pressure sensor
                     12844  ;*        cmp     #$07
                     12845  ;*        beq     EGT_JUMP          ; Check the EGT input
 97DA [03] 2004      12846          bra     Normal_ADSEL
                     12847  
                     12848  KPa_ADC_Check:
 97DC [05] 054200    12849              brclr   startw,engine,NormMAP_Count ; Are we in ASE mode?
                     12850  ;*        lda     feature10_f5
                     12851  ;*        bit     #MAPHoldb           ; Are we holding the MAP at a fixed value during ASE?
                     12852  ;*        beq     NormMAP_Count
                     12853  ;*        brset   FxdASEDone,EnhancedBits4,NormMAP_Count  ; Is Fixed ASE done?
                     12854  
                     12855  ;*        lda     coolant             ; We are in fixed MAP mode
                     12856  ;*        cmp     CltFixASE_f         ; so are we below the temperature setpoint?
                     12857  ;*        bls     FixdMAP_ASE
                     12858  ;*        bra     NormMAP_Count        ; Normal MAP mode
                     12859  
                     12860  ;*FixdMAP_ASE:
                     12861  ;*        lda     ASEcount
                     12862  ;*        cmp     TimFixASE_f
                     12863  ;*        blo     FixdMAP2                  ; Have we passed the Fixed timer yet?
                     12864  
                     12865  ;*        bset    FxdASEDone,EnhancedBits4  ; SET the Fixed bit so we dont do it again.
                     12866  ;*        bra     NormMAP_Count             ; Normal MAP mode
                     12867  
                     12868  ;*FixdMAP2:
                     12869  ;*        lda     adr
                     12870  ;*        lda     MAPFixASE_f               ; We are in fixed MAP mode during ASE, load value
                     12871  ;*        sta     map
                     12872  ;*        sta     lmap
                     12873  ;*        bra     Done_FIXMAP
                     12874  
                     12875  NormMAP_Count:
 97DF [01] 4F        12876          clra                            ; reset offset to zero
                     12877  
                     12878  Normal_ADSEL:
 97E0 [01] 97        12879          tax
 97E1 [03] E644      12880          lda     map,x
 97E3 [03] E777      12881          sta     lmap,x                      ; Store the old value
                     12882  
 97E5 [03] B63D      12883      lda     adr                     ; Load in the new ADC reading
 97E7 [03] EB44      12884          add     map,x                       ; Perform (map + last_map)/2
                     12885                                      ; averaging (for all ADC readings)
 97E9 [01] 46        12886          rora
 97EA [03] E744      12887      sta     map,x                   ; MAP is entry point, offset is
                     12888                                      ; loaded in index register
                     12889  Done_FIXMAP:
 97EC [03] B68E      12890      lda     adsel
 97EE [01] 4C        12891      inca
 97EF [02] A108      12892      cmp     #$08
 97F1 [03] 2603      12893      bne     ADCPTR
 97F3 [01] 4F        12894      clra
 97F4 [03] 2000      12895          bra     ADCPTR
                     12896  
                     12897  ;*FUEL_JUMP:
                     12898  ;*       lda      adr
                     12899  ;*       sta      o2_fpadc                  ; Fuel Pressure, wheel sensor or
                     12900                                      ; second O2 sensor
                     12901  ;*       lda      adsel
                     12902  ;*       inca
                     12903  ;*       bra      ADCPTR
                     12904  
                     12905  ;*EGT_JUMP:
                     12906  ;*       lda      adr
                     12907  ;*       sta      egtadc                    ; EGT sensor or wheel sensor input.
                     12908  ;*       clra
                     12909  ADCPTR:
 97F6 [03] B78E      12910         sta      adsel
 97F8 [02] 8A        12911         pulh
 97F9 [07] 80        12912         rti


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 96
MC68HC908GP32 User Bootloader


                     12913  ***************************************************************************
                     12914  **
                     12915  ** SCI Communications
                     12916  **
                     12917  ** Communications is established when the PC communications program sends
                     12918  ** a command character - the particular character sets the mode:
                     12919  **
                     12920  ** "A" = send all of the realtime variables via txport.
                     12921  ** "V" = send the VE table and constants via txport (128 bytes)
                     12922  ** "W"+<offset>+<newbyte> = receive new VE or constant byte value and
                     12923  **  store in offset location
                     12924  ** "X"+<offset>+<count>+<newbyte>+<newbyte>.... = receive series of new data bytes
                     12925  ** "B" = jump to flash burner routine and burn VE/constant values in RAM into flash
                     12926  ** "C" = Test communications - echo back SECL
                     12927  ** "Q" = Send over Embedded Code Revision Number (irrelevant in Extra, send zero)
                     12928  ** "S" = Signature - update every time there is a change in data format 32 bytes
                     12929  ** "T" = full code revision in text. 32 bytes
                     12930  ** "P"+<page> = load page of data from Flash to RAM
                     12931  
                     12932  ** txmode:
                     12933  **              01 = Getting realtime data
                     12934  **              02 = ?
                     12935  **              03 = Sending VE
                     12936  **              04 = sending signature
                     12937  **              05 = Getting offset VE
                     12938  **              06 = Getting data VE
                     12939  **              07 = Getting offset chunk write
                     12940  **              08 = Getting count  chunk write
                     12941  **              09 = Getting data   chunk write
                     12942  **              0A = Bootloader
                     12943  **              0B = version string
                     12944  **              0C = getting table number
                     12945  **              0D = config error message
                     12946  **              0E = format string
                     12947  ***************************************************************************
                     12948  IN_SCI_RCV:
 97FA [02] 8B        12949          pshh
 97FB [03] B616      12950          lda     SCS1                        ; Clear the SCRF bit by reading
                     12951                                      ; this register
                     12952  
 97FD [03] B68C      12953          lda     txmode                      ; Check if we are in the middle
                     12954                                      ; of a receive new VE/constant
 97FF [04] 410515    12955          cbeqa   #$05,TXMODE_5
 9802 [04] 41061A    12956          cbeqa   #$06,TXMODE_6
 9805 [04] 410727    12957          cbeqa   #$07,TXMODE_7
 9808 [04] 41082C    12958          cbeqa   #$08,TXMODE_8
 980B [04] 410931    12959          cbeqa   #$09,TXMODE_9
 980E [04] 410C03    12960          cbeqa   #$0C,TXMODE_C1
 9811 [03] CC98A3    12961          jmp     CHECK_TXCMD
 9814 [03] CC9AE7    12962  TXMODE_C1:      jmp TXMODE_C
                     12963  
                     12964  TXMODE_5:                           ; Getting offset for W command
 9817 [05] 4E188D    12965          mov     SCDR,rxoffset
 981A [04] 3C8C      12966          inc     txmode                      ; continue to next mode
 981C [03] CC9961    12967          jmp     DONE_RCV
                     12968  TXMODE_6:
 981F [05] 0C670A    12969          brset   mv_mode,EnhancedBits2,TX6_MV
 9822 [01] 8C        12970          clrh
 9823 [03] B618      12971          lda     SCDR
 9825 [03] BE8D      12972          ldx     rxoffset
 9827 [04] D70112    12973          sta     VE_r,x   ; store it in ram regardless of page
 982A [03] 3F8C      12974          clr     txmode
                     12975  TX6_MV:                                     ; in MV mode, just ignore any data sent
 982C [03] CC9961    12976          jmp     DONE_RCV
                     12977  
                     12978  TXMODE_7:                           ; Getting offset for X command
 982F [05] 4E188D    12979          mov     SCDR,rxoffset
 9832 [04] 3C8C      12980          inc     txmode                      ; continue to next mode
 9834 [03] CC9961    12981          jmp     DONE_RCV
                     12982  
                     12983  TXMODE_8:                           ; Getting count for X command
 9837 [05] 4E188B    12984          mov     SCDR,txgoal         ; borrow txgoal as we aren't
                     12985                                      ; going to using it
 983A [04] 3C8C      12986          inc     txmode                      ; continue to next mode
 983C [03] CC9961    12987          jmp     DONE_RCV
                     12988  
                     12989  TXMODE_9:
 983F [01] 8C        12990          clrh
 9840 [03] B618      12991          lda     SCDR
 9842 [03] BE8D      12992          ldx     rxoffset
 9844 [04] D70112    12993          sta     VE_r,x   ; store it in ram regardless of page
 9847 [04] 3C8D      12994          inc     rxoffset
 9849 [04] 3A8B      12995          dec     txgoal                      ; count down
 984B [03] 2602      12996          bne     TXMODE_9_CONT
 984D [03] 3F8C      12997          clr     txmode                      ; have received all bytes we expected
                     12998  TXMODE_9_CONT:
 984F [03] CC9961    12999          jmp     DONE_RCV
                     13000  
                     13001  ;MODE_B moved up here to enable relative branches
                     13002  MODE_B:
 9852 [04] C60105    13003          lda     page
 9855 [02] A110      13004          cmp     #$10                    ; see if tooth logging or invalid page
 9857 [03] 2503      13005          blo     MODE_B_OK               ; if it is then do not burn
 9859 [03] CC989E    13006          jmp     DONE_B
                     13007  MODE_B_OK:
 985C [04] 1B14      13008          bclr    SCRIE,SCC2          ; turn off receive interrupt
                     13009                                      ; so don't re-enter
                     13010  ;        cli                                ; re-enable interrupts to reduce
                     13011                                      ; stumble during Burn. Too bad
 985E [04] 6ECC76    13012          mov     #$CC,flocker
 9861 [05] CD9C56    13013          jsr     burnConst           ; routine disables interrupts during
                     13014                                      ; critical sections
                     13015  ;        cli                                ; returns with ints off
 9864 [03] 3F76      13016          clr     flocker
 9866 [03] 3F8C      13017          clr     txmode
                     13018  
 9868 [04] C60105    13019          lda     page                        ; check if page0, if so reload
                     13020                                      ; quick vars
 986B [03] 2708      13021          beq     ck_page0
 986D [04] 410326    13022          cbeqa   #3,ck_page3             ; do trigger angle / next cyl calc
 9870 [04] 410729    13023          cbeqa   #7,ck_page7             ; do rotary setting check
 9873 [03] 2029      13024          bra     DONE_B
                     13025  
                     13026  ck_page0:
                     13027  ; Set up RAM Variable - also when burning page0 search for "burning page0"
 9875 [04] C6E00B    13028          lda     feature1_f
 9878 [03] B763      13029          sta     feature1
 987A [04] C6E00C    13030          lda     feature2_f
 987D [03] B764      13031          sta     feature2
                     13032  ;        lda     feature3_f
                     13033  ;        sta     feature3           ; ram copy removed
                     13034  ;        lda     feature4_f
                     13035  ;        sta     feature4           ; ram copy removed
                     13036  ;        lda     feature5_f
                     13037  ;        sta     feature5           ; ram copy removed
                     13038  ;        lda     feature6_f
                     13039  ;        sta     feature6           ; ram copy removed
 987F [04] C6E06D    13040          lda     feature7_f
 9882 [03] B765      13041          sta     feature7
                     13042  ;        lda     feature8_f
                     13043  ;        sta     feature8           ; ram copy removed
 9884 [04] C6E001    13044          lda     outputpins_f
 9887 [03] B762      13045          sta     outputpins
 9889 [04] C6E000    13046          lda     personality_f
 988C [03] B761      13047          sta     personality         ; move from flash to ram
                     13048  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 97
MC68HC908GP32 User Bootloader


                     13049  ;is PTC4 (pin11) an input (trig2) or output (shiftlight)
                     13050  ;*        brclr   wd_2trig,feature1,ckp0_norm_ddrc
                     13051  ;*        lda     #%00001111              ; make PTC4 an input for second trigger
                     13052  ;*        bra     ckp0_ddrc
                     13053  ckp0_norm_ddrc:
 988E [02] A61F      13054          lda     #%00011111          ; ** Was 11111111
                     13055  ckp0_ddrc:
 9890 [03] B706      13056          sta     ddrc                        ; Outputs for LED
                     13057  
                     13058  ;decide if we are doing multiple wasted spark outputs
                     13059  ;check this here so a changed setting or MSQ load will correctly init the variables
                     13060  ;*        brset   MSNEON,personality,pz_wspk
                     13061  ;*        brset   WHEEL,personality,pz_wspk
                     13062  ;*pz_nwspk:
                     13063  ;*        bclr    wspk,EnhancedBits4        ; set that we are NOT doing wasted spark
                     13064  ;*        bra     DONE_B
                     13065  ;*pz_wspk:
                     13066  ;*        brclr   REUSE_LED19,outputpins,pz_nwspk
                     13067  ;*        brset   rotary2,EnhancedBits5,pz_nwspk
 9892 [04] 1669      13068          bset    wspk,EnhancedBits4  ; set that we are doing wasted spark
 9894 [03] 2008      13069          bra     DONE_B
                     13070  
                     13071  ck_page3:
                     13072  ;see if inverted or non-inv output and use a quick bit
                     13073  ;*        lda     SparkConfig1_f            ; check if noninv or inv spark
                     13074  ;*        bit     #M_SC1InvSpark      ;* M_SC1InvSpark = 1
                     13075  ;*        bne     ckp3_inv
                     13076  ;*        bclr    invspk,EnhancedBits4      ; set non-inverted
                     13077  ;*        bra     ckp3_i_done
                     13078  ckp3_inv:
 9896 [04] 1C69      13079          bset    invspk,EnhancedBits4        ; set inverted
                     13080  ckp3_i_done:
                     13081  
                     13082  
                     13083  ;EDIS and NEON are never next-cylinder
                     13084  ;*        brset   EDIS,personality,not_nc
                     13085  ;*        brset   MSNEON,personality,not_nc
                     13086  
                     13087  ;*        lda     TriggAngle_f
                     13088  ;*        cmp     #57T                      ; check for next cyl mode
                     13089  ;*        bhi     not_nc            ; trigger angle > 20, continue
                     13090  ;*        bset    nextcyl,EnhancedBits4
                     13091  ;*        bra     DONE_B
                     13092  ;*not_nc:
 9898 [04] 1B69      13093          bclr    nextcyl,EnhancedBits4
 989A [03] 2002      13094          bra     DONE_B
                     13095  
                     13096  ck_page7:
                     13097  ;*        lda     p8feat1_f
                     13098  ;*        bit     #rotary2b
                     13099  ;*        beq     ckp7nr
                     13100  ;*        bset    rotary2,EnhancedBits5
                     13101  ;*        bclr    wspk,EnhancedBits4        ; set that we are NOT doing normal wasted spark
                     13102  ;*        bra     DONE_B
                     13103  ;*ckp7nr:
 989C [04] 116A      13104          bclr    rotary2,EnhancedBits5
                     13105  DONE_B:
 989E [04] 1A14      13106          bset    SCRIE,SCC2          ; re-enable receive interrupt
 98A0 [03] CC9961    13107          jmp     DONE_RCV
                     13108  ;
                     13109  CHECK_TXCMD:
 98A3 [03] B618      13110          lda     SCDR    ; Get the command byte
 98A5 [04] 41413C    13111          cbeqa   #'A',MODE_A         ; realtime vars
 98A8 [04] 414221    13112          cbeqa   #'B',jMODE_B                ; All I hear is BURN
 98AB [04] 414346    13113          cbeqa   #'C',MODE_C         ; Comm test
 98AE [04] 41564C    13114          cbeqa   #'V',MODE_V         ; (VE) read page
 98B1 [04] 41571B    13115          cbeqa   #'W',jMODE_W                ; Write byte
 98B4 [04] 41511B    13116      cbeqa   #'Q',jMODE_Q            ; Query version
 98B7 [04] 41501B    13117          cbeqa   #'P',jMODE_P                ; Page select
 98BA [04] 41211B    13118          cbeqa   #'!',jMODE_BOOT             ; bootloader
 98BD [04] 41531B    13119          cbeqa   #'S',jMODE_SIGN             ; signature
 98C0 [04] 415226    13120          cbeqa   #'R',MODE_R         ; Added for enhanced stuff was "a"
                     13121                                      ; now "R" for Megatunix compatabilty
 98C3 [04] 415818    13122          cbeqa   #'X',jMODE_X                ; Chunk write
 98C6 [04] 415418    13123          cbeqa   #'T',jMODE_T                ; Text version
 98C9 [03] CC9961    13124          jmp     DONE_RCV
                     13125  
 98CC [03] CC9852    13126  jMODE_B:        jmp     MODE_B
 98CF [03] CC992D    13127  jMODE_W:        jmp     MODE_W
 98D2 [03] CC9939    13128  jMODE_Q:        jmp     MODE_Q
 98D5 [03] CC994B    13129  jMODE_P:        jmp     MODE_P
 98D8 [03] CC9963    13130  jMODE_BOOT:     jmp     MODE_BOOT
 98DB [03] CC9952    13131  jMODE_SIGN:     jmp     MODE_SIGN
 98DE [03] CC9932    13132  jMODE_X:        jmp     MODE_X
 98E1 [03] CC9942    13133  jMODE_T:        jmp     MODE_T
                     13134  
                     13135  MODE_A:         ; Big A
 98E4 [04] 6E168B    13136          mov     #$16,txgoal         ; B&G mode ($17) For Megaview use
 98E7 [03] 2005      13137          bra     MODE_AA_cont
                     13138  
                     13139  MODE_R:        ; Big R
 98E9 [04] 1D67      13140          bclr    mv_mode,EnhancedBits2       ; clear MegaView mode to allow
                     13141                                      ; enhanced comms
 98EB [04] 6E278B    13142          mov     #39T,txgoal         ; was 32T in 021, was 36T in 021u,
                     13143                                      ; 38T from 021x1 onwards, 023b2:39T
                     13144  ;        mov     #47T,txgoal                ; added another 8 bytes for debug
                     13145  
                     13146  MODE_AA_cont:
                     13147  ;not here - only save when about to send
                     13148  ;        mov     iTimeL,cTimeCommL  ; Copy cycle time to comm area
                     13149  ;        mov     iTimeH,cTimeCommH  ; otherwise it might get out of
                     13150                                      ; sync during communication
 98EE [03] 3F8A      13151          clr     txcnt                       ; Send back all real-time variables
 98F0 [02] A601      13152          lda     #$01
 98F2 [03] 2067      13153          bra     EN_XMIT
                     13154  
                     13155  MODE_C:
 98F4 [03] 3F8A      13156          clr     txcnt                       ; Just send back SECL variable to
                     13157                                      ; test comm port
 98F6 [04] 6E018B    13158          mov     #$1,txgoal
 98F9 [02] A601      13159          lda     #$01
 98FB [03] 205E      13160          bra     EN_XMIT
                     13161  
                     13162  MODE_V:
 98FD [03] 3F8A      13163          clr     txcnt
 98FF [05] 0C6724    13164          brset   mv_mode,EnhancedBits2,MODE_V_MV
 9902 [04] 6EBD8B    13165          mov     #PAGESIZE,txgoal            ; no. of bytes to send back
                     13166                                      ; (was $7e) was 201 now 213
                     13167                                      ; for 12x12 NOW 201 again:-)
 9905 [04] C60105    13168          lda     page
 9908 [04] 41F00F    13169          cbeqa   #$F0,MODE_V_F0
 990B [04] 41F110    13170          cbeqa   #$F1,MODE_V_F1
                     13171  ;ensure trigger/tooth loggers OFF
 990E [04] 156A      13172          bclr    toothlog,EnhancedBits5
 9910 [04] 176A      13173          bclr    triglog,EnhancedBits5
 9912 [04] 41F20D    13174          cbeqa   #$F2,MODE_V_F23
 9915 [04] 41F30A    13175          cbeqa   #$F3,MODE_V_F23
 9918 [03] 200F      13176          bra     MODE_V2
                     13177  MODE_V_F0:
 991A [04] 156A      13178          bclr    toothlog,EnhancedBits5
 991C [03] 200B      13179          bra     MODE_V2
                     13180  MODE_V_F1:
 991E [04] 176A      13181          bclr    triglog,EnhancedBits5
 9920 [03] 2007      13182          bra     MODE_V2
                     13183  MODE_V_F23:
 9922 [03] 3F8B      13184          clr     txgoal    ; send back all 256 bytes (perhaps)


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 98
MC68HC908GP32 User Bootloader


 9924 [03] 2003      13185          bra     MODE_V2
                     13186  MODE_V_MV:
 9926 [04] 6E7D8B    13187          mov     #$7D,txgoal
                     13188  MODE_V2:
 9929 [02] A603      13189          lda     #$03
 992B [03] 202E      13190          bra     EN_XMIT
                     13191  MODE_W:
 992D [04] 6E058C    13192          mov     #$05,txmode
 9930 [03] 202F      13193          bra     DONE_RCV
                     13194  
                     13195  MODE_X:
 9932 [04] 1D67      13196          bclr    mv_mode,EnhancedBits2       ; clear MegaView mode to allow
                     13197                                      ; enhanced comms
 9934 [04] 6E078C    13198          mov     #$07,txmode
 9937 [03] 2028      13199          bra     DONE_RCV
                     13200  
                     13201  MODE_Q:
 9939 [03] 3F8A      13202          clr     txcnt                       ; Just send back SECL variable
                     13203                                      ; to test comm port
 993B [04] 6E018B    13204          mov     #$1,txgoal
 993E [02] A605      13205          lda     #$05
 9940 [03] 2019      13206          bra     EN_XMIT
                     13207  
                     13208  MODE_T:
 9942 [03] 3F8A      13209          clr     txcnt
 9944 [04] 6E208B    13210          mov     #$20,txgoal         ; Send 32 Chars of Text version
 9947 [02] A60E      13211          lda     #$0E                        ; TXMode = sending format string
 9949 [03] 2010      13212          bra     EN_XMIT
                     13213  
                     13214  MODE_P:
 994B [04] 1D67      13215          bclr    mv_mode,EnhancedBits2       ; clear MegaView mode to allow
                     13216                                      ; enhanced comms
 994D [04] 6E0C8C    13217          mov     #$0C,txmode         ; txmode = getting page number
 9950 [03] 200F      13218          bra     DONE_RCV
                     13219  
                     13220  MODE_SIGN:                          ; Send Signature text - DJLH
 9952 [04] 1D67      13221          bclr    mv_mode,EnhancedBits2       ; clear MegaView mode to allow
                     13222                                      ; enhanced comms
 9954 [03] 3F8A      13223          clr     txcnt
 9956 [04] 6E208B    13224          mov     #$20,txgoal         ; Send 32 Chars of Signature
 9959 [02] A604      13225          lda     #$04                        ; TXMode = sending signature
                     13226  EN_XMIT:
 995B [03] B78C      13227          sta     txmode
 995D [04] 1614      13228          bset    TE,SCC2                     ; Enable Transmit
 995F [04] 1E14      13229          bset    SCTIE,SCC2          ; Enable transmit interrupt
                     13230  
                     13231  DONE_RCV:
 9961 [02] 8A        13232          pulh
 9962 [07] 80        13233          rti
                     13234  
                     13235  MODE_BOOT:
 9963 [03] B68C      13236          lda     txmode
 9965 [02] A10A      13237          cmp     #$0A
 9967 [03] 2705      13238          beq     jBootLoad
 9969 [04] 6E0A8C    13239          mov     #$0A,txmode
 996C [03] 20F3      13240          bra     DONE_RCV
                     13241  jBootLoad:
 996E [03] CC9A41    13242          jmp     BootLoad
                     13243  
                     13244  CONF_ERR:
 9971 [04] 5598      13245          ldhx    tmp5                        ; tmp5,6 contain absolute
                     13246                                      ; address of data
 9973 [02] F6        13247          lda     ,x
 9974 [03] 2605      13248          bne     conf_err2           ; zero is string terminator
 9976 [03] 3F8C      13249          clr     txmode
 9978 [03] CC9A39    13250          jmp     FIN_TX
                     13251  conf_err2:
 997B [03] B718      13252          sta     SCDR                        ; Send char
 997D [02] AF01      13253          aix     #1
 997F [04] 3598      13254          sthx    tmp5
 9981 [03] CC9A3F    13255          jmp     DONE_BYTE
                     13256  
                     13257  tx_done:
                     13258  ;we get here after we've sent the last byte
 9984 [04] 1714      13259          bclr    TE,SCC2                     ; Disable Transmit
 9986 [04] 1F14      13260          bclr    SCTIE,SCC2          ; Disable transmit interrupt
 9988 [02] 8A        13261          pulh
 9989 [07] 80        13262          rti
                     13263  
 998A [03] CC9A21    13264  jIN_SIGN_MODE:         jmp       IN_SIGN_MODE
 998D [03] CC9A26    13265  jIN_T_MODE:            jmp       IN_T_MODE
 9990 [03] CC99FE    13266  jIN_V_MODE:            jmp       IN_V_MODE
                     13267  *** Transmit Character Interrupt Handler ***************
                     13268  IN_SCI_TX:
 9993 [02] 8B        13269          pshh
 9994 [03] B616      13270          lda     SCS1                        ; Clear the SCRF bit by reading
                     13271                                      ; this register
 9996 [01] 8C        13272          clrh
 9997 [03] BE8A      13273          ldx     txcnt
 9999 [03] B68C      13274          lda     txmode
 999B [03] 27E7      13275          beq     tx_done
 999D [04] 41054D    13276      cbeqa   #$05,IN_Q_MODEJMP
 99A0 [04] 4104E7    13277          cbeqa   #$04,jIN_SIGN_MODE      ; see above
 99A3 [04] 410DCB    13278          cbeqa   #$0D,CONF_ERR           ; see above
 99A6 [04] 410EE4    13279          cbeqa   #$0E,jIN_T_MODE         ; see above
 99A9 [02] A101      13280          cmp     #$01
 99AB [03] 26E3      13281          bne     jIN_V_MODE
                     13282  IN_A_OR_C_MODE:
                     13283  ;check for iTime sending. Now send three bytes but don't waste extra byte, only store two
 99AD [02] A316      13284          cpx     #22T
 99AF [03] 260B      13285          bne     ac_chk38
 99B1 [03] B6AF      13286          lda     iTimeH
 99B3 [05] 4EB057    13287          mov     iTimeL,cTimeCommL   ; Copy cycle time to comm area
 99B6 [05] 4EAE56    13288          mov     iTimeX,cTimeCommH   ; otherwise it might get out of
 99B9 [03] CC9A2E    13289          jmp     CONT_TX                     ; sync during communication
                     13290  ac_chk38:
 99BC [02] A326      13291          cpx     #38T
 99BE [03] 2605      13292          bne     ac_chk37
 99C0 [03] B6CF      13293          lda     bcDC
 99C2 [03] CC9A2E    13294          jmp     CONT_TX
                     13295  ac_chk37:
 99C5 [02] A325      13296          cpx     #37T
                     13297  ;        bhi     R_otherbytes
 99C7 [03] 2605      13298          bne     ac_chk36
 99C9 [03] B656      13299          lda     cTimeCommH  ; actually holds iTimeX
 99CB [03] CC9A2E    13300          jmp     CONT_TX
                     13301  
                     13302  ;R_otherbytes:
                     13303  ;        lda     dwelldelay1-38T,X  ; send dwell delays, may get data corruption
                     13304  ;        bra     CONT_TX
                     13305  ac_chk36:
 99CE [02] A324      13306          cpx     #36T
 99D0 [03] 2605      13307          bne     NotTPSLAst_Yet
 99D2 [03] B6D1      13308          lda     TPSlast
 99D4 [03] CC9A2E    13309          jmp     CONT_TX
                     13310  
                     13311  NotTPSLAst_Yet:
 99D7 [02] A323      13312          cpx     #35T
 99D9 [03] 2605      13313          bne     inac_cont
 99DB [02] 95        13314          tsx     ; send stack
 99DC [01] 9F        13315          txa
 99DD [03] CC9A2E    13316          jmp     CONT_TX
                     13317  inac_cont:
 99E0 [02] A31E      13318          cpx     #30T
 99E2 [03] 220F      13319          bhi     send_ports
                     13320  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 99
MC68HC908GP32 User Bootloader


                     13321  ;Added for MV compatability with 300 & 400KPa MAP sensors
 99E4 [02] A304      13322          cpx     #04T                        ; Are we about to send the MAP value?
 99E6 [03] 2607      13323          bne     Send_Data_Normal    ; No so carry on as normal
 99E8 [05] 0D6704    13324          brclr   mv_mode,EnhancedBits2,Send_Data_Normal      ; Yes so are we in
                     13325                                      ; MV mode?
                     13326  
                     13327  ;*        lda     config11_f1
                     13328  ;*        and     #$03
                     13329  ;*        cbeqa   #2T,kpa300_reading
                     13330  ;*        cbeqa   #3T,kpa400_reading
 99EB [03] 2002      13331          bra     send_data_normal
                     13332  
                     13333  ;*kpa300_reading:
                     13334  ; If we are here we are using a 300KPa sensor and we have a MV connected,
                     13335  ; so send 86% of the raw map value to MV so it converts it correctly
                     13336  ;*        lda     kpa
                     13337  ;*        cmp     #217T
                     13338  ;*        bhi     Load_Max_Map              ; If raw map > 217 then we are
                     13339                                      ; above 255KPa, thats the limit in MV
                     13340  ;*        tax
                     13341  ;*        lda     #219T                     ; 86% = 219 in 255 bytes
                     13342  ;*        mul
                     13343  ;*        txa
                     13344  ;*        bcc     Send_Fudged_Data
                     13345  ;*        inca
                     13346  ;*        bra     Send_Fudged_Data
                     13347  
                     13348  IN_Q_MODEJMP:
 99ED [03] 203C      13349          bra    IN_Q_MODE
                     13350  
                     13351  ; If we get here we are using a 400KPa sensor and we have a MV connected,
                     13352  ; so send 63% of the raw map value to MV
                     13353  ;*KPa400_Reading:
                     13354  ;*        lda     kpa
                     13355  ;*        cmp     #159T
                     13356  ;*        bhi     Load_Max_Map              ; If raw map > 159 then we are
                     13357                                      ; above 255KPa, the limit in MV
                     13358  ;*        tax
                     13359  ;*        lda     #160T
                     13360  ;*        mul
                     13361  ;*        txa
                     13362  ;*        bcc     Send_Fudged_Data
                     13363  ;*        inca
                     13364  ;*        bra     Send_Fudged_Data
                     13365  
                     13366  ;*Load_Max_Map:
                     13367  ;*        lda     #255T                     ; Load in KPa limit
                     13368  ;*Send_Fudged_Data:
                     13369  ;*        bra     CONT_TX
                     13370  
                     13371  
                     13372  Send_Data_Normal:
 99EF [03] E640      13373          lda     secl,X
 99F1 [03] 203B      13374          bra     CONT_TX
                     13375  send_ports:
 99F3 [01] 9F        13376          txa
 99F4 [02] A01F      13377          sub     #31T
 99F6 [01] 97        13378          tax
 99F7 [02] F6        13379          lda     porta,X                     ; load porta,b,c,d 31=a, 34=d
 99F8 [02] A302      13380          cpx     #2
 99FA [03] 2632      13381          bne     CONT_TX
                     13382  ;*        brclr   config_error,feature2,CONT_TX
                     13383  ;*        ora     #128T   ; set top bit in portc if config error
 99FC [03] 2030      13384          bra     CONT_TX
                     13385  IN_V_MODE
 99FE [04] C60105    13386          lda     page
 9A01 [04] 41F20E    13387          cbeqa   #$F2,V_f2
 9A04 [04] 41F315    13388          cbeqa   #$F3,V_f3
 9A07 [05] 0C6705    13389          brset   mv_mode,EnhancedBits2,IN_V_MV
 9A0A [04] D60112    13390          lda     ve_r,x                      ; get data from RAM (must have
                     13391                                      ; loaded a page first)
 9A0D [03] 201F      13392      bra     CONT_TX
                     13393  IN_V_MV:
 9A0F [03] CC9AD5    13394          jmp     MV_V_EMUL
                     13395  V_f2:
 9A12 [02] A340      13396          cpx     #$40
 9A14 [03] 2503      13397          blo     V_f2zero
 9A16 [02] F6        13398          lda     0,x
 9A17 [03] 2015      13399          bra     CONT_TX
                     13400  V_f2zero:
 9A19 [01] 4F        13401          clra
 9A1A [03] 2012      13402          bra     CONT_TX
                     13403  V_f3:
 9A1C [04] D60100    13404          lda     $0100,x
 9A1F [03] 200D      13405          bra     CONT_TX
                     13406  IN_SIGN_MODE:
 9A21 [04] D69E3E    13407      lda     SIGNATURE,x
 9A24 [03] 2008      13408      bra     CONT_TX
                     13409  IN_T_MODE:
 9A26 [04] D69E1E    13410      lda     textversion_f,x
 9A29 [03] 2003      13411      bra     CONT_TX
                     13412  IN_Q_MODE:
 9A2B [04] D69E1D    13413      lda     REVNUM,X
                     13414  
                     13415  CONT_TX:
 9A2E [03] B718      13416          sta     SCDR                        ; Send char
 9A30 [03] B68A      13417          lda     txcnt
 9A32 [01] 4C        13418          inca                                ; Increase number of chars sent
 9A33 [03] B78A      13419          sta     txcnt
 9A35 [03] B18B      13420          cmp     txgoal                      ; Check if done
 9A37 [03] 2606      13421          bne     DONE_BYTE           ; Branch if NOT finished to DONE_BYTE
                     13422  
                     13423  FIN_TX:
 9A39 [03] 3F8A      13424          clr     txcnt
 9A3B [03] 3F8B      13425          clr     txgoal
 9A3D [03] 3F8C      13426          clr     txmode
                     13427  
                     13428  ;  do these on next entry with TXMODE=0
                     13429  ;        bclr    TE,SCC2                    ; Disable Transmit
                     13430  ;        bclr    SCTIE,SCC2         ; Disable transmit interrupt
                     13431  
                     13432  DONE_BYTE:
 9A3F [02] 8A        13433          pulh
 9A40 [07] 80        13434          rti
                     13435  
                     13436  BootLoad:
 9A41 [04] 121D      13437          bset     IMASK,INTSCR               ; disable interrupts for IRQ
                     13438                                      ; (the ignition i/p)
                     13439  
                     13440  ; that should be enough to stop the engine and then keep it stalled
                     13441  ; I wouldn't recommend updating the flash with a running engine anyway
                     13442  ; stop timers, disable interrupts
 9A43 [04] 1A20      13443          bset     TSTOP,T1SC
 9A45 [04] 1D20      13444          bclr     TOIE,T1SC
 9A47 [04] 1A2B      13445          bset     TSTOP,T2SC
 9A49 [04] 1D2B      13446          bclr     TOIE,T2SC
                     13447  
                     13448  ; switch off inj1
 9A4B [04] 1803      13449          bset     inject1,portd              ; ^* * * Turn Off Injector #1
                     13450                                      ; (inverted drive)
 9A4D [04] 1741      13451          bclr     firing1,squirt
 9A4F [04] 1541      13452          bclr     sched1,squirt
 9A51 [04] 1141      13453          bclr     inj1,squirt
                     13454  
                     13455  ; switch off inj2
 9A53 [04] 1A03      13456          bset     inject2,portd              ; ^* * * Turn Off Injector #2


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 100
MC68HC908GP32 User Bootloader


                     13457                                      ; (inverted drive)
 9A55 [04] 1B41      13458          bclr     firing2,squirt
 9A57 [04] 1941      13459          bclr     sched2,squirt
 9A59 [04] 1341      13460          bclr     inj2,squirt
                     13461  
 9A5B [03] 3F42      13462          clr      engine                     ; Engine is stalled, clear all
                     13463                                      ; in engine settings
 9A5D [04] 1100      13464          bclr     fuelp,porta                ; Turn off fuel pump
 9A5F [03] 3F72      13465          clr      rpmch
 9A61 [03] 3F73      13466          clr      rpmcl
 9A63 [03] 3F4E      13467          clr      pw1                        ; zero out pulsewidths
 9A65 [03] 3F53      13468          clr      pw2
 9A67 [03] 3F4D      13469          clr      rpm
                     13470  
                     13471  ; turn spark outputs to inactive to avoid burning out coil. This will
                     13472  ; cause coils to fire, but that in unavoidable. A "non-inverted" output
                     13473  ; charges coil when signal from board is high i.e. the output pin is low.
                     13474  ; So to make inactive set these pins high
                     13475  ; if inverted set low
                     13476  
 9A69 macro          13477          TurnAllSpkOff                       ; macro to turn off all spark outputs
 9A69 [05] 0D6910    13478   BRCLR INVSPK,ENHANCEDBITS4,SOIN  
 9A6C [04] 1300      13479   BCLR IASC,PORTA  
 9A6E [04] 1102      13480   BCLR SLED,PORTC  
 9A70 [04] 1502      13481   BCLR WLED,PORTC  
 9A72 [04] 1302      13482   BCLR ALED,PORTC  
 9A74 [04] 1103      13483   BCLR OUTPUT3,PORTD  
 9A76 [04] 1702      13484   BCLR PIN10,PORTC  
 9A78 [04] 1503      13485   BCLR KNOCKIN,PORTD  
 9A7A [03] 203E      13486   BRA SOIN_DONE  
                     13487  SOIN:  
 9A7C [05] 006204    13488   BRSET REUSE_FIDLE,OUTPUTPINS,SOIN1  
 9A7F [04] 1300      13489   BCLR IASC,PORTA  
 9A81 [03] 2002      13490   BRA SOIN2  
 9A83 [04] 1200      13491  SOIN1: BSET IASC,PORTA  
 9A85 [05] 026204    13492  SOIN2: BRSET REUSE_LED17,OUTPUTPINS,SOIN3  
 9A88 [04] 1102      13493   BCLR SLED,PORTC  
 9A8A [03] 2002      13494   BRA SOIN4  
 9A8C [04] 1002      13495  SOIN3: BSET SLED,PORTC  
 9A8E [05] 086204    13496  SOIN4: BRSET REUSE_LED19,OUTPUTPINS,SOIN5  
 9A91 [04] 1302      13497   BCLR ALED,PORTC  
 9A93 [03] 2002      13498   BRA SOIN6  
 9A95 [04] 1202      13499  SOIN5: BSET ALED,PORTC  
 9A97 [05] 056207    13500  SOIN6: BRCLR REUSE_LED18,OUTPUTPINS,SOIN7  
 9A9A [05] 076204    13501   BRCLR REUSE_LED18_2,OUTPUTPINS,SOIN7  
 9A9D [04] 1402      13502   BSET WLED,PORTC  
 9A9F [03] 2002      13503   BRA SOIN8  
 9AA1 [04] 1502      13504  SOIN7: BCLR WLED,PORTC  
                     13505  SOIN8:  
 9AA3 [05] 096402    13506   BRCLR OUT3SPARKD,FEATURE2,SOIN9  
 9AA6 [04] 1003      13507   BSET OUTPUT3,PORTD  
                     13508  SOIN9:  
 9AA8 [04] C6E074    13509   LDA FEATURE8_F  
 9AAB [02] A508      13510   BIT #SPKEOPB  
 9AAD [03] 2702      13511   BEQ SOIN10  
 9AAF [04] 1602      13512   BSET PIN10,PORTC  
                     13513  SOIN10:  
 9AB1 [04] C6E074    13514   LDA FEATURE8_F  
 9AB4 [02] A510      13515   BIT #SPKFOPB  
 9AB6 [03] 2702      13516   BEQ SOIN11  
 9AB8 [04] 1403      13517   BSET KNOCKIN,PORTD  
                     13518  SOIN11:  
                     13519  SOIN_DONE:  
 9ABA [03] 3FB3      13520   CLR SPARKONLEFTAH  
 9ABC [03] 3FB4      13521   CLR SPARKONLEFTAL  
 9ABE [03] 3FB5      13522   CLR SPARKONLEFTBH  
 9AC0 [03] 3FB6      13523   CLR SPARKONLEFTBL  
 9AC2 [03] 3FB7      13524   CLR SPARKONLEFTCH  
 9AC4 [03] 3FB8      13525   CLR SPARKONLEFTCL  
 9AC6 [03] 3FB9      13526   CLR SPARKONLEFTDH  
 9AC8 [03] 3FBA      13527   CLR SPARKONLEFTDL  
 9ACA [03] 3FBB      13528   CLR SPARKONLEFTEH  
 9ACC [03] 3FBC      13529   CLR SPARKONLEFTEL  
 9ACE [03] 3FBD      13530   CLR SPARKONLEFTFH  
 9AD0 [03] 3FBE      13531   CLR SPARKONLEFTFL  
                     13532  
 9AD2 [03] CCFB59    13533          jmp      BootReset1
                     13534  
                     13535  MV_V_EMUL:
                     13536          ; we are in Megaview mode. Ideally we'd like to return a B&G
                     13537      ;style view of our data
 9AD5 [02] A374      13538          cpx     #116T
 9AD7 [03] 250A      13539          blo     V_MV2
 9AD9 [01] 9F        13540          txa                         ; need to return config11,12,13
                     13541                                      ; to get correct map reading
 9ADA [02] AB58      13542          add     #88T                        ; B&G byte 116 is at 204 in this code
 9ADC [01] 97        13543          tax
 9ADD [04] D6E1B6    13544          lda     config11_f1,x
 9AE0 [03] CC9A2E    13545          jmp     CONT_TX
                     13546  V_MV2:
 9AE3 [01] 4F        13547          clra                                ; for now, return zero.
 9AE4 [03] CC9A2E    13548          jmp CONT_TX
                     13549  
                     13550  TXMODE_C:
 9AE7 [03] B618      13551          lda     SCDR                        ; expect 0 to 7 or $F0 or $F1
 9AE9 [04] C10105    13552          cmp     page                        ; check if already loaded
 9AEC [03] 2748      13553          beq     DONE_LOAD
 9AEE [04] 41F02F    13554          cbeqa   #$F0,toothl_F0
 9AF1 [04] 41F130    13555          cbeqa   #$F1,toothl_F1
 9AF4 [04] 41F224    13556          cbeqa   #$F2,okpage
 9AF7 [04] 41F321    13557          cbeqa   #$F3,okpage
 9AFA [04] 156A      13558          bclr    toothlog,EnhancedBits5  ; ensure tooth logger is off
 9AFC [04] 176A      13559          bclr    triglog,EnhancedBits5  ; ensure tooth logger is off
 9AFE [02] A10A      13560          cmp     #10T                        ; only 0-8 used in code at present
 9B00 [03] 2234      13561          bhi     DONE_LOAD
 9B02 [01] 5F        13562          clrx
 9B03 [04] C70105    13563          sta     page
 9B06 [02] ABE0      13564          add     #$E0                        ; hardcoded high byte of page
                     13565                                      ; area $Ex00
 9B08 [02] 87        13566          psha
 9B09 [02] 8A        13567          pulh
 9B0A [04] 1B14      13568          bclr    SCRIE,SCC2          ; turn off receive interrupt so
                     13569                                      ; don't re-enter
 9B0C [02] 9A        13570          cli                         ; re-enable interrupts to reduce
                     13571                                      ; stumble when MT changes page
                     13572  load_table:
 9B0D [02] F6        13573          lda     0,x                 ; h:x
 9B0E [02] 8B        13574          pshh
 9B0F [01] 8C        13575          clrh
 9B10 [04] D70112    13576          sta     VE_r,x                      ; dump into RAM. Bit of a kludge,
                     13577                                      ; want h=0
 9B13 [02] 8A        13578          pulh
 9B14 [01] 5C        13579          incx
 9B15 [02] A3BE      13580          cpx     #PAGESIZE+1         ; copy 256 bytes
                     13581                                      ; reduced to 200
                     13582                                      ; Increased to 212 for 12x12
                     13583                                      ; Back to 200 now for 022+
 9B17 [03] 26F4      13584          bne     load_table
 9B19 [03] 201B      13585          bra     DONE_LOAD
                     13586  okpage:
 9B1B [04] C70105    13587          sta     page
 9B1E [03] 2016      13588          bra     DONE_LOAD
                     13589  toothl_F0:
 9B20 [04] 146A      13590          bset    toothlog,EnhancedBits5
 9B22 [03] 2002      13591          bra     tooth_log_setup
                     13592  toothl_F1:


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 101
MC68HC908GP32 User Bootloader


 9B24 [04] 166A      13593          bset    triglog,EnhancedBits5
                     13594  tooth_log_setup:
 9B26 [04] C70105    13595          sta     page
 9B29 [04] 1B14      13596          bclr    SCRIE,SCC2
 9B2B [01] 4F        13597          clra
 9B2C [01] 5F        13598          clrx
 9B2D [01] 8C        13599          clrh
                     13600  clear_table:
 9B2E [04] D70112    13601          sta     VE_r,x                      ; dump into RAM. Bit of a kludge,
 9B31 [01] 5C        13602          incx
 9B32 [02] A3BE      13603          cpx     #PAGESIZE+1                 ; clear PAGESIZE bytes
 9B34 [03] 26F8      13604          bne     clear_table
                     13605  
                     13606  ;bytes VE_r+0 - VE_r+197 = data, VE_r+198 = counter
                     13607  
                     13608  DONE_LOAD:
 9B36 [04] 1A14      13609          bset    SCRIE,SCC2          ; re-enable receive interrupt
 9B38 [03] 3F8C      13610          clr     txmode
 9B3A [02] 8A        13611          pulh                                ; (same as DONE_RECV)
 9B3B [07] 80        13612          rti
                     13613  
                     13614  ***************************************************************************
                     13615  **
                     13616  ** Timer 2 overflow, extends hardware timer with an extra byte in software
                     13617  **
                     13618  ***************************************************************************
                     13619  T2overflow:
 9B3C [03] B62B      13620          lda     T2SC                ; Read interrupt
 9B3E [04] 1F2B      13621          bclr    TOF,T2SC    ; Reset interrupt
 9B40 [04] 3CAA      13622          inc     T2CNTX          ; increment software byte
 9B42 [04] 1169      13623          bclr    roll1,EnhancedBits4    ; clear the roll-over detect bits
 9B44 [04] 1369      13624          bclr    roll2,EnhancedBits4
 9B46 [07] 80        13625          rti
                     13626  ***************************************************************************
                     13627  **
                     13628  ** Dummy ISR - just performs RTI
                     13629  **
                     13630  ***************************************************************************
                     13631  Dummy:                                      ; Dummy vector - there just to
                     13632                                      ; keep the assembler happy
 9B47 [07] 80        13633      rti
                     13634  
                     13635  ***************************************************************************
                     13636  **
                     13637  ** Various functions/subroutines Follow
                     13638  **
                     13639  **  - Ordered Table Search
                     13640  **  - Linear Interpolation
                     13641  **  - 32 x 16 divide
                     13642  ***************************************************************************
                     13643  
                     13644  
                     13645  ***************************************************************************
                     13646  **
                     13647  ** Ordered Table Search
                     13648  **
                     13649  **  X is pointing to the start of the first value in the table
                     13650  **  tmp1:2 initially hold the start of table address, then they hold the bound values
                     13651  **  tmp3 is the end of the table (nelements - 1)
                     13652  **  tmp4 is the comparison value
                     13653  **  tmp5 is the index result - if zero then comp value is less than beginning of table, and
                     13654  **    if equal to nelements then it is rail-ed at upper end
                     13655  **
                     13656  ***************************************************************************
                     13657  tablelookup:
 9B48 [03] 3F98      13658          clr     tmp5
 9B4A [04] 5594      13659          ldhx    tmp1
 9B4C [02] F6        13660          lda     ,x
                     13661  ;        sta     tmp1
 9B4D [03] B795      13662          sta     tmp2
                     13663  ;        cmp     tmp4
                     13664  ;        bhi     GOT_ORD_NUM
                     13665  REENT:
 9B4F [01] 5C        13666          incx
 9B50 [04] 3C98      13667          inc     tmp5
 9B52 [05] 4E9594    13668          mov     tmp2,tmp1
 9B55 [02] F6        13669          lda     ,x
 9B56 [03] B795      13670          sta     tmp2
                     13671  
 9B58 [03] B197      13672          cmp     tmp4
 9B5A [03] 2206      13673          bhi     GOT_ORD_NUM
 9B5C [03] B698      13674          lda     tmp5
 9B5E [03] B196      13675          cmp     tmp3
 9B60 [03] 26ED      13676          bne     REENT
                     13677  
                     13678  ;        inc     tmp5
                     13679  ;        mov     tmp2,tmp1
                     13680  GOT_ORD_NUM:
 9B62 [04] 81        13681          rts
                     13682  
                     13683  ***************************************************************************
                     13684  **
                     13685  ** Linear Interpolation - 2D
                     13686  **
                     13687  **            (y2 - y1)
                     13688  **  Y = Y1 +  --------- * (x - x1)
                     13689  **            (x2 - x1)
                     13690  **
                     13691  **   tmp1 = x1
                     13692  **   tmp2 = x2
                     13693  **   tmp3 = y1
                     13694  **   tmp4 = y2
                     13695  **   tmp5 = x
                     13696  **   tmp6 = y
                     13697  ***************************************************************************
                     13698  LININTERP:
 9B63 [03] 3F9A      13699          clr       tmp7                      ; This is the negative slope
                     13700                                      ; detection bit
 9B65 [05] 4E9699    13701          mov     tmp3,tmp6
                     13702  CHECK_LESS_THAN:
 9B68 [03] B698      13703          lda     tmp5
 9B6A [03] B194      13704          cmp     tmp1
 9B6C [03] 2202      13705          bhi     CHECK_GREATER_THAN
 9B6E [03] 2044      13706          bra     DONE_WITH_INTERP
                     13707  CHECK_GREATER_THAN:
 9B70 [03] B698      13708          lda     tmp5
 9B72 [03] B195      13709          cmp     tmp2
 9B74 [03] 2505      13710          blo     DO_INTERP
 9B76 [05] 4E9799    13711          mov     tmp4,tmp6
 9B79 [03] 2039      13712          bra     DONE_WITH_INTERP
                     13713  
                     13714  DO_INTERP:
 9B7B [05] 4E9699    13715          mov     tmp3,tmp6
 9B7E [03] B695      13716          lda     tmp2
 9B80 [03] B094      13717          sub     tmp1
 9B82 [03] 2730      13718          beq     DONE_WITH_INTERP
 9B84 [02] 87        13719          psha
 9B85 [03] B697      13720          lda     tmp4
 9B87 [03] B096      13721          sub     tmp3
 9B89 [03] 2403      13722      bcc     POSINTERP
 9B8B [01] 40        13723          nega
 9B8C [04] 3C9A      13724          inc     tmp7
                     13725  POSINTERP:
 9B8E [02] 87        13726          psha
 9B8F [03] B698      13727          lda     tmp5
 9B91 [03] B094      13728          sub     tmp1


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 102
MC68HC908GP32 User Bootloader


 9B93 [03] 271D      13729          beq     ZERO_SLOPE
 9B95 [02] 88        13730          pulx
 9B96 [05] 42        13731          mul
 9B97 [02] 89        13732          pshx
 9B98 [02] 8A        13733          pulh
 9B99 [02] 88        13734          pulx
                     13735  
 9B9A [07] 52        13736          div
                     13737  
 9B9B [02] 87        13738          psha
 9B9C [03] B69A      13739          lda     tmp7
 9B9E [03] 2607      13740          bne     NEG_SLOPE
 9BA0 [02] 86        13741          pula
 9BA1 [03] BB96      13742          add     tmp3
 9BA3 [03] B799      13743          sta     tmp6
 9BA5 [03] 200D      13744          bra     DONE_WITH_INTERP
                     13745  NEG_SLOPE:
 9BA7 [02] 86        13746          pula
 9BA8 [03] B79A      13747          sta     tmp7
 9BAA [03] B696      13748          lda     tmp3
 9BAC [03] B09A      13749          sub     tmp7
 9BAE [03] B799      13750          sta     tmp6
 9BB0 [03] 2002      13751          bra     DONE_WITH_INTERP
                     13752  ZERO_SLOPE:
 9BB2 [02] 86        13753          pula                                ;clean stack
 9BB3 [02] 86        13754          pula                                ;clean stack
                     13755  DONE_WITH_INTERP:
 9BB4 [04] 81        13756          rts
                     13757  
                     13758  
                     13759  ********************************************************************************
                     13760  ** Multiply then divide.
                     13761  ********************************************************************************
                     13762  
                     13763  uMulAndDiv:
                     13764  
                     13765  ********************************************************************************
                     13766  ** 8 x 16 Multiply
                     13767  **
                     13768  ** 8-bit value in Accumulator, 16-bit value in tmp11-12, result overwrites
                     13769  ** 16-bit input.  Assumes result cannot overflow.
                     13770  ********************************************************************************
                     13771  
                     13772  uMul16:
 9BB5 [02] 87        13773        psha                          ; Save multiplier.
 9BB6 [03] BE9E      13774        ldx     tmp11                 ; LSB of multiplicand.
 9BB8 [05] 42        13775        mul
 9BB9 [03] B79E      13776        sta     tmp11                 ; LSB of result stored.
 9BBB [02] 86        13777        pula                          ; Pop off multiplier.
 9BBC [02] 89        13778        pshx                          ; Carry on stack.
 9BBD [03] BE9F      13779        ldx     tmp12                 ; MSB of multiplicand.
 9BBF [05] 42        13780        mul
 9BC0 [04] 9EEB01    13781        add     1,SP                  ; Add in carry from LSB.
 9BC3 [03] B79F      13782        sta     tmp12                 ; MSB of result.
 9BC5 [02] 86        13783        pula                          ; Clear the stack.
                     13784  
                     13785  ********************************************************************************
                     13786  ** 16-bit divide by 100T
                     13787  **
                     13788  ** 16-bit value in tmp11-12 is divided by 100T.  Result is left in tmp11-12.
                     13789  ********************************************************************************
                     13790  
                     13791  uDivBy100:
 9BC6 [01] 8C        13792        clrh
 9BC7 [03] B69F      13793        lda     tmp12                 ; MSB of dividend.
 9BC9 [02] AE64      13794        ldx     #100T                 ; Divisor.
 9BCB [07] 52        13795        div
 9BCC [03] B79F      13796        sta     tmp12                 ; MSB of quotient.
 9BCE [03] B69E      13797        lda     tmp11                 ; LSB of dividend.
 9BD0 [07] 52        13798        div
 9BD1 [03] B79E      13799        sta     tmp11                 ; LSB of quotient.
                     13800  
                     13801        ; See if we need to round up the quotient.
 9BD3 [02] 8B        13802        pshh
 9BD4 [02] 86        13803        pula                          ; Remainder in A.
 9BD5 [02] A132      13804        cmp     #50T                  ; Half of the divisor.
 9BD7 [03] 9306      13805        ble     uDivRoundingDone
 9BD9 [04] 3C9E      13806        inc     tmp11
 9BDB [03] 2402      13807        bcc     uDivRoundingDone
 9BDD [04] 3C9F      13808        inc     tmp12
                     13809  uDivRoundingDone:
 9BDF [04] 81        13810        rts
                     13811  
                     13812  ********************************************************************************
                     13813  ********************************************************************************
                     13814  *
                     13815  *     32 / 16 Unsigned Divide
                     13816  *
                     13817  *     This routine takes the 32-bit dividend stored in INTACC1.....INTACC1+3
                     13818  *     and divides it by the 16-bit divisor stored in INTACC2:INTACC2+1.
                     13819  *     The quotient replaces the dividend and the remainder replaces the divisor.
                     13820  *
                     13821  *     Re-written a bit by JSM to eliminate stack usage and use tmp vars instead of
                     13822  *     8 bytes of reserved ram
                     13823  ; 1,SP = tmp9
                     13824  ; 2,SP = tmp10
                     13825  ; 3,SP = tmp11
                     13826  UDVD32:
                     13827  *
 9BE0                13828  DIVIDEND  EQU     INTACC1+2
 9BE0                13829  DIVISOR   EQU     INTACC2
 9BE0                13830  QUOTIENT  EQU     INTACC1
 9BE0                13831  REMAINDER EQU     INTACC1
                     13832  *
                     13833  ;only called twice in code and regs don't need preserving
 9BE0 [02] A620      13834          LDA     #!32                        ;
 9BE2 [03] B79E      13835          STA     tmp11                       ; loop counter for number of shifts
 9BE4 [03] B698      13836          LDA     DIVISOR                     ; get divisor msb
 9BE6 [03] B79C      13837          STA     tmp9                        ; put divisor msb in working storage
 9BE8 [03] B699      13838          LDA     DIVISOR+1           ; get divisor lsb
 9BEA [03] B79D      13839          STA     tmp10                       ; put divisor lsb in working storage
                     13840  *
                     13841  *     Shift all four bytes of dividend 16 bits to the right and clear
                     13842  *     both bytes of the temporary remainder location
                     13843  *
 9BEC [05] 4E9799    13844          MOV     DIVIDEND+1,DIVIDEND+3       ; shift dividend lsb
 9BEF [05] 4E9698    13845          MOV     DIVIDEND,DIVIDEND+2 ; shift 2nd byte of dividend
 9BF2 [05] 4E9597    13846          MOV     DIVIDEND-1,DIVIDEND+1       ; shift 3rd byte of dividend
 9BF5 [05] 4E9496    13847          MOV     DIVIDEND-2,DIVIDEND ; shift dividend msb
 9BF8 [03] 3F94      13848          CLR     REMAINDER           ; zero remainder msb
 9BFA [03] 3F95      13849          CLR     REMAINDER+1         ; zero remainder lsb
                     13850  *
                     13851  *     Shift each byte of dividend and remainder one bit to the left
                     13852  *
 9BFC [03] B694      13853  SHFTLP  LDA     REMAINDER           ; get remainder msb
 9BFE [01] 49        13854          ROLA                                ; shift remainder msb into carry
 9BFF [04] 3999      13855          ROL     DIVIDEND+3          ; shift dividend lsb
 9C01 [04] 3998      13856          ROL     DIVIDEND+2          ; shift 2nd byte of dividend
 9C03 [04] 3997      13857          ROL     DIVIDEND+1          ; shift 3rd byte of dividend
 9C05 [04] 3996      13858          ROL     DIVIDEND            ; shift dividend msb
 9C07 [04] 3995      13859          ROL     REMAINDER+1         ; shift remainder lsb
 9C09 [04] 3994      13860          ROL     REMAINDER           ; shift remainder msb
                     13861  *
                     13862  *     Subtract both bytes of the divisor from the remainder
                     13863  *
 9C0B [03] B695      13864          LDA     REMAINDER+1         ; get remainder lsb


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 103
MC68HC908GP32 User Bootloader


 9C0D [03] B09D      13865          SUB     tmp10                       ; subtract divisor lsb from
                     13866                                      ; remainder lsb
 9C0F [03] B795      13867          STA     REMAINDER+1         ; store new remainder lsb
 9C11 [03] B694      13868          LDA     REMAINDER           ; get remainder msb
 9C13 [03] B29C      13869          SBC     tmp9                        ; subtract divisor msb from
                     13870                                      ; remainder msb
 9C15 [03] B794      13871          STA     REMAINDER           ; store new remainder msb
 9C17 [03] B699      13872          LDA     DIVIDEND+3          ; get low byte of dividend/quotient
 9C19 [02] A200      13873          SBC     #0                  ; dividend low bit holds subtract carry
 9C1B [03] B799      13874          STA     DIVIDEND+3          ; store low byte of dividend/quotient
                     13875  *
                     13876  *     Check dividend/quotient lsb. If clear, set lsb of quotient to indicate
                     13877  *     successful subraction, else add both bytes of divisor back to remainder
                     13878  *
 9C1D [05] 019914    13879          BRCLR   0,DIVIDEND+3,SETLSB ; check for a carry from subtraction
                     13880                                      ; and add divisor to remainder if set
 9C20 [03] B695      13881          LDA     REMAINDER+1         ; get remainder lsb
 9C22 [03] BB9D      13882          ADD     tmp10                       ; add divisor lsb to remainder lsb
 9C24 [03] B795      13883          STA     REMAINDER+1         ; store remainder lsb
 9C26 [03] B694      13884          LDA     REMAINDER           ; get remainder msb
 9C28 [03] B99C      13885          ADC     tmp9                        ; add divisor msb to remainder msb
 9C2A [03] B794      13886          STA     REMAINDER           ; store remainder msb
 9C2C [03] B699      13887          LDA     DIVIDEND+3          ; get low byte of dividend
 9C2E [02] A900      13888          ADC     #0                  ; add carry to low bit of dividend
 9C30 [03] B799      13889          STA     DIVIDEND+3          ; store low byte of dividend
 9C32 [03] 2002      13890          BRA     DECRMT                      ; do next shift and subtract
                     13891  
 9C34 [04] 1099      13892  SETLSB  BSET    0,DIVIDEND+3                ; set lsb of quotient to indicate
                     13893                                      ; successive subtraction
 9C36 [05] 3B9EC3    13894  DECRMT  DBNZ    tmp11,SHFTLP                ; decrement loop counter and do next
                     13895                                      ; shift
                     13896  *
                     13897  *     Move 32-bit dividend into INTACC1.....INTACC1+3 and put 16-bit
                     13898  *     remainder in INTACC2:INTACC2+1
                     13899  *
 9C39 [03] B694      13900          LDA     REMAINDER           ; get remainder msb
 9C3B [03] B79C      13901          STA     tmp9                        ; temporarily store remainder msb
 9C3D [03] B695      13902          LDA     REMAINDER+1         ; get remainder lsb
 9C3F [03] B79D      13903          STA     tmp10                       ; temporarily store remainder lsb
 9C41 [05] 4E9694    13904          MOV     DIVIDEND,QUOTIENT   ;
 9C44 [05] 4E9795    13905          MOV     DIVIDEND+1,QUOTIENT+1       ; shift all four bytes of quotient
 9C47 [05] 4E9896    13906          MOV     DIVIDEND+2,QUOTIENT+2       ; 16 bits to the left
 9C4A [05] 4E9997    13907          MOV     DIVIDEND+3,QUOTIENT+3       ;
 9C4D [03] B69C      13908          LDA     tmp9                        ; get final remainder msb
 9C4F [03] B798      13909          STA     INTACC2                     ; store final remainder msb
 9C51 [03] B69D      13910          LDA     tmp10                       ; get final remainder lsb
 9C53 [03] B799      13911          STA     INTACC2+1           ; store final remainder lsb
                     13912  *
 9C55 [04] 81        13913          RTS                         ; return
                     13914  
 9C56                13915          include "burner8b.asm"
                     13916  ;*****************************************************************************
                     13917  ; Meagasquirt Flash page erase and programming routines
                     13918  ; heavily based on the routines from boot_r12.asm
                     13919  ;
                     13920  ;*****************************************************************************
                     13921  ; JSM - revised timing for 8MHz
                     13922  ; 12 Sep 04. Re-enabled interrupts during programming to avoid missing them
                     13923  ;            when burning lots of data.
                     13924  ; 24 Feb 05, took cli back out again so burner ram can be used within irqs
                     13925  ; 6 Nov 05 (026j7) Changed hardcoded page from $D0 to $E0
                     13926  ;-------------------------------------------------------------------------------
                     13927  ; burnConst: is a PCC compatible FLASH Programming Routine - I think
                     13928  ;-------------------------------------------------------------------------------
                     13929  
                     13930  burnConst:
 9C56 [03] B676      13931          lda       flocker
 9C58 [02] A1CC      13932          cmp       #$CC
 9C5A [03] 2701      13933          beq       BURN_CONT
 9C5C [04] 81        13934          rts
                     13935  BURN_CONT:
 9C5D [04] C60105    13936          lda     page
 9C60 [02] ABE0      13937          add     #$E0                    ; hardcoded start of pages
 9C62 [02] 87        13938          psha
 9C63 [02] 8A        13939          pulh
 9C64 [01] 5F        13940          clrx
 9C65 [04] 3591      13941          sthx    burnDst
 9C67 [05] CD9C8D    13942          jsr     ms_EraseFlash           ; Erase the first 128 byte block (disables ints)
                     13943  ;        cli
 9C6A [04] 5591      13944          ldhx    burnDst
 9C6C [02] AF40      13945          aix     #64T
 9C6E [02] AF40      13946          aix     #64T
 9C70 [04] 3591      13947          sthx    burnDst
 9C72 [05] CD9C8D    13948          jsr     ms_EraseFlash           ; and the second
                     13949  ;        cli
 9C75 [04] C60105    13950          lda     page
 9C78 [02] ABE0      13951          add     #$E0                    ; hardcoded start of pages
 9C7A [02] 87        13952          psha
 9C7B [02] 8A        13953          pulh
 9C7C [01] 5F        13954          clrx
 9C7D [04] 3591      13955          sthx    burnDst
 9C7F [03] 450112    13956          ldhx    #VE_r
 9C82 [04] 358F      13957          sthx    burnSrc
                     13958  
 9C84 [02] A6C8      13959          lda     #200T                    ; burn 200 bytes (was 256) Now 212, NOW 200 for 022xxxxxx
 9C86 [03] B793      13960          sta     burncount
                     13961  
 9C88 [01] 8C        13962          clrh
 9C89 [01] 5F        13963          clrx
 9C8A [03] CC9C9C    13964          jmp     ms_ProgramFlash
                     13965  
                     13966  ;-------------------------------------------------------------------------------
                     13967  
                     13968  
                     13969  ;*  Single Flash Page Erase Subroutine  ======================================
                     13970  ;*
                     13971  ; This subroutine will copy the Flash Erase algorithm into RAM and execute
                     13972  ; it to erase the page starting at address pointers "burnDst"
                     13973  ;
                     13974  ms_EraseFlash:
 9C8D [03] 450031    13975          ldhx    #ms_EraseRamSize                ; initialize pointer
                     13976  ms_EraseFlash1:
 9C90 [04] D69CAA    13977          lda     ms_MassErase-1,x                ; get program from Flash
 9C93 [04] D701EC    13978          sta     ram_exec-1,x                    ; copy into RAM
 9C96 [03] 5BF8      13979          dbnzx   ms_EraseFlash1                  ; decrement pointer and loop back until done
 9C98 [02] 9B        13980          sei
 9C99 [03] CC01ED    13981          jmp     ram_exec                        ; execute Flash Mass Erase algorithm from RAM
                     13982  
                     13983  ;*  Flash Program Subroutine  ================================================
                     13984  ;*
                     13985  ; This subroutine will copy the Flash Program algorithm into RAM and execute it
                     13986  ; to program 'burncount' bytes from the address pointed to by 'burnSrc' to the
                     13987  ; address pointed to by "burnDst"
                     13988  ;
                     13989  ms_ProgramFlash:
 9C9C [03] 45004A    13990          ldhx    #ms_ProgramRamSize              ; initialize pointer
                     13991  ms_ProgramFlash1:
 9C9F [04] D69CD0    13992          lda     ms_Delay-1,x                    ; get program from Flash
 9CA2 [04] D701EC    13993          sta     ram_exec-1,x                    ; copy into RAM
 9CA5 [03] 5BF8      13994          dbnzx   ms_ProgramFlash1                ; decrement pointer and loop back until done
 9CA7 [02] 9B        13995          sei
 9CA8 [03] CC01F8    13996          jmp     {ram_exec+ms_ProgramRam}
                     13997  ;
                     13998  ;
                     13999  ;*  Flash Erase Subroutine  ==================================================
                     14000  ;*


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 104
MC68HC908GP32 User Bootloader


                     14001  ;*  This subroutine performs a single Page Erase @ BurnDst
                     14002  ;*  This subroutine has been
                     14003  ;*  tuned for a bus speed of 7.3728 MHz.
                     14004  ;*  constants revised for 8MHz
                     14005  ;*  This subroutine is copied into and executed from RAM.
                     14006  ;*
                     14007  ms_MassErase:
 9CAB [04] 5591      14008          ldhx    burnDst            ; initialize pointer to Flash memory address
                     14009  
                     14010  ;   Set ERASE, read the Flash Block Protect Register and write any data into Flash page.
                     14011  ;
 9CAD [02] A602      14012          lda     #{ERASE}                    ; set ERASE control bit
 9CAF [04] C7FE08    14013          sta     flcr                        ;  in Flash Control Register
 9CB2 [04] C6FF7E    14014          lda     flbpr                       ; read from Flash Block Protect Register
 9CB5 [02] F7        14015          sta     ,x                          ; write any data to address within page
                     14016  ;
                     14017  ;   Wait for >10us, then set HVEN.
                     14018  ;
 9CB6 [02] A601      14019          lda     #1                          ; wait
 9CB8 [04] AD17      14020          bsr     ms_delay                       ;  for 11.7us (now 11.1)
 9CBA [02] A60A      14021          lda     #{ERASE | HVEN}             ; set HVEN control bit
 9CBC [04] C7FE08    14022          sta     flcr                        ;  in Flash Control Register
                     14023  ;
                     14024  ;   Wait for >1ms, then clear ERASE.
                     14025  ;
 9CBF [02] A669      14026          lda     #105T                        ; wait (was 100T)
 9CC1 [04] AD0E      14027          bsr     ms_delay                       ;  for 1.005ms (now 1.012ms)
 9CC3 [02] A608      14028          lda     #{HVEN}                     ; clear ERASE control bit
 9CC5 [04] C7FE08    14029          sta     flcr                        ;  in Flash Control Register
                     14030  ;
                     14031  ;   Wait for >5us, then clear HVEN.
                     14032  ;
 9CC8 [02] A601      14033          lda     #1                          ; wait
 9CCA [04] AD05      14034          bsr     ms_delay                       ;  for 11.7us (now 11.1)
 9CCC [01] 4F        14035          clra                                ; clear HVEN control bit
 9CCD [04] C7FE08    14036          sta     flcr                        ;  in Flash Control Register
                     14037  
 9CD0 [04] 81        14038          rts                                 ; return
                     14039  
                     14040  
                     14041  ;*  Delay Subroutine  =======================================================================
                     14042  ;*
                     14043  ;*  This subroutine performs a simple software delay loop based upon the value passed in ACC.
                     14044  ;*  The following timing calculation applies:
                     14045  ;*
                     14046  ;*   was supposed to be  delay = ((ACC * 74) + 12) (tcyc)
                     14047  ;*   actually            delay = ((ACC * 108) + 12) (tcyc) i.e. longer/safer? delays
                     14048  ;*   now                 delay = ((ACC * 77) + 12) (tcyc)
                     14049  ;*
                     14050  ;*  Calling convention:
                     14051  ;*
                     14052  ;*      lda     data
                     14053  ;*      jsr     delay
                     14054  ;*
                     14055  ;*  Returns:    nothing
                     14056  ;*
                     14057  ;*  Changes:    ACC
                     14058  ;*
                     14059  ms_Delay:
 9CD1 [02] 87        14060          psha                                ; [2] save outer delay loop parameter
                     14061  ms_Delay1:
 9CD2 [02] A617      14062          lda     #23T                         ; [2] initialize inner delay loop counter
                     14063  ms_Delay2:
 9CD4 [03] 4BFE      14064          dbnza   ms_Delay2                      ; [3] decrement inner delay loop counter
 9CD6 [06] 9E6B01F8  14065          dbnz    1,sp,ms_Delay1                 ; [6] decrement outer delay loop counter
 9CDA [02] 86        14066          pula                                ; [2] deallocate local variable
 9CDB [04] 81        14067          rts                                 ; [4] return
                     14068  
 9CDC                14069  ms_EraseRamSize:   equ     {*-ms_MassErase}
 9CDC                14070  ms_ProgramRam:     equ     {*-ms_Delay}
                     14071  
                     14072  ;*  Flash Program Subroutine  ===============================================================
                     14073  ;*
                     14074  ;*  This subroutine controls the Flash programming sequence.
                     14075  
                     14076  ms_FlashProgram:
                     14077  
                     14078  ms_FlashProgram1:
                     14079  
                     14080  ;   Set PGM, read the Flash Block Protect Register and write anywhere in desired Flash row.
                     14081  ;
 9CDC [02] A601      14082          lda     #{PGM}                      ; set PGM control bit
 9CDE [04] C7FE08    14083          sta     flcr                        ;  in Flash Control Register
 9CE1 [04] C6FF7E    14084          lda     flbpr                       ; read from Flash Block Protect Register
 9CE4 [04] 5591      14085          ldhx    burnDst
 9CE6 [02] F7        14086          sta     ,x                   ; write any data to first Flash address
                     14087  ;
                     14088  ;   Wait for >10us, then set HVEN.
 9CE7 [02] A601      14089          lda     #1                          ; wait
 9CE9 [04] ADE6      14090          bsr     ms_delay                       ;  for 11.7us (11.1)
 9CEB [02] A609      14091          lda     #{PGM | HVEN}               ; set HVEN control bit
 9CED [04] C7FE08    14092          sta     flcr                        ;  in Flash Control Register
                     14093  ;
                     14094  ;   Wait for >5us.
 9CF0 [02] A601      14095          lda     #1                          ; wait
 9CF2 [04] ADDD      14096          bsr     ms_delay                       ;  for 11.7us (11.1)
                     14097  ;
                     14098  ;   Write data to Flash and wait for 30 - 40us.
 9CF4 [04] 558F      14099          ldhx    burnsrc
 9CF6 [02] F6        14100          lda     ,x                   ; get data byte
 9CF7 [04] 5591      14101          ldhx    burndst
 9CF9 [02] F7        14102          sta     ,x                   ; write data to Flash
 9CFA [02] A603      14103          lda     #3                          ; wait
 9CFC [04] ADD3      14104          bsr     ms_delay                       ;  for 31.7us (30.3)
                     14105  ;
                     14106  ;   Clear PGM.
 9CFE [02] A608      14107          lda     #{HVEN}                     ; clear PGM
 9D00 [04] C7FE08    14108          sta     flcr                        ;  in Flash Control Register
                     14109  ;
                     14110  ;   Wait for >5us, then clear HVEN.
 9D03 [02] A601      14111          lda     #1                          ; wait
 9D05 [04] ADCA      14112          bsr     ms_delay                       ;  for 11.7us (11.1)
 9D07 [01] 4F        14113          clra                                ; clear HVEN control bit
 9D08 [04] C7FE08    14114          sta     flcr                        ;  in Flash Control Register
                     14115  ;
                     14116  ;   Advance destination pointer and decrement data counter.
                     14117  ;
                     14118  ms_FlashProgram2:
 9D0B [04] 558F      14119          ldhx    burnsrc
 9D0D [02] AF01      14120          aix     #1                          ; advance source pointer
 9D0F [04] 358F      14121          sthx    BurnSrc
 9D11 [04] 5591      14122          ldhx    burndst
 9D13 [02] AF01      14123          aix     #1                          ; advance destination pointer
 9D15 [04] 3591      14124          sthx    BurnDst
 9D17 [05] 3B93C2    14125          dbnz    burncount,ms_FlashProgram1  ; decrement counter and loop
                     14126                                              ; back if not done.
 9D1A [04] 81        14127          rts                                 ; return
                     14128  
 9D1B                14129  ms_ProgramRamSize: equ     {*-ms_Delay}
                     14130  
                     14131  
                     14132  
                     14133  
                     14134  
                     14135  ***************************************************************************
                     14136  **


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 105
MC68HC908GP32 User Bootloader


                     14137  ** Computation of Normalized Variables
                     14138  **
                     14139  **  The following is the form of the evaluation for the normalized variables:
                     14140  **
                     14141  **  (A rem A * B)
                     14142  **  -------------  = C rem C
                     14143  **      100
                     14144  **
                     14145  **  Where A = Whole part of the percentage,
                     14146  **        rem A = Remainder of A from previous calculation (range 0 to 99)
                     14147  **        B = Percentage multiplied (this always has a zero remainder)
                     14148  **        C = Whole part of result
                     14149  **        rem C = remainder of result
                     14150  **
                     14151  **
                     14152  **  Calculation is preformed by the following method:
                     14153  **
                     14154  **     |(A * B) + (rem A * B)|
                     14155  **     |          -----------|
                     14156  **     |              100    |
                     14157  **     ----------------------- = C rem C
                     14158  **             100
                     14159  **
                     14160  **
                     14161  **   Inputs:  tmp10 = A
                     14162  **            tmp11 = rem A
                     14163  **            tmp12 = B
                     14164  **
                     14165  **   Outputs: tmp10 = C
                     14166  **            tmp11 = rem C
                     14167  **            tmp13 = high order part of (A rem A) * B
                     14168  **            tmp14 = low order part of (A rem A) * B
                     14169  **
                     14170  ***************************************************************************
                     14171  Supernorm:
 9D1B [03] B69D      14172      lda     tmp10                   ; A
 9D1D [01] 97        14173          tax
 9D1E [03] B69F      14174          lda     tmp12                       ; B
 9D20 [05] 42        14175          mul
 9D21 [03] BFA0      14176          stx     tmp13                       ; High order of A * B
 9D23 [03] B7A1      14177          sta     tmp14                       ; Low order of A * B
                     14178  
 9D25 [03] B69E      14179          lda     tmp11                       ; rem A
 9D27 [01] 97        14180          tax
 9D28 [03] B69F      14181          lda     tmp12                       ; B
 9D2A [05] 42        14182          mul
 9D2B [02] 89        14183          pshx
 9D2C [02] 8A        14184          pulh
 9D2D [02] AE64      14185          ldx     #$64                        ; 100
 9D2F [07] 52        14186          div
                     14187  
 9D30 [03] B9A1      14188          adc     tmp14                       ; Add to lower part
 9D32 [03] B7A1      14189          sta     tmp14                       ; Store back
 9D34 [03] 2402      14190          bcc     Roundrem            ; Branch is no carry occurred
 9D36 [04] 3CA0      14191          inc     tmp13                       ; Increment high-order part because
                     14192                                      ; an overflow occurred in add
                     14193  
                     14194  Roundrem:
 9D38 [02] 8B        14195          pshh
 9D39 [02] 86        14196          pula
 9D3A [02] A132      14197          cmp     #$32                        ; Round if division remainder is
                     14198                                      ; greater than 50
 9D3C [03] 930A      14199          ble     FinalNorm
 9D3E [03] B6A1      14200          lda     tmp14
 9D40 [02] A901      14201          adc     #$01
 9D42 [03] B7A1      14202          sta     tmp14
 9D44 [03] 2402      14203          bcc     FinalNorm
 9D46 [04] 3CA0      14204          inc     tmp13
                     14205  
                     14206  
                     14207  FinalNorm:
 9D48 [03] B6A0      14208          lda     tmp13
 9D4A [02] 87        14209          psha
 9D4B [02] 8A        14210          pulh
 9D4C [03] B6A1      14211          lda     tmp14
 9D4E [02] AE64      14212          ldx     #$64                        ; 100
 9D50 [07] 52        14213          div
 9D51 [03] 251A      14214          bcs     RailCalc
 9D53 [03] B79D      14215          sta     tmp10
 9D55 [02] 8B        14216          pshh
 9D56 [02] 86        14217          pula
 9D57 [03] B79E      14218          sta     tmp11
                     14219  
 9D59 [02] A132      14220          cmp     #$32                        ; Round if division remainder is
                     14221                                      ; greater than 50
 9D5B [03] 9313      14222          ble     ExitSN
 9D5D [03] B69E      14223          lda     tmp11
 9D5F [02] A901      14224          adc     #$01
 9D61 [03] B79E      14225          sta     tmp11
 9D63 [03] 240B      14226          bcc     ExitSN
 9D65 [03] B69D      14227          lda     tmp10
 9D67 [02] AB01      14228          add     #$01
 9D69 [03] B79D      14229          sta     tmp10
 9D6B [03] 2603      14230          bne     ExitSN
                     14231  
                     14232  RailCalc:
 9D6D [04] 6EFF9D    14233          mov     #$FF,tmp10          ; Rail value if rollover
                     14234  
                     14235  ExitSN:
 9D70 [04] 81        14236          rts
                     14237  
                     14238  ******************************************************************************
                     14239  **   Nitrous System   (P Ringwood)
                     14240  **
                     14241  **  NOS System adds fuel required for extra bhp with NOS, so in theory
                     14242  **  no extra fueling is needed to be plumbed in. Be Careful, make sure
                     14243  ** your injectors are capable of the extra.
                     14244  **  Operates between user min rpm and the user Max, linearly interpolates
                     14245  **  between the 2 values of PW enrichment depending on RPM, as fuel needed
                     14246  **  for NOS is a constant over time, not rpm.
                     14247  **  The system checks for a max duty cycle of 93%, actually cuts around
                     14248  **  90% as there is also the opening time to allow for.
                     14249  **
                     14250  **  Added a Turbo Anti-Lag function for NOS.  If KPa between setpoints it
                     14251  **  will fire NOS to boost engine speed and remove some lag from turbo.
                     14252  **
                     14253  **
                     14254  ***********************************************************************************
                     14255  ;*EnableN2O:
                     14256  ;*         brclr   LaunchControl,feature2,enablen2o_cont  ; Is Launch selected?
                     14257  ;*         brclr   Launch,portd,Clr_Nos_Out         ; Launch on, so nitrous off
                     14258  ;*         lda     N2Olaunchdel   ; check the launch/nitrous delay timer
                     14259  ;*         bne     Clr_Nos_Out    ; if non-zero then ensure N2O is off
                     14260  ;*enablen2o_cont:
                     14261  
                     14262  ;*         lda      rpm
                     14263  ;*         cmp      NosRpm_f                ; Are we above the minimum rpm?
                     14264  ;*         blo      Clr_Nos_Ang             ; No, No NOS
                     14265  ;*         cmp      NosRpmMax_f
                     14266  ;*         bhi      Clr_Nos_Ang             ; Are we above the max rpm?
                     14267  ;*         lda      tps
                     14268  ;*         cmp      NosTps_f                ; Is throttle position past the minimum?
                     14269  ;*         blo      Clr_Nos_Ang             ; No, no Nos
                     14270  ;*         lda      coolant
                     14271  ;*         cmp      NosClt_f                ; Is the engine warmer than the
                     14272                                      ; minimum point?


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 106
MC68HC908GP32 User Bootloader


                     14273  ;*         blo      Clr_Nos_Ang             ; No, no Nos
                     14274  ;*         brset    NosDcOk,EnhancedBits,Clr_Nos_Out        ; Have we hit 90% DC?
                     14275  ;*         brclr    Traction,EnhancedBits2,Not_AntiRev_NOS  ; Have we
                     14276                                      ; activated Anti-Rev?
                     14277  ;*         brclr    TractionNos,feature7,Not_AntiRev_NOS    ; Have we selected
                     14278                                      ; to cut NOS during Anti-Rev?
                     14279  ;*         bra      Clr_Nos_Ang             ; Yes so cut NOS during Anti-Rev
                     14280  ;*Not_AntiRev_NOS:
                     14281  ;*         lda      feature5_f
                     14282  ;*         bit      #NosLagSystemb
                     14283  ;*         beq      Nos_IP_Checked        ; Have we selected
                     14284                                      ; Anti-lag?
                     14285  ;*         brclr    NosSysReady,EnhancedBits,Which_io_First ; If NOS
                     14286                                      ;  not ready yet is the input on?
                     14287  ;*         brset    NosAntiLag,EnhancedBits,Anti_Lag        ; If antilag bit
                     14288                                      ; set then do Anti-lag checks
                     14289  ;*         bra      Nos_IP_Checked  ; Were in normal NOS mode
                     14290  
                     14291  ; Check if input on before the output, then were in anti-lag mode
                     14292  ;*Which_io_First:
                     14293  ;*         brset    NosIn,portd,Nos_IP_Checked      ; If input not on then
                     14294                                      ; were in normal mode
                     14295  ;*         bset     NosAntiLag,EnhancedBits ; We are in Anti-lag
                     14296                                      ; mode so set the bit
                     14297  ;*Anti_Lag:
                     14298  ;*         lda      kpa
                     14299  ;*         cmp      NosLowKpa_f             ; In anti-lag mode so are we
                     14300                                      ; above min KPa?
                     14301  ;*         blo      Clr_Nos_Out
                     14302  ;*         cmp      NosHiKPa_f              ; are we above max KPa?
                     14303  ;*         bhi      Clr_Nos_Out
                     14304  
                     14305  ; Check if we need to retard Ignition with NOS Angle
                     14306  ;*Nos_IP_Checked:
                     14307  ;*         bset   NosSysReady,EnhancedBits; NOS System ready to go
                     14308  ;*         bset   water2,porta              ; Turn Nos output on
                     14309  ;*         brset  NosIn,portd,Clr_Nos_Angle ; Is the Input for NOS
                     14310                                      ; SET? (low=on)
                     14311  ;*         bset   NosSysOn,EnhancedBits     ; NOS System Is Running
                     14312  ;*         lda    feature5_f
                     14313  ;*         bit    #SparkTable2b
                     14314  ;*         bne    Nos_Lin           ; Are we using ST2?
                     14315  ;*         lda    #255T                     ;
                     14316  ;*         sub    NosAngle_f                ; (255-NOS Angle) turns it into
                     14317                                      ; a retard angle
                     14318  ;*         cmp    #$aa                      ; Limit the retard to 30 degrees
                     14319                                      ; (plenty)
                     14320  ;*         bhi    StoreNos
                     14321  ;*         lda    #$aa
                     14322  ;*         bra    StoreNos
                     14323  ;*Clr_Nos_Out:
                     14324  ;*         bclr   water2,porta              ; Turn off the output as we've
                     14325                                      ; hit 90% DC or Anti-lag over setpoints
                     14326  ;*         lda    #$00
                     14327  ;*         sta    NosPW                     ; Clear Nos PW and Angle
                     14328  ;*         sta    NitrousAngle
                     14329  ;*         bclr   NosSysOn,EnhancedBits     ; Clear the Nos running bit
                     14330  ;*         bclr   NosAntiLag,EnhancedBits   ; Clear the antilag bit
                     14331  ;*         bclr   NosSysReady,EnhancedBits; Clear the ready bit
                     14332  ;*         bra    Nos_Done
                     14333  ;*Clr_Nos_Angle:
                     14334  ;*         bclr   NosSysOn,EnhancedBits     ; Clear the Nos Running Bit
                     14335  ;*         bclr   NosAntiLag,EnhancedBits   ; Clear the antilag bit
                     14336  ;*         lda    #$00                      ; Clear the Nos angle
                     14337  ;*         sta    NitrousAngle
                     14338  ;*         sta    NosPW                     ; Clear the NosPW
                     14339  ;*         bra    Nos_Done          ; Dont clear the output
                     14340  ;*Clr_Nos_Ang:
                     14341  ;*         bclr   NosSysOn,EnhancedBits     ; Clear the Nos Running Bit
                     14342  ;*         lda    #$00                      ; Clear the Nos angle
                     14343  ;*         sta    NitrousAngle
                     14344  ;*         bclr   NosSysReady,EnhancedBits; Clear the ready bit
                     14345  ;*         bclr   NosDcOk,EnhancedBits      ; Clear the NOS DC check bit
                     14346  ;*         bclr   NosAntiLag,EnhancedBits   ; Clear the antilag bit
                     14347  ;*         bra    Clr_Nos_SystemJMP
                     14348  ;*StoreNos:
                     14349  ;*         sta    NitrousAngle              ; Store the Angle to retard by for NOS
                     14350  ;*Nos_Lin:
                     14351  ***************************************************************************
                     14352  **
                     14353  **  Linear Interpolation - for finding PW for NOS.
                     14354  **  Added this as using the original screwed the Spark Angle up.     (P. Ringwood)
                     14355  **  Ripped off from the original.
                     14356  **
                     14357  **            (y2 - y1)
                     14358  **  Y = Y1 +  --------- * (x - x1)
                     14359  **            (x2 - x1)
                     14360  **
                     14361  **   3000rpm      = x1
                     14362  **   NosRpmMax    = x2
                     14363  **   NosFuelLo    = y1
                     14364  **   NosFuelHi    = y2
                     14365  **   rpm          = x
                     14366  **   NosPW        = y
                     14367  ***************************************************************************
                     14368  ;*        clr     tmp7                      ; This is the negative slope
                     14369                                      ; detection bit
                     14370  ;*        lda     NosFuelLo_f               ; Store the minimum PW incase
                     14371                                      ; we are lower than 3000rpm
                     14372  ;*        sta     NosPW
                     14373  ;*        lda     rpm
                     14374  ;*        cmp     NosRpm_f          ; Are we above Min RPM for NOS?
                     14375  ;*        bhi     Are_We_Higher             ; No so check if we are too high
                     14376  ;*        bra     End_Interpole             ; Yes so end with minimum rpm
                     14377                                      ; value in NosPW
                     14378  ;*Are_We_Higher:
                     14379  ;*        lda     rpm
                     14380  ;*        cmp     NosRpmMax_f               ; Are we above the max RPM?
                     14381  ;*        blo     INTERP_PW         ; No so interpolate values
                     14382  ;*        lda     NosFuelHi_f               ; We are above max rpm, so
                     14383                                      ; store max rpm PW in NosPW
                     14384  ;*        sta     NosPW
                     14385  ;*        bra     End_Interpole             ; End Interpolting
                     14386  ;*Nos_Done:
                     14387  ;*        bra     Nos_Done_Now              ; Added a jump as too far.
                     14388  ;*INTERP_PW:
                     14389  ;*        lda     NosFuelLo_f               ; Store min rpm nos PW in NosPW
                     14390  ;*        sta     NosPW
                     14391  ;*        lda     NosRpmMax_f
                     14392  ;*        sub     NosRpm_f          ; Make sure settings are correctly set
                     14393  ;*        beq     End_Interpole             ; Settings wrong so end with min
                     14394                                      ; rpm PW in NosPW
                     14395  ;*        psha
                     14396  ;*        lda     NosFuelHi_f
                     14397  ;*        sub     NosFuelLo_f               ; Are we doing a positive interpole?
                     14398  ;*    bcc       Interpole_Plus
                     14399  ;*        nega
                     14400  ;*        inc     tmp7
                     14401  ;*Interpole_Plus:
                     14402  ;*        psha
                     14403  ;*        lda     rpm
                     14404  ;*        sub     NosRpm_f          ; Find out difference in rpm and
                     14405                                      ; min setpoint
                     14406  ;*        beq     ZERO_Interpole
                     14407  ;*        pulx
                     14408  ;*        mul


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 107
MC68HC908GP32 User Bootloader


                     14409  ;*        pshx
                     14410  ;*        pulh
                     14411  ;*        pulx
                     14412  ;*        div
                     14413  ;*        psha
                     14414  ;*        lda     tmp7
                     14415  ;*        bne     NEG_Interpole             ; Are we doing a negative
                     14416                                      ; sloped interpolation?
                     14417  ;*        pula
                     14418  ;*        add     NosFuelLo_f
                     14419  ;*        sta     NosPW
                     14420  ;*        bra     End_Interpole
                     14421  
                     14422  ;*Clr_Nos_SystemJMP:
                     14423  ;*        bra     Clr_Nos_System
                     14424  
                     14425  ;*NEG_Interpole:
                     14426  ;*        pula
                     14427  ;*        sta     tmp7
                     14428  ;*        lda     NosFuelLo_f
                     14429  ;*        sub     tmp7
                     14430  ;*        sta     NosPW
                     14431  ;*        bra     End_Interpole
                     14432  ;*ZERO_Interpole:
                     14433  ;*        pula                              ;clean stack
                     14434  ;*;*        pula                            ;clean stack
                     14435  ;*End_Interpole:
                     14436  
                     14437  ; Check if weve hit 90% Duty Cycle with NOS PW
                     14438  ;*         clrh
                     14439  ;*         ldx      DIVIDER_f1              ; Load x with the divider
                     14440  ;*         lda      Alternate_f1            ; Are we in alternating mode?
                     14441  ;*         beq      multi_it
                     14442  ;*         lslx                             ; Yes so multiply divider by 2
                     14443  ;*multi_it:
                     14444  ;*         lda      rpmpl
                     14445  ;*         mul                              ; Accumulator now contains time
                     14446                                      ; between squirts
                     14447  ;*         cpx      #00T                  ;
                     14448  ;; this was in error         bne      Stop_Nos
                     14449  ;*         bne      Nos_Done_Now            ; if period > 25.5ms then must
                     14450                                      ; be ok as that is our max pulse
                     14451  ;*         ldx      #237T                   ; 90% (230/256=0.9) 237 allows
                     14452                                      ; for opening time
                     14453  ;*         mul
                     14454  ;*         lda      feature4_f
                     14455  ;*         bit      #DtNosb
                     14456  ;*         bne      Check_PW2       ; If were using Bank 2
                     14457                                      ;then check PW2
                     14458  ;*         txa
                     14459  ;*         cmp      pw1                     ; Are we over 90%?
                     14460  ;*         blo      Stop_Nos
                     14461  ;*         bra      Nos_Done_Now            ; No so dont cut out NOS System
                     14462  ;*Check_PW2:
                     14463  ;*         txa
                     14464  ;*         cmp      pw2                     ; Are we over 90%?
                     14465  ;*         blo      Stop_Nos
                     14466  ;*         bra      Nos_Done_Now            ; No so dont cut out NOS System
                     14467  ;*Stop_Nos:
                     14468  ;*         bset     NosDcOk,EnhancedBits    ; We are over 90 DC so cut
                     14469                                      ; NOS System out
                     14470  ;*Clr_Nos_System:
                     14471  ;*         bclr     water2,porta            ; Turn off the Nos output
                     14472  ;*Clr_Nos_PW:
                     14473  ;*         lda      #00T
                     14474  ;*         sta      NosPW                   ; Clear the Nos PW
                     14475  ;*Nos_Done_Now:
                     14476  
                     14477  ;*         rts
                     14478  
                     14479  ******************************************************************************
                     14480  **        Check if were ready to use VE Table 3
                     14481  ******************************************************************************
                     14482  
                     14483  ;*Check_VE3_Table:
                     14484  ;*        brclr   Nitrous,feature1,Check_VE3_NOS    ; Are we using NOS?
                     14485  ;*        brclr   NosSysOn,EnhancedBits,Check_VE3_Done      ; NOS Mode not ready.
                     14486  ;*        brset   NosIn,portd,Check_VE3_Done        ; If input not low dont
                     14487                                      ; use VE 3
                     14488  ;*        bset    UseVE3,EnhancedBits
                     14489  ;*        rts
                     14490  ;*Check_VE3_NOS:
                     14491  ;*        brset   NosIn,portd,Check_VE3_Done        ; If input not low dont
                     14492                                      ; use VE 3
                     14493  ;*        bset    UseVE3,EnhancedBits
                     14494  ;*        rts
                     14495  ;*Check_VE3_Done:
                     14496  ;*        bclr    UseVE3,EnhancedBits
                     14497  ;*        rts
                     14498  
                     14499  ******************************************************************************
                     14500  **    8x8 Target AFR Tables                            P Ringwood          ***
                     14501  **    AFR Table 1 is for VE table 1   AFR Table 2 is for VE table 3        ***
                     14502  ******************************************************************************
                     14503  AFR1_Targets:
                     14504  ;*        brset   useVE3,EnhancedBits,No_AFR_ForVE1 ; If were running
                     14505                                      ; VE3 then no need to go any further
 9D71 [03] B682      14506          lda     EGOcount            ; Are we about to check the ego?
 9D73 [04] C1E191    14507          cmp     EGOcountcmp_f
 9D76 [03] 2700      14508          beq     Do_Targets          ; If yes then get the target from
                     14509                                      ; the table
                     14510  ;*No_AFR_ForVE1:
                     14511  ;*        rts                               ; If No then return, this saves
                     14512                                      ; wasting time.
                     14513  
                     14514  Do_Targets:                         ; VE 1 Targets from AFR Table 1
                     14515  ;*        brclr   TPSTargetAFR,feature7,NO_TPS_SetAFR1      ; Have we selected
                     14516  ;*                                  ; to go to targets above tps setpoint?
                     14517  ;*        lda     tps
                     14518  ;*        cmp     AFRTarTPS_f
                     14519  ;*        bhi     NO_TPS_SetAFR1            ; If tps higher than setpoint then
                     14520                                      ; do tables
                     14521  ;*        lda     O2targetV_f               ; If not load in target from
                     14522                                      ; enrichments page
                     14523  ;*        sta     afrTarget
                     14524  ;*        rts
                     14525  
                     14526  NO_TPS_SetAFR1:
 9D78 [01] 8C        14527          clrh
 9D79 [01] 5F        14528          clrx
                     14529  ;*        brset   AlphaTarAFR,feature7,AFR1_AN      ; Have we selected to use
                     14530                                      ; tps for target afrs instead of kpa?
                     14531  
 9D7A [03] B6CB      14532          lda     kpa                     ; Normal Speed density
                     14533  ;*        bra     AFR1_STEP_1
                     14534  
                     14535  ;*AFR1_AN:
                     14536  ;*        lda     tps
                     14537  
                     14538  AFR1_STEP_1:
 9D7C [03] B7DB      14539          sta     kpa_n
 9D7E [03] 45E648    14540          ldhx    #KPARANGEAFR_f1
 9D81 [04] 3594      14541          sthx    tmp1
 9D83 [02] A607      14542          lda     #$07                        ; 8x8
 9D85 [03] B796      14543          sta     tmp3
 9D87 [03] B6DB      14544          lda     kpa_n


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 108
MC68HC908GP32 User Bootloader


 9D89 [03] B797      14545          sta     tmp4
 9D8B [05] CD9B48    14546          jsr     tableLookup
 9D8E [03] B694      14547          lda     tmp1
 9D90 [03] B695      14548          lda     tmp2
 9D92 [05] 4E989B    14549          mov     tmp5,tmp8           ; Index
 9D95 [05] 4E949C    14550          mov     tmp1,tmp9           ; X1
 9D98 [05] 4E959D    14551          mov     tmp2,tmp10          ; X2
                     14552  
                     14553  AFR1_STEP_2:
 9D9B [03] 45E640    14554          ldhx    #RPMRANGEAFR_f1
 9D9E [04] 3594      14555          sthx    tmp1
 9DA0 [04] 6E0796    14556          mov     #$07,tmp3           ; 8x8
 9DA3 [05] 4E4D97    14557          mov     rpm,tmp4
 9DA6 [05] CD9B48    14558          jsr     tableLookup
 9DA9 [05] 4E989E    14559          mov     tmp5,tmp11          ; Index
 9DAC [05] 4E94A0    14560          mov     tmp1,tmp13          ; X1
 9DAF [05] 4E95A1    14561          mov     tmp2,tmp14          ; X2
                     14562  
                     14563  AFR1_STEP_3:
 9DB2 [01] 8C        14564          clrh
 9DB3 [02] AE08      14565          ldx     #$08                        ; 8x8
 9DB5 [03] B69B      14566          lda     tmp8
 9DB7 [01] 4A        14567          deca
 9DB8 [05] 42        14568          mul
 9DB9 [03] BB9E      14569          add     tmp11
 9DBB [01] 4A        14570          deca
 9DBC [01] 97        14571          tax
 9DBD macro          14572          AFR1X
 9DBD [04] C60105    14573   LDA PAGE  
 9DC0 [02] A106      14574   CMP #06T  
 9DC2 [03] 2605      14575   BNE VE6XF  
 9DC4 [04] D60112    14576   LDA VE_R,X  
 9DC7 [03] 2003      14577   BRA VE6XC  
 9DC9 [04] D6E600    14578  VE6XF: LDA AFR_F1,X  
                     14579  VE6XC:  
 9DCC [03] B7A2      14580          sta     tmp15
 9DCE [01] 5C        14581          incx
 9DCF macro          14582          AFR1X
 9DCF [04] C60105    14583   LDA PAGE  
 9DD2 [02] A106      14584   CMP #06T  
 9DD4 [03] 2605      14585   BNE VE6XF  
 9DD6 [04] D60112    14586   LDA VE_R,X  
 9DD9 [03] 2003      14587   BRA VE6XC  
 9DDB [04] D6E600    14588  VE6XF: LDA AFR_F1,X  
                     14589  VE6XC:  
 9DDE [03] B7A3      14590          sta     tmp16
 9DE0 [02] AE08      14591          ldx     #$08                        ; 8x8
 9DE2 [03] B69B      14592          lda     tmp8
 9DE4 [05] 42        14593          mul
 9DE5 [03] BB9E      14594          add     tmp11
 9DE7 [01] 4A        14595          deca
 9DE8 [01] 97        14596          tax
 9DE9 macro          14597          AFR1X
 9DE9 [04] C60105    14598   LDA PAGE  
 9DEC [02] A106      14599   CMP #06T  
 9DEE [03] 2605      14600   BNE VE6XF  
 9DF0 [04] D60112    14601   LDA VE_R,X  
 9DF3 [03] 2003      14602   BRA VE6XC  
 9DF5 [04] D6E600    14603  VE6XF: LDA AFR_F1,X  
                     14604  VE6XC:  
 9DF8 [03] B7A4      14605          sta     tmp17
 9DFA [01] 5C        14606          incx
 9DFB macro          14607          AFR1X
 9DFB [04] C60105    14608   LDA PAGE  
 9DFE [02] A106      14609   CMP #06T  
 9E00 [03] 2605      14610   BNE VE6XF  
 9E02 [04] D60112    14611   LDA VE_R,X  
 9E05 [03] 2003      14612   BRA VE6XC  
 9E07 [04] D6E600    14613  VE6XF: LDA AFR_F1,X  
                     14614  VE6XC:  
 9E0A [03] B7A5      14615          sta     tmp18
 9E0C [05] CD8A8B    14616          jsr     VE_STEP_4
 9E0F [05] 4E9959    14617          mov     tmp6,afrTarget
 9E12 [04] 81        14618          rts
                     14619  
                     14620  *****************************************************************************
                     14621  **             VE 3 Targets from AFR Table 2
                     14622  *****************************************************************************
                     14623  ;*AFR2_Targets:
                     14624  ;*        brclr   useVE3,EnhancedBits,No_AFR_ForVE3 ; If were not running
                     14625                                      ;VE3 then no need to go any further
                     14626  ;*        lda     EGOcount          ; Are we about to check the ego?
                     14627  ;*        cmp     EGOcountcmp_f
                     14628  ;*        beq     Do_Targets2               ; If yes then get the target from
                     14629                                      ; the table
                     14630  ;*No_AFR_ForVE3:
                     14631  ;*        rts                               ; If No then return, this saves
                     14632                                      ; wasting time.
                     14633  
                     14634  ;*Do_Targets2:
                     14635  ;*        brclr   TPSTargetAFR,feature7,NO_TPS_SetAFR2      ; Have we selected
                     14636                                      ; to go to targets above tps setpoint?
                     14637  ;*        lda     tps
                     14638  ;*        cmp     AFRTarTPS_f
                     14639  ;*        bhi     NO_TPS_SetAFR2            ; If tps higher than setpoint
                     14640                                      ; then do tables
                     14641  ;*        lda     O2targetV_f               ; If not load in target from
                     14642                                      ; enrichments page
                     14643  ;*        sta     afrTarget
                     14644  ;*        rts
                     14645  
                     14646  ;*NO_TPS_SetAFR2:
                     14647  ;*        clrh
                     14648  ;*        clrx
                     14649  ;*        brset   TPSTargetAFR,feature7,AFR2_AN     ; Have we selected to use
                     14650                                      ; tps for target afrs instead of kpa?
                     14651  ;*        lda     kpa
                     14652  ;*        bra     AFR2_STEP_1
                     14653  ;*AFR2_AN:
                     14654  ;*        lda     tps
                     14655  
                     14656  ;*AFR2_STEP_1:
                     14657  ;*        sta     kpa_n
                     14658  ;*        ldhx    #KPARANGEAFR_f2
                     14659  ;*        sthx    tmp1
                     14660  ;*        lda     #$07                      ; 8x8
                     14661  ;*        sta     tmp3
                     14662  ;*        lda     kpa_n
                     14663  ;*        sta     tmp4
                     14664  ;*        jsr     tableLookup
                     14665  ;*        lda     tmp1
                     14666  ;*        lda     tmp2
                     14667  ;*        mov     tmp5,tmp8         ; Index
                     14668  ;*        mov     tmp1,tmp9         ; X1
                     14669  ;*        mov     tmp2,tmp10                ; X2
                     14670  
                     14671  ;*AFR2_STEP_2:
                     14672  ;*        ldhx    #RPMRANGEAFR_f2
                     14673  ;*        sthx    tmp1
                     14674  ;*        mov     #$07,tmp3         ; 8x8
                     14675  ;*        mov     rpm,tmp4
                     14676  ;*        jsr     tableLookup
                     14677  ;*        mov     tmp5,tmp11                ; Index
                     14678  ;*        mov     tmp1,tmp13                ; X1
                     14679  ;*        mov     tmp2,tmp14                ; X2
                     14680  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 109
MC68HC908GP32 User Bootloader


                     14681  ;*AFR2_STEP_3:
                     14682  ;*        clrh
                     14683  ;*        ldx     #$08                      ; 8x8
                     14684  ;*        lda     tmp8
                     14685  ;*        deca
                     14686  ;*        mul
                     14687  ;*        add     tmp11
                     14688  ;*        deca
                     14689  ;*        tax
                     14690  ;*        AFR2X
                     14691  ;*        sta     tmp15
                     14692  ;*        incx
                     14693  ;*        AFR2X
                     14694  ;*        sta     tmp16
                     14695  ;*        ldx     #$08                      ; 8x8
                     14696  ;*        lda     tmp8
                     14697  ;*        mul
                     14698  ;*        add     tmp11
                     14699  ;*        deca
                     14700  ;*        tax
                     14701  ;*        AFR2X
                     14702  ;*        sta     tmp17
                     14703  ;*        incx
                     14704  ;*        AFR2X
                     14705  ;*        sta     tmp18
                     14706  ;*        jsr     VE_STEP_4
                     14707  ;*        mov     tmp6,afrTarget
                     14708  ;*        rts
                     14709  
                     14710  ;------------------------------------------------------------------
                     14711  ;now error messages. Exact postion in memory not important
                     14712  ;*error_vector:
                     14713  ;*        dw      error_msg0
                     14714  ;*        dw      error_msg1
                     14715  ;*        dw      error_msg2
                     14716  ;*        dw      error_msg3
                     14717  ;*        dw      error_msg4
                     14718  ;*        dw      error_msg5
                     14719  ;*        dw      error_msg6
                     14720  ;*        dw      error_msg7
                     14721  ;*        dw      error_msg8
                     14722  ;*        dw      error_msg9
                     14723  ;*        dw      error_msg10
                     14724  ;*        dw      error_msg11
                     14725  ;*        dw      error_msg12
                     14726  ;*        dw      error_msg13
                     14727  ;*        dw      error_msg14
                     14728  
                     14729  ;*error_msg0:
                     14730  ;*        db   'Internal error message 0'
                     14731  ;*        db   13T,10T,0
                     14732  ;*error_msg1:
                     14733  ;*        db   'You have defined a spark mode but no outputs are defined as spark'
                     14734  ;*        db   13T,10T,0
                     14735  ;*error_msg2:
                     14736  ;*        db   'If Neon mode is set you must set LED17+19 to spark outputs'
                     14737  ;*        db   13T,10T,0
                     14738  ;*error_msg3:
                     14739  ;*        db   'If MSnS mode is set you must set LED17 or FIDLE as spark output'
                     14740  ;*        db   13T,10T,0
                     14741  ;*error_msg4:
                     14742  ;*        db   'You cannot use FIDLE for spark control and idle control at the same time'
                     14743  ;*        db   13T,10T,0
                     14744  ;*error_msg5:
                     14745  ;*        db   'You cannot use X2 as water injection and fan control at the same time'
                     14746  ;*        db   13T,10T,0
                     14747  ;*error_msg6:
                     14748  ;*        db   'You cannot use X4 for water injection and nitrous control at the same time'
                     14749  ;*        db   13T,10T,0
                     14750  ;*error_msg7:
                     14751  ;*        db   'In HEI7 mode you must have LED19 set as a spark output for the bypass signal'
                     14752  ;*        db   13T,10T,0
                     14753  ;*error_msg8:
                     14754  ;*        db   'Config error with spark outputs or wheel decoder trigger settings'
                     14755  ;*        db   13T,10T,0
                     14756  ;*error_msg9:
                     14757  ;*        db   'Cannot use FIDLE as a spark output if doing wheel decoding or Neon'
                     14758  ;*        db   13T,10T,0
                     14759  ;*error_msg10:
                     14760  ;*        db   'For rotary trailing you must define LED17,18,19 as spark outputs'
                     14761  ;*        db   13T,10T,0
                     14762  ;*error_msg11:
                     14763  ;*        db   'For rotary trailing you must define two wheel decoder triggers'
                     14764  ;*        db   13T,10T,0
                     14765  ;*error_msg12:
                     14766  ;*        db   'Rotary trailing requires the wheel decoder enabled and configured'
                     14767  ;*        db   13T,10T,0
                     14768  ;*error_msg13:
                     14769  ;*        db   'You cannot have LED17/D14 and FIDLE both set to Spark A'
                     14770  ;*        db   13T,10T,0
                     14771  ;*error_msg14:
                     14772  ;*        db   'You cannot have more than one spark mode defined'
                     14773  ;*        db   13T,10T,0
                     14774  
                     14775  ;--------------
                     14776  ;------------------------------------------------------------------
                     14777  ;   ; Constants not possible to burn
                     14778  
                     14779  ; This is used to set the bin coolant range for WWU
                     14780  WWURANGE:
 9E13      00        14781          db      0T
 9E14      14        14782          db      20T
 9E15      28        14783          db      40T
 9E16      3C        14784          db      60T
 9E17      50        14785          db      80T
 9E18      64        14786          db      100T
 9E19      78        14787          db      120T
 9E1A      8C        14788          db      140T
 9E1B      AA        14789          db      170T
 9E1C      C8        14790          db      200T
                     14791  
                     14792  
 9E1D      00        14793  REVNUM: db      00T                 ; not used, always zero
 9E1E      4D53312F  14794  textversion_f:   db   'MS1/Extra rev 029y4 Mex 7 16 23*' ; full code release  ;* 'MS1/Extra rev 029y4 ************'
           45787472 
           61207265 
           76203032 
           39793420 
           4D657820 
           37203136 
           2032332A 
 9E3E      4D53312F  14795  Signature:       db   'MS1/Extra format 029y3 *********' ; data format for
           45787472 
           6120666F 
           726D6174 
           20303239 
           7933202A 
           2A2A2A2A 
           2A2A2A2A 
                     14796                   ; ini file matching, ONLY change this if the data format changed.
                     14797  ;must be 32 chars     '12345678901234567890123456789012' ; (may change to 20)
                     14798  rpmdotrate:
 9E5E      03        14799          db      3T                  ; 3,000 rpm delta
 9E5F      04        14800          db      4T                  ; 4,000
 9E60      06        14801          db      6T                  ; 6,000
 9E61      0A        14802          db      10T                 ; 10,000


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 110
MC68HC908GP32 User Bootloader


                     14803  sliprate:
 9E62      05        14804          db      05T                 ; 5% slip from driven wheels
 9E63      0F        14805          db      15T                 ; 15%
 9E64      1E        14806          db      30T                 ; 30%
 9E65      46        14807          db      70T                 ; 70%
                     14808  
                     14809  end_of_main:   ; check this var to ensure it does not exceed $DFFF
                     14810  
                     14811  ;------------------------------------------------------------------
                     14812  
 FAC3                14813          org     $FAC3                       ; start of bootloader-defined
                     14814                                      ; jump table/vector
 FAC3      12        14815          db      $12                 ; scbr regi init value
 FAC4      01        14816          db      %00000001           ; config1
 FAC5      01        14817          db      %00000001           ; config2
 FAC6      8128      14818          dw      start                       ; megasquirt code start
 FAC8      FB00      14819          dw      $FB00                       ; bootloader start
                     14820  
                     14821  ; Vector table
                     14822  ;   org     vec_timebase
                     14823  
                     14824  
                     14825  
 FACA      CC        14826          db      $CC
 FACB      9B47      14827      dw      Dummy                   ; Timebase
 FACD      CC        14828          db      $CC
 FACE      97D4      14829      dw      ADCDONE                 ; ADC Conversion Complete
 FAD0      CC        14830          db      $CC
 FAD1      9B47      14831      dw      Dummy                   ; Keyboard pin
 FAD3      CC        14832          db      $CC
 FAD4      9993      14833      dw      IN_SCI_TX               ; SCI transmission complete/
                     14834                                      ; transmitter empty
 FAD6      CC        14835          db      $CC
 FAD7      97FA      14836      dw      IN_SCI_RCV              ; SCI input idle/receiver full
 FAD9      CC        14837          db      $CC
 FADA      9B47      14838      dw      Dummy                   ; SCI parity/framing/noise/
                     14839                                      ; receiver_overrun error
 FADC      CC        14840          db      $CC
 FADD      9B47      14841      dw      Dummy                   ; SPI Transmitter empty
 FADF      CC        14842          db      $CC
 FAE0      9B47      14843      dw      Dummy                   ; SPI mode/overflow/receiver full
 FAE2      CC        14844          db      $CC
 FAE3      9B3C      14845      dw      T2Overflow              ; TIM2 overflow
 FAE5      CC        14846          db      $CC
 FAE6      91C0      14847      dw      SPARKTIME               ; TIM2 Ch1
 FAE8      CC        14848          db      $CC
 FAE9      8CA9      14849      dw      TIMERROLL               ; TIM2 Ch 0
 FAEB      CC        14850          db      $CC
 FAEC      9B47      14851      dw      Dummy                   ; TIM1 overflow
 FAEE      CC        14852          db      $CC
 FAEF      9B47      14853      dw      Dummy                   ; TIM1 Ch1
 FAF1      CC        14854          db      $CC
 FAF2      9B47      14855      dw      Dummy                   ; TIM Ch0
 FAF4      CC        14856          db      $CC
 FAF5      9B47      14857      dw      Dummy                   ; CGM
 FAF7      CC        14858          db      $CC
 FAF8      92E0      14859      dw      DOSQUIRT                ; IRQ
 FAFA      CC        14860          db      $CC
 FAFB      9B47      14861      dw      Dummy                   ; SWI
 FAFD      CC        14862          db      $CC
 FAFE      8128      14863      dw      Start
                     14864  
                     14865  
                     14866  ;------------------------------------------------------------------
                     14867  ; Lookup Tables
 F000                14868          org     $F000
                     14869  ;*        include "barofactor300k.inc"
 F000                14870          include "barofactor4115.inc"
                     14871  BAROFAC4115:
 F000      64        14872      DB      100T
 F001      8D        14873      DB      141T
 F002      8D        14874      DB      141T
 F003      8D        14875      DB      141T
 F004      8D        14876      DB      141T
 F005      8D        14877      DB      141T
 F006      8C        14878      DB      140T
 F007      8C        14879      DB      140T
 F008      8C        14880      DB      140T
 F009      8C        14881      DB      140T
 F00A      8B        14882      DB      139T
 F00B      8B        14883      DB      139T
 F00C      8B        14884      DB      139T
 F00D      8B        14885      DB      139T
 F00E      8B        14886      DB      139T
 F00F      8A        14887      DB      138T
 F010      8A        14888      DB      138T
 F011      8A        14889      DB      138T
 F012      8A        14890      DB      138T
 F013      8A        14891      DB      138T
 F014      89        14892      DB      137T
 F015      89        14893      DB      137T
 F016      89        14894      DB      137T
 F017      89        14895      DB      137T
 F018      89        14896      DB      137T
 F019      88        14897      DB      136T
 F01A      88        14898      DB      136T
 F01B      88        14899      DB      136T
 F01C      88        14900      DB      136T
 F01D      88        14901      DB      136T
 F01E      87        14902      DB      135T
 F01F      87        14903      DB      135T
 F020      87        14904      DB      135T
 F021      87        14905      DB      135T
 F022      87        14906      DB      135T
 F023      86        14907      DB      134T
 F024      86        14908      DB      134T
 F025      86        14909      DB      134T
 F026      86        14910      DB      134T
 F027      86        14911      DB      134T
 F028      85        14912      DB      133T
 F029      85        14913      DB      133T
 F02A      85        14914      DB      133T
 F02B      85        14915      DB      133T
 F02C      85        14916      DB      133T
 F02D      84        14917      DB      132T
 F02E      84        14918      DB      132T
 F02F      84        14919      DB      132T
 F030      84        14920      DB      132T
 F031      84        14921      DB      132T
 F032      83        14922      DB      131T
 F033      83        14923      DB      131T
 F034      83        14924      DB      131T
 F035      83        14925      DB      131T
 F036      82        14926      DB      130T
 F037      82        14927      DB      130T
 F038      82        14928      DB      130T
 F039      82        14929      DB      130T
 F03A      82        14930      DB      130T
 F03B      81        14931      DB      129T
 F03C      81        14932      DB      129T
 F03D      81        14933      DB      129T
 F03E      81        14934      DB      129T
 F03F      81        14935      DB      129T
 F040      80        14936      DB      128T
 F041      80        14937      DB      128T
 F042      80        14938      DB      128T


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 111
MC68HC908GP32 User Bootloader


 F043      80        14939      DB      128T
 F044      80        14940      DB      128T
 F045      7F        14941      DB      127T
 F046      7F        14942      DB      127T
 F047      7F        14943      DB      127T
 F048      7F        14944      DB      127T
 F049      7F        14945      DB      127T
 F04A      7E        14946      DB      126T
 F04B      7E        14947      DB      126T
 F04C      7E        14948      DB      126T
 F04D      7E        14949      DB      126T
 F04E      7E        14950      DB      126T
 F04F      7D        14951      DB      125T
 F050      7D        14952      DB      125T
 F051      7D        14953      DB      125T
 F052      7D        14954      DB      125T
 F053      7D        14955      DB      125T
 F054      7C        14956      DB      124T
 F055      7C        14957      DB      124T
 F056      7C        14958      DB      124T
 F057      7C        14959      DB      124T
 F058      7C        14960      DB      124T
 F059      7B        14961      DB      123T
 F05A      7B        14962      DB      123T
 F05B      7B        14963      DB      123T
 F05C      7B        14964      DB      123T
 F05D      7A        14965      DB      122T
 F05E      7A        14966      DB      122T
 F05F      7A        14967      DB      122T
 F060      7A        14968      DB      122T
 F061      7A        14969      DB      122T
 F062      79        14970      DB      121T
 F063      79        14971      DB      121T
 F064      79        14972      DB      121T
 F065      79        14973      DB      121T
 F066      79        14974      DB      121T
 F067      78        14975      DB      120T
 F068      78        14976      DB      120T
 F069      78        14977      DB      120T
 F06A      78        14978      DB      120T
 F06B      78        14979      DB      120T
 F06C      77        14980      DB      119T
 F06D      77        14981      DB      119T
 F06E      77        14982      DB      119T
 F06F      77        14983      DB      119T
 F070      77        14984      DB      119T
 F071      76        14985      DB      118T
 F072      76        14986      DB      118T
 F073      76        14987      DB      118T
 F074      76        14988      DB      118T
 F075      76        14989      DB      118T
 F076      75        14990      DB      117T
 F077      75        14991      DB      117T
 F078      75        14992      DB      117T
 F079      75        14993      DB      117T
 F07A      75        14994      DB      117T
 F07B      74        14995      DB      116T
 F07C      74        14996      DB      116T
 F07D      74        14997      DB      116T
 F07E      74        14998      DB      116T
 F07F      74        14999      DB      116T
 F080      73        15000      DB      115T
 F081      73        15001      DB      115T
 F082      73        15002      DB      115T
 F083      73        15003      DB      115T
 F084      73        15004      DB      115T
 F085      72        15005      DB      114T
 F086      72        15006      DB      114T
 F087      72        15007      DB      114T
 F088      72        15008      DB      114T
 F089      71        15009      DB      113T
 F08A      71        15010      DB      113T
 F08B      71        15011      DB      113T
 F08C      71        15012      DB      113T
 F08D      71        15013      DB      113T
 F08E      70        15014      DB      112T
 F08F      70        15015      DB      112T
 F090      70        15016      DB      112T
 F091      70        15017      DB      112T
 F092      70        15018      DB      112T
 F093      6F        15019      DB      111T
 F094      6F        15020      DB      111T
 F095      6F        15021      DB      111T
 F096      6F        15022      DB      111T
 F097      6F        15023      DB      111T
 F098      6E        15024      DB      110T
 F099      6E        15025      DB      110T
 F09A      6E        15026      DB      110T
 F09B      6E        15027      DB      110T
 F09C      6E        15028      DB      110T
 F09D      6D        15029      DB      109T
 F09E      6D        15030      DB      109T
 F09F      6D        15031      DB      109T
 F0A0      6D        15032      DB      109T
 F0A1      6D        15033      DB      109T
 F0A2      6C        15034      DB      108T
 F0A3      6C        15035      DB      108T
 F0A4      6C        15036      DB      108T
 F0A5      6C        15037      DB      108T
 F0A6      6C        15038      DB      108T
 F0A7      6B        15039      DB      107T
 F0A8      6B        15040      DB      107T
 F0A9      6B        15041      DB      107T
 F0AA      6B        15042      DB      107T
 F0AB      6B        15043      DB      107T
 F0AC      6A        15044      DB      106T
 F0AD      6A        15045      DB      106T
 F0AE      6A        15046      DB      106T
 F0AF      6A        15047      DB      106T
 F0B0      69        15048      DB      105T
 F0B1      69        15049      DB      105T
 F0B2      69        15050      DB      105T
 F0B3      69        15051      DB      105T
 F0B4      69        15052      DB      105T
 F0B5      68        15053      DB      104T
 F0B6      68        15054      DB      104T
 F0B7      68        15055      DB      104T
 F0B8      68        15056      DB      104T
 F0B9      68        15057      DB      104T
 F0BA      67        15058      DB      103T
 F0BB      67        15059      DB      103T
 F0BC      67        15060      DB      103T
 F0BD      67        15061      DB      103T
 F0BE      67        15062      DB      103T
 F0BF      66        15063      DB      102T
 F0C0      66        15064      DB      102T
 F0C1      66        15065      DB      102T
 F0C2      66        15066      DB      102T
 F0C3      66        15067      DB      102T
 F0C4      65        15068      DB      101T
 F0C5      65        15069      DB      101T
 F0C6      65        15070      DB      101T
 F0C7      65        15071      DB      101T
 F0C8      65        15072      DB      101T
 F0C9      64        15073      DB      100T
 F0CA      64        15074      DB      100T


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 112
MC68HC908GP32 User Bootloader


 F0CB      64        15075      DB      100T
 F0CC      64        15076      DB      100T
 F0CD      64        15077      DB      100T
 F0CE      63        15078      DB      99T
 F0CF      63        15079      DB      99T
 F0D0      63        15080      DB      99T
 F0D1      63        15081      DB      99T
 F0D2      63        15082      DB      99T
 F0D3      62        15083      DB      98T
 F0D4      62        15084      DB      98T
 F0D5      62        15085      DB      98T
 F0D6      62        15086      DB      98T
 F0D7      62        15087      DB      98T
 F0D8      61        15088      DB      97T
 F0D9      61        15089      DB      97T
 F0DA      61        15090      DB      97T
 F0DB      61        15091      DB      97T
 F0DC      60        15092      DB      96T
 F0DD      60        15093      DB      96T
 F0DE      60        15094      DB      96T
 F0DF      60        15095      DB      96T
 F0E0      60        15096      DB      96T
 F0E1      5F        15097      DB      95T
 F0E2      5F        15098      DB      95T
 F0E3      5F        15099      DB      95T
 F0E4      5F        15100      DB      95T
 F0E5      5F        15101      DB      95T
 F0E6      5E        15102      DB      94T
 F0E7      5E        15103      DB      94T
 F0E8      5E        15104      DB      94T
 F0E9      5E        15105      DB      94T
 F0EA      5E        15106      DB      94T
 F0EB      5D        15107      DB      93T
 F0EC      5D        15108      DB      93T
 F0ED      5D        15109      DB      93T
 F0EE      5D        15110      DB      93T
 F0EF      5D        15111      DB      93T
 F0F0      5C        15112      DB      92T
 F0F1      5C        15113      DB      92T
 F0F2      5C        15114      DB      92T
 F0F3      5C        15115      DB      92T
 F0F4      5C        15116      DB      92T
 F0F5      5B        15117      DB      91T
 F0F6      5B        15118      DB      91T
 F0F7      5B        15119      DB      91T
 F0F8      5B        15120      DB      91T
 F0F9      5B        15121      DB      91T
 F0FA      5A        15122      DB      90T
 F0FB      5A        15123      DB      90T
 F0FC      5A        15124      DB      90T
 F0FD      5A        15125      DB      90T
 F0FE      5A        15126      DB      90T
 F0FF      64        15127      DB      100T
 F100                15128          include "barofactor4250.inc"
                     15129  BAROFAC4250:
 F100      64        15130      DB      100T
 F101      8D        15131      DB      141T
 F102      8D        15132      DB      141T
 F103      8C        15133      DB      140T
 F104      8C        15134      DB      140T
 F105      8B        15135      DB      139T
 F106      8B        15136      DB      139T
 F107      8B        15137      DB      139T
 F108      8A        15138      DB      138T
 F109      8A        15139      DB      138T
 F10A      89        15140      DB      137T
 F10B      89        15141      DB      137T
 F10C      88        15142      DB      136T
 F10D      88        15143      DB      136T
 F10E      87        15144      DB      135T
 F10F      87        15145      DB      135T
 F110      86        15146      DB      134T
 F111      86        15147      DB      134T
 F112      86        15148      DB      134T
 F113      85        15149      DB      133T
 F114      85        15150      DB      133T
 F115      84        15151      DB      132T
 F116      84        15152      DB      132T
 F117      83        15153      DB      131T
 F118      83        15154      DB      131T
 F119      82        15155      DB      130T
 F11A      82        15156      DB      130T
 F11B      81        15157      DB      129T
 F11C      81        15158      DB      129T
 F11D      80        15159      DB      128T
 F11E      80        15160      DB      128T
 F11F      80        15161      DB      128T
 F120      7F        15162      DB      127T
 F121      7F        15163      DB      127T
 F122      7E        15164      DB      126T
 F123      7E        15165      DB      126T
 F124      7D        15166      DB      125T
 F125      7D        15167      DB      125T
 F126      7C        15168      DB      124T
 F127      7C        15169      DB      124T
 F128      7B        15170      DB      123T
 F129      7B        15171      DB      123T
 F12A      7A        15172      DB      122T
 F12B      7A        15173      DB      122T
 F12C      7A        15174      DB      122T
 F12D      79        15175      DB      121T
 F12E      79        15176      DB      121T
 F12F      78        15177      DB      120T
 F130      78        15178      DB      120T
 F131      77        15179      DB      119T
 F132      77        15180      DB      119T
 F133      76        15181      DB      118T
 F134      76        15182      DB      118T
 F135      75        15183      DB      117T
 F136      75        15184      DB      117T
 F137      74        15185      DB      116T
 F138      74        15186      DB      116T
 F139      74        15187      DB      116T
 F13A      73        15188      DB      115T
 F13B      73        15189      DB      115T
 F13C      72        15190      DB      114T
 F13D      72        15191      DB      114T
 F13E      71        15192      DB      113T
 F13F      71        15193      DB      113T
 F140      70        15194      DB      112T
 F141      70        15195      DB      112T
 F142      6F        15196      DB      111T
 F143      6F        15197      DB      111T
 F144      6E        15198      DB      110T
 F145      6E        15199      DB      110T
 F146      6E        15200      DB      110T
 F147      6D        15201      DB      109T
 F148      6D        15202      DB      109T
 F149      6C        15203      DB      108T
 F14A      6C        15204      DB      108T
 F14B      6B        15205      DB      107T
 F14C      6B        15206      DB      107T
 F14D      6A        15207      DB      106T
 F14E      6A        15208      DB      106T
 F14F      69        15209      DB      105T
 F150      69        15210      DB      105T


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 113
MC68HC908GP32 User Bootloader


 F151      68        15211      DB      104T
 F152      68        15212      DB      104T
 F153      68        15213      DB      104T
 F154      67        15214      DB      103T
 F155      67        15215      DB      103T
 F156      66        15216      DB      102T
 F157      66        15217      DB      102T
 F158      65        15218      DB      101T
 F159      65        15219      DB      101T
 F15A      64        15220      DB      100T
 F15B      64        15221      DB      100T
 F15C      63        15222      DB      99T
 F15D      63        15223      DB      99T
 F15E      62        15224      DB      98T
 F15F      62        15225      DB      98T
 F160      62        15226      DB      98T
 F161      61        15227      DB      97T
 F162      61        15228      DB      97T
 F163      60        15229      DB      96T
 F164      60        15230      DB      96T
 F165      5F        15231      DB      95T
 F166      5F        15232      DB      95T
 F167      5E        15233      DB      94T
 F168      5E        15234      DB      94T
 F169      5D        15235      DB      93T
 F16A      5D        15236      DB      93T
 F16B      5C        15237      DB      92T
 F16C      5C        15238      DB      92T
 F16D      5C        15239      DB      92T
 F16E      5B        15240      DB      91T
 F16F      5B        15241      DB      91T
 F170      5A        15242      DB      90T
 F171      5A        15243      DB      90T
 F172      59        15244      DB      89T
 F173      59        15245      DB      89T
 F174      58        15246      DB      88T
 F175      58        15247      DB      88T
 F176      57        15248      DB      87T
 F177      57        15249      DB      87T
 F178      57        15250      DB      87T
 F179      56        15251      DB      86T
 F17A      56        15252      DB      86T
 F17B      55        15253      DB      85T
 F17C      55        15254      DB      85T
 F17D      54        15255      DB      84T
 F17E      54        15256      DB      84T
 F17F      53        15257      DB      83T
 F180      53        15258      DB      83T
 F181      52        15259      DB      82T
 F182      52        15260      DB      82T
 F183      51        15261      DB      81T
 F184      51        15262      DB      81T
 F185      51        15263      DB      81T
 F186      50        15264      DB      80T
 F187      50        15265      DB      80T
 F188      4F        15266      DB      79T
 F189      4F        15267      DB      79T
 F18A      4E        15268      DB      78T
 F18B      4E        15269      DB      78T
 F18C      4D        15270      DB      77T
 F18D      4D        15271      DB      77T
 F18E      4C        15272      DB      76T
 F18F      4C        15273      DB      76T
 F190      4B        15274      DB      75T
 F191      4B        15275      DB      75T
 F192      4B        15276      DB      75T
 F193      4A        15277      DB      74T
 F194      4A        15278      DB      74T
 F195      49        15279      DB      73T
 F196      49        15280      DB      73T
 F197      48        15281      DB      72T
 F198      48        15282      DB      72T
 F199      47        15283      DB      71T
 F19A      47        15284      DB      71T
 F19B      46        15285      DB      70T
 F19C      46        15286      DB      70T
 F19D      45        15287      DB      69T
 F19E      45        15288      DB      69T
 F19F      45        15289      DB      69T
 F1A0      44        15290      DB      68T
 F1A1      44        15291      DB      68T
 F1A2      43        15292      DB      67T
 F1A3      43        15293      DB      67T
 F1A4      42        15294      DB      66T
 F1A5      42        15295      DB      66T
 F1A6      41        15296      DB      65T
 F1A7      41        15297      DB      65T
 F1A8      40        15298      DB      64T
 F1A9      40        15299      DB      64T
 F1AA      3F        15300      DB      63T
 F1AB      3F        15301      DB      63T
 F1AC      3F        15302      DB      63T
 F1AD      3E        15303      DB      62T
 F1AE      3E        15304      DB      62T
 F1AF      3D        15305      DB      61T
 F1B0      3D        15306      DB      61T
 F1B1      3C        15307      DB      60T
 F1B2      3C        15308      DB      60T
 F1B3      3B        15309      DB      59T
 F1B4      3B        15310      DB      59T
 F1B5      3A        15311      DB      58T
 F1B6      3A        15312      DB      58T
 F1B7      39        15313      DB      57T
 F1B8      39        15314      DB      57T
 F1B9      39        15315      DB      57T
 F1BA      38        15316      DB      56T
 F1BB      38        15317      DB      56T
 F1BC      37        15318      DB      55T
 F1BD      37        15319      DB      55T
 F1BE      36        15320      DB      54T
 F1BF      36        15321      DB      54T
 F1C0      35        15322      DB      53T
 F1C1      35        15323      DB      53T
 F1C2      34        15324      DB      52T
 F1C3      34        15325      DB      52T
 F1C4      33        15326      DB      51T
 F1C5      33        15327      DB      51T
 F1C6      33        15328      DB      51T
 F1C7      32        15329      DB      50T
 F1C8      32        15330      DB      50T
 F1C9      31        15331      DB      49T
 F1CA      31        15332      DB      49T
 F1CB      30        15333      DB      48T
 F1CC      30        15334      DB      48T
 F1CD      2F        15335      DB      47T
 F1CE      2F        15336      DB      47T
 F1CF      2E        15337      DB      46T
 F1D0      2E        15338      DB      46T
 F1D1      2D        15339      DB      45T
 F1D2      2D        15340      DB      45T
 F1D3      2D        15341      DB      45T
 F1D4      2C        15342      DB      44T
 F1D5      2C        15343      DB      44T
 F1D6      2B        15344      DB      43T
 F1D7      2B        15345      DB      43T
 F1D8      2A        15346      DB      42T


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 114
MC68HC908GP32 User Bootloader


 F1D9      2A        15347      DB      42T
 F1DA      29        15348      DB      41T
 F1DB      29        15349      DB      41T
 F1DC      28        15350      DB      40T
 F1DD      28        15351      DB      40T
 F1DE      28        15352      DB      40T
 F1DF      27        15353      DB      39T
 F1E0      27        15354      DB      39T
 F1E1      26        15355      DB      38T
 F1E2      26        15356      DB      38T
 F1E3      25        15357      DB      37T
 F1E4      25        15358      DB      37T
 F1E5      24        15359      DB      36T
 F1E6      24        15360      DB      36T
 F1E7      23        15361      DB      35T
 F1E8      23        15362      DB      35T
 F1E9      22        15363      DB      34T
 F1EA      22        15364      DB      34T
 F1EB      22        15365      DB      34T
 F1EC      21        15366      DB      33T
 F1ED      21        15367      DB      33T
 F1EE      20        15368      DB      32T
 F1EF      20        15369      DB      32T
 F1F0      1F        15370      DB      31T
 F1F1      1F        15371      DB      31T
 F1F2      1E        15372      DB      30T
 F1F3      1E        15373      DB      30T
 F1F4      1D        15374      DB      29T
 F1F5      1D        15375      DB      29T
 F1F6      1C        15376      DB      28T
 F1F7      1C        15377      DB      28T
 F1F8      1C        15378      DB      28T
 F1F9      1B        15379      DB      27T
 F1FA      1B        15380      DB      27T
 F1FB      1B        15381      DB      27T
 F1FC      1B        15382      DB      27T
 F1FD      1B        15383      DB      27T
 F1FE      1B        15384      DB      27T
 F1FF      64        15385      DB      100T
 F200                15386          include "kpafactor4115.inc"
                     15387  KPAFACTOR4115:
 F200      64        15388      DB      100T
 F201      0A        15389      DB      10T
 F202      0B        15390      DB      11T
 F203      0B        15391      DB      11T
 F204      0C        15392      DB      12T
 F205      0C        15393      DB      12T
 F206      0D        15394      DB      13T
 F207      0D        15395      DB      13T
 F208      0E        15396      DB      14T
 F209      0E        15397      DB      14T
 F20A      0E        15398      DB      14T
 F20B      0F        15399      DB      15T
 F20C      0F        15400      DB      15T
 F20D      10        15401      DB      16T
 F20E      10        15402      DB      16T
 F20F      11        15403      DB      17T
 F210      11        15404      DB      17T
 F211      11        15405      DB      17T
 F212      12        15406      DB      18T
 F213      12        15407      DB      18T
 F214      13        15408      DB      19T
 F215      13        15409      DB      19T
 F216      14        15410      DB      20T
 F217      14        15411      DB      20T
 F218      15        15412      DB      21T
 F219      15        15413      DB      21T
 F21A      15        15414      DB      21T
 F21B      16        15415      DB      22T
 F21C      16        15416      DB      22T
 F21D      17        15417      DB      23T
 F21E      17        15418      DB      23T
 F21F      18        15419      DB      24T
 F220      18        15420      DB      24T
 F221      18        15421      DB      24T
 F222      19        15422      DB      25T
 F223      19        15423      DB      25T
 F224      1A        15424      DB      26T
 F225      1A        15425      DB      26T
 F226      1B        15426      DB      27T
 F227      1B        15427      DB      27T
 F228      1B        15428      DB      27T
 F229      1C        15429      DB      28T
 F22A      1C        15430      DB      28T
 F22B      1D        15431      DB      29T
 F22C      1D        15432      DB      29T
 F22D      1E        15433      DB      30T
 F22E      1E        15434      DB      30T
 F22F      1F        15435      DB      31T
 F230      1F        15436      DB      31T
 F231      1F        15437      DB      31T
 F232      20        15438      DB      32T
 F233      20        15439      DB      32T
 F234      21        15440      DB      33T
 F235      21        15441      DB      33T
 F236      22        15442      DB      34T
 F237      22        15443      DB      34T
 F238      22        15444      DB      34T
 F239      23        15445      DB      35T
 F23A      23        15446      DB      35T
 F23B      24        15447      DB      36T
 F23C      24        15448      DB      36T
 F23D      25        15449      DB      37T
 F23E      25        15450      DB      37T
 F23F      26        15451      DB      38T
 F240      26        15452      DB      38T
 F241      26        15453      DB      38T
 F242      27        15454      DB      39T
 F243      27        15455      DB      39T
 F244      28        15456      DB      40T
 F245      28        15457      DB      40T
 F246      29        15458      DB      41T
 F247      29        15459      DB      41T
 F248      29        15460      DB      41T
 F249      2A        15461      DB      42T
 F24A      2A        15462      DB      42T
 F24B      2B        15463      DB      43T
 F24C      2B        15464      DB      43T
 F24D      2C        15465      DB      44T
 F24E      2C        15466      DB      44T
 F24F      2C        15467      DB      44T
 F250      2D        15468      DB      45T
 F251      2D        15469      DB      45T
 F252      2E        15470      DB      46T
 F253      2E        15471      DB      46T
 F254      2F        15472      DB      47T
 F255      2F        15473      DB      47T
 F256      30        15474      DB      48T
 F257      30        15475      DB      48T
 F258      30        15476      DB      48T
 F259      31        15477      DB      49T
 F25A      31        15478      DB      49T
 F25B      32        15479      DB      50T
 F25C      32        15480      DB      50T
 F25D      33        15481      DB      51T
 F25E      33        15482      DB      51T


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 115
MC68HC908GP32 User Bootloader


 F25F      33        15483      DB      51T
 F260      34        15484      DB      52T
 F261      34        15485      DB      52T
 F262      35        15486      DB      53T
 F263      35        15487      DB      53T
 F264      36        15488      DB      54T
 F265      36        15489      DB      54T
 F266      37        15490      DB      55T
 F267      37        15491      DB      55T
 F268      37        15492      DB      55T
 F269      38        15493      DB      56T
 F26A      38        15494      DB      56T
 F26B      39        15495      DB      57T
 F26C      39        15496      DB      57T
 F26D      3A        15497      DB      58T
 F26E      3A        15498      DB      58T
 F26F      3A        15499      DB      58T
 F270      3B        15500      DB      59T
 F271      3B        15501      DB      59T
 F272      3C        15502      DB      60T
 F273      3C        15503      DB      60T
 F274      3D        15504      DB      61T
 F275      3D        15505      DB      61T
 F276      3D        15506      DB      61T
 F277      3E        15507      DB      62T
 F278      3E        15508      DB      62T
 F279      3F        15509      DB      63T
 F27A      3F        15510      DB      63T
 F27B      40        15511      DB      64T
 F27C      40        15512      DB      64T
 F27D      41        15513      DB      65T
 F27E      41        15514      DB      65T
 F27F      41        15515      DB      65T
 F280      42        15516      DB      66T
 F281      42        15517      DB      66T
 F282      43        15518      DB      67T
 F283      43        15519      DB      67T
 F284      44        15520      DB      68T
 F285      44        15521      DB      68T
 F286      44        15522      DB      68T
 F287      45        15523      DB      69T
 F288      45        15524      DB      69T
 F289      46        15525      DB      70T
 F28A      46        15526      DB      70T
 F28B      47        15527      DB      71T
 F28C      47        15528      DB      71T
 F28D      47        15529      DB      71T
 F28E      48        15530      DB      72T
 F28F      48        15531      DB      72T
 F290      49        15532      DB      73T
 F291      49        15533      DB      73T
 F292      4A        15534      DB      74T
 F293      4A        15535      DB      74T
 F294      4B        15536      DB      75T
 F295      4B        15537      DB      75T
 F296      4B        15538      DB      75T
 F297      4C        15539      DB      76T
 F298      4C        15540      DB      76T
 F299      4D        15541      DB      77T
 F29A      4D        15542      DB      77T
 F29B      4E        15543      DB      78T
 F29C      4E        15544      DB      78T
 F29D      4E        15545      DB      78T
 F29E      4F        15546      DB      79T
 F29F      4F        15547      DB      79T
 F2A0      50        15548      DB      80T
 F2A1      50        15549      DB      80T
 F2A2      51        15550      DB      81T
 F2A3      51        15551      DB      81T
 F2A4      52        15552      DB      82T
 F2A5      52        15553      DB      82T
 F2A6      52        15554      DB      82T
 F2A7      53        15555      DB      83T
 F2A8      53        15556      DB      83T
 F2A9      54        15557      DB      84T
 F2AA      54        15558      DB      84T
 F2AB      55        15559      DB      85T
 F2AC      55        15560      DB      85T
 F2AD      55        15561      DB      85T
 F2AE      56        15562      DB      86T
 F2AF      56        15563      DB      86T
 F2B0      57        15564      DB      87T
 F2B1      57        15565      DB      87T
 F2B2      58        15566      DB      88T
 F2B3      58        15567      DB      88T
 F2B4      58        15568      DB      88T
 F2B5      59        15569      DB      89T
 F2B6      59        15570      DB      89T
 F2B7      5A        15571      DB      90T
 F2B8      5A        15572      DB      90T
 F2B9      5B        15573      DB      91T
 F2BA      5B        15574      DB      91T
 F2BB      5C        15575      DB      92T
 F2BC      5C        15576      DB      92T
 F2BD      5C        15577      DB      92T
 F2BE      5D        15578      DB      93T
 F2BF      5D        15579      DB      93T
 F2C0      5E        15580      DB      94T
 F2C1      5E        15581      DB      94T
 F2C2      5F        15582      DB      95T
 F2C3      5F        15583      DB      95T
 F2C4      5F        15584      DB      95T
 F2C5      60        15585      DB      96T
 F2C6      60        15586      DB      96T
 F2C7      61        15587      DB      97T
 F2C8      61        15588      DB      97T
 F2C9      62        15589      DB      98T
 F2CA      62        15590      DB      98T
 F2CB      63        15591      DB      99T
 F2CC      63        15592      DB      99T
 F2CD      63        15593      DB      99T
 F2CE      64        15594      DB      100T
 F2CF      64        15595      DB      100T
 F2D0      65        15596      DB      101T
 F2D1      65        15597      DB      101T
 F2D2      66        15598      DB      102T
 F2D3      66        15599      DB      102T
 F2D4      66        15600      DB      102T
 F2D5      67        15601      DB      103T
 F2D6      67        15602      DB      103T
 F2D7      68        15603      DB      104T
 F2D8      68        15604      DB      104T
 F2D9      69        15605      DB      105T
 F2DA      69        15606      DB      105T
 F2DB      69        15607      DB      105T
 F2DC      6A        15608      DB      106T
 F2DD      6A        15609      DB      106T
 F2DE      6B        15610      DB      107T
 F2DF      6B        15611      DB      107T
 F2E0      6C        15612      DB      108T
 F2E1      6C        15613      DB      108T
 F2E2      6D        15614      DB      109T
 F2E3      6D        15615      DB      109T
 F2E4      6D        15616      DB      109T
 F2E5      6E        15617      DB      110T
 F2E6      6E        15618      DB      110T


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 116
MC68HC908GP32 User Bootloader


 F2E7      6F        15619      DB      111T
 F2E8      6F        15620      DB      111T
 F2E9      70        15621      DB      112T
 F2EA      70        15622      DB      112T
 F2EB      70        15623      DB      112T
 F2EC      71        15624      DB      113T
 F2ED      71        15625      DB      113T
 F2EE      72        15626      DB      114T
 F2EF      72        15627      DB      114T
 F2F0      73        15628      DB      115T
 F2F1      73        15629      DB      115T
 F2F2      74        15630      DB      116T
 F2F3      74        15631      DB      116T
 F2F4      74        15632      DB      116T
 F2F5      75        15633      DB      117T
 F2F6      75        15634      DB      117T
 F2F7      76        15635      DB      118T
 F2F8      76        15636      DB      118T
 F2F9      77        15637      DB      119T
 F2FA      77        15638      DB      119T
 F2FB      77        15639      DB      119T
 F2FC      78        15640      DB      120T
 F2FD      78        15641      DB      120T
 F2FE      79        15642      DB      121T
 F2FF      64        15643      DB      100T
 F300                15644          include "kpafactor4250.inc"
                     15645  KPAFACTOR4250:
 F300      64        15646      DB      100T
 F301      0A        15647      DB      10T
 F302      0B        15648      DB      11T
 F303      0C        15649      DB      12T
 F304      0D        15650      DB      13T
 F305      0E        15651      DB      14T
 F306      0F        15652      DB      15T
 F307      10        15653      DB      16T
 F308      11        15654      DB      17T
 F309      12        15655      DB      18T
 F30A      13        15656      DB      19T
 F30B      14        15657      DB      20T
 F30C      15        15658      DB      21T
 F30D      16        15659      DB      22T
 F30E      17        15660      DB      23T
 F30F      18        15661      DB      24T
 F310      19        15662      DB      25T
 F311      1A        15663      DB      26T
 F312      1B        15664      DB      27T
 F313      1C        15665      DB      28T
 F314      1D        15666      DB      29T
 F315      1E        15667      DB      30T
 F316      1F        15668      DB      31T
 F317      20        15669      DB      32T
 F318      21        15670      DB      33T
 F319      22        15671      DB      34T
 F31A      23        15672      DB      35T
 F31B      24        15673      DB      36T
 F31C      25        15674      DB      37T
 F31D      26        15675      DB      38T
 F31E      27        15676      DB      39T
 F31F      28        15677      DB      40T
 F320      29        15678      DB      41T
 F321      2A        15679      DB      42T
 F322      2B        15680      DB      43T
 F323      2C        15681      DB      44T
 F324      2D        15682      DB      45T
 F325      2E        15683      DB      46T
 F326      2F        15684      DB      47T
 F327      30        15685      DB      48T
 F328      31        15686      DB      49T
 F329      32        15687      DB      50T
 F32A      33        15688      DB      51T
 F32B      34        15689      DB      52T
 F32C      35        15690      DB      53T
 F32D      36        15691      DB      54T
 F32E      37        15692      DB      55T
 F32F      38        15693      DB      56T
 F330      39        15694      DB      57T
 F331      3A        15695      DB      58T
 F332      3B        15696      DB      59T
 F333      3B        15697      DB      59T
 F334      3C        15698      DB      60T
 F335      3D        15699      DB      61T
 F336      3E        15700      DB      62T
 F337      3F        15701      DB      63T
 F338      40        15702      DB      64T
 F339      41        15703      DB      65T
 F33A      42        15704      DB      66T
 F33B      43        15705      DB      67T
 F33C      44        15706      DB      68T
 F33D      45        15707      DB      69T
 F33E      46        15708      DB      70T
 F33F      47        15709      DB      71T
 F340      48        15710      DB      72T
 F341      49        15711      DB      73T
 F342      4A        15712      DB      74T
 F343      4B        15713      DB      75T
 F344      4C        15714      DB      76T
 F345      4D        15715      DB      77T
 F346      4E        15716      DB      78T
 F347      4F        15717      DB      79T
 F348      50        15718      DB      80T
 F349      51        15719      DB      81T
 F34A      52        15720      DB      82T
 F34B      53        15721      DB      83T
 F34C      54        15722      DB      84T
 F34D      55        15723      DB      85T
 F34E      56        15724      DB      86T
 F34F      57        15725      DB      87T
 F350      58        15726      DB      88T
 F351      59        15727      DB      89T
 F352      5A        15728      DB      90T
 F353      5B        15729      DB      91T
 F354      5C        15730      DB      92T
 F355      5D        15731      DB      93T
 F356      5E        15732      DB      94T
 F357      5F        15733      DB      95T
 F358      60        15734      DB      96T
 F359      61        15735      DB      97T
 F35A      62        15736      DB      98T
 F35B      63        15737      DB      99T
 F35C      64        15738      DB      100T
 F35D      65        15739      DB      101T
 F35E      66        15740      DB      102T
 F35F      67        15741      DB      103T
 F360      68        15742      DB      104T
 F361      69        15743      DB      105T
 F362      6A        15744      DB      106T
 F363      6B        15745      DB      107T
 F364      6C        15746      DB      108T
 F365      6D        15747      DB      109T
 F366      6E        15748      DB      110T
 F367      6E        15749      DB      110T
 F368      6F        15750      DB      111T
 F369      70        15751      DB      112T
 F36A      71        15752      DB      113T
 F36B      72        15753      DB      114T
 F36C      73        15754      DB      115T


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 117
MC68HC908GP32 User Bootloader


 F36D      74        15755      DB      116T
 F36E      75        15756      DB      117T
 F36F      76        15757      DB      118T
 F370      77        15758      DB      119T
 F371      78        15759      DB      120T
 F372      79        15760      DB      121T
 F373      7A        15761      DB      122T
 F374      7B        15762      DB      123T
 F375      7C        15763      DB      124T
 F376      7D        15764      DB      125T
 F377      7E        15765      DB      126T
 F378      7F        15766      DB      127T
 F379      80        15767      DB      128T
 F37A      81        15768      DB      129T
 F37B      82        15769      DB      130T
 F37C      83        15770      DB      131T
 F37D      84        15771      DB      132T
 F37E      85        15772      DB      133T
 F37F      86        15773      DB      134T
 F380      87        15774      DB      135T
 F381      88        15775      DB      136T
 F382      89        15776      DB      137T
 F383      8A        15777      DB      138T
 F384      8B        15778      DB      139T
 F385      8C        15779      DB      140T
 F386      8D        15780      DB      141T
 F387      8E        15781      DB      142T
 F388      8F        15782      DB      143T
 F389      90        15783      DB      144T
 F38A      91        15784      DB      145T
 F38B      92        15785      DB      146T
 F38C      93        15786      DB      147T
 F38D      94        15787      DB      148T
 F38E      95        15788      DB      149T
 F38F      96        15789      DB      150T
 F390      97        15790      DB      151T
 F391      98        15791      DB      152T
 F392      99        15792      DB      153T
 F393      9A        15793      DB      154T
 F394      9B        15794      DB      155T
 F395      9C        15795      DB      156T
 F396      9D        15796      DB      157T
 F397      9E        15797      DB      158T
 F398      9F        15798      DB      159T
 F399      A0        15799      DB      160T
 F39A      A0        15800      DB      160T
 F39B      A1        15801      DB      161T
 F39C      A2        15802      DB      162T
 F39D      A3        15803      DB      163T
 F39E      A4        15804      DB      164T
 F39F      A5        15805      DB      165T
 F3A0      A6        15806      DB      166T
 F3A1      A7        15807      DB      167T
 F3A2      A8        15808      DB      168T
 F3A3      A9        15809      DB      169T
 F3A4      AA        15810      DB      170T
 F3A5      AB        15811      DB      171T
 F3A6      AC        15812      DB      172T
 F3A7      AD        15813      DB      173T
 F3A8      AE        15814      DB      174T
 F3A9      AF        15815      DB      175T
 F3AA      B0        15816      DB      176T
 F3AB      B1        15817      DB      177T
 F3AC      B2        15818      DB      178T
 F3AD      B3        15819      DB      179T
 F3AE      B4        15820      DB      180T
 F3AF      B5        15821      DB      181T
 F3B0      B6        15822      DB      182T
 F3B1      B7        15823      DB      183T
 F3B2      B8        15824      DB      184T
 F3B3      B9        15825      DB      185T
 F3B4      BA        15826      DB      186T
 F3B5      BB        15827      DB      187T
 F3B6      BC        15828      DB      188T
 F3B7      BD        15829      DB      189T
 F3B8      BE        15830      DB      190T
 F3B9      BF        15831      DB      191T
 F3BA      C0        15832      DB      192T
 F3BB      C1        15833      DB      193T
 F3BC      C2        15834      DB      194T
 F3BD      C3        15835      DB      195T
 F3BE      C4        15836      DB      196T
 F3BF      C5        15837      DB      197T
 F3C0      C6        15838      DB      198T
 F3C1      C7        15839      DB      199T
 F3C2      C8        15840      DB      200T
 F3C3      C9        15841      DB      201T
 F3C4      CA        15842      DB      202T
 F3C5      CB        15843      DB      203T
 F3C6      CC        15844      DB      204T
 F3C7      CD        15845      DB      205T
 F3C8      CE        15846      DB      206T
 F3C9      CF        15847      DB      207T
 F3CA      D0        15848      DB      208T
 F3CB      D1        15849      DB      209T
 F3CC      D2        15850      DB      210T
 F3CD      D2        15851      DB      210T
 F3CE      D3        15852      DB      211T
 F3CF      D4        15853      DB      212T
 F3D0      D5        15854      DB      213T
 F3D1      D6        15855      DB      214T
 F3D2      D7        15856      DB      215T
 F3D3      D8        15857      DB      216T
 F3D4      D9        15858      DB      217T
 F3D5      DA        15859      DB      218T
 F3D6      DB        15860      DB      219T
 F3D7      DC        15861      DB      220T
 F3D8      DD        15862      DB      221T
 F3D9      DE        15863      DB      222T
 F3DA      DF        15864      DB      223T
 F3DB      E0        15865      DB      224T
 F3DC      E1        15866      DB      225T
 F3DD      E2        15867      DB      226T
 F3DE      E3        15868      DB      227T
 F3DF      E4        15869      DB      228T
 F3E0      E5        15870      DB      229T
 F3E1      E6        15871      DB      230T
 F3E2      E7        15872      DB      231T
 F3E3      E8        15873      DB      232T
 F3E4      E9        15874      DB      233T
 F3E5      EA        15875      DB      234T
 F3E6      EB        15876      DB      235T
 F3E7      EC        15877      DB      236T
 F3E8      ED        15878      DB      237T
 F3E9      EE        15879      DB      238T
 F3EA      EF        15880      DB      239T
 F3EB      F0        15881      DB      240T
 F3EC      F1        15882      DB      241T
 F3ED      F2        15883      DB      242T
 F3EE      F3        15884      DB      243T
 F3EF      F4        15885      DB      244T
 F3F0      F5        15886      DB      245T
 F3F1      F6        15887      DB      246T
 F3F2      F7        15888      DB      247T
 F3F3      F8        15889      DB      248T
 F3F4      F9        15890      DB      249T


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 118
MC68HC908GP32 User Bootloader


 F3F5      FA        15891      DB      250T
 F3F6      FB        15892      DB      251T
 F3F7      FC        15893      DB      252T
 F3F8      FD        15894      DB      253T
 F3F9      FE        15895      DB      254T
 F3FA      FF        15896      DB      255T
 F3FB      FF        15897      DB      255T
 F3FC      FF        15898      DB      255T
 F3FD      FF        15899      DB      255T
 F3FE      FF        15900      DB      255T
 F3FF      64        15901      DB      100T
 F400                15902          include "thermfactor.inc"
                     15903  ; Generated manually by Robert Hiebert 10/03/22
                     15904  ; VW NTC12 # 1HM 906 501 IAT sensor
                     15905  ; VW NTC2 # ATV 906 161 2 Engine Temperature Sensor
                     15906  
                     15907  ; Computed Steinhart-Hart coefficients: 
                     15908  ; A = 0.0012516891022418901 
                     15909  ; B = .0002681094876698
                     15910  ; C = 1.2909966438108778e-7
                     15911  
                     15912  ; 14 deg F = 9300 Ohm
                     15913  ; 68 deg F = 2500 Ohm
                     15914  ; 176 deg F = 330 Ohm
                     15915  ; Use 2490 1% Bias resistor
                     15916  
                     15917  ; R1 = 2490
                     15918  ; R2 = (Vout*R1(/(5-Vout)
                     15919  
                     15920  THERMFACTOR:                                                                        
                     15921  
                     15922  ;   Deg F+40    Deg F       Deg C   ADC     Vout    R2 (Ohms)               
 F400      DC        15923   DB 220T    ;       180                     0       Sensor failure use 180 deg F                    
 F401      FF        15924   DB 255T    ;       502.6   261.4   1       0.020   10              
 F402      FF        15925   DB 255T    ;       414.8   212.7   2       0.039   20              
 F403      FF        15926   DB 255T    ;       370.3   188.0   3       0.059   30              
 F404      FF        15927   DB 255T    ;       341.3   171.8   4       0.078   40              
 F405      FF        15928   DB 255T    ;       320.1   160.0   5       0.098   50              
 F406      FF        15929   DB 255T    ;       303.6   150.9   6       0.118   60              
 F407      FF        15930   DB 255T    ;       290.1   143.4   7       0.137   70              
 F408      FF        15931   DB 255T    ;       277.8   136.5   8       0.157   81              
 F409      FF        15932   DB 255T    ;       268.2   131.2   9       0.176   91              
 F40A      FF        15933   DB 255T    ;       259         126.1       10      0.196   102             
 F40B      FF        15934   DB 255T    ;       251.7   122.0   11      0.216   112             
 F40C      FF        15935   DB 255T    ;       244.5   118.0   12      0.235   123             
 F40D      FF        15936   DB 255T    ;       238         114.4       13      0.255   134             
 F40E      FF        15937   DB 255T    ;       232.1   111.2   14      0.275   145             
 F40F      FF        15938   DB 255T    ;       226.8   108.2   15      0.294   156             
 F410      FF        15939   DB 255T    ;       221.8   105.5   16      0.314   167             
 F411      FF        15940   DB 255T    ;       217.3   102.9   17      0.333   178             
 F412      FD        15941   DB 253T    ;       213         100.6       18      0.353   189             
 F413      F9        15942   DB 249T    ;       209.1   98.4    19      0.373   200             
 F414      F5        15943   DB 245T    ;       205.1   96.2    20      0.392   212             
 F415      F2        15944   DB 242T    ;       201.7   94.3    21      0.412   223             
 F416      EE        15945   DB 238T    ;       198.1   92.3    22      0.431   235             
 F417      EB        15946   DB 235T    ;       194.8   90.4    23      0.451   247             
 F418      E8        15947   DB 232T    ;       191.6   88.7    24      0.471   259             
 F419      E5        15948   DB 229T    ;       188.7   87.0    25      0.490   271             
 F41A      E2        15949   DB 226T    ;       185.8   85.5    26      0.510   283             
 F41B      DF        15950   DB 223T    ;       183.1   84.0    27      0.529   295             
 F41C      DD        15951   DB 221T    ;       180.6   82.5    28      0.549   307             
 F41D      DA        15952   DB 218T    ;       177.9   81.1    29      0.569   320             
 F41E      D8        15953   DB 216T    ;       175.6   79.8    30      0.588   332             
 F41F      D5        15954   DB 213T    ;       173.2   78.4    31      0.608   345             
 F420      D3        15955   DB 211T    ;       171         77.2        32      0.627   357             
 F421      D1        15956   DB 209T    ;       168.9   76.0    33      0.647   370             
 F422      CF        15957   DB 207T    ;       166.7   74.8    34      0.667   383             
 F423      CD        15958   DB 205T    ;       164.7   73.7    35      0.686   396             
 F424      CB        15959   DB 203T    ;       162.7   72.6    36      0.706   409             
 F425      C9        15960   DB 201T    ;       160.8   71.5    37      0.725   423             
 F426      C7        15961   DB 199T    ;       158.9   70.5    38      0.745   436             
 F427      C5        15962   DB 197T    ;       157         69.4        39      0.765   450             
 F428      C3        15963   DB 195T    ;       155.3   68.5    40      0.784   463             
 F429      C2        15964   DB 194T    ;       153.5   67.5    41      0.804   477             
 F42A      C0        15965   DB 192T    ;       151.8   66.6    42      0.824   491             
 F42B      BE        15966   DB 190T    ;       150.2   65.6    43      0.843   505             
 F42C      BD        15967   DB 189T    ;       148.6   64.8    44      0.863   519             
 F42D      BB        15968   DB 187T    ;       146.9   63.8    45      0.882   534             
 F42E      B9        15969   DB 185T    ;       145.4   63.0    46      0.902   548             
 F42F      B8        15970   DB 184T    ;       143.9   62.1    47      0.922   563             
 F430      B6        15971   DB 182T    ;       142.4   61.4    48      0.941   577             
 F431      B5        15972   DB 181T    ;       141         60.5        49      0.961   592             
 F432      B4        15973   DB 180T    ;       139.6   59.8    50      0.980   607             
 F433      B2        15974   DB 178T    ;       138.1   58.9    51      1.000   623             
 F434      B1        15975   DB 177T    ;       136.7   58.2    52      1.020   638             
 F435      AF        15976   DB 175T    ;       135.4   57.5    53      1.039   653             
 F436      AE        15977   DB 174T    ;       134.1   56.7    54      1.059   669              
 F437      AD        15978   DB 173T    ;       132.8   56.0    55      1.078   685             
 F438      AC        15979   DB 172T    ;       131.5   55.3    56      1.098   701             
 F439      AA        15980   DB 170T    ;       130.3   54.6    57      1.118   717             
 F43A      A9        15981   DB 169T    ;       129         53.9        58      1.137   733             
 F43B      A8        15982   DB 168T    ;       127.8   53.2    59      1.157   750             
 F43C      A7        15983   DB 167T    ;       126.6   52.6    60      1.176   766             
 F43D      A5        15984   DB 165T    ;       125.4   51.9    61      1.196   783             
 F43E      A4        15985   DB 164T    ;       124.3   51.3    62      1.216   800             
 F43F      A3        15986   DB 163T    ;       123.1   50.6    63      1.235   817             
 F440      A2        15987   DB 162T    ;       122         50.0        64      1.255   834             
 F441      A1        15988   DB 161T    ;       120.9   49.4    65      1.275   852             
 F442      A0        15989   DB 160T    ;       119.8   48.8    66      1.294   870             
 F443      9F        15990   DB 159T    ;       118.8   48.2    67      1.314   887             
 F444      9E        15991   DB 158T    ;       117.7   47.6    68      1.333   905             
 F445      9D        15992   DB 157T    ;       116.6   47.0    69      1.353   924             
 F446      9C        15993   DB 156T    ;       115.6   46.4    70      1.373   942             
 F447      9B        15994   DB 155T    ;       114.5   45.8    71      1.392   961             
 F448      9A        15995   DB 154T    ;       113.5   45.3    72      1.412   980             
 F449      99        15996   DB 153T    ;       112.5   44.7    73      1.431   999             
 F44A      98        15997   DB 152T    ;       111.5   44.2    74      1.451   1018            
 F44B      97        15998   DB 151T    ;       110.5   43.6    75      1.471   1038            
 F44C      96        15999   DB 150T    ;       109.6   43.1    76      1.490   1057            
 F44D      95        16000   DB 149T    ;       108.6   42.6    77      1.510   1077            
 F44E      94        16001   DB 148T    ;       107.6   42.0    78      1.529   1097            
 F44F      93        16002   DB 147T    ;       106.7   41.5    79      1.549   1118            
 F450      92        16003   DB 146T    ;       105.8   41.0    80      1.569   1138            
 F451      91        16004   DB 145T    ;       104.8   40.5    81      1.588   1159            
 F452      90        16005   DB 144T    ;       103.9   40.0    82      1.608   1180            
 F453      8F        16006   DB 143T    ;       103         39.4        83      1.627   1202            
 F454      8E        16007   DB 142T    ;       102.1   39.0    84      1.647   1223            
 F455      8D        16008   DB 141T    ;       101.2   38.5    85      1.667   1245            
 F456      8C        16009   DB 140T    ;       100.3   38.0    86      1.686   1267            
 F457      8C        16010   DB 140T    ;       99.5    37.5    87      1.706   1289            
 F458      8B        16011   DB 139T    ;       98.6    37.0    88      1.725   1312            
 F459      8A        16012   DB 138T    ;       97.7    36.5    89      1.745   1335            
 F45A      89        16013   DB 137T    ;       96.9    36.0    90      1.765   1358            
 F45B      88        16014   DB 136T    ;       96          35.6        91      1.784   1382            
 F45C      87        16015   DB 135T    ;       95.2    35.1    92      1.804   1405            
 F45D      86        16016   DB 134T    ;       94.4    34.6    93      1.824   1429            
 F45E      86        16017   DB 134T    ;       93.5    34.2    94      1.843   1454            
 F45F      85        16018   DB 133T    ;       92.7    33.7    95      1.863   1478            
 F460      84        16019   DB 132T    ;       91.9    33.3    96      1.882   1503            
 F461      83        16020   DB 131T    ;       91          32.8        97      1.902   1529            
 F462      82        16021   DB 130T    ;       90.3    32.4    98      1.922   1554            
 F463      82        16022   DB 130T    ;       89.5    31.9    99      1.941   1580            
 F464      81        16023   DB 129T    ;       88.7    31.5    100     1.961   1606            
 F465      80        16024   DB 128T    ;       87.9    31.0    101     1.980   1633            
 F466      7F        16025   DB 127T    ;       87.1    30.6    102     2.000   1660            
 F467      7E        16026   DB 126T    ;       86.3    30.2    103     2.020   1687            


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 119
MC68HC908GP32 User Bootloader


 F468      7E        16027   DB 126T    ;       85.5    29.7    104     2.039   1715            
 F469      7D        16028   DB 125T    ;       84.7    29.3    105     2.059   1743            
 F46A      7C        16029   DB 124T    ;       84          28.9        106     2.078   1771            
 F46B      7B        16030   DB 123T    ;       83.2    28.4    107     2.098   1800            
 F46C      7A        16031   DB 122T    ;       82.4    28.0    108     2.118   1829            
 F46D      7A        16032   DB 122T    ;       81.7    27.6    109     2.137   1859            
 F46E      79        16033   DB 121T    ;       80.9    27.2    110     2.157   1889            
 F46F      78        16034   DB 120T    ;       80.2    26.8    111     2.176   1919            
 F470      77        16035   DB 119T    ;       79.4    26.3    112     2.196   1950            
 F471      77        16036   DB 119T    ;       78.7    25.9    113     2.216   1981            
 F472      76        16037   DB 118T    ;       77.9    25.5    114     2.235   2013            
 F473      75        16038   DB 117T    ;       77.2    25.1    115     2.255   2045            
 F474      75        16039   DB 117T    ;       76.5    24.7    116     2.275   2078            
 F475      74        16040   DB 116T    ;       75.7    24.3    117     2.294   2111            
 F476      73        16041   DB 115T    ;       75          23.9        118     2.314   2145             
 F477      72        16042   DB 114T    ;       74.3    23.5    119     2.333   2179            
 F478      72        16043   DB 114T    ;       73.6    23.0    120     2.353   2213            
 F479      71        16044   DB 113T    ;       72.8    22.7    121     2.373   2248            
 F47A      70        16045   DB 112T    ;       72.1    22.3    122     2.392   2284            
 F47B      6F        16046   DB 111T    ;       71.4    21.9    123     2.412   2320            
 F47C      6F        16047   DB 111T    ;       70.7    21.5    124     2.431   2357            
 F47D      6E        16048   DB 110T    ;       70          21.0        125     2.451   2394            
 F47E      6D        16049   DB 109T    ;       69.3    20.7    126     2.471   2432            
 F47F      6D        16050   DB 109T    ;       68.5    20.3    127     2.490   2471            
 F480      6C        16051   DB 108T    ;       67.8    19.9    128     2.510   2510            
 F481      6B        16052   DB 107T    ;       67.2    19.5    129     2.529   2549            
 F482      6A        16053   DB 106T    ;       66.4    19.1    130     2.549   2590            
 F483      6A        16054   DB 106T    ;       65.7    18.7    131     2.569   2631            
 F484      69        16055   DB 105T    ;       65          18.3        132     2.588   2672            
 F485      68        16056   DB 104T    ;       64.3    17.9    133     2.608   2715            
 F486      68        16057   DB 104T    ;       63.6    17.6    134     2.627   2758            
 F487      67        16058   DB 103T    ;       62.9    17.2    135     2.647   2801            
 F488      66        16059   DB 102T    ;       62.2    16.8    136     2.667   2846            
 F489      66        16060   DB 102T    ;       61.5    16.4    137     2.686   2891            
 F48A      65        16061   DB 101T    ;       60.8    16.0    138     2.706   2937            
 F48B      64        16062   DB 100T    ;       60.1    15.6    139     2.725   2984            
 F48C      63        16063   DB 99T         ;   59.4    15.2    140     2.745   3031            
 F48D      63        16064   DB 99T         ;   58.7    14.8    141     2.765   3080            
 F48E      62        16065   DB 98T         ;   58              14.4    142     2.784   3129            
 F48F      61        16066   DB 97T         ;   57.3    14.1    143     2.804   3179            
 F490      61        16067   DB 97T         ;   56.7    13.7    144     2.824   3230            
 F491      60        16068   DB 96T         ;   56              13.3    145     2.843   3282            
 F492      5F        16069   DB 95T         ;   55.3    12.9    146     2.863   3335            
 F493      5F        16070   DB 95T         ;   54.6    12.5    147     2.882   3389            
 F494      5E        16071   DB 94T         ;   53.9    12.2    148     2.902   3444            
 F495      5D        16072   DB 93T         ;   53.2    11.8    149     2.922   3500            
 F496      5D        16073   DB 93T         ;   52.5    11.4    150     2.941   3557            
 F497      5C        16074   DB 92T         ;   51.8    11.0    151     2.961   3615            
 F498      5B        16075   DB 91T             ;       51.1    10.6    152     2.980   3675            
 F499      5A        16076   DB 90T             ;       50.4    10.2    153     3.000   3735            
 F49A      5A        16077   DB 90T             ;       49.7    9.8             154     3.020   3797            
 F49B      59        16078   DB 89T             ;       49              9.5             155     3.039   3860            
 F49C      58        16079   DB 88T             ;       48.3    9.1             156     3.059   3924            
 F49D      58        16080   DB 88T             ;       47.6    8.7             157     3.078   3989            
 F49E      57        16081   DB 87T             ;       46.9    8.3             158     3.098   4056            
 F49F      56        16082   DB 86T             ;       46.2    7.9             159     3.118   4124            
 F4A0      56        16083   DB 86T             ;       45.5    7.5             160     3.137   4194            
 F4A1      55        16084   DB 85T             ;       44.8    7.1             161     3.157   4265            
 F4A2      54        16085   DB 84T             ;       44.1    6.7             162     3.176   4337            
 F4A3      53        16086   DB 83T             ;       43.4    6.3             163     3.196   4412            
 F4A4      53        16087   DB 83T             ;       42.7    5.9             164     3.216   4487            
 F4A5      52        16088   DB 82T             ;       42              5.6             165     3.235   4565            
 F4A6      51        16089   DB 81T             ;       41.3    5.2             166     3.255   4644            
 F4A7      51        16090   DB 81T             ;       40.6    4.8             167     3.275   4725            
 F4A8      50        16091   DB 80T             ;       39.9    4.4             168     3.294   4808            
 F4A9      4F        16092   DB 79T             ;       39.1    4.0             169     3.314   4893            
 F4AA      4E        16093   DB 78T             ;       38.4    3.6             170     3.333   4980            
 F4AB      4E        16094   DB 78T             ;       37.7    3.2             171     3.353   5069            
 F4AC      4D        16095   DB 77T             ;       37              2.8             172     3.373   5160            
 F4AD      4C        16096   DB 76T             ;       36.2    2.4             173     3.392   5253            
 F4AE      4C        16097   DB 76T             ;       35.5    2.0             174     3.412   5349            
 F4AF      4B        16098   DB 75T             ;       34.8    1.5             175     3.431   5447            
 F4B0      4A        16099   DB 74T             ;       34.1    1.1             176     3.451   5547            
 F4B1      49        16100   DB 73T             ;       33.3    1.0             177     3.471   5650            
 F4B2      49        16101   DB 73T             ;       32.6    0.3             178     3.490   5756            
 F4B3      48        16102   DB 72T             ;       31.8    -0.1    179     3.510   5865            
 F4B4      47        16103   DB 71T             ;       31.1    -0.5    180     3.529   5976            
 F4B5      46        16104   DB 70T             ;       30.3    -0.9    181     3.549   6090            
 F4B6      46        16105   DB 70T             ;       29.6    -1.4    182     3.569   6208            
 F4B7      45        16106   DB 69T             ;       28.8    -1.8    183     3.588   6329            
 F4B8      44        16107   DB 68T             ;       28              -2.2    184     3.608   6453            
 F4B9      43        16108   DB 67T             ;       27.3    -2.6    185     3.627   6581            
 F4BA      43        16109   DB 67T             ;       26.5    -3.1    186     3.647   6712            
 F4BB      42        16110   DB 66T             ;       25.7    -3.5    187     3.667   6848            
 F4BC      41        16111   DB 65T             ;       24.9    -3.9    188     3.686   6987            
 F4BD      40        16112   DB 64T             ;       24.1    -4.4    189     3.706   7130            
 F4BE      3F        16113   DB 63T             ;       23.3    -4.8    190     3.725   7278            
 F4BF      3F        16114   DB 63T             ;       22.5    -5.3    191     3.745   7431            
 F4C0      3E        16115   DB 62T             ;       21.7    -5.7    192     3.765   7589            
 F4C1      3D        16116   DB 61T             ;       20.9    -6.2    193     3.784   7751            
 F4C2      3C        16117   DB 60T             ;       20.1    -6.6    194     3.804   7919            
 F4C3      3B        16118   DB 59T             ;       19.3    -7.1    195     3.824   8093            
 F4C4      3A        16119   DB 58T             ;       18.4    -7.5    196     3.843   8272            
 F4C5      3A        16120   DB 58T             ;       17.6    -8.0    197     3.863   8457            
 F4C6      39        16121   DB 57T             ;       16.7    -8.5    198     3.882   8649            
 F4C7      38        16122   DB 56T             ;       15.9    -9.0    199     3.902   8848            
 F4C8      37        16123   DB 55T             ;       15              -9.4    200     3.922   9055            
 F4C9      36        16124   DB 54T             ;       14.1    -9.9    201     3.941   9268            
 F4CA      35        16125   DB 53T             ;       13.2    -10.4   202     3.961   9490            
 F4CB      34        16126   DB 52T             ;       12.3    -10.9   203     3.980   9721            
 F4CC      33        16127   DB 51T             ;       11.4    -11.4   204     4.000   9960            
 F4CD      33        16128   DB 51T             ;       10.5    -11.9   205     4.020   10209           
 F4CE      32        16129   DB 50T             ;       9.6             -12.4   206     4.039   10468           
 F4CF      31        16130   DB 49T             ;       8.7             -13.0   207     4.059   10738           
 F4D0      30        16131   DB 48T             ;       7.7             -13.5   208     4.078   11020           
 F4D1      2F        16132   DB 47T             ;       6.8             -14.0   209     4.098   11313           
 F4D2      2E        16133   DB 46T             ;       5.8             -14.6   210     4.118   11620           
 F4D3      2D        16134   DB 45T             ;       4.8             -15.1   211     4.137   11941           
 F4D4      2C        16135   DB 44T             ;       3.8             -15.7   212     4.157   12276           
 F4D5      2B        16136   DB 43T             ;       2.8             -16.2   213     4.176   12628           
 F4D6      2A        16137   DB 42T             ;       1.7             -16.8   214     4.196   12997           
 F4D7      29        16138   DB 41T             ;       0.7             -17.4   215     4.216   13384           
 F4D8      28        16139   DB 40T             ;       -0.4    -18.0   216     4.235   13791           
 F4D9      27        16140   DB 39T             ;       -1.5    -18.6   217     4.255   14219           
 F4DA      25        16141   DB 37T             ;       -2.6    -19.2   218     4.275   14671           
 F4DB      24        16142   DB 36T             ;       -3.7    -19.8   219     4.294   15148           
 F4DC      23        16143   DB 35T             ;       -4.8    -20.5   220     4.314   15651           
 F4DD      22        16144   DB 34T             ;       -6              -21.1   221     4.333   16185           
 F4DE      21        16145   DB 33T             ;       -7.2    -21.8   222     4.353   16751           
 F4DF      20        16146   DB 32T             ;       -8.4    -22.5   223     4.373   17352           
 F4E0      1E        16147   DB 30T             ;       -9.7    -23.1   224     4.392   17992           
 F4E1      1D        16148   DB 29T             ;       -10.9   -23.9   225     4.412   18675           
 F4E2      1C        16149   DB 28T             ;       -12.2   -24.6   226     4.431   19405           
 F4E3      1A        16150   DB 26T             ;       -13.6   -25.3   227     4.451   20187           
 F4E4      19        16151   DB 25T             ;       -15             -26.1   228     4.471   21027           
 F4E5      18        16152   DB 24T             ;       -16.4   -26.9   229     4.490   21931           
 F4E6      16        16153   DB 22T             ;       -17.8   -27.7   230     4.510   22908           
 F4E7      15        16154   DB 21T             ;       -19.3   -28.5   231     4.529   23966           
 F4E8      13        16155   DB 19T             ;       -20.9   -29.4   232     4.549   25117           
 F4E9      12        16156   DB 18T             ;       -22.5   -30.3   233     4.569   26371           
 F4EA      10        16157   DB 16T             ;       -24.1   -31.2   234     4.588   27746           
 F4EB      0E        16158   DB 14T             ;       -25.9   -32.1   235     4.608   29258           
 F4EC      0C        16159   DB 12T             ;       -27.7   -33.1   236     4.627   30928           
 F4ED      0B        16160   DB 11T             ;       -29.5   -34.2   237     4.647   32785           
 F4EE      09        16161   DB 9T              ;       -31.5   -35.3   238     4.667   34860           
 F4EF      07        16162   DB 7T              ;       -33.5   -36.4   239     4.686   37194           


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 120
MC68HC908GP32 User Bootloader


 F4F0      04        16163   DB 4T              ;       -35.6   -37.6   240     4.706   39840           
 F4F1      02        16164   DB 2T              ;       -37.9   -38.8   241     4.725   42864           
 F4F2      00        16165   DB 0T              ;       -40.3   -40.2   242     4.745   46352           
 F4F3      00        16166   DB 0T              ;       -42.9   -41.6   243     4.765   50423           
 F4F4      00        16167   DB 0T              ;       -45.6   -43.1   244     4.784   55233           
 F4F5      00        16168   DB 0T              ;       -48.6   -44.8   245     4.804   61005           
 F4F6      00        16169   DB 0T              ;       -51.8   -46.6   246     4.824   68060           
 F4F7      00        16170   DB 0T              ;       -55.3   -48.1   247     4.843   76879           
 F4F8      00        16171   DB 0T              ;       -59.3   -50.7   248     4.863   88217           
 F4F9      00        16172   DB 0T              ;       -63.7   -53.2   249     4.882   103335          
 F4FA      00        16173   DB 0T              ;       -68.8   -56.0   250     4.902   124500          
 F4FB      00        16174   DB 0T              ;       -75             -59.4   251     4.922   156247          
 F4FC      00        16175   DB 0T              ;       -82.6   -63.7   252     4.941   209160          
 F4FD      00        16176   DB 0T              ;       -92.9   -69.4   253     4.961   314985          
 F4FE      00        16177   DB 0T              ;       -109.5  -78.6   254     4.980   632460          
 F4FF      DC        16178   DB 220T    ;        180                    255     Sensor failure , use 180 deg F                  
                     16179  
 F500                16180          include "airdenfactor.inc"
                     16181   
                     16182  ; Generated 05/07/2004 22:22:11 by MStoolsII 
                     16183  ; GM #25036979 
                     16184  ; Standard GM Manifold Air termistor for Megasquirt 
                     16185  ; Computed Steinhart-Hart coefficients: A=0.00162549  B=0.00019531  C=3.00954e-07
                     16186  ;    0 Fahrenheit = 25000 ohm
                     16187  ;    100 Fahrenheit =  1800 ohm
                     16188  ;    210 Fahrenheit =   185 ohm
                     16189  ; For use with  2490 ohm bias resistor installed at R4.
                     16190  AIRDENFACTOR:
                     16191              ;        ADC     Fahrenheit - Celcius - resistance in ohms
 F500      64        16192      DB      100T;      0 - sensor failure, use limp home value.
 F501      3C        16193      DB       60T;      1      408    209         10 ohms
 F502      41        16194      DB       65T;      2      353    178         20 ohms
 F503      43        16195      DB       67T;      3      323    162         30 ohms
 F504      45        16196      DB       69T;      4      303    151         40 ohms
 F505      46        16197      DB       70T;      5      288    142         50 ohms
 F506      47        16198      DB       71T;      6      276    136         60 ohms
 F507      48        16199      DB       72T;      7      266    130         70 ohms
 F508      49        16200      DB       73T;      8      258    126         81 ohms
 F509      4A        16201      DB       74T;      9      251    121         91 ohms
 F50A      4B        16202      DB       75T;     10      244    118        102 ohms
 F50B      4B        16203      DB       75T;     11      238    115        112 ohms
 F50C      4C        16204      DB       76T;     12      233    112        123 ohms
 F50D      4C        16205      DB       76T;     13      228    109        134 ohms
 F50E      4D        16206      DB       77T;     14      224    106        145 ohms
 F50F      4D        16207      DB       77T;     15      220    104        156 ohms
 F510      4E        16208      DB       78T;     16      216    102        167 ohms
 F511      4E        16209      DB       78T;     17      212    100        178 ohms
 F512      4F        16210      DB       79T;     18      209     98        189 ohms
 F513      4F        16211      DB       79T;     19      206     96        200 ohms
 F514      4F        16212      DB       79T;     20      203     95        212 ohms
 F515      50        16213      DB       80T;     21      200     93        223 ohms
 F516      50        16214      DB       80T;     22      197     92        235 ohms
 F517      50        16215      DB       80T;     23      194     90        247 ohms
 F518      51        16216      DB       81T;     24      192     89        259 ohms
 F519      51        16217      DB       81T;     25      190     88        271 ohms
 F51A      51        16218      DB       81T;     26      187     86        283 ohms
 F51B      51        16219      DB       81T;     27      185     85        295 ohms
 F51C      52        16220      DB       82T;     28      183     84        307 ohms
 F51D      52        16221      DB       82T;     29      181     83        320 ohms
 F51E      52        16222      DB       82T;     30      179     82        332 ohms
 F51F      52        16223      DB       82T;     31      177     81        345 ohms
 F520      53        16224      DB       83T;     32      175     80        357 ohms
 F521      53        16225      DB       83T;     33      174     79        370 ohms
 F522      53        16226      DB       83T;     34      172     78        383 ohms
 F523      53        16227      DB       83T;     35      170     77        396 ohms
 F524      54        16228      DB       84T;     36      168     76        409 ohms
 F525      54        16229      DB       84T;     37      167     75        423 ohms
 F526      54        16230      DB       84T;     38      165     74        436 ohms
 F527      54        16231      DB       84T;     39      164     73        450 ohms
 F528      54        16232      DB       84T;     40      162     72        463 ohms
 F529      55        16233      DB       85T;     41      161     72        477 ohms
 F52A      55        16234      DB       85T;     42      159     71        491 ohms
 F52B      55        16235      DB       85T;     43      158     70        505 ohms
 F52C      55        16236      DB       85T;     44      157     69        519 ohms
 F52D      55        16237      DB       85T;     45      155     69        534 ohms
 F52E      56        16238      DB       86T;     46      154     68        548 ohms
 F52F      56        16239      DB       86T;     47      153     67        563 ohms
 F530      56        16240      DB       86T;     48      152     66        577 ohms
 F531      56        16241      DB       86T;     49      150     66        592 ohms
 F532      56        16242      DB       86T;     50      149     65        607 ohms
 F533      56        16243      DB       86T;     51      148     64        622 ohms
 F534      57        16244      DB       87T;     52      147     64        638 ohms
 F535      57        16245      DB       87T;     53      146     63        653 ohms
 F536      57        16246      DB       87T;     54      145     63        669 ohms
 F537      57        16247      DB       87T;     55      143     62        685 ohms
 F538      57        16248      DB       87T;     56      142     61        701 ohms
 F539      57        16249      DB       87T;     57      141     61        717 ohms
 F53A      58        16250      DB       88T;     58      140     60        733 ohms
 F53B      58        16251      DB       88T;     59      139     60        750 ohms
 F53C      58        16252      DB       88T;     60      138     59        766 ohms
 F53D      58        16253      DB       88T;     61      137     58        783 ohms
 F53E      58        16254      DB       88T;     62      136     58        800 ohms
 F53F      58        16255      DB       88T;     63      135     57        817 ohms
 F540      58        16256      DB       88T;     64      134     57        834 ohms
 F541      59        16257      DB       89T;     65      133     56        852 ohms
 F542      59        16258      DB       89T;     66      132     56        870 ohms
 F543      59        16259      DB       89T;     67      131     55        887 ohms
 F544      59        16260      DB       89T;     68      130     55        905 ohms
 F545      59        16261      DB       89T;     69      130     54        924 ohms
 F546      59        16262      DB       89T;     70      129     54        942 ohms
 F547      59        16263      DB       89T;     71      128     53        961 ohms
 F548      5A        16264      DB       90T;     72      127     53        980 ohms
 F549      5A        16265      DB       90T;     73      126     52        999 ohms
 F54A      5A        16266      DB       90T;     74      125     52       1018 ohms
 F54B      5A        16267      DB       90T;     75      124     51       1038 ohms
 F54C      5A        16268      DB       90T;     76      123     51       1057 ohms
 F54D      5A        16269      DB       90T;     77      123     50       1077 ohms
 F54E      5A        16270      DB       90T;     78      122     50       1097 ohms
 F54F      5A        16271      DB       90T;     79      121     49       1118 ohms
 F550      5B        16272      DB       91T;     80      120     49       1138 ohms
 F551      5B        16273      DB       91T;     81      119     48       1159 ohms
 F552      5B        16274      DB       91T;     82      118     48       1180 ohms
 F553      5B        16275      DB       91T;     83      118     48       1202 ohms
 F554      5B        16276      DB       91T;     84      117     47       1223 ohms
 F555      5B        16277      DB       91T;     85      116     47       1245 ohms
 F556      5B        16278      DB       91T;     86      115     46       1267 ohms
 F557      5B        16279      DB       91T;     87      115     46       1289 ohms
 F558      5C        16280      DB       92T;     88      114     45       1312 ohms
 F559      5C        16281      DB       92T;     89      113     45       1335 ohms
 F55A      5C        16282      DB       92T;     90      112     45       1358 ohms
 F55B      5C        16283      DB       92T;     91      111     44       1382 ohms
 F55C      5C        16284      DB       92T;     92      111     44       1405 ohms
 F55D      5C        16285      DB       92T;     93      110     43       1429 ohms
 F55E      5C        16286      DB       92T;     94      109     43       1454 ohms
 F55F      5C        16287      DB       92T;     95      109     43       1478 ohms
 F560      5D        16288      DB       93T;     96      108     42       1503 ohms
 F561      5D        16289      DB       93T;     97      107     42       1529 ohms
 F562      5D        16290      DB       93T;     98      106     41       1554 ohms
 F563      5D        16291      DB       93T;     99      106     41       1580 ohms
 F564      5D        16292      DB       93T;    100      105     40       1606 ohms
 F565      5D        16293      DB       93T;    101      104     40       1633 ohms
 F566      5D        16294      DB       93T;    102      103     40       1660 ohms
 F567      5D        16295      DB       93T;    103      103     39       1687 ohms
 F568      5E        16296      DB       94T;    104      102     39       1715 ohms
 F569      5E        16297      DB       94T;    105      101     39       1743 ohms
 F56A      5E        16298      DB       94T;    106      101     38       1771 ohms


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 121
MC68HC908GP32 User Bootloader


 F56B      5E        16299      DB       94T;    107      100     38       1800 ohms
 F56C      5E        16300      DB       94T;    108       99     37       1829 ohms
 F56D      5E        16301      DB       94T;    109       99     37       1859 ohms
 F56E      5E        16302      DB       94T;    110       98     37       1889 ohms
 F56F      5E        16303      DB       94T;    111       97     36       1919 ohms
 F570      5E        16304      DB       94T;    112       97     36       1950 ohms
 F571      5F        16305      DB       95T;    113       96     36       1981 ohms
 F572      5F        16306      DB       95T;    114       95     35       2013 ohms
 F573      5F        16307      DB       95T;    115       95     35       2045 ohms
 F574      5F        16308      DB       95T;    116       94     34       2078 ohms
 F575      5F        16309      DB       95T;    117       93     34       2111 ohms
 F576      5F        16310      DB       95T;    118       93     34       2145 ohms
 F577      5F        16311      DB       95T;    119       92     33       2179 ohms
 F578      5F        16312      DB       95T;    120       91     33       2213 ohms
 F579      5F        16313      DB       95T;    121       91     33       2248 ohms
 F57A      60        16314      DB       96T;    122       90     32       2284 ohms
 F57B      60        16315      DB       96T;    123       89     32       2320 ohms
 F57C      60        16316      DB       96T;    124       89     31       2357 ohms
 F57D      60        16317      DB       96T;    125       88     31       2394 ohms
 F57E      60        16318      DB       96T;    126       87     31       2432 ohms
 F57F      60        16319      DB       96T;    127       87     30       2471 ohms
 F580      60        16320      DB       96T;    128       86     30       2510 ohms
 F581      60        16321      DB       96T;    129       85     30       2549 ohms
 F582      61        16322      DB       97T;    130       85     29       2590 ohms
 F583      61        16323      DB       97T;    131       84     29       2631 ohms
 F584      61        16324      DB       97T;    132       83     29       2672 ohms
 F585      61        16325      DB       97T;    133       83     28       2715 ohms
 F586      61        16326      DB       97T;    134       82     28       2758 ohms
 F587      61        16327      DB       97T;    135       81     27       2801 ohms
 F588      61        16328      DB       97T;    136       81     27       2846 ohms
 F589      61        16329      DB       97T;    137       80     27       2891 ohms
 F58A      61        16330      DB       97T;    138       80     26       2937 ohms
 F58B      62        16331      DB       98T;    139       79     26       2984 ohms
 F58C      62        16332      DB       98T;    140       78     26       3031 ohms
 F58D      62        16333      DB       98T;    141       78     25       3080 ohms
 F58E      62        16334      DB       98T;    142       77     25       3129 ohms
 F58F      62        16335      DB       98T;    143       76     25       3179 ohms
 F590      62        16336      DB       98T;    144       76     24       3230 ohms
 F591      62        16337      DB       98T;    145       75     24       3282 ohms
 F592      62        16338      DB       98T;    146       74     24       3335 ohms
 F593      63        16339      DB       99T;    147       74     23       3389 ohms
 F594      63        16340      DB       99T;    148       73     23       3444 ohms
 F595      63        16341      DB       99T;    149       72     22       3500 ohms
 F596      63        16342      DB       99T;    150       72     22       3557 ohms
 F597      63        16343      DB       99T;    151       71     22       3615 ohms
 F598      63        16344      DB       99T;    152       70     21       3675 ohms
 F599      63        16345      DB       99T;    153       70     21       3735 ohms
 F59A      63        16346      DB       99T;    154       69     21       3797 ohms
 F59B      63        16347      DB       99T;    155       69     20       3860 ohms
 F59C      64        16348      DB      100T;    156       68     20       3924 ohms
 F59D      64        16349      DB      100T;    157       67     20       3989 ohms
 F59E      64        16350      DB      100T;    158       67     19       4056 ohms
 F59F      64        16351      DB      100T;    159       66     19       4124 ohms
 F5A0      64        16352      DB      100T;    160       65     18       4194 ohms
 F5A1      64        16353      DB      100T;    161       65     18       4265 ohms
 F5A2      64        16354      DB      100T;    162       64     18       4337 ohms
 F5A3      65        16355      DB      101T;    163       63     17       4412 ohms
 F5A4      65        16356      DB      101T;    164       63     17       4487 ohms
 F5A5      65        16357      DB      101T;    165       62     17       4565 ohms
 F5A6      65        16358      DB      101T;    166       61     16       4644 ohms
 F5A7      65        16359      DB      101T;    167       61     16       4725 ohms
 F5A8      65        16360      DB      101T;    168       60     15       4808 ohms
 F5A9      65        16361      DB      101T;    169       59     15       4893 ohms
 F5AA      65        16362      DB      101T;    170       58     15       4980 ohms
 F5AB      66        16363      DB      102T;    171       58     14       5069 ohms
 F5AC      66        16364      DB      102T;    172       57     14       5160 ohms
 F5AD      66        16365      DB      102T;    173       56     14       5253 ohms
 F5AE      66        16366      DB      102T;    174       56     13       5349 ohms
 F5AF      66        16367      DB      102T;    175       55     13       5447 ohms
 F5B0      66        16368      DB      102T;    176       54     12       5547 ohms
 F5B1      66        16369      DB      102T;    177       54     12       5650 ohms
 F5B2      67        16370      DB      103T;    178       53     12       5756 ohms
 F5B3      67        16371      DB      103T;    179       52     11       5865 ohms
 F5B4      67        16372      DB      103T;    180       51     11       5976 ohms
 F5B5      67        16373      DB      103T;    181       51     10       6090 ohms
 F5B6      67        16374      DB      103T;    182       50     10       6208 ohms
 F5B7      67        16375      DB      103T;    183       49     10       6329 ohms
 F5B8      67        16376      DB      103T;    184       49      9       6453 ohms
 F5B9      68        16377      DB      104T;    185       48      9       6581 ohms
 F5BA      68        16378      DB      104T;    186       47      8       6712 ohms
 F5BB      68        16379      DB      104T;    187       46      8       6848 ohms
 F5BC      68        16380      DB      104T;    188       46      8       6987 ohms
 F5BD      68        16381      DB      104T;    189       45      7       7130 ohms
 F5BE      68        16382      DB      104T;    190       44      7       7278 ohms
 F5BF      69        16383      DB      105T;    191       43      6       7431 ohms
 F5C0      69        16384      DB      105T;    192       42      6       7589 ohms
 F5C1      69        16385      DB      105T;    193       42      5       7751 ohms
 F5C2      69        16386      DB      105T;    194       41      5       7919 ohms
 F5C3      69        16387      DB      105T;    195       40      4       8092 ohms
 F5C4      69        16388      DB      105T;    196       39      4       8272 ohms
 F5C5      6A        16389      DB      106T;    197       38      4       8457 ohms
 F5C6      6A        16390      DB      106T;    198       38      3       8649 ohms
 F5C7      6A        16391      DB      106T;    199       37      3       8848 ohms
 F5C8      6A        16392      DB      106T;    200       36      2       9055 ohms
 F5C9      6A        16393      DB      106T;    201       35      2       9268 ohms
 F5CA      6A        16394      DB      106T;    202       34      1       9490 ohms
 F5CB      6B        16395      DB      107T;    203       33      1       9721 ohms
 F5CC      6B        16396      DB      107T;    204       32      0       9960 ohms
 F5CD      6B        16397      DB      107T;    205       31     -0      10209 ohms
 F5CE      6B        16398      DB      107T;    206       31     -1      10468 ohms
 F5CF      6B        16399      DB      107T;    207       30     -1      10738 ohms
 F5D0      6C        16400      DB      108T;    208       29     -2      11020 ohms
 F5D1      6C        16401      DB      108T;    209       28     -2      11313 ohms
 F5D2      6C        16402      DB      108T;    210       27     -3      11620 ohms
 F5D3      6C        16403      DB      108T;    211       26     -3      11941 ohms
 F5D4      6D        16404      DB      109T;    212       25     -4      12276 ohms
 F5D5      6D        16405      DB      109T;    213       24     -5      12628 ohms
 F5D6      6D        16406      DB      109T;    214       23     -5      12997 ohms
 F5D7      6D        16407      DB      109T;    215       22     -6      13384 ohms
 F5D8      6D        16408      DB      109T;    216       21     -6      13791 ohms
 F5D9      6E        16409      DB      110T;    217       20     -7      14219 ohms
 F5DA      6E        16410      DB      110T;    218       18     -8      14671 ohms
 F5DB      6E        16411      DB      110T;    219       17     -8      15148 ohms
 F5DC      6F        16412      DB      111T;    220       16     -9      15651 ohms
 F5DD      6F        16413      DB      111T;    221       15     -9      16185 ohms
 F5DE      6F        16414      DB      111T;    222       14    -10      16751 ohms
 F5DF      6F        16415      DB      111T;    223       13    -11      17352 ohms
 F5E0      70        16416      DB      112T;    224       11    -12      17992 ohms
 F5E1      70        16417      DB      112T;    225       10    -12      18675 ohms
 F5E2      70        16418      DB      112T;    226        9    -13      19405 ohms
 F5E3      71        16419      DB      113T;    227        7    -14      20187 ohms
 F5E4      71        16420      DB      113T;    228        6    -15      21027 ohms
 F5E5      71        16421      DB      113T;    229        4    -15      21931 ohms
 F5E6      72        16422      DB      114T;    230        3    -16      22908 ohms
 F5E7      72        16423      DB      114T;    231        1    -17      23966 ohms
 F5E8      72        16424      DB      114T;    232       -0    -18      25117 ohms
 F5E9      73        16425      DB      115T;    233       -2    -19      26371 ohms
 F5EA      73        16426      DB      115T;    234       -4    -20      27746 ohms
 F5EB      74        16427      DB      116T;    235       -5    -21      29258 ohms
 F5EC      74        16428      DB      116T;    236       -7    -22      30928 ohms
 F5ED      75        16429      DB      117T;    237       -9    -23      32785 ohms
 F5EE      75        16430      DB      117T;    238      -11    -24      34860 ohms
 F5EF      76        16431      DB      118T;    239      -13    -25      37194 ohms
 F5F0      76        16432      DB      118T;    240      -15    -26      39840 ohms
 F5F1      77        16433      DB      119T;    241      -18    -28      42864 ohms
 F5F2      78        16434      DB      120T;    242      -20    -29      46352 ohms


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 122
MC68HC908GP32 User Bootloader


 F5F3      78        16435      DB      120T;    243      -23    -31      50422 ohms
 F5F4      79        16436      DB      121T;    244      -26    -32      55233 ohms
 F5F5      7A        16437      DB      122T;    245      -29    -34      61005 ohms
 F5F6      7B        16438      DB      123T;    246      -32    -36      68060 ohms
 F5F7      7C        16439      DB      124T;    247      -36    -38      76879 ohms
 F5F8      7D        16440      DB      125T;    248      -40    -40      88217 ohms
 F5F9      7F        16441      DB      127T;    249      -45    -43     103335 ohms
 F5FA      81        16442      DB      129T;    250      -51    -46     124500 ohms
 F5FB      83        16443      DB      131T;    251      -58    -50     156248 ohms
 F5FC      86        16444      DB      134T;    252      -66    -54     209160 ohms
 F5FD      8A        16445      DB      138T;    253      -77    -61     314985 ohms
 F5FE      91        16446      DB      145T;    254      -96    -71     632460 ohms
 F5FF      64        16447      DB      100T;    255 - sensor failure, use limp home value.
                     16448  
                     16449  ;*        include "matfactor.inc"
                     16450  ;*        include "barofactor400k.inc"
                     16451      ; Room here for no more inc file
                     16452  ;------------------------------------------------------------------
 E000                16453         org     $E000
                     16454  ; Tables, copied into RAM on demand
                     16455  ; Most functions will primarily work from the flash copy
                     16456  ; 8 Pages in total
                     16457  
                     16458  flash_table0:  ; config variables
                     16459  
 E000      01        16460  personality_f   db      %00000001   ; Only 1 allowed to be set unless in
                     16461                                      ; EDIS or WHEEL mode, if all are set
                     16462                                      ; to 0 then thats fuel only (std MS)!
                     16463  ;MSNS           equ      1    Megasquirtnspark
                     16464  ;MSNEON         equ      2    MS neon decoder
                     16465  ;WHEEL          equ      4    generalised decoder 36-1, 60-2 etc
                     16466  ;WHEEL2         equ      8    If in WHEEL mode then WHEEL2 is 0 = -1  1 = -2
                     16467  ;EDIS           equ      $10  edis
                     16468  ;DUALEDIS       equ      $20  if in EDIS mode then this allows two edis
                     16469  ;                             modules (for edis4 on V8, edis6 on V12)
                     16470  ;TFI            equ      $40  Ford TFI system
                     16471  ;HEI7           equ      $80  GM 7 pin HEI
                     16472  
 E001      06        16473  outputpins_f    db      %00000110
                     16474  ;               bits=    76543210
                     16475  ;       equ 1       FIDLE for Idle Air Valve || spark output (as per MSnS)
                     16476  ;       equ 2       LED17 for squirt led     || coila output
                     16477  ;
                     16478  ;                   bit 2    bit 3
                     16479  ;                  LED18_2   LED18    function
                     16480  ;                    0         0       wled
                     16481  ;                    0         1       irq
                     16482  ;                    1         0       output4 or fan control (see bit 6)
                     16483  ;                    1         1       spark c
                     16484  
                     16485  ;REUSE_LED19       equ $10   LED19 for accel led || coilb output
                     16486  ;X2_FAN            equ $20   X2 = water Inj pulsed out || fan control
                     16487  ;       ** Please note: Water inj uses X2 to pulse output, X3 will still
                     16488  ;                       come on with water inj or NOS depending on which is on
                     16489  ;
                     16490  ;LED18_FAN         equ $40   LED18 output4 || fan control
                     16491  ;       ** only allowed if bit 2 = 1 and bit 3 = 0
                     16492  ;Mulitplex Ign     equ $80   NORMAL || toyota DLI ignition
                     16493  ; multiplex
                     16494  
 E002      F0        16495  SRevLimRPM  db      240T    ; Standard RPM limit for spark retard (rpm*100)
 E003      38        16496  SRevLimAngle        db      56T     ; Spark retard for above +10 degrees
                     16497                              ; 10 = 10 + 10 i.e. -10 start point.
                     16498                              ; So 56T = 10BTDC )
 E004      32        16499  SRevLimHTime        db      50T     ; Time in 1/10Sec in Soft limit till
                     16500                              ; hard limit cuts in *0.1
 E005      0A        16501  SRevLimCTime        db      10T     ; NOT USED
 E006      FA        16502  RevLimit_f  db      250T    ; Hard Rev limiter (rpm*100)
 E007      00        16503  Out1Lim             db      0T      ; Output1 On point in RAW except for
                     16504                              ; TEMPS then its in F -40, so 200F switch
                     16505                              ; on point = 240F
                     16506  
 E008      00        16507  Out1Source  db      0T      ; Output 1 source, index from secl,
                     16508                              ; Standard Out1source
                     16509                              ; This is secl + val up to 30 (ego2 correction)
                     16510                              ; 31 = Traction control  >31 is not valid as
                     16511                              ; this is from RAM
                     16512  
 E009      00        16513  Out2Lim             db      0T      ; Output 2 limit As out1Lim
                     16514  
 E00A      00        16515  Out2Source  db      0T      ; Same as Out1Source
                     16516  
 E00B      42        16517  feature1_f  db      %01000010
                     16518  ;wd_2trig       equ 1     wheel decoder 2nd trigger i/p - new in 023c9
                     16519  ;               spare
                     16520  ;whlsim         equ 4     Wheel simulator          off      on
                     16521  ;taeIgnCount        equ 8     Acceleration Timer    Seconds^ || Engine Cycles
                     16522  ; NOT USE       equ $10    NOT USED NOW 023
                     16523  ;hybridAlphaN       equ $20      Hybrid Alpha N           OFF^ || OFF
                     16524  ;CrankingPW2        equ $40      Fire PW2 during Cranking?   YES^ || NO
                     16525  ;Nitrous    equ $80      Nitrous system              OFF || ON
                     16526                                                         ;NOT allowed with W Inj
                     16527  
 E00C      00        16528  feature2_f  db      %00000000  ; more features
                     16529  ;BoostControl       equ 1        Boost Controller           OFF || ON
                     16530  ;ShiftLight equ 2        Shift Lights               OFF || ON
                     16531  ;LaunchControl      equ 4        launch Control             OFF || ON
                     16532  ;wasPWMidle equ 8
                     16533  ;     only if outputpins_f bit 1 = 0
                     16534  ;out3sparkd equ $10      Output 3             Output 3  || Spark D
                     16535  ;min_dwell  equ $20
                     16536  ;dwellduty50        equ $40
                     16537  ;config_error       equ $80    this is only set if non-sense combination
                     16538  ; of options - don't run.
                     16539  
 E00D      04        16540  whlsimcnt       db      04T     ; How many outputs when simulating wheel
 E00E      03        16541  bcFreqDiv_f db      3T      ; Solenoid PW rate BITS 0 1 and 2 used :
                     16542                              ; "INVALID","39.0 Hz","19.5 Hz","13.0 Hz",
                     16543                              ; "9.8 Hz","7.8 Hz","6.5 Hz","5.6 Hz"
 E00F      0A        16544  bcUpdate_f  db      10T     ; Boost Controller Update Rate in mS
                     16545                              ; (10min   255max)
 E010      40        16546  bcPgain_f   db      64T     ; B Controller P Gain % (0-100% = 0-255 in
                     16547                              ; MS so MT value displayed = MS*0.3922)
 E011      05        16548  bcDgain_f   db      5T      ; Boost Controller D Gain % (0-100% = 0-255
                     16549                              ; in MS so MT value displayed = MS*0.3922)
 E012      3A        16550  ShiftLo_f   db      58T     ; Shift light LED start point (rpm*100)
 E013      3C        16551  ShiftHi_f   db      60T     ; Shift Light Final point (RPM * 100)
 E014      28        16552  LaunchLimit_f       db      40T     ; Hard limit for Launch control (rpm*100)
 E015      0B        16553  edisms_f    db      11T     ; max rpm for EDIS multi-spark (rpm*100)
 E016      A0        16554  NosClt_f    db      160T    ; Nitrous System Min Coolant Temp Minimum
                     16555                              ; point of coolant for NOS to enable in (F-40)
 E017      1E        16556  NosRpm_f    db      30T     ; Nitrous System Min RPM * 100, 3000rpm is
                     16557                              ; minimum allowed  (23)
 E018      3C        16558  NosRpmMax_f db      60T     ; Nitrous Max RPM *100 (used for
                     16559                              ; interpolating and cutting nos)
                     16560  
 E019      00        16561  Trig1_f             db       0T     ; wheel decoding
 E01A      00        16562  Trig2_f             db       0T     ;  "
 E01B      00        16563  Trig3_f             db       0T     ;  "
 E01C      00        16564  Trig4_f             db       0T     ;  "
 E01D      00        16565  Trig1ret_f  db       0T     ;  "
 E01E      00        16566  Trig2ret_f  db       0T     ;  "
 E01F      00        16567  Trig3ret_f  db       0T     ;  "
 E020      00        16568  Trig4ret_f  db       0T     ;  "
                     16569  
 E021      61        16570  DTmode_f    db      %01100001 ; DualTable control


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 123
MC68HC908GP32 User Bootloader


                     16571  ;           equ $10      Normal single table mode ^   || Dual Table Mode
                     16572  ;           equ $20    Gamma E correction OFF for PW1 || Gamma E ON^
                     16573  ;           equ $40    Gamma E correction OFF for PW2 || Gamma E ON^
 E022                16574  alt_i2t2          equ      %00010000  ; inj2: 0 = t1, 1 = t2
 E022                16575  alt_i1ge          equ      %00100000
 E022                16576  alt_i2ge          equ      %01000000
 E022                16577  trig2fallb       equ 1   ; 0 = rising edge trigger, 1 = falling edge
 E022                16578  trig2risefallb   equ 2   ; 0 = rising or falling, 1 = rise and falling edge
                     16579  
 E022      00        16580  latency_f      db        0T  ; "known" latency in spark input to output
 E023      00        16581  spare1_2_f      db        0T
 E024      00        16582  spare1_3_f      db        0T
 E025      00        16583  spare1_4_f      db        0T
 E026      00        16584  spare1_5_f      db        0T
                     16585  
 E027      FF        16586  EgoLimitKPa_f       db      255T    ; MAP KPa Point to change Ego +- limit (39)
 E028      05        16587  EgoLim2_f   db      05T     ; New Ego limit when MAP KPa above
                     16588                              ; EgoLimitKPa_f
 E029      1E        16589  LC_Throttle_f       db      30T     ; Throttle position in RAW data for launch
                     16590                              ; control mode
 E02A      2A        16591  LC_LimAngle_f       db      42T     ; Launch control soft limiter angle
                     16592                              ; *0.352   -28.4     -10 to 45 allowed
 E02B      23        16593  LC_Soft_Rpm_f       db      35T     ; Launch Soft Limit RPM (43)
 E02C      00        16594  Over_B_P_f  db      0T      ; Over boost Protection KPa setpoint
                     16595                              ; <100 = no boost protection
 E02D      03        16596  SparkCutNum_f       db      3T      ; Rev Limiter Hard cut spark cut number to
                     16597                              ; remove sparks from SparkCutBase_f
                     16598  
 E02E      30        16599  feature3_f  db      %00110000  ; (46)
 E02F                16600  KPaTpsOpenb      equ 1
 E02F                16601  VarLaunchb       equ 2
 E02F                16602  CltIatIgnitionb  equ 4
 E02F                16603  WaterInjb        equ 8
 E02F                16604  Fuel_SparkHardb  equ $10 ; Fuel or Spark cut for Rev limiter
 E02F                16605  FuelSparkCutb    equ $20 ; Fuel or spark cut for Rev limiter
 E02F                16606  KnockDetb        equ $40
 E02F                16607  TargetAFRb       equ $80
                     16608  
 E02F      B4        16609  cltAdvance_f        db      180T    ; Advance ignition whilst temp below this value F -40
 E030      1B        16610  cltDeg_f    db      27T     ; Add 1 degree of advance for this value(F)
                     16611                              ; below cltAdvance_f, so if
                     16612                              ; cltAdvance_f=120(80F) and cltDeg_f=20 then
                     16613                                  ; at 10F advance will be 80-10/20= 3.5
 E031      0F        16614  maxAdvAng_f db      15T     ; Limit in degrees of advance for coolant
                     16615                              ; related advance so it doesnt add loads of
                     16616                              ; advance when very cold *0.352
 E032      12        16617  iatDeg_f    db      18T     ; Iat Temp for 1 degree of retard related
                     16618                              ; to IAT, exactly the same as cltDeg_f but
                     16619                              ; retard rather than advance and
                     16620                                  ; IAT rather that CLT. F
 E033      4B        16621  kpaRetard_f db      75T     ; Apply the IAT related retard when above
                     16622                              ; this KPa, to stop retard at tickover
 E034      C8        16623  iatDanger_f db      200T    ; Iat Temp to start Retard F -40
 E035      37        16624  KnockRpmL_f db      55T     ; Knock sensor max rpm RPM*100 (53)
 E036      0F        16625  KnockRpmLL_f        db      15T     ; Knock sensor min rpm RPM*100
 E037      FF        16626  KnockKpaL_f db      255T    ; knock sensor max KPa
 E038      06        16627  KnockRet1_f db      06T     ; First Retard amount for knock system *0.352
 E039      03        16628  KnockRet2_f db      03T     ; Subsequent Retard amount *0.352
 E03A      03        16629  KnockAdv_f  db      03T     ; Advance amount for knock system *0.352
 E03B      0F        16630  KnockMax_f  db      15T     ; Max Allowable retard *0.352
 E03C      01        16631  KnockTim_f  db      01T     ; Timer for steps of knock advance / retard
                     16632                              ; to be applied in Seconds 1
 E03D      64        16633  iatpoint_f  db      100T    ; Water Inj IAT setpoint point F -40 (61)
 E03E      78        16634  wateripoint_f       db      120T    ; Water Injection KPa setpoint
 E03F      23        16635  wateriRpm_f db      35T     ; Water Injection RPM setpoint RPM*100
 E040      50        16636  kpaO2_f             db      80T     ; KPa Open loop setpoint for no O2 correction
 E041      C0        16637  tpsO2_f             db      192T    ; TPS Open Loop setpoint for no O2 correction Raw ADC
                     16638  
 E042      00        16639  feature4_f  db      %00000000; Another feature bit for enhanced (66)
 E043                16640  miss2ndb         equ 1 ; Missing tooth AND 2nd trigger
 E043                16641  InvertOutOneb    equ 2
 E043                16642  InvertOutTwob    equ 4
 E043                16643  multisparkb   equ 8  ;  ; EDIS multi-spark
 E043                16644  KPaDotBoostb     equ $10
 E043                16645  DtNosb           equ $20  ; If DT which Bank do we add NOS PW to (Bank1=0 Bank2=1)
 E043                16646  OverRunOnb       equ $40
 E043                16647  KpaDotSetb       equ $80
                     16648  
 E043      C8        16649  NosTps_f    db      200T    ; Nitrous System Min TPS RAW ADC
 E044      32        16650  NosAngle_f  db      50T     ; Nitrous System Angle to remove from
                     16651                              ; ignition *0.352 (68)
 E045      0C        16652  NosFuelLo_f db      12T     ; Nitrous Pulse Width to add to fuel at
                     16653                              ; 3000 rpm *0.1 in mSec this is for
                     16654                              ; additional fuel for NOS
 E046      03        16655  NosFuelHi_f db      03T     ; Nitrous Pulse Width to add to fuel at
                     16656                              ; NosRpmMax_f *0.1 in mSec
 E047      11        16657  ORunRpm_f   db      17T     ; Max RPM for Over run fuel cut *100
 E048      14        16658  ORunKpa_f   db      20T     ; Over run fuel cut when below kpa
 E049      05        16659  ORunTPS_f   db      05T     ; Over run when throttle position lower than this RAW ADC (73)
 E04A      EA        16660  EfanOnTemp_f        db      234T    ; X2 or LED 17 electric fan output on temp
                     16661                              ; F-40
 E04B      B9        16662  EfanOffTemp_f       db      185T    ; X2 or LED 17 electric fan output off temp
                     16663                              ; F-40
                     16664  
 E04C      33        16665  feature5_f  db      %00110011  ; Yet another feature bit (76)
 E04D                16666  Fuel_SparkHLCb   equ 1  ; Fuel or Spark cut for Launch
 E04D                16667  FuelSparkLCb     equ 2  ; Fuel or Spark cut for Launch
 E04D                16668  stagedb:         equ 4  ; Roger Enns Staged Mode   xxxx00xx = Staged Off  xxxx01xx = RPM Based
 E04D                16669  stagedModeb:     equ 8  ; Roger Enns Staged Mode   xxxx10xx = MAP Based   xxxx11xx = TPS Based
 E04D                16670  stagedeither:    equ $0c ; either staging
 E04D                16671  BoostCutb:       equ $10  ; Over boost Cut type, option2 or spark cut
 E04D                16672  BoostCut2b:      equ $20  ; Option2 for Over boost Cut type, fuel only or both fuel and spark
 E04D                16673  NosLagSystemb:   equ $40  ; Nos Anti-lag System used
 E04D                16674  SparkTable2b:    equ $80  ; Second Spark Table
                     16675  
                     16676  
 E04D      03        16677  SparkCutNLC_f       db      03T     ; Launch control spark cut, this is the
                     16678                              ; amount of sparks to remove from
                     16679                              ; SparkCutBase_f when in Launch hard cut
 E04E      06        16680  SparkCutBase_f      db      06T     ; Base number to cut sparks from MS
                     16681                              ; = MT value - 1
 E04F      FF        16682  SCALEFAC_f  db      255T    ; Scaling factor for STAGED INJECTION MODE
                     16683                              ; (prim flow/total flow*100) 255=100% 123=50%
 E050      19        16684  STGTRANS_f  db      25T     ; Staged transition point, rpm*100, kpa,
                     16685                              ; or tps raw adc depending on staging
                     16686                              ; method selected (See feature5_f bits 3-4)
 E051      03        16687  STGDELTA_f  db      03T     ; Staged operation off at (STGTRANS-STGDELTA)
                     16688                              ; so this is raw data as STGTRANS
 E052      6E        16689  BarroHi_f   db      110T    ; Barometric Correction Max Limit in KPa (82)
 E053      3C        16690  BarroLow_f  db      60T     ; Barometric Correction Lower Limit in KPa
 E054      03        16691  SparkCutBNum_f      db      03T     ; Number of sparks to remove from BASE value
                     16692                              ; when Over Boost
 E055      50        16693  NosLowKpa_f db      80T     ; Minimum KPa to fire Nos Anti-lag
 E056      78        16694  NosHiKpa_f  db      120T    ; Maximum KPa to fire Nos Anti-lag,
                     16695                              ; Anti-lag will switch off when this is reached
 E057      00        16696  Spark2Delay_f       db      00T     ; Delay for Spark Table 2 to come in when
                     16697                              ; input received. *0.1   1/10Sec
 E058      00        16698  Out1UpLim_f db      00T     ; Output 1 top limit for window, so output1
                     16699                              ; will go off above this value unless its 0
                     16700                              ; then its ignored
 E059      00        16701  Out2UpLim_f db      00T     ; Output 2 top limit for window (89)
 E05A      0C        16702  NumTeeth_f  db      12T     ; Number of teeth for wheel decoder
 E05B      1E        16703  MAPThresh_f db      30T     ; MAP dot threshold for Accel Decel
                     16704                              ; Enrichments *10 (KPa/Sec)
                     16705  
 E05C      00        16706  feature6_f  db      %00000000  ; More feature bits (92)


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 124
MC68HC908GP32 User Bootloader


 E05D                16707  VETable3b        equ 1  ; Use VE table 3
 E05D                16708  TargetAFR3b      equ 2  ; Use Target AFR for VE3
 E05D                16709  falsetrigb       equ 4  ; 0=Enable false trigger protection, 1=disable   ; testing
 E05D                16710  wheel_oldb       equ 8  ; 0= new(025) wheel decoder or 1=old(024s9) style ; testing
 E05D                16711  dualdizzyb       equ $10  ;
 E05D                16712  TractionCb       equ $20  ; Traction control system on
 E05D                16713  BoostDirb        equ $40  ; Direction for boost control output
 E05D                16714  NoDecelBoostb    equ $80  ; No decelleration when in boost
                     16715  
 E05D      00        16716  VE3Delay_f  db      00T     ; Delay for VE Table 3 to come in when
                     16717                              ; input received. *0.1   1/10Sec
                     16718  RPMrate_f:
 E05E      00        16719      db      00T             ; Fuel enrichment in mSec for 3000RPM/Sec
                     16720                              ; increase or 5% slip if in VSS mode *0.1
 E05F      64        16721              db     100T             ; Fuel enrichment in mSec for 4000RPM/Sec
                     16722                              ; increase or 15% slip if in VSS mode *0.1
 E060      96        16723              db     150T             ; Fuel enrichment in mSec for 6000RPM/Sec
                     16724                              ; increase or 30% slip if in VSS mode *0.1 (96)
 E061      C8        16725              db     200T             ; Fuel enrichment in mSec for 10000RPM/Sec
                     16726                              ; increase or 70% slip if in VSS mode *0.1
                     16727  
 E062      02        16728  RPMthresh_f db      2T      ; Threshhold for RPM change for traction
                     16729                              ; (rpm * 1000) because it checks every 1/10
                     16730                              ; sec and rpm = rpm*100. So 2 = 2000RPM/Sec
                     16731                              ; threshold
                     16732  TractDeg_f:
 E063      00        16733      db      00T             ; Ignition retard in Degrees for 3000RPM/Sec
                     16734                              ; increase or 5% slip if in VSS mode *0.352
 E064      38        16735      db      56T             ; Ignition retard in Degrees for 4000RPM/Sec
                     16736                              ; increase or 15% slip if in VSS mode *0.352
 E065      38        16737      db      56T             ; Ignition retard in Degrees for 6000RPM/Sec
                     16738                              ; increase or 30% slip if in VSS mode *0.352
 E066      55        16739      db      85T             ; Ignition retard in Degrees for 10000RPM/Sec
                     16740                              ; increase or 70% slip if in VSS mode *0.352(102)
                     16741  TractSpark_f:
 E067      00        16742      db      00T             ; Spark Cut from Base number for 3000RPM/Sec
                     16743                              ; increase or 5% slip if in VSS mode MAX
                     16744                              ; ALLOWED 5
 E068      00        16745      db      00T             ; Spark Cut from Base number for 4000RPM/Sec
                     16746                              ; increase or 15% slip if in VSS mode
 E069      01        16747      db      01T             ; Spark Cut from Base number for 6000RPM/Sec
                     16748                              ; increase or 30% slip if in VSS mode
 E06A      02        16749      db      02T             ; Spark Cut from Base number for 10000RPM/Sec
                     16750                              ; increase or 70% slip if in VSS mode (106)
                     16751  
 E06B      00        16752  BoostKnock_f        db      00T     ; Boost to remove from controller target when
                     16753                              ; Knock detected (PSI) so value of MS 1 = 7KPa
 E06C      1E        16754  BoostKnMax_f        db      30T     ; Max Boost to remove when knocking in PSI so
                     16755                              ; send 1 to MS this is 7KPa inside the code
                     16756  
 E06D      02        16757  feature7_f  db      %00000010  ; More feature bits     (109)
                     16758  ;029g changed to enable dwell by default
                     16759  ;TractionNos        equ 1   Turn Nos off in Traction Control if traction lost,
                     16760                              ; only if Traction oN TractionCb:feature6 bit 6
                     16761  ;dwellcont  equ 2   Real (crude) dwell control
                     16762  ;TCcycleSec equ 4   Hold traction settings for cycles || untill rpm
                     16763                              ; stable for 0.1S only if Traction ON
                     16764                              ; see TractionCb:feature6 bit 6
                     16765  ;WheelSensor        equ 8   Traction control    RPM Based || VSS
                     16766                              ; only if Traction ON
                     16767                              ; see TractionCb:feature6 bit 6
                     16768  ;AlphaTarAFR        equ $10  speed density for target afr tables || Alpha-N
                     16769                              ; only if Target AFR tables ON
                     16770                              ; see TargetAFRb:feature3 bit 8
                     16771  ;TPSTargetAFR       equ $20    0=  Use Target AFR all the while || 1=Only when
                     16772                              ; TPS above AFRTarTPS_f  if Target AFR
                     16773                              ; tables ON
                     16774                              ; see TargetAFRb:feature3 bit 8
                     16775  ;spare      equ $40
                     16776  ;spare      equ $80
                     16777  
 E06E      3C        16778  dwellcrank_f        db       60T    ; cranking dwell in 0.1ms
 E06F      28        16779  dwellrun_f  db       40T    ; running  dwell in 0.1ms  (111)
                     16780  
                     16781  TractCycle_f:
 E070      03        16782      db      03T             ; Engine cycles to hold enrichment /
                     16783                              ; spark cut / retard for 3000RPM/Sec increase
                     16784                              ; or 5% slip if in VSS mode
 E071      05        16785      db      05T             ; Engine cycles to hold enrichment /
                     16786                              ; spark cut / retard for 4000RPM/Sec increase
                     16787                              ; or 15% slip if in VSS mode
 E072      08        16788      db      08T             ; Engine cycles to hold enrichment /
                     16789                              ; spark cut / retard for 6000RPM/Sec increase
                     16790                              ; or 30% slip if in VSS mode
 E073      0C        16791      db      12T             ; Engine cycles to hold enrichment /
                     16792                              ; spark cut / retard for 15000RPM/Sec increase
                     16793                              ; or 70% slip if in VSS mode
                     16794  
 E074      00        16795  feature8_f  db      %00000000  ; More feature bits (116)
                     16796  ;spare 1
                     16797  ;spare 2
 E075                16798  BoostTable3b:     equ 4  ; Use boost table 3 when switch table input on
 E075                16799  spkeopb           equ 8  ; Enable spark E output (instead of shiftlight)
 E075                16800  spkfopb           equ $10 ; Enable spark F output (instead of knock in)
 E075                16801  DecelMAPb:        equ $20 ; Use MAP for Decel
 E075                16802  InterpAcelb:      equ $40 ; Interpole the accel enrichments down to a setpoint
 E075                16803  Out1_Out3b:       equ $80 ; Output3 only if output1 is on.
                     16804  
 E075      00        16805  UDSpeedLo_f db       00T    ; Min speed from the Undriven wheel for
                     16806                              ;traction to work at. Volts *0.0196  5V=255
 E076      FF        16807  UDSpeedLim_f        db      255T    ; Max speed from the Undriven wheel for
                     16808                              ; traction to work at. Volts *0.0196  5V=255
 E077      7D        16809  TCScaleFac_f        db      125T    ; Difference factor for speed inputs from
                     16810                              ; driven and undriven inputs
                     16811                              ; (255=100%) *0.39216
 E078      19        16812  TCSlipFac_f db      25T     ; Slip allowed between wheel sensors at low
                     16813                              ; speed (255=100%) *0.39216
 E079      FF        16814  AFRTarTPS_f db      255T    ; TPS setpoint to go over to switch to target
                     16815                              ; afr tables in RAW ADC (121)
 E07A      00        16816  spare1          db      00T
 E07B      05        16817  TCSlipFacH_f        db       5T     ; Slip allowed between wheel sensors at
                     16818                              ; high speed (255=100%) *0.39216
 E07C      FF        16819  LC_flatsel_f        db      255T    ; rpm above which arms flat shift mode
 E07D      FF        16820  bc_max_diff db      255T    ; Boost Controller max Difference in KPa
 E07E      00        16821  Out1Hys_f   db      00T     ; Hysterisis for Output1 in Raw ADC (126)
 E07F      00        16822  Out2Hys_f   db      00T     ; Hysterisis for Output2 in Raw ADC
 E080      37        16823  LC_flatlim      db      55T     ; flat shift revlimit
 E081      FF        16824  DecelKpa_f  db      255T    ; No Decel enrichment above this value in
                     16825                              ; KPa (129)
 E082      00        16826  OverRunT_f  db      00T     ; Over Run Timer before enabling over run
                     16827                              ; in Seconds *1
 E083      FF        16828  BarCorr300_f        db      255T    ; Correction factor for KPA Factor for
                     16829                              ; 300KPa sensor and 400KPa sensors only.
                     16830                              ; 255=100% *0.39216
                     16831                              ; (24%=GM300 28%=6300A Series and
                     16832                              ; 78%= 6400A series)
                     16833  
 E084      00        16834  Out3Source_f        db      00T     ; Same as Out1Source
                     16835  
 E085      00        16836  Out3Lim_f   db      00T     ; Output 3 On/Off Limit as per standard MSnS
 E086      00        16837  TimerOut3_f db      00T     ; Output 3 OFF delay timer in Seconds (134) *1
 E087      00        16838  iatBoostSt_f        db      00T     ; Start point for boost reduction related to
                     16839                              ; IAT when using Boost controller F -40
 E088      00        16840  iatBoost_f  db      00T     ; Amount of IAT to remove 1 PSI from boost
                     16841                              ; controller F, same theory as cltDeg_f
 E089      00        16842  tpsBooIAT_f db      00T     ; TPS point to start removing boost from


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 125
MC68HC908GP32 User Bootloader


                     16843                              ; boost controller in RAW ADC
                     16844  
 E08A      00        16845  Out4Source_f        db      00T     ; Same as Out1Source
                     16846  
 E08B      00        16847  Out4Lim_f   db      00T     ; Output 4 On/Off Limit as per MSnS
 E08C      00        16848  LC_f_slim_f db      00T     ; Retard timing above this rpm in flat shift mode
 E08D      00        16849  LC_f_limangle_f     db      00T     ; Retard timing to this in flat shift mode
 E08E      00        16850  spare3_f    db      00T     ;   ** SPARE **
 E08F      05        16851  mindischg_f db      05T     ; minimum discharge period for dwell
                     16852                              ; control in mSec *0.1
                     16853  
                     16854  ;pwm idle was here
                     16855  
 E090      00        16856  tachconf_f      db      0T      ; tach output config (159)
 E091      00        16857  Trig5_f             db       0T     ; wheel decoding (160)
 E092      00        16858  Trig6_f             db       0T     ;  "
 E093      00        16859  Trig5ret_f  db       0T     ;  "
 E094      00        16860  Trig6ret_f  db       0T     ;  "
                     16861  
                     16862  
                     16863  RPMbasedrate_f:
 E095      05        16864      db      05T             ; These next 4 are for adding AE based on engine rpm
 E096      14        16865          db  20T             ; This is the actual engine rpm settings
 E097      23        16866      db      35T             ;
 E098      37        16867      db      55T             ; (167)
 E099      01        16868  RPMAQ_f2    db      01T             ; Amount of fuel to add for 1st area of rpm based AE
 E09A      0A        16869              db      10T             ; Fuel for 2nd rpm area
 E09B      0F        16870              db      15T             ; Fuel for 3rd
 E09C      14        16871  RPMAQL_f2:  db      20T             ; Fuel for 4th (171)
                     16872  
 E09D      00        16873  n2odel_launch_f: db     00T           ; delay from launch to nitrous activation
 E09E      00        16874  n2odel_flat_f:   db     00T           ; delay from flat shift to nitrous activation
 E09F      00        16875  n2oholdon_f:     db     00T           ; how long do extra nitrous fuel and retard hold on
                     16876  
 E0A0      00        16877  xxKPaCorr300_f db    00T     ; KPa correction factor for 400/300KPa sensor (175)
                     16878  
                     16879  
                     16880  tpsdotrate:
 E0A1      05        16881      db      05T             ; These next 4 are delta points for TPSdot
                     16882                              ; V/Sec
                     16883                              ; these were hard coded points, now users can
                     16884                              ; select what values
                     16885                              ; they want where. *0.1960784 MAX=25.5
 E0A2      14        16886      db      20T             ; So 40 = 0.8V/0.1Sec or 8V/Sec as we check it
                     16887                              ; every 0.1Sec
 E0A3      28        16888      db      40T             ;
 E0A4      4D        16889      db      77T             ; (179)
                     16890  mapdotrate_f:
 E0A5      05        16891      db      05T             ; These next 4 are delta points for MAPdot
                     16892                              ; KPa/Sec *10 so 255=2550KPa/Sec as we check it
                     16893                              ; every 0.1Sec
 E0A6      0A        16894          db  10T             ;
 E0A7      0F        16895      db      15T             ;
 E0A8      19        16896      db      25T             ; (183)
                     16897  MAPAQ_f:
 E0A9      14        16898      db      20T             ; Enrichment to add in mSec for first Delta
                     16899                              ; mapdotrate_f when in MAPdot mode *0.1
                     16900                              ; these are all interpoled values)
 E0AA      32        16901      db      50T             ; Enrichment to add in mSec for second Delta
                     16902                              ; mapdotrate_f when in MAPdot mode *0.1
 E0AB      69        16903      db      105T            ; Enrichment to add in mSec for third Delta
                     16904                              ; mapdotrate_f when in MAPdot mode *0.1
 E0AC      96        16905      db      150T            ; Enrichment to add in mSec for fourth Delta
                     16906                              ; mapdotrate_f when in MAPdot mode *0.1 (187)
                     16907  TPSAQ_f1:
 E0AD      14        16908      db      20T             ; Enrichment to add in mSec for first Delta
                     16909                              ; tpsdotrate_f when in TPSdot mode *0.1
 E0AE      32        16910      db      50T             ; Enrichment to add in mSec for second Delta
                     16911                              ; tpsdotrate_f when in TPSdot mode *0.1
 E0AF      69        16912      db      105T            ; Enrichment to add in mSec for third Delta ;
                     16913                              ; tpsdotrate_f when in TPSdot mode *0.1
 E0B0      96        16914      db      150T            ; Enrichment to add in mSec for fourth Delta ;
                     16915                              ; tpsdotrate_f when in TPSdot mode *0.1
                     16916  
 E0B1      5A        16917  TPSACOLD_f1 db      90T     ; TPSACOLD (ms to add in when cold) *0.1
 E0B2      03        16918  TPSTHRESH_f1        db      03T     ; TPSTHRESH for Accel enrichment when in
                     16919                              ; TPS mode *0.1953125
 E0B3      02        16920  TPSASYNC_f1 db      02T     ; TPSASYNC (accel enrich time in 1/10
                     16921                              ; second increments) or in Enfgine Cycles.
 E0B4      64        16922  TPSDQ_f1    db      100T    ; TPSDQ   (195)
 E0B5      64        16923  ACMULT_f1   db      100T    ; Cold ACCELMULT
 E0B6      64        16924  OverRunClt_f1       db      100T    ; No Over run fuel cut when below this
                     16925                              ; coolant temp F-40 (197)
 E0B7      00        16926  AccelDecay_f        db       00T    ; This is the value in mS that the Accel
                     16927                              ; enrichment will end up at when the timer
                     16928                              ; has run. *0.1
                     16929  
 E0B8      00        16930  feature9_f  db  %00000000   ;  (199)
 E0B9                16931  CrankPWTableb:    equ 1       ; Use cranking PW Table
 E0B9                16932  ASETableb:        equ 2       ; After start enrichment use table
 E0B9                16933  NoAccelASEb:      equ 4       ; No Accel Enrich during After start enrichment
 E0B9                16934  BaroCorConstb:    equ 8       ; If Alpha-n Mode then do we use MAP for Baro cor constantly.
 E0B9                16935  RpmAEBased:       equ $10     ; RPM Based Accel Enrichment
 E0B9                16936  MassAirFlwb:      equ $20     ; Using Mass AirFlow meter instead of a MAP sensor.
 E0B9                16937  NoAirFactorb:     equ $40     ; If using MAF do we use Air Density in fueling cals?
 E0B9                16938  ConsBarCorb:      equ $80     ; Constant Bar Cor using MAP on X7
                     16939  
 E0B9      64        16940  Pambient_f:       db  100T    ; raw byte value ambient pressure for boost control
                     16941  
                     16942  ;NOTE! do not add any more data to table 0. Any more and stack may collide when in RAM.
                     16943  ;ends at $E0C8
                     16944  ;In 025x1 VE_r=$0106, so end of ram copy of data is $0106+$C8 = $1CE
                     16945  ; lowest observed stack was $1DB, leaving $D (13) bytes free.
                     16946  ; Will reserve 10 more bytes in .h for 025y, but that's it unless these data pages get
                     16947  ; reduced.
                     16948  ; That should make VE_r = $110 highest.
                     16949  
                     16950  flash_table0_end:                ;marker for easy lookup in lst file
                     16951  
 E100                16952          org     $E100
                     16953  flash_table1:           ; FUEL 1   12x12 Total Bytes = 144
                     16954  VE_f1:
 E100      2728292C  16955      db      39T,40T,41T,44T,44T,44T,45T,45T,45T,46T,47T,50T ; VE(0,0-11)
           2C2C2D2D 
           2D2E2F32 
 E10C      2F2F3333  16956      db      47T,47T,51T,51T,50T,50T,50T,50T,51T,55T,56T,60T ; VE (1,0-11)
           32323232 
           3337383C 
 E118      2F2F3333  16957      db      47T,47T,51T,51T,50T,50T,50T,50T,51T,55T,56T,60T ; VE (2,0-11)
           32323232 
           3337383C 
 E124      34373739  16958      db      52T,55T,55T,57T,60T,61T,61T,65T,67T,70T,72T,75T ; VE (3,0-11)
           3C3D3D41 
           4346484B 
 E130      34373739  16959      db      52T,55T,55T,57T,60T,61T,61T,65T,67T,70T,72T,75T ; VE (4,0-11)
           3C3D3D41 
           4346484B 
 E13C      3B3C3C41  16960      db      59T,60T,60T,65T,66T,70T,70T,70T,72T,74T,77T,80T ; VE (5,0-11)
           42464646 
           484A4D50 
 E148      3D3F4141  16961      db      61T,63T,65T,65T,68T,70T,72T,75T,77T,80T,84T,85T ; VE (6,0-11)
           4446484B 
           4D505455 
 E154      4148484A  16962      db      65T,72T,72T,74T,74T,75T,75T,77T,79T,83T,89T,90T ; VE (7,0-11)
           4A4B4B4D 
           4F53595A 


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 126
MC68HC908GP32 User Bootloader


 E160      464A4A4B  16963      db      70T,74T,74T,75T,75T,77T,77T,78T,82T,86T,95T,95T ; VE (8,0-11)
           4B4D4D4E 
           52565F5F 
 E16C      464A4A4B  16964      db      70T,74T,74T,75T,75T,77T,77T,78T,82T,86T,95T,95T ; VE (9,0-11)
           4B4D4D4E 
           52565F5F 
 E178      4B4D4F49  16965      db      75T,77T,79T,73T,82T,82T,82T,85T,87T,89T,99T,100T; VE (10,0-11)
           52525255 
           57596364 
 E184      4B4D4F49  16966      db      75T,77T,79T,73T,82T,82T,82T,85T,87T,89T,99T,100T; VE (11,0-11)
           52525255 
           57596364 
                     16967  
 E190      C8        16968  EGOTEMP_f   db      200T    ; EGOTEMP
 E191      10        16969  EGOCOUNTCMP_f       db      16T     ; EGOCOUNTCMP
 E192      01        16970  EGODELTA_f  db      1T      ; EGODELTA
 E193      0F        16971  EGOLIMIT_f  db      15T     ; EGOLIMIT
 E194      9B        16972  REQ_FUEL_f1 db      155T    ; REQFUEL (148)
 E195      04        16973  DIVIDER_f1  db      4T      ; DIVIDER
 E196      00        16974  Alternate_f1        db      0       ; alternate or simult (single table ONLY)
 E197      0A        16975  INJOPEN_f1  db      10T     ; INJOPEN
 E198      00        16976  INJOCFUEL_f1        db      0T      ; INJOCFUEL  NOT USED NOW !!!!!
                     16977                              ; Kept to fill hole
 E199      4B        16978  INJPWM_f1   db      75T     ; INJPWM
 E19A      FF        16979  INJPWMT_f1  db      255T    ; INJPWMT
 E19B      0C        16980  BATTFAC_f1  db      12T     ; BATTFAC
 E19C      05        16981  rpmk_f1             db      $05     ; RPMK[0]
 E19D      DC        16982              db      $DC     ; RPMK[1]
                     16983  RPMRANGEVE_f1:
 E19E      05        16984      db      5T              ; RPMRANGEVE[0]
 E19F      0A        16985      db      10T             ; RPMRANGEVE[1]
 E1A0      0F        16986      db      15T             ; RPMRANGEVE[2]
 E1A1      14        16987      db      20T             ; RPMRANGEVE[3]
 E1A2      1C        16988      db      28T             ; RPMRANGEVE[4]
 E1A3      24        16989      db      36T             ; RPMRANGEVE[5]
 E1A4      2C        16990      db      44T             ; RPMRANGEVE[6]
 E1A5      34        16991      db      52T             ; RPMRANGEVE[7]
 E1A6      37        16992      db      55T             ; RPMRANGEVE[8]
 E1A7      3C        16993      db      60T             ; RPMRANGEVE[9]
 E1A8      3E        16994      db      62T             ; RPMRANGEVE[10]
 E1A9      41        16995      db      65T             ; RPMRANGEVE[11]
                     16996  KPARANGEVE_f1:
 E1AA      14        16997      db      20T             ; KPARANGEVE[0]
 E1AB      1E        16998      db      30T             ; KPARANGEVE[1]
 E1AC      28        16999      db      40T             ; KPARANGEVE[2]
 E1AD      32        17000              db      50T             ; KPARANGEVE[3]
 E1AE      3C        17001      db      60T             ; KPARANGEVE[4]
 E1AF      4B        17002      db      75T             ; KPARANGEVE[5]
 E1B0      5A        17003      db      90T             ; KPARANGEVE[6]
 E1B1      64        17004      db      100T            ; KPARANGEVE[7]
 E1B2      6E        17005      db      110T            ; KPARANGEVE[8]
 E1B3      78        17006      db      120T            ; KPARANGEVE[9]
 E1B4      82        17007      db      130T            ; KPARANGEVE[10]
 E1B5      96        17008      db      150T            ; KPARANGEVE[11]
                     17009  
 E1B6      71        17010  config11_f1 db      113T    ; Config11 (originally 113T for 8 cyl) (182)
 E1B7      70        17011  config12_f1 db      112T    ; Config12 (originally 112T for 8 injectors)
 E1B8      00        17012  config13_f1 db      00T     ; Config13
                     17013  
 E1B9      0D        17014  EGOrpm_f    db      13T     ; RPMOXLIMIT
 E1BA      EA        17015  FASTIDLEbg_f        db      234T    ;
 E1BB      1A        17016  O2targetV_f db      26T     ; VOLTOXTARGET (187)
 E1BC      00        17017  feature14_f1    db      %00000000  ; (188)  ; allows EGOigncount to be on page1
 E1BD                17018  egoIgnCountb        equ 1           ;EGO Step Counter         mSecs || Ignition Pulses^
                     17019  
                     17020  flash_table1_end:
                     17021  
 E200                17022          org     $E200
                     17023  flash_table2:           ; FUEL 2 - For PW2 when in Dual Table mode, if not
                     17024                      ; in DT mode then this whole page is ignored
                     17025  VE_f2:           ; 12x12 Total Bytes = 144
 E200      2728292C  17026      db      39T,40T,41T,44T,44T,44T,45T,45T,45T,46T,47T,50T ; VE (0,0-11)
           2C2C2D2D 
           2D2E2F32 
 E20C      2F2F3333  17027      db      47T,47T,51T,51T,50T,50T,50T,50T,51T,55T,56T,60T ; VE (1,0-11)
           32323232 
           3337383C 
 E218      2F2F3333  17028      db      47T,47T,51T,51T,50T,50T,50T,50T,51T,55T,56T,60T ; VE (2,0-11)
           32323232 
           3337383C 
 E224      34373739  17029              db      52T,55T,55T,57T,60T,61T,61T,65T,67T,70T,72T,75T ; VE (3,0-11)
           3C3D3D41 
           4346484B 
 E230      34373739  17030              db      52T,55T,55T,57T,60T,61T,61T,65T,67T,70T,72T,75T ; VE (4,0-11)
           3C3D3D41 
           4346484B 
 E23C      3B3C3C41  17031              db      59T,60T,60T,65T,66T,70T,70T,70T,72T,74T,77T,80T ; VE (5,0-11)
           42464646 
           484A4D50 
 E248      3D3F4141  17032              db      61T,63T,65T,65T,68T,70T,72T,75T,77T,80T,84T,85T ; VE (6,0-11)
           4446484B 
           4D505455 
 E254      4148484A  17033              db      65T,72T,72T,74T,74T,75T,75T,77T,79T,83T,89T,90T ; VE (7,0-11)
           4A4B4B4D 
           4F53595A 
 E260      464A4A4B  17034              db      70T,74T,74T,75T,75T,77T,77T,78T,82T,86T,95T,95T ; VE (8,0-11)
           4B4D4D4E 
           52565F5F 
 E26C      464A4A4B  17035              db      70T,74T,74T,75T,75T,77T,77T,78T,82T,86T,95T,95T ; VE (9,0-11)
           4B4D4D4E 
           52565F5F 
 E278      4B4D4F49  17036              db      75T,77T,79T,73T,82T,82T,82T,85T,87T,89T,99T,100T; VE (10,0-11)
           52525255 
           57596364 
 E284      4B4D4F49  17037              db      75T,77T,79T,73T,82T,82T,82T,85T,87T,89T,99T,100T; VE (11,0-11)
           52525255 
           57596364 
                     17038  
 E290      C8        17039  EGOtemp_f2  db      200T    ; For second O2 sensor (feature12_f2)
 E291      10        17040  EGOCOUNTCMP_f2      db      16T     ; NOT USED
 E292      01        17041  EGOdelta_f2 db      1T      ; For second O2 sensor (feature12_f2) (146)
 E293      0A        17042  EGOlimit_f2 db      10T     ; For second O2 sensor (feature12_f2)
 E294      9B        17043  REQ_FUEL_f2 db      155T    ; (148)
 E295      04        17044  Divider_f2  db      4T
 E296      00        17045  Alternate_f2        db      0T      ; NOT USED
 E297      0A        17046  InjOpen_f2  db      10T
 E298      00        17047  InjOCFuel_f2        db      0T      ; NOT USED NOW !!!!! Kept to fill hole
 E299      64        17048  INJPWM_f2   db      100T
 E29A      FF        17049  INJPWMT_f2  db      255T
 E29B      0C        17050  BATTFAC_f2  db      12T     ; (155)
                     17051  rpmk_f2:    ; type=byte  entries=2  total bytes=2
 E29C      05DC      17052      db      $05,$DC         ; (156,157)
                     17053  RPMRANGEVE_f2:      ; type=byte  entries=8  total bytes=8
 E29E      050A0F14  17054      db      5T,10T,15T,20T,28T,36T,44T,52T,55T,60T,65T,70T
           1C242C34 
           373C4146 
                     17055  KPARANGEVE_f2:   ; type=byte  entries=8  total bytes=8
 E2AA      141E2832  17056      db      20T,30T,40T,50T,60T,75T,90T,100T,110T,120T,130T,140T
           3C4B5A64 
           6E78828C 
                     17057  config11_f2:
 E2B6      71        17058  config21_f  db      113T    ; NOT USED by code, but MT??(182)
                     17059  config12_f2:
 E2B7      70        17060  config22_f  db      112T       ; NOT USED
                     17061  config13_f2:
 E2B8      00        17062  config23_f  db      %00000000       ; (184)


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 127
MC68HC908GP32 User Bootloader


                     17063  ;  equ $02   Narrow Band   |  Wide Band   Note: DT bank 2 only (second O2 sensor type)
                     17064                                                                ;(feature12_f2)
                     17065  ;  equ $04   Speed Density |  Alpha N     Note: DT bank 2 only
                     17066  
 E2B9      0D        17067  EGOrpm_f2   db      13T     ; RPMOXLIMIT for second O2 sensor if used (feature12_f2)
 E2BA      00        17068                      db      0       ; not used
 E2BB      1A        17069  O2targetV_f2        db      26T     ; VOLTOXTARGET for second O2 sensor if used (feature12_f2)
                     17070  
 E2BC      00        17071  feature12_f2    db      %00000000  ; (188)
 E2BD                17072  SecondO2b        equ 1
                     17073                              ; Mode (DTmode_f bit 4)???
                     17074  
                     17075  flash_table2_end:
                     17076  
 E300                17077          org     $E300
                     17078  flash_table3:               ; SPARK Table 1
                     17079  ST_f1:                              ; *0.352 -28.4 Min -10  Max 80
 E300      35353A46  17080      db    53T,53T,58T,70T,90T,119T,131T,131T,131T,131T,131T,131T ;(0,0-11)
           5A778383 
           83838383 
 E30C      35353A46  17081      db    53T,53T,58T,70T,87T,113T,119T,119T,119T,119T,119T,119T ;(1,0-11)
           57717777 
           77777777 
 E318      3A3A4046  17082      db    58T,58T,64T,70T,84T,107T,113T,113T,113T,113T,113T,113T ;(2,0-11)
           546B7171 
           71717171 
 E324      3A3A4046  17083      db    58T,58T,64T,70T,81T,104T,107T,107T,107T,107T,107T,107T ;(3,0-11)
           51686B6B 
           6B6B6B6B 
 E330      3A3A4046  17084      db    58T,58T,64T,70T,81T,93T,101T,101T,101T,101T,101T,101T  ;(4,0-11)
           515D6565 
           65656565 
 E33C      3A3A4046  17085      db    58T,58T,64T,70T,81T,93T,101T,101T,101T,101T,101T,101T  ;(5,0-11)
           515D6565 
           65656565 
 E348      3A3A4046  17086      db    58T,58T,64T,70T,81T,93T,101T,101T,101T,101T,101T,101T  ;(6,0-11)
           515D6565 
           65656565 
 E354      3A3A4046  17087      db    58T,58T,64T,70T,81T,93T,101T,101T,101T,101T,101T,101T  ;(7,0-11)
           515D6565 
           65656565 
 E360      3A3A3D43  17088      db    58T,58T,61T,67T,78T,90T,98T,98T,98T,98T,98T,98T        ;(8,0-11)
           4E5A6262 
           62626262 
 E36C      3A3A3A40  17089      db    58T,58T,58T,64T,75T,87T,95T,95T,95T,95T,95T,95T        ;(9,0-11)
           4B575F5F 
           5F5F5F5F 
 E378      3A3A373D  17090      db    58T,58T,55T,61T,72T,84T,92T,92T,92T,92T,92T,92T        ;(a,0-11)
           48545C5C 
           5C5C5C5C 
 E384      3A3A333A  17091      db    58T,58T,51T,58T,69T,81T,81T,81T,81T,81T,81T,81T        ;(b,0-11) (143)
           45515151 
           51515151 
                     17092  
                     17093  RPMRANGEST_f1:
 E390      05070D14  17094      db      05T,07T,13T,20T,30T,40T,50T,60T,61T,62T,63T,64T
           1E28323C 
           3D3E3F40 
                     17095                              ; RPMRANGEST[0-11]
                     17096  
                     17097  KPARANGEST_f1:
 E39C      1E28323C  17098      db      30T,40T,50T,60T,70T,80T,90T,100T,110T,120T,130T,140T  ; (last byte 167)
           46505A64 
           6E78828C 
                     17099                              ; KPARANGEST[0-b]
                     17100  
                     17101  ;; org $d3a8  ; stick them up out of the way at known values
 E3A8      AB        17102  TriggAngle_f        db      171T    ; TriggAngle (60 deg)     (168)  *0.352
 E3A9      00        17103  FixedAngle_f        db      0T      ; FixedAngle   *0.352  -28.4   min -10 Max 80
                     17104                              ; THIS MUST BE -10 (0) for non fixed angle
 E3AA      00        17105  TrimAngle_f db      0T      ; TrimAngle (NOT cleared on startup)  *0.352
 E3AB      38        17106  CrankAngle_f        db      56T     ; Cranking advance (10deg)  *0.352 -28.4
                     17107                              ;  min -10 max 80
 E3AC      01        17108  SparkHoldCyc_f      db      1T      ; SparkHoldCyc (hold spark x cycles on
                     17109                              ; stall and restart)
 E3AD      0C        17110  SparkConfig1_f      db   %00001100  ; SparkConfig1 (Normal trigger, trigger
                     17111                              ; return based low speed spark) Standard MSnS
                     17112         ; 029g changed default, was %00000100 for non-inverted spark output after re-flash
                     17113  ;Sparkconfig1 equates
 E3AE                17114  M_SC1LngTrg     equ     $01     ; Spark config 1 (0) Long trigger +22.5
 E3AE                17115  M_SC1XLngTrg    equ     $02     ; Spark config 1 (1) Extra Long trigger +45
 E3AE                17116  M_SC1TimCrnk    equ     $04     ; Spark config 1 (2) Time based cranking (not trigger return)
 E3AE                17117  M_SC1InvSpark   equ     $08     ; Spark config 1 (3) Invert spark output
 E3AE                17118  M_SC1oddfire    equ     $10    ; Spark config 1 (4) Oddfire ignition
                     17119  
 E3AE      00        17120  IdleAdvance_f       db      0T      ; IdleAdvance *0.342 -28.4 min -10 max 80
 E3AF      00        17121  IdleTPSThresh_f     db      0T      ; below this TPS value idle advance
 E3B0      00        17122  IdleRPMThresh_f     db      0T      ; below this RPM value idle advance (0 disables)
 E3B1      00        17123  IdleCLTThresh_f db  0T      ; below this CLT value don't use idle advance
 E3B2      01        17124  IdleDelayTime_f db  1T      ; wait this long before using the idle advance
                     17125  
 E3B3      19        17126  StgCycles_f db      25T     ; gradually bring on secondary injectors over
                     17127                              ; this many ignition events
                     17128  
 E3B4      00        17129  Stg2ndParmKPA_f db      0T      ; Staged 2nd parameter kPa value
                     17130  
 E3B5      00        17131  Stg2ndParmDlt_f db      0T      ; staged 2nd parameter delta
                     17132  
 E3B6      00        17133  spare3_182      db      0T      ; spare byte as demo
 E3B7      00        17134  spare3_183      db      0T      ; spare byte as demo
 E3B8      00        17135  spare3_184      db      0T      ; spare byte as demo
                     17136  
                     17137  flash_table3_end:
                     17138  
 E400                17139          org     $E400
                     17140  flash_table4:                   ; Spark Table 2, used when input switched
                     17141                              ; low if selected
                     17142  ST_f2:                              ; *0.352  -28.4   Min -10 Max 80
 E400      35353A46  17143      db    53T,53T,58T,70T,90T,119T,131T,131T,131T,131T,131T,131T ;(0,0-11)
           5A778383 
           83838383 
 E40C      35353A46  17144      db    53T,53T,58T,70T,87T,113T,119T,119T,119T,119T,119T,119T ;(1,0-11)
           57717777 
           77777777 
 E418      3A3A4046  17145      db    58T,58T,64T,70T,84T,107T,113T,113T,113T,113T,113T,113T ;(2,0-11)
           546B7171 
           71717171 
 E424      3A3A4046  17146      db    58T,58T,64T,70T,81T,104T,107T,107T,107T,107T,107T,107T ;(3,0-11)
           51686B6B 
           6B6B6B6B 
 E430      3A3A4046  17147      db    58T,58T,64T,70T,81T,93T,101T,101T,101T,101T,101T,101T  ;(4,0-11)
           515D6565 
           65656565 
 E43C      3A3A4046  17148      db    58T,58T,64T,70T,81T,93T,101T,101T,101T,101T,101T,101T  ;(5,0-11)
           515D6565 
           65656565 
 E448      3A3A4046  17149      db    58T,58T,64T,70T,81T,93T,101T,101T,101T,101T,101T,101T  ;(6,0-11)
           515D6565 
           65656565 
 E454      3A3A4046  17150      db    58T,58T,64T,70T,81T,93T,101T,101T,101T,101T,101T,101T  ;(7,0-11)
           515D6565 
           65656565 
 E460      3A3A3D43  17151      db    58T,58T,61T,67T,78T,90T,98T,98T,98T,98T,98T,98T        ;(8,0-11)
           4E5A6262 
           62626262 
 E46C      3A3A3A40  17152      db    58T,58T,58T,64T,75T,87T,95T,95T,95T,95T,95T,95T        ;(9,0-11)


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 128
MC68HC908GP32 User Bootloader


           4B575F5F 
           5F5F5F5F 
 E478      3A3A373D  17153      db    58T,58T,55T,61T,72T,84T,92T,92T,92T,92T,92T,92T        ;(a,0-11)
           48545C5C 
           5C5C5C5C 
 E484      3A3A333A  17154      db    58T,58T,51T,58T,69T,81T,81T,81T,81T,81T,81T,81T        ;(b,0-11)
           45515151 
           51515151 
                     17155  
                     17156  RPMRANGEST_f2:
 E490      05070D14  17157          db      05T,07T,13T,20T,30T,40T,50T,60T,61T,62T,63T,64T
           1E28323C 
           3D3E3F40 
                     17158                              ; RPMRANGEST[0-b]
                     17159  
                     17160  KPARANGEST_f2:
 E49C      1E28323C  17161          db      30T,40T,50T,60T,70T,80T,90T,100T,110T,120T,130T,140T                                                ; KPARANGEST[0-b]
           46505A64 
           6E78828C 
                     17162  
                     17163  flash_table4_end:
                     17164  
 E500                17165          org     $E500
                     17166  flash_table5:    ; FUEL Table 3 (VE3) used when input switched low if selected
                     17167  VE_f3:
 E500      2728292C  17168      db      39T,40T,41T,44T,44T,44T,45T,45T,45T,46T,47T,50T ; VE (0,0-11)
           2C2C2D2D 
           2D2E2F32 
 E50C      2F2F3333  17169      db      47T,47T,51T,51T,50T,50T,50T,50T,51T,55T,56T,60T ; VE (1,0-11)
           32323232 
           3337383C 
 E518      2F2F3333  17170      db      47T,47T,51T,51T,50T,50T,50T,50T,51T,55T,56T,60T ; VE (2,0-11)
           32323232 
           3337383C 
 E524      34373739  17171      db      52T,55T,55T,57T,60T,61T,61T,65T,67T,70T,72T,75T ; VE (3,0-11)
           3C3D3D41 
           4346484B 
 E530      34373739  17172      db      52T,55T,55T,57T,60T,61T,61T,65T,67T,70T,72T,75T ; VE (4,0-11)
           3C3D3D41 
           4346484B 
 E53C      3B3C3C41  17173      db      59T,60T,60T,65T,66T,70T,70T,70T,72T,74T,77T,80T ; VE (5,0-11)
           42464646 
           484A4D50 
 E548      3D3F4141  17174      db      61T,63T,65T,65T,68T,70T,72T,75T,77T,80T,84T,85T ; VE (6,0-11)
           4446484B 
           4D505455 
 E554      4148484A  17175      db      65T,72T,72T,74T,74T,75T,75T,77T,79T,83T,89T,90T ; VE (7,0-11)
           4A4B4B4D 
           4F53595A 
 E560      464A4A4B  17176      db      70T,74T,74T,75T,75T,77T,77T,78T,82T,86T,95T,95T ; VE (8,0-11)
           4B4D4D4E 
           52565F5F 
 E56C      464A4A4B  17177      db      70T,74T,74T,75T,75T,77T,77T,78T,82T,86T,95T,95T ; VE (9,0-11)
           4B4D4D4E 
           52565F5F 
 E578      4B4D4F49  17178      db      75T,77T,79T,73T,82T,82T,82T,85T,87T,89T,99T,100T; VE (10,0-11)
           52525255 
           57596364 
 E584      4B4D4F49  17179      db      75T,77T,79T,73T,82T,82T,82T,85T,87T,89T,99T,100T; VE (11,0-11)
           52525255 
           57596364 
                     17180  RPMRANGEVE_f3:
 E590      05        17181      db      5T      ; RPMRANGEVE[0] (144)
 E591      0A        17182      db      10T     ; RPMRANGEVE[1]
 E592      0F        17183      db      15T     ; RPMRANGEVE[2]
 E593      14        17184      db      20T     ; RPMRANGEVE[3]
 E594      1C        17185      db      28T     ; RPMRANGEVE[4]
 E595      24        17186      db      36T     ; RPMRANGEVE[5]
 E596      2C        17187      db      44T     ; RPMRANGEVE[6]
 E597      34        17188      db      52T     ; RPMRANGEVE[7]
 E598      37        17189      db      55T     ; RPMRANGEVE[8]
 E599      3C        17190      db      60T     ; RPMRANGEVE[9]
 E59A      3E        17191      db      62T     ; RPMRANGEVE[10]
 E59B      41        17192      db      65T     ; RPMRANGEVE[11]
                     17193  KPARANGEVE_f3:
 E59C      14        17194              db      20T     ; KPARANGEVE[0] (156)
 E59D      1E        17195      db      30T     ; KPARANGEVE[1]
 E59E      28        17196      db      40T     ; KPARANGEVE[2]
 E59F      32        17197      db      50T     ; KPARANGEVE[3]
 E5A0      3C        17198      db      60T     ; KPARANGEVE[4]
 E5A1      4B        17199      db      75T     ; KPARANGEVE[5]
 E5A2      5A        17200      db      90T     ; KPARANGEVE[6]
 E5A3      64        17201      db      100T    ; KPARANGEVE[7]
 E5A4      6E        17202      db      110T    ; KPARANGEVE[8]
 E5A5      78        17203      db      120T    ; KPARANGEVE[9]
 E5A6      82        17204      db      130T    ; KPARANGEVE[10]
 E5A7      96        17205      db      150T    ; KPARANGEVE[11]
                     17206  
                     17207  ASEVTbl_f:
 E5A8      1E        17208      db      30T     ; -40F This is the ASE table, only used if
                     17209                      ; $02 set in feature9_f     (168)
 E5A9      14        17210      db      20T     ; -20F  this is in percentage *1 so 30 = 30%
 E5AA      0F        17211      db      15T     ; 0F
 E5AB      0C        17212      db      12T     ; 20F
 E5AC      0A        17213      db      10T     ; 40F
 E5AD      09        17214      db       9T     ; 60F
 E5AE      08        17215      db       8T     ; 80F
 E5AF      07        17216      db       7T     ; 100F
 E5B0      06        17217      db       6T     ; 130F
 E5B1      05        17218      db       5T     ; 160F   (177)
                     17219  
 E5B2      FA        17220  AWC_f1      db      250T    ; After Start Warmup Time
 E5B3      00        17221  feature10_f5  db  %00000000  ; (179)
 E5B4                17222  aseIgnCountb     equ 1     ;  AFTER START Enrichment Seconds || Engine Cycles^
 E5B4                17223  ASEHoldb:        equ 2     ; Hold ASE from decaying for a period of time determined by TimFixASE_f
 E5B4                17224  MAPHoldb:        equ 4     ; Fix MAP value during Fixed ASE timer
                     17225  
                     17226  
 E5B4      05        17227  TimFixASE_f db     5T     ; Amount of time or cycles to hold ase to fixed value (180)
                     17228                          ; rather than decay to 0 % over the timer
 E5B5      55        17229  CltFixASE_f db   85T    ; Coolant temp setpoint to use Fixed value ASE
 E5B6      3C        17230  MAPFixASE_f  db   60T    ; If in fixed MAP mode then hold MAP at this value during fixed ASE time
                     17231  
                     17232  ;NOTE! do not add any more data to table 5. Any more and stack may collide when in RAM.
                     17233  flash_table5_end:
                     17234  
 E600                17235          org     $E600
                     17236  flash_table6:               ; AFR Table 1 - 8x8 AFR targets for VE table 1
                     17237  AFR_f1:                     ; This is in RAW ADC so 255 = 5V from O2 sensor
 E600      93939393  17238      db      147T,147T,147T,147T,147T,147T,147T,147T; AFR (0,0-7)
           93939393 
 E608      93939393  17239      db      147T,147T,147T,147T,147T,147T,147T,147T; AFR (1,0-7)
           93939393 
 E610      93939393  17240      db      147T,147T,147T,147T,147T,147T,147T,147T; AFR (2,0-7)
           93939393 
 E618      93939393  17241      db      147T,147T,147T,147T,147T,147T,147T,147T; AFR (3,0-7)
           93939393 
 E620      82828282  17242      db      130T,130T,130T,130T,130T,130T,130T,130T; AFR (4,0-7)
           82828282 
 E628      7D7D7D7D  17243      db      125T,125T,125T,125T,125T,125T,125T,125T; AFR (5,0-7)
           7D7D7D7D 
 E630      7D7D7D7D  17244      db      125T,125T,125T,125T,125T,125T,125T,125T; AFR (6,0-7)
           7D7D7D7D 
 E638      78787878  17245      db      120T,120T,120T,120T,120T,120T,120T,120T; AFR (7,0-7)
           78787878 
                     17246  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 129
MC68HC908GP32 User Bootloader


                     17247  RPMRANGEAFR_f1:
 E640      05        17248      db      5T      ; RPMRANGEAFR1[0]
 E641      0A        17249      db      10T     ; RPMRANGEAFR1[1]
 E642      0F        17250      db      15T     ; RPMRANGEAFR1[2]
 E643      14        17251      db      20T     ; RPMRANGEAFR1[3]
 E644      1C        17252      db      28T     ; RPMRANGEAFR1[4]
 E645      24        17253      db      36T     ; RPMRANGEAFR1[5]
 E646      32        17254      db      50T     ; RPMRANGEAFR1[6]
 E647      3C        17255      db      60T     ; RPMRANGEAFR1[7]
                     17256  KPARANGEAFR_f1:
 E648      0F        17257      db      15T     ; KPARANGEAFR1[0]
 E649      1E        17258      db      30T     ; KPARANGEAFR1[1]
 E64A      32        17259      db      50T     ; KPARANGEAFR1[2]
 E64B      3C        17260      db      60T     ; KPARANGEAFR1[3]
 E64C      5A        17261      db      90T     ; KPARANGEAFR1[4]
 E64D      64        17262      db      100T    ; KPARANGEAFR1[5]
 E64E      6E        17263      db      110T    ; KPARANGEAFR1[6]
 E64F      96        17264      db      150T    ; KPARANGEAFR1[7]
                     17265  
                     17266                              ; AFR Table 2 - 8x8 AFR targets for VE table 3
                     17267                      ; (VE3) used when input switched low if selected
                     17268  
                     17269  AFR_f2:                     ; This is in RAW ADC so 255 = 5V from O2 sensor
 E650      93939393  17270      db      147T,147T,147T,147T,147T,147T,147T,147T; AFR (0,0-7)
           93939393 
 E658      93939393  17271      db      147T,147T,147T,147T,147T,147T,147T,147T; AFR (1,0-7)
           93939393 
 E660      93939393  17272      db      147T,147T,147T,147T,147T,147T,147T,147T; AFR (2,0-7)
           93939393 
 E668      93939393  17273      db      147T,147T,147T,147T,147T,147T,147T,147T; AFR (3,0-7)
           93939393 
 E670      82828282  17274      db      130T,130T,130T,130T,130T,130T,130T,130T; AFR (4,0-7)
           82828282 
 E678      7D7D7D7D  17275      db      125T,125T,125T,125T,125T,125T,125T,125T; AFR (5,0-7)
           7D7D7D7D 
 E680      7D7D7D7D  17276      db      125T,125T,125T,125T,125T,125T,125T,125T; AFR (6,0-7)
           7D7D7D7D 
 E688      78787878  17277      db      120T,120T,120T,120T,120T,120T,120T,120T; AFR (7,0-7)
           78787878 
                     17278  
                     17279  RPMRANGEAFR_f2:
 E690      05        17280      db      5T      ; RPMRANGEAF2[0]
 E691      0A        17281      db      10T     ; RPMRANGEAF2[1]
 E692      0F        17282      db      15T     ; RPMRANGEAF2[2]
 E693      14        17283      db      20T     ; RPMRANGEAF2[3]
 E694      1C        17284      db      28T     ; RPMRANGEAF2[4]
 E695      24        17285      db      36T     ; RPMRANGEAF2[5]
 E696      32        17286      db      50T     ; RPMRANGEAF2[6]
 E697      3C        17287      db      60T     ; RPMRANGEAF2[7]
                     17288  KPARANGEAFR_f2:
 E698      0F        17289      db      15T     ; KPARANGEAF2[0]
 E699      1E        17290      db      30T     ; KPARANGEAF2[1]
 E69A      32        17291      db      50T     ; KPARANGEAF2[2]
 E69B      3C        17292      db      60T     ; KPARANGEAF2[3]
 E69C      5A        17293      db      90T     ; KPARANGEAF2[4]
 E69D      64        17294      db      100T    ; KPARANGEAF2[5]
 E69E      6E        17295      db      110T    ; KPARANGEAF2[6]
 E69F      96        17296      db      150T    ; KPARANGEAF2[7]
                     17297  
                     17298  ;2nd stage of nitrous
 E6A0      FF        17299  Nos2Rpm_f     db     255T  ; rpm starts at
 E6A1      FF        17300  Nos2RpmMax_f  db     255T  ; rpm ends st
 E6A2      00        17301  Nos2delay_f   db     0T    ; delay after stage 1
 E6A3      00        17302  Nos2Angle_f   db     0T    ; retard
 E6A4      00        17303  Nos2PWLo_f    db     0T    ; +pw at low rpm
 E6A5      00        17304  Nos2PWHi_f    db     0T    ; +pw at max rpm
                     17305  
                     17306  ;oddfire wheel decoder bits - very experimental
 E6A6      00        17307  outaoffs_f   db     0T    ; offset in steps
                     17308  ;bit0 = 0, 22.5   ignore for now
                     17309  ;bit1 = 0, 45     use 0 or 45 or 90 only
                     17310  ;bit2 = 0, 90
 E6A7      00        17311  outaoffv_f   db     0T    ; 0-45deg variable offset
 E6A8      00        17312  outboffs_f   db     0T
 E6A9      00        17313  outboffv_f   db     0T
 E6AA      00        17314  outcoffs_f   db     0T
 E6AB      00        17315  outcoffv_f   db     0T
 E6AC      00        17316  outdoffs_f   db     0T
 E6AD      00        17317  outdoffv_f   db     0T
 E6AE      00        17318  outeoffs_f   db     0T
 E6AF      00        17319  outeoffv_f   db     0T
 E6B0      00        17320  outfoffs_f   db     0T
 E6B1      00        17321  outfoffv_f   db     0T
                     17322  
                     17323  flash_table6_end:
                     17324  
                     17325  
 E700                17326                  org     $E700
                     17327  flash_table7:
                     17328  
                     17329  ;boost controller, kpa target rpm vs tps  6x6
                     17330  bc_kpa_f:
 E700      64646464  17331      db      100T,100T,100T,100T,100T,100T
           6464 
 E706      64787878  17332      db      100T,120T,120T,120T,120T,120T
           7878 
 E70C      64787878  17333      db      100T,120T,120T,120T,120T,120T
           7878 
 E712      64787878  17334      db      100T,120T,120T,120T,120T,120T
           7878 
 E718      64787878  17335      db      100T,120T,120T,120T,120T,120T
           7878 
 E71E      64787878  17336      db      100T,120T,120T,120T,120T,120T
           7878 
                     17337  
                     17338  RPMRANGEbc_f:
 E724      0A141E28  17339      db      10T,20T,30T,40T,50T,70T   ; RPMRANGEbc[0-5]
           3246 
                     17340  TPSRANGEbc_f:
 E72A      334D667F  17341      db      51T,77T,102T,127T,179T,230T   ; TPSRANGEbc[0-5]
           B3E6 
                     17342  
                     17343  ;boost controller, duty cycle target rpm vs tps
                     17344  
                     17345  bc_dc_f:
 E730      32323232  17346      db      50T,50T,50T,50T,50T,50T
           3232 
 E736      32323232  17347      db      50T,50T,50T,50T,50T,50T
           3232 
 E73C      32323232  17348      db      50T,50T,50T,50T,50T,50T
           3232 
 E742      32323232  17349      db      50T,50T,50T,50T,50T,50T
           3232 
 E748      32323232  17350      db      50T,50T,50T,50T,50T,50T
           3232 
 E74E      32323232  17351      db      50T,50T,50T,50T,50T,50T
           3232 
                     17352  
                     17353  RPMRANGEbc_f2:
 E754      0A141E28  17354      db      10T,20T,30T,40T,50T,70T   ; RPMRANGEbc[0-5]
           3246 
                     17355  TPSRANGEbc_f2:
 E75A      334D667F  17356      db      51T,77T,102T,127T,179T,230T   ; TPSRANGEbc[0-5]
           B3E6 
                     17357  
                     17358  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 130
MC68HC908GP32 User Bootloader


                     17359  ; Second boost target table, switched over on input if selected.
                     17360  bc3_kpa_f:
 E760      64646464  17361      db      100T,100T,100T,100T,100T,100T
           6464 
 E766      64787878  17362      db      100T,120T,120T,120T,120T,120T
           7878 
 E76C      64787878  17363      db      100T,120T,120T,120T,120T,120T
           7878 
 E772      64787878  17364      db      100T,120T,120T,120T,120T,120T
           7878 
 E778      64787878  17365      db      100T,120T,120T,120T,120T,120T
           7878 
 E77E      64787878  17366      db      100T,120T,120T,120T,120T,120T
           7878 
                     17367  
                     17368  RPMRANGE3bc_f:
 E784      0A141E28  17369      db      10T,20T,30T,40T,50T,70T   ; RPMRANGE2bc[0-5]
           3246 
                     17370  TPSRANGE3bc_f:
 E78A      334D667F  17371          db      51T,77T,102T,127T,179T,230T   ; TPSRANGE2bc[0-5]
           B3E6 
                     17372  
                     17373  
                     17374  flash_table7_end:
                     17375  
                     17376  
 E800                17377                  org     $E800
                     17378  flash_table8:
 E800      32        17379  idle_dc_lo  db      50T     ; Idle duty cycle at lower temp for 2-wire
                     17380                              ; Fielding Idle control *1  MIn = 0 Max = 100
 E801      19        17381  idlePeriod_f        db      25T     ; idle period in ignition events
                     17382  ;idlekickrpm_f      db      07T     ; low rpm to trigger kick up of pwm idle duty
                     17383  ;idlekickdc_f       db      55T     ; default duty cycle
 E802      32        17384  idlecrankdc_f       db      50T     ; cranking idle dc kg
 E803      01        17385  idledelayclock_f db 01T     ; idle dashpot settling delay kg
                     17386  
 E804      2D        17387  idledashdc_f        db      45T     ; dashpot default duty
 E805      1B        17388  idlemindc_f db      27T     ; minimum duty cycle
                     17389  
 E806      00        17390  idle_dc_hi      db      00T     ; rmd Idle duty cycle at upper temp for 2-wire (warmup)
                     17391  ;idlekpa1_f      db      100T  ; rmd
                     17392  ;idlekpa2_f      db      100T  ; rmd
                     17393  ;ikpamin1_f      db      30T   ; rmd
                     17394  ;ikpamin2_f      db      30T   ; rmd
 E807      03        17395  ictlrpm1_f      db      3T  ; idle deviation rpmx10 kg
 E808      0A        17396  ictlrpm2_f      db      10T ; idle deviation rpmx10 kg
 E809      03        17397  Ideadbnd_f      db      03T ; idle deadband range kg
 E80A      00        17398  Idashdelay_f    db      0T  ; AIC closure delay ign events kg
 E80B      64        17399  idlefreq_f      db      100T  ; rmd
                     17400  ;delay2rpm_f     db      20T     ; rmd
 E80C      0A        17401  idlestartclk_f  db      10T ; startup decay timer ign events kg
 E80D      0A        17402  idlePeriod2_f   db      10T     ; rmd
 E80E      0F        17403  irestorerpm_f   db      15T     ; rmd
 E80F      00        17404  idleclosedc_f   db      0T      ; rmd (015)
                     17405  
 E810      02        17406  feature13_f      db      2T
 E811                17407  PWMidleb         equ $01  ; pwm idle on vs B&G on/off
 E811                17408  idle_warmupb     equ $02  ; pwm idle warmup open loop
 E811                17409  idle_clb         equ $04  ; pwm idle closed loop
 E811                17410  cltMAPb:         equ $08     ; Use Correction table in the Air Density factor
 E811                17411  CltMATCheckb:    equ $10   ; Correction table MAT or IAT based
                     17412  
 E811      69        17413  FASTIDLEtemp_f      db      105T    ; Feilding 2-Wire Idle control Fast Idle
                     17414                              ; lower temperature F -40
 E812      EA        17415  slowIdleTemp_f      db      234T    ; Feilding 2-Wire Idle control Slow Idle
                     17416                              ; upper temperature F -40
 E813      6E        17417  fastIdle_f  db      110T    ; Fast Idle RPM (RPM*10 100-2550 rpm range)
 E814      41        17418  slowIdle_f  db       65T    ; Slow Idle RPM (RPM*10 100-2550 rpm range)
 E815      1E        17419  idleThresh_f        db       30T    ; TPS Raw value for Idle mode to kick in.
                     17420  
 E816      B4        17421  WWU_f1      db      180T    ; WWU (-40 F) (22)
 E817      B4        17422      db      180T    ; WWU (-20 F)
 E818      A0        17423      db      160T    ; WWU (0 F)
 E819      96        17424      db      150T    ; WWU (20 F)
 E81A      87        17425      db      135T    ; WWU (40 F)
 E81B      7D        17426      db      125T    ; WWU (60 F)
 E81C      71        17427      db      113T    ; WWU (80 F)
 E81D      6C        17428      db      108T    ; WWU (100 F)
 E81E      66        17429      db      102T    ; WWU (130 F)
 E81F      64        17430      db      100T    ; WWU (160 F)
                     17431  
                     17432  ; This is the cranking Table so users can select a interpolated value of
                     17433  ; cranking PW the same as Warmup
                     17434  
                     17435  CrankPWs_f:
 E820      B4        17436      db      180T    ; -40F (32)
 E821      78        17437      db      120T    ; -20F
 E822      50        17438      db      80T     ; 0F
 E823      3C        17439      db      60T     ; 20F
 E824      37        17440      db      55T     ; 40F
 E825      32        17441      db      50T     ; 60F
 E826      2D        17442      db      45T     ; 80F
 E827      28        17443      db      40T     ; 100F
 E828      23        17444      db      35T     ; 130F
 E829      1E        17445      db      30T     ; 160F
                     17446  
 E82A      10        17447  feature11_f4   db  %00010000       ; (42)
 E82B                17448  AlwaysPrimeb:     equ 1    ; Only fire pump if Prime pulse ON | Prime pump every time
 E82B                17449  PrimeLateb        equ 2    ; Fire prime pulse after 2 seconds
 E82B                17450  PrimeTwiceb       equ 4    ; Fire the Prime Pulses Twice
 E82B                17451  NoPrimePb:        equ 8    ; Use Priming Table or Use Prime Pulse
 E82B                17452  cltcrankb:        equ $10  ; use coolant temp for crank pulsewidth
 E82B                17453  matcrankb:        equ $20  ; use inlet air temp for crank pulsewidth. Both means average
 E82B                17454  ExCrFuelb:        equ $40  ; Look at TPS to see if we trigger extra fuel during cranking?
                     17455  
 E82B      03        17456  CrankRPM_f  db      $03     ; Maximum RPM for cranking (rpm*100)
 E82C      B2        17457  tpsflood_f  db      $B2     ; Throttle position for floodclear mode in
                     17458                              ; RAW ADC
 E82D      04        17459  primePulse_f    db      04T     ; prime pulse if not using table (feature11_f4 $8) *023
 E82E      00        17460  ExtraCrFu_f     db      00T     ; Extra cranking fuel multiplier (feature11_f4 $40) (46)
                     17461  
                     17462  cltMATcorr_f:                   ;
 E82F      64        17463                  db      100T    ; 7 positions for CLT related correction to          (47)
 E830      62        17464                  db      98T    ; IAT Air Density Correction 110 = correction * 110%
 E831      60        17465                  db      96T
 E832      5E        17466                  db      94T
 E833      5C        17467                  db      92T
 E834      5A        17468                  db      90T
 E835      58        17469                  db      88T    ; (53)
                     17470  
 E836      0A        17471  RPMReduLo_f     db      10T     ; lowest rpm to reduce correction by (54)
 E837      1E        17472  RPMReduHi_f     db      30T    ; Highest rpm when correction is back to normal
                     17473  
                     17474  CltMATRange:
 E838      C8        17475          db      200T     ; 160F   User defined Temp settings for Clt Related Air Dens (56)
 E839      CF        17476          db      207T    ; etc.
 E83A      D8        17477          db      216T    ;
 E83B      E1        17478          db      225T    ;
 E83C      EA        17479          db      234T    ;
 E83D      F3        17480          db      243T    ;
 E83E      FC        17481          db      252T    ; 212F (62)
                     17482  
                     17483  ;rotary leading trailing split timing 6x6 table
                     17484  split_f:   ; (63)
 E83F      1D585858  17485      db      29T,88T,88T,88T,88T,88T
           5858 


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 131
MC68HC908GP32 User Bootloader


 E845      1D494949  17486      db      29T,73T,73T,73T,73T,73T
           4949 
 E84B      1D3A3A3A  17487      db      29T,58T,58T,58T,58T,58T
           3A3A 
 E851      1D2B2B2B  17488      db      29T,43T,43T,43T,43T,43T
           2B2B 
 E857      1D1D1D1D  17489      db      29T,29T,29T,29T,29T,29T
           1D1D 
 E85D      19191919  17490      db      25T,25T,25T,25T,25T,25T
           1919 
                     17491  
                     17492  RPMRANGEsplit_f: ;(99)
 E863      06081E28  17493      db      6T,8T,30T,40T,50T,70T   ; RPMRANGE2bc[0-5]
           3246 
                     17494  KPARANGEsplit_f: ;(105)
 E869      28323C50  17495          db      40T,50T,60T,80T,105T,106T   ; TPSRANGE2bc[0-5]
           696A 
 E86F      00        17496  p8feat1_f:        db   0T       ; a page8 config byte (111)
 E870                17497  rotary2b         equ  1         ; enable/disable twin rotor mode for BIT
                     17498  
 E870      00        17499  fixedsplit_f:       db      0T      ; fixed split for testing like Fixed in spark (112)
                     17500  
                     17501  
                     17502  flash_table8_end:
                     17503  
                     17504  ms_rf_end_f:
                     17505  
 E871                17506          include "boot_r12.asm"
                     17507  ;=====================================
                     17508  ; MEGASQUIRT BOOTLOADER VERSION - Dec 2001
                     17509  ;
                     17510  ; Mods by Bruce Bowling
                     17511  ;
                     17512  ; Corrected bug in BootReset 5
                     17513  ;
                     17514  ;=====================================
                     17515  
 E871                17516  .header 'MC68HC908GP32 User Bootloader'
 E871                17517  .base 10t
 E871                17518  .pagewidth 130
 E871                17519  .pagelength 90
                     17520  ;********************************************************************************************
                     17521  ;*                                                                                          *
                     17522  ;*  Bootloader - MC68HC908GP32                                                              *
                     17523  ;*                                                          Copyright (c) Motorola, 2001    *
                     17524  ;*                                                                                          *
                     17525  ;********************************************************************************************
                     17526  ;*                                                                                          *
                     17527  ;*  This file provides the low level assembly bootloader routine.                           *
                     17528  ;*  This program has been specially tailored towards the MC68HC908GP32.                     *
                     17529  ;*                                                                                          *
                     17530  ;********************************************************************************************
                     17531  ;*                                                                                          *
                     17532  ;*  File name:          boot.asm                        Current Release Level:      1.1     *
                     17533  ;*  Last Edit Date:     07-Jun-01                       Classification:             ES      *
                     17534  ;*                                                                                          *
                     17535  ;*  Include Files:      gp32.equ            : MC68HC908GP32 MCU definitions                 *
                     17536  ;*                                                                                          *
                     17537  ;*  Assembler:          P&E's CASM08Z                   Version:    3.16                    *
                     17538  ;*                                                                                          *
                     17539  ;*  Target:             MC68HC908GP32                                                       *
                     17540  ;*                                                                                          *
                     17541  ;*  Documentation:      MC68HC908GP32/H  Rev 3                                              *
                     17542  ;*                      Motorola Microcontroller Technical Data                             *
                     17543  ;*                                                                                          *
                     17544  ;********************************************************************************************
                     17545  ;*                                                                                          *
                     17546  ;*  Author:             DHJ Klotz                                                           *
                     17547  ;*  First Release:      26-Feb-00                                                           *
                     17548  ;*                                                                                          *
                     17549  ;*  Update History:                                                                         *
                     17550  ;*                                                                                          *
                     17551  ;*  Rev     Date       Author  Description of Change                                        *
                     17552  ;*  ------  ---------  ------  -----------------------------------------------------------  *
                     17553  ;*  ES 1.0  26-Feb-00  DHJK    Initial release for HC908 Seminar 2000.                      *
                     17554  ;*  ES 1.1  07-Jun-01  DHJK    Improved functionality for Application Note.                 *
                     17555  ;*                                                                                          *
                     17556  ;********************************************************************************************
                     17557  ;*                                                                                          *
                     17558  ;*  Notes:                                                                                  *
                     17559  ;*    - In order to minimize overall program size, subroutines are position within the      *
                     17560  ;*      core bootloader routine.  Although this can make the program somewhat difficult     *


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 132
MC68HC908GP32 User Bootloader


                     17561  ;*      to read and follow, it permits the use of relative branch opcodes.  Most of         *
                     17562  ;*      these subroutines can be called from an external application program.               *
                     17563  ;*                                                                                          *
                     17564  ;********************************************************************************************
                     17565  ;*                                                                                          *
                     17566  ;*    Motorola reserves the right to make changes without further notice to any product     *
                     17567  ;*    herein to improve reliability, function, or design.  Motorola does not assume any     *
                     17568  ;*    liability arising out of the application or use of any product, circuit, or software  *
                     17569  ;*    described herein; neither does it convey any license under its patent rights nor the  *
                     17570  ;*    rights of others.  Motorola products are not designed, intended, or authorized for    *
                     17571  ;*    use as components in systems intended for surgical implant into the body, or other    *
                     17572  ;*    applications intended to support life, or for any other application in which the      *
                     17573  ;*    failure of the Motorola product could create a situation where personal injury or     *
                     17574  ;*    death may occur.  Should Buyer purchase or use Motorola products for any such         *
                     17575  ;*    intended or unauthorized application, Buyer shall indemnify and hold Motorola and     *
                     17576  ;*    its officers, employees, subsidiaries, affiliates, and distributors harmless against  *
                     17577  ;*    all claims, costs, damages, and expenses, and reasonable attorney fees arising out    *
                     17578  ;*    of, directly or indirectly, any claim of personal injury or death associated with     *
                     17579  ;*    such unintended or unauthorized use, even if such claim alleges that Motorola was     *
                     17580  ;*    negligent regarding the design or manufacture of the part.                            *
                     17581  ;*                                                                                          *
                     17582  ;*    Motorola and the Motorola logo are registered trademarks of Motorola Ltd.             *
                     17583  ;*                                                                                          *
                     17584  ;********************************************************************************************
                     17585  
                     17586  ;*  Microcontroller Peripheral Equates  *****************************************************
                     17587  ;*
                     17588  
                     17589  ; uncomment out if standalone
 E871                17590          list
                     17591  
                     17592  
                     17593  ;*  Flash Memory Specifics  =================================================================
                     17594  ;*
 E871                17595  boot_start:     equ     $FB00               ; starting address of protected Bootloader
 E871                17596  flash_protect:  equ     {boot_start>7&$FF}  ; Flash Block Protect Register value
 E871                17597  flash_page:     equ     128                 ; Flash Erase Page size
 E871                17598  flash_row:      equ     64                  ; Flash Program Row size
 E871                17599  flash_erased:   equ     $FF                 ; Flash erased state
                     17600  
                     17601  
                     17602  ;*  RAM Utilization  ========================================================================
                     17603  ;*
 0040                17604          org     ram_start                   ; begining of RAM
                     17605  
 0040                17606  count:          ds      1                   ; 0040:     => data counter
 0041                17607  temp_sp:        ds      2                   ; 0041:0042 => temporary Stack Pointer storage
 0043                17608  flash_first:    ds      2                   ; 0043:0044 => first Flash reprogram address
 0045                17609  flash_last:     ds      2                   ; 0045:0046 => last Flash reprogram address + 1
                     17610  
 0047                17611  ram_exec:       equ     $01ED               ; start of executable RAM space
                     17612  
                     17613  
                     17614  ;*  Bootloader Customization Parameters  ====================================================
                     17615  ;*
 0047                17616  user_scbr:      equ     boot_start-61       ; FAC3      => SCBR register
 0047                17617  init_scbr:      equ     $12                 ;   default set SCI for 9600 kbaud
                     17618  
 0047                17619  user_config1:   equ     boot_start-60       ; FAC4      => CONFIG1 register
 0047                17620  init_config1:   equ     %00000001           ;   default CONFIG1
                     17621  
 0047                17622  user_config2:   equ     boot_start-59       ; FAC5      => CONFIG2 register
 0047                17623  init_config2:   equ     %00000001           ;   default CONFIG2
                     17624  
 0047                17625  user_first:     equ     boot_start-58       ; FAC6:FAC7 => 1st application address
 0047                17626  init_first:     equ     rom_start           ;   default first Flash address
                     17627  
 0047                17628  user_last:      equ     boot_start-56       ; FAC8:FAC9 => last application address
 0047                17629  init_last:      equ     boot_start          ;   default last Flash address
                     17630  
                     17631  
                     17632  ;*  Application Program Jump Vector Table  ==================================================
                     17633  ;*
                     17634                                              ; FACA      => "JMP ext" instruction (opcode $CC)
 0047                17635  user_timebase:  equ     boot_start-54       ; FACB:FACC => user Timebase jump vector
                     17636  
                     17637                                              ; FACD      => "JMP ext" instruction (opcode $CC)
 0047                17638  user_ADC:       equ     boot_start-51       ; FACE:FACF => user ADC jump vector
                     17639  
                     17640                                              ; FAD0      => "JMP ext" instruction (opcode $CC)
 0047                17641  user_keyboard:  equ     boot_start-48       ; FAD1:FAD2 => user Keyboard jump vector
                     17642  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 133
MC68HC908GP32 User Bootloader


                     17643                                              ; FAD3      => "JMP ext" instruction (opcode $CC)
 0047                17644  user_SCItx:     equ     boot_start-45       ; FAD4:FAD5 => user SCI transmit jump vector
                     17645  
                     17646                                              ; FAD6      => "JMP ext" instruction (opcode $CC)
 0047                17647  user_SCIrx:     equ     boot_start-42       ; FAD7:FAD8 => user SCI receive jump vector
                     17648  
                     17649                                              ; FAD9      => "JMP ext" instruction (opcode $CC)
 0047                17650  user_SCIerr:    equ     boot_start-39       ; FADA:FADB => user SCI error jump vector
                     17651  
                     17652                                              ; FADC      => "JMP ext" instruction (opcode $CC)
 0047                17653  user_SPItx:     equ     boot_start-36       ; FADD:FADE => user SPI transmit jump vector
                     17654  
                     17655                                              ; FADF      => "JMP ext" instruction (opcode $CC)
 0047                17656  user_SPIrx:     equ     boot_start-33       ; FAE0:FAE1 => user SPI receive jump vector
                     17657  
                     17658                                              ; FAE2      => "JMP ext" instruction (opcode $CC)
 0047                17659  user_Tim2Ov:    equ     boot_start-30       ; FAE3:FAE4 => user Timer 2 overflow jump vector
                     17660  
                     17661                                              ; FAE5      => "JMP ext" instruction (opcode $CC)
 0047                17662  user_Tim2Ch1:   equ     boot_start-27       ; FAE6:FAE7 => user Timer 2 channel 1 jump vector
                     17663  
                     17664                                              ; FAE8      => "JMP ext" instruction (opcode $CC)
 0047                17665  user_Tim2Ch0:   equ     boot_start-24       ; FAE9:FAEA => user Timer 2 channel 0 jump vector
                     17666  
                     17667                                              ; FAEB      => "JMP ext" instruction (opcode $CC)
 0047                17668  user_Tim1Ov:    equ     boot_start-21       ; FAEC:FAED => user Timer 1 oveflow jump vector
                     17669  
                     17670                                              ; FAEE      => "JMP ext" instruction (opcode $CC)
 0047                17671  user_Tim1Ch1:   equ     boot_start-18       ; FAEF:FAF0 => user Timer 1 channel 1 jump vector
                     17672  
                     17673                                              ; FAF1      => "JMP ext" instruction (opcode $CC)
 0047                17674  user_Tim1Ch0:   equ     boot_start-15       ; FAF2:FAF3 => user Timer 1 channel 0 jump vector
                     17675  
                     17676                                              ; FAF4      => "JMP ext" instruction (opcode $CC)
 0047                17677  user_PLL:       equ     boot_start-12       ; FAF5:FAF6 => user PLL jump vector
                     17678  
                     17679                                              ; FAF7      => "JMP ext" instruction (opcode $CC)
 0047                17680  user_IRQ:       equ     boot_start-9        ; FAF8:FAF9 => user IRQ jump vector
                     17681  
                     17682                                              ; FAFA      => "JMP ext" instruction (opcode $CC)
 0047                17683  user_SWI:       equ     boot_start-6        ; FAFB:FAFC => user SWI jump vector
                     17684  
                     17685                                              ; FAFD      => "JMP ext" instruction (opcode $CC)
 0047                17686  user_reset:     equ     boot_start-3        ; FAFE:FAFF => user Reset interrupt jump vector
                     17687  
                     17688  
                     17689  ;*  Bootloader Program  *********************************************************************
                     17690  ;*
                     17691  
 0047                17692  init_stack:     equ     ram_exec-1          ; initialize stack pointer to before RAM routine
                     17693  ;
 0047                17694  init_scc1:      equ     %01000000           ; enable SCI, 8-bits, no parity, 1 stop
 0047                17695  init_scc2:      equ     %00001100           ; no interupts, receiver and transmitter enabled
                     17696  
 FB00                17697          org     boot_start                  ; beginning of code
                     17698  
                     17699  
                     17700  ;*  CGM Parameter Tables  ===================================================================
                     17701  ;*
                     17702  ;*  The following CGM parameter tables are placed here so that they are easy to access via
                     17703  ;*  external application programs.
                     17704  ;*
                     17705  ;*  7.3728 MHz bus frequency parameters (located at address "boot_start").
                     17706  ;*
                     17707  bus7372800:
 FB00      02        17708          db      $02                         ; P & E
 FB01      C0        17709          db      $C0                         ; L
 FB02      03        17710          db      $03                         ; N msb
 FB03      84        17711          db      $84                         ; N lsb
                     17712  
                     17713  ;*  8.003584 MHz bus frequency parameters (located at address "boot_start+4").
                     17714  ;*
                     17715  bus8003584:
 FB04      02        17716          db      $02                         ; P & E
 FB05      D0        17717          db      $D0                         ; L
 FB06      03        17718          db      $03                         ; N msb
 FB07      D1        17719          db      $D1                         ; N lsb
                     17720  
                     17721  
                     17722  ;*  Power-on Reset  =========================================================================
                     17723  ;* MODIFIED FOR MEGASQUIRT - Initialization code here
                     17724  ;*


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 134
MC68HC908GP32 User Bootloader


                     17725  
                     17726  BootReset:
 FB08 [01] 4F        17727          clra
 FB09 [04] C7FFFF    17728          sta     copctl
 FB0C [04] 6E011E    17729          mov     #%00000001,config2
 FB0F [04] 6E011F    17730          mov     #%00000001,config1
 FB12 [03] 450240    17731          ldhx    #ram_last+1
 FB15 [02] 94        17732          txs
                     17733  
 FB16 [03] 45FB00    17734          ldhx    #bus7372800                 ; point to 7.3728 MHz parameters
 FB19 [04] AD22      17735          bsr     PLLset                      ; change bus speed
                     17736  
 FB1B [02] A600      17737          lda      #%00000000
 FB1D [03] B705      17738          sta      ddrb                       ; ADC Channels - inputs
                     17739  
 FB1F [02] A670      17740          lda     #%01110000                  ; Set up ADC for divide by 8 and internal clock
 FB21 [03] B73E      17741          sta     adclk
 FB23 [02] A604      17742          lda     #%00000100                  ; No interrupt, channel AD4 selected
 FB25 [03] B73C      17743          sta     adscr
 FB27 [05] 0F3CFD    17744          brclr   coco,adscr,*                ; wait until conversion complete
                     17745  
 FB2A [03] B63D      17746          lda     adr
 FB2C [02] A105      17747          cmp     #$05                        ; Check for low voltage on divider
 FB2E [03] 2529      17748          blo     BootReset1                  ; enter bootloader if low voltage
                     17749  
                     17750  ;
                     17751  ;   Test application reset vector.
                     17752  ;
 FB30 [04] C6FAFE    17753          lda     user_reset+1                ; get the MSB of the user reset vector
 FB33 [02] A1FF      17754          cmp     #flash_erased               ; check if it's erased
 FB35 [03] 2722      17755          beq     BootReset1                  ; enter bootloader if erased
 FB37 [03] 20C4      17756          bra     user_reset                  ; else, jump to user reset jump vector
                     17757  
                     17758  
                     17759  ;*  External CGM PLL Bus Frequency Change Subroutine  =======================================
                     17760  ;*
                     17761  ;*  This subroutine will program the CGM PLL to change the bus frequency in accordance with
                     17762  ;*  the data being pointed to by X:A (which is a common implementation for pointer parameter
                     17763  ;*  passing used by HC08 C compilers).
                     17764  ;*
                     17765  ;*  C function prototype:
                     17766  ;*
                     17767  ;*      void CGMChange (char parameters*);
                     17768  ;*
                     17769  ;*  Calling convention:
                     17770  ;*
                     17771  ;*      ldx     #{parameters>8}             ; get CGM parameter table address msb
                     17772  ;*      lda     #{parameters&$FF}           ; get CGM parameter table address lsb
                     17773  ;*      jsr     CGMChange                   ; go change the bus speed
                     17774  ;*
                     17775  ;*  Returns:    nothing
                     17776  ;*
                     17777  ;*  Changes:    H:X
                     17778  ;*
                     17779  CGMChange:
 FB39 [02] 87        17780          psha                                ; save pointer lsb on stack
 FB3A [02] 89        17781          pshx                                ; save pointer msb on stack
 FB3B [02] 8A        17782          pulh                                ; initialize
 FB3C [02] 88        17783          pulx                                ;  H:X points to data array
                     17784  
                     17785  
                     17786  ;*  Internal CGM PLL Bus Frequency Change Subroutine  =======================================
                     17787  ;*
                     17788  ;*  This subroutine will program the CGM PLL to change the bus frequency in accordance with
                     17789  ;*  the data being pointed to by H:X.
                     17790  ;*
                     17791  ;*  Calling convention:
                     17792  ;*
                     17793  ;*      ldhx    #parameters                 ; point to CGM parameter table
                     17794  ;*      jsr     PLLset                      ; go change the bus speed
                     17795  ;*
                     17796  ;*  Returns:    nothing
                     17797  ;*
                     17798  ;*  Changes:    H:X
                     17799  ;*
                     17800  PLLset:
 FB3D [04] 1936      17801          bclr    BCS,pctl                    ; select external reference as base clock
 FB3F [04] 1B36      17802          bclr    PLLON,pctl                  ; turn off PLL
 FB41 [04] 7E36      17803          mov     x+,pctl                     ; program P & E
 FB43 [04] 7E3A      17804          mov     x+,pmrs                     ; program L
 FB45 [04] 7E38      17805          mov     x+,pmsh                     ; program N msb
 FB47 [04] 7E39      17806          mov     x+,pmsl                     ; program N lsb


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 135
MC68HC908GP32 User Bootloader


 FB49 [04] 1E37      17807          bset    AUTO,pbwc                   ; enable automatic bandwidth control
 FB4B [04] 1A36      17808          bset    PLLON,pctl                  ; turn on PLL
                     17809  PLLwait:
 FB4D [05] 0D37FD    17810          brclr   LOCK,pbwc,PLLwait           ; wait for PLL to lock (Note: won't simulate)
 FB50 [04] 1836      17811          bset    BCS,pctl                    ; select VCO as base clock
 FB52 [04] 81        17812          rts                                 ; return
                     17813  
                     17814  
                     17815  ;*  PutChar Subroutine  =====================================================================
                     17816  ;*
                     17817  ;*  This subroutine will output the character passed in ACC to the SCI.
                     17818  ;*
                     17819  ;*  C function prototype:
                     17820  ;*
                     17821  ;*      void PutChar (char data);
                     17822  ;*
                     17823  ;*  Calling convention:
                     17824  ;*
                     17825  ;*      lda     data                        ; get character
                     17826  ;*      jsr     PutChar                     ; go output it
                     17827  ;*
                     17828  ;*  Returns:    nothing
                     17829  ;*
                     17830  ;*  Changes:    nothing
                     17831  ;*
                     17832  PutChar:
 FB53 [05] 0F16FD    17833          brclr   SCTE,scs1,PutChar           ; wait until SCI transmitter is empty
 FB56 [03] B718      17834          sta     scdr                        ; output character to the SCI
 FB58 [04] 81        17835          rts                                 ; return
                     17836  
                     17837  
                     17838  ;*  Power-on Reset Bootloader Entry  ========================================================
                     17839  ;*
                     17840  ;*  This is where the Bootloader starts from power-on reset.
                     17841  ;*
                     17842  BootReset1:
                     17843  ;
                     17844  ;   Initialize the PLL CGM for 7.3728 MHz bus speed from 32.768 kHz crystal.
                     17845  ;
                     17846  ;        ldhx    #bus7372800                 ; point to 7.3728 MHz parameters
                     17847  ;        bsr     PLLset                      ; change bus speed
                     17848  ;
                     17849  ;   Copy user Flash parameters into RAM.
                     17850  ;
 FB59 [03] 45FAC3    17851          ldhx    #user_scbr                  ; point to first parameter
 FB5C [04] 7E40      17852          mov     x+,count                    ; copy user SCI baud rate
 FB5E [04] 7E41      17853          mov     x+,temp_sp                  ; copy user Configuration Register 1
 FB60 [04] 7E42      17854          mov     x+,temp_sp+1                ; copy user Configuration Register 2
 FB62 [04] 7E43      17855          mov     x+,flash_first              ; copy first user Flash address MSB
 FB64 [04] 7E44      17856          mov     x+,flash_first+1            ; copy first user Flash address LSB
 FB66 [04] 7E45      17857          mov     x+,flash_last               ; copy last user Flash address MSB
 FB68 [04] 7E46      17858          mov     x+,flash_last+1             ; copy last user Flash address LSB
 FB6A [03] 450040    17859          ldhx    #count                      ; point to first parameter, now saved in RAM
 FB6D [02] 94        17860          txs                                 ; use SP to point to parameter list in RAM
                     17861  ;
                     17862  ;   Test the user SCI baud rate.  The user can override the default baud rate.
                     17863  ;
 FB6E [02] 86        17864          pula                                ; get user SCBR initial data
 FB6F [02] A1FF      17865          cmp     #flash_erased               ; check if it's erased
 FB71 [03] 2602      17866          bne     BootReset2                  ; skip if not
 FB73 [02] A612      17867          lda     #init_scbr                  ; else, force default value
                     17868  BootReset2:
 FB75 [03] B740      17869          sta     count                       ; save initial SCI baud rate
                     17870  ;
                     17871  ;   Program the write-once configuration registers.  The user can override the defaults.
                     17872  ;
 FB77 [02] 86        17873          pula                                ; get user Configuration Register 1 initial data
 FB78 [02] A1FF      17874          cmp     #flash_erased               ; check if it's erased
 FB7A [03] 2602      17875          bne     BootReset3                  ; skip if not
 FB7C [02] A601      17876          lda     #init_config1               ; else, force default value
                     17877  BootReset3:
 FB7E [03] B71F      17878          sta     config1                     ; initialize Configuration Register 1
                     17879  ;
 FB80 [02] 86        17880          pula                                ; get user Configuration Register 2 initial data
 FB81 [02] A1FF      17881          cmp     #flash_erased               ; check if it's erased
 FB83 [03] 2602      17882          bne     BootReset4                  ; skip if not
 FB85 [02] A601      17883          lda     #init_config2               ; else, force default value
                     17884  BootReset4:
 FB87 [03] B71E      17885          sta     config2                     ; initialize Configuration Register 2
                     17886  ;
                     17887  ;   Program the first and last user Flash addresses.  The user can override the defaults.
                     17888  ;


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 136
MC68HC908GP32 User Bootloader


 FB89 [02] 88        17889          pulx                                ; get first user Flash address LSB
 FB8A [02] 8A        17890          pulh                                ; get first user Flash address MSB
 FB8B [03] 65FFFF    17891          cphx    #$FFFF                      ; check if it's erased
 FB8E [03] 2608      17892          bne     BootReset5                  ; skip if not
 FB90 [02] A600      17893          lda     #{init_first&$FF}           ; else, get default first user address LSB
 FB92 [02] 87        17894          psha                                ;  save it
 FB93 [02] A680      17895          lda     #{init_first>8}             ;  and get default first user address MSB
 FB95 [02] 87        17896          psha                                ;  save it
 FB96 [02] A702      17897          ais     #2                          ; move stack pointer back
                     17898  ;
                     17899  BootReset5:
 FB98 [02] 88        17900          pulx                                ; get last user Flash address LSB
 FB99 [02] 8A        17901          pulh                                ; get last user Flash address MSB
 FB9A [03] 65FFFF    17902          cphx    #$FFFF                      ; check if it's erased
 FB9D [03] 2606      17903          bne     BootReset6                  ; skip if not
                     17904  ;        ldx     #{init_last&$FF}            ; else, get default last user address LSB
 FB9F [02] A600      17905          lda     #{init_last&$FF}            ; else, get default last user address LSB
 FBA1 [02] 87        17906          psha                                ;  save it
 FBA2 [02] A6FB      17907          lda     #{init_last>8}              ;  and get default last user address MSB
 FBA4 [02] 87        17908          psha                                ;  save it
                     17909  BootReset6:
                     17910  
                     17911  
                     17912  ;*  User Bootloader Entry  ==================================================================
                     17913  ;*
                     17914  ;*  The user can launch the bootloader from here.
                     17915  ;*
                     17916  BootResetUser:
 FBA5 [02] 9B        17917          sei                                 ; disable all interrupts
 FBA6 [04] C7FFFF    17918          sta     copctl                      ; clear the COP counter
 FBA9 [03] 4501ED    17919          ldhx    #init_stack+1               ; initialize
 FBAC [02] 94        17920          txs                                 ;  the stack pointer
                     17921  ;
                     17922  ;   Initialize the PLL CGM for 7.3728 MHz bus speed from 32.768 kHz crystal.
                     17923  ;
 FBAD [03] 45FB00    17924          ldhx    #bus7372800                 ; point to 7.3728 MHz parameters
 FBB0 [04] AD8B      17925          bsr     PLLset                      ; change bus speed
                     17926  ;
                     17927  ;   Take over and initialize the SCI.  The user can override the default baud rate.
                     17928  ;
 FBB2 [05] 4E4019    17929          mov     count,scbr                  ; initialize SCI baud rate
 FBB5 [04] 6E4013    17930          mov     #init_scc1,scc1             ; initialize SCI Control Register 1
 FBB8 [04] 6E0C14    17931          mov     #init_scc2,scc2             ; initialize SCI Control Register 2
                     17932  
                     17933  
                     17934  ;*  Main Bootloader Control Loop  ==========================================================
                     17935  ;*
                     17936  ;*  Bootloader program supports the following commands:
                     17937  ;*
                     17938  ;*      'X'  = Exit and execute user program via user reset vector
                     17939  ;*      'P'  = Program Flash via S-Records
                     17940  ;*      'W'  = Erase Flash (Wipe)
                     17941  ;*      'U'  = Upgrade Flash by erasing all user space, then programming via S-Records
                     17942  ;*      'H'  = Help
                     17943  ;*      '?'  = Help
                     17944  ;*
                     17945  ;*  Note: avoid using 'A' - 'F', as these are valid S-Record characters that could get
                     17946  ;*        misinterpreted.
                     17947  ;*
 FBBB                17948  cmd_exit:       equ     'X'                 ; Exit command
 FBBB                17949  cmd_program:    equ     'P'                 ; Program Flash command
 FBBB                17950  cmd_erase:      equ     'W'                 ; Erase Flash command (Wipe)
 FBBB                17951  cmd_upgrade:    equ     'U'                 ; Upgrade Flash command
 FBBB                17952  cmd_help:       equ     'H'                 ; Help command
 FBBB                17953  cmd_help1:      equ     $1F                 ; '?' = alternate Help command
                     17954  ;
                     17955  Boot:
 FBBB [03] 45FD88    17956          ldhx    #msg_hello                  ; point to hello message
 FBBE [04] AD38      17957          bsr     PrintString                 ; output it
 FBC0 [05] CDFC6A    17958          jsr     GetChar                     ; get a character from the SCI
 FBC3 [02] A10D      17959          cmp     #ascii_CR                   ; check for ASCII carriage return
 FBC5 [03] 27F4      17960          beq     Boot                        ; just loop back if so
 FBC7 [04] AD8A      17961          bsr     PutChar                     ; else, echo character back
 FBC9 [02] A4DF      17962          and     #$DF                        ; convert to uppercase
                     17963  
                     17964  
                     17965  ;*  Execute User Program Command Check  =====================================================
                     17966  ;*
 FBCB [02] A158      17967          cmp     #cmd_exit                   ; check for Exit command
 FBCD [03] 2611      17968          bne     Boot2                       ; skip if not
 FBCF [04] C6FAFE    17969          lda     user_reset+1                ; else, get the MSB of the user reset vector
 FBD2 [02] A1FF      17970          cmp     #flash_erased               ; check if it's erased


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 137
MC68HC908GP32 User Bootloader


 FBD4 [03] 2703      17971          beq     Boot1                       ; skip if not
 FBD6 [03] CCFAFD    17972          jmp     user_reset                  ; else, jump to user reset jump vector
                     17973  ;
                     17974  ;   Remain in the Bootloader if the MSB of the User Reset Jump Vector is erased.
                     17975  ;
                     17976  Boot1:
 FBD9 [03] 45FDE0    17977          ldhx    #msg_noreset                ; point to error message
 FBDC [04] AD1A      17978          bsr     PrintString                 ; output it
 FBDE [03] 20DB      17979          bra     Boot                        ; jump back to top
                     17980  
                     17981  
                     17982  ;*  Erase Flash Command Check  ==============================================================
                     17983  ;*
                     17984  Boot2:
 FBE0 [02] A157      17985          cmp     #cmd_erase                  ; check for Erase Flash command
 FBE2 [03] 2618      17986          bne     Boot3                       ; skip if not
 FBE4 [04] AD76      17987          bsr     EraseFlash                  ; else, go erase Flash
                     17988  ;
                     17989  ;   Common Bootloader command completion points.
                     17990  ;
                     17991  BootDone:
 FBE6 [03] 45FDB4    17992          ldhx    #msg_complete               ; point to operation complete message
                     17993  BootDone1:
 FBE9 [04] AD0D      17994          bsr     PrintString                 ; output it
                     17995  BootDone2:
 FBEB [03] 20CE      17996          bra     Boot                        ; jump back to top
                     17997  
                     17998  
                     17999  ;*  External PutString Subroutine  ==========================================================
                     18000  ;*
                     18001  ;*  This subroutine will output the null terminated string pointed to by X:A (which is a
                     18002  ;*  common implementation for pointer parameter passing used by HC08 C compilers) to the SCI.
                     18003  ;*
                     18004  ;*  C function prototype:
                     18005  ;*
                     18006  ;*      void PutString (char string*);
                     18007  ;*
                     18008  ;*  Calling convention:
                     18009  ;*
                     18010  ;*      ldx     #{string>8}                 ; get CGM parameter table address msb
                     18011  ;*      lda     #{string&$FF}               ; get CGM parameter table address lsb
                     18012  ;*      jsr     PutString                   ; go change the bus speed
                     18013  ;*
                     18014  ;*  Returns:    nothing
                     18015  ;*
                     18016  ;*  Changes:    H:X
                     18017  ;*
                     18018  PutString:
 FBED [02] 87        18019          psha                                ; save pointer lsb on stack
 FBEE [02] 89        18020          pshx                                ; save pointer msb on stack
 FBEF [02] 8A        18021          pulh                                ; initialize
 FBF0 [02] 88        18022          pulx                                ;  H:X points to data array
 FBF1 [03] 2005      18023          bra     PrintString                 ; go output string
                     18024  
                     18025  
                     18026  ;*  PrintString Subroutine  =================================================================
                     18027  ;*
                     18028  ;*  This subroutine will output the null teminated string pointed to by H:X to the SCI.
                     18029  ;*
                     18030  ;*  Calling convention:
                     18031  ;*
                     18032  ;*      ldhx    #string                     ; point to start of string
                     18033  ;*      jsr     PrintString                 ; go output it
                     18034  ;*
                     18035  ;*  Returns:    nothing
                     18036  ;*
                     18037  ;*  Changes:    H:X
                     18038  ;*
                     18039  PrintString1:
 FBF3 [05] 0F16FD    18040          brclr   SCTE,scs1,PrintString1      ; wait until SCI transmitter is empty
 FBF6 [04] 7E18      18041          mov     x+,scdr                     ; output character to the SCI and advance pointer
                     18042  PrintString:
 FBF8 [02] 7D        18043          tst     ,x                          ; test string character
 FBF9 [03] 26F8      18044          bne     PrintString1                ; loop back if not null
 FBFB [04] 81        18045          rts                                 ; else, return
                     18046  
                     18047  
                     18048  ;*  Program Flash Command Check  ============================================================
                     18049  ;*
                     18050  Boot3:
 FBFC [02] A150      18051          cmp     #cmd_program                ; check for Program Flash command
 FBFE [03] 264A      18052          bne     Boot4                       ; skip if not


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 138
MC68HC908GP32 User Bootloader


                     18053  ;
 FC00 [04] AD02      18054          bsr     BootProg                    ; go accept S19 records and program the Flash
 FC02 [03] 20B7      18055          bra     Boot                        ; return to top of control loop
                     18056  
                     18057  
                     18058  ;*  Program Flash Subroutine  ===============================================================
                     18059  ;*
                     18060  ;*  This subroutine will copy the Flash Program algorithm into RAM and execute it in
                     18061  ;*  conjunction with the S19 record retrieval to program the required Flash pages between
                     18062  ;*  address pointers "flash_first" and "flash_last".
                     18063  ;*
                     18064  ;*  Calling convention:
                     18065  ;*
                     18066  ;*      jsr     BootProg                    ; retrieve S19 records and program Flash
                     18067  ;*
                     18068  ;*  Returns:    nothing
                     18069  ;*
                     18070  ;*  Changes:    everything
                     18071  ;*
                     18072  BootProg:
 FC04 [03] 45004F    18073          ldhx    #ProgramRamSize             ; initialize pointer
                     18074  BootProg1:
 FC07 [04] D6FD38    18075          lda     Delay-1,x                   ; get program from Flash
 FC0A [04] D701EC    18076          sta     ram_exec-1,x                ; copy into RAM
 FC0D [03] 5BF8      18077          dbnzx   BootProg1                   ; decrement pointer and loop back until done
 FC0F [03] 45FDBF    18078          ldhx    #msg_waiting                ; point to waiting message
 FC12 [04] ADE4      18079          bsr     PrintString                 ; output it
                     18080  ;
                     18081  ;   Get S-Record from host.
                     18082  ;
                     18083  BootProg2:
 FC14 [02] 95        18084          tsx                                 ; get the Stack Pointer
 FC15 [04] 3541      18085          sthx    temp_sp                     ; save it temporarily
 FC17 [02] A7DC      18086          ais     #-36                        ; allocate stack space for data
 FC19 [04] AD58      18087          bsr     GetSRec                     ; get an S-Record
 FC1B [03] 2625      18088          bne     BootProg5                   ; indicate error if S-Record is invalid
 FC1D [02] 86        18089          pula                                ; get S-Record type
 FC1E [02] A130      18090          cmp     #'0'                        ; check for text header record type
 FC20 [03] 270B      18091          beq     BootProg3                   ; ignore and get next record
 FC22 [02] A139      18092          cmp     #'9'                        ; check for end record type
 FC24 [03] 270B      18093          beq     BootProg4                   ; indicate operation complete
 FC26 [02] A131      18094          cmp     #'1'                        ; check for data record type
 FC28 [03] 2618      18095          bne     BootProg5                   ; indicate error if S-Record is invalid
                     18096  ;
                     18097  ;   Program Flash.
                     18098  ;
 FC2A [05] CD01F8    18099          jsr     {ram_exec+ProgramRam}       ; execute Program Flash algorithm from RAM
                     18100  BootProg3:
 FC2D [02] A723      18101          ais     #35                         ; deallocate stack space
 FC2F [03] 20E3      18102          bra     BootProg2                   ; loop back for next S-Record
                     18103  ;
                     18104  BootProg4:
 FC31 [02] A723      18105          ais     #35                         ; deallocate stack space
 FC33 [05] 0B16B0    18106          brclr   SCRF,scs1,BootDone          ; skip if SCI receiver is empty
 FC36 [04] AD32      18107          bsr     GetChar                     ; else, clear last ASCII carriage return from SCI
 FC38 [05] 0B16AB    18108          brclr   SCRF,scs1,BootDone          ; skip if SCI receiver is empty
 FC3B [04] AD2D      18109          bsr     GetChar                     ; else, clear last ASCII line feed from the SCI
 FC3D [03] 45FDB4    18110          ldhx    #msg_complete               ; point to operation complete message
 FC40 [03] 2005      18111          bra     BootProg6                   ; go output it
                     18112  ;
                     18113  BootProg5:
 FC42 [02] A724      18114          ais     #36                         ; deallocate stack space
 FC44 [03] 45FDCE    18115          ldhx    #msg_error                  ; point to error message
                     18116  BootProg6:
 FC47 [04] ADAF      18117          bsr     PrintString                 ; output it
 FC49 [04] 81        18118          rts                                 ; return
                     18119  
                     18120  
                     18121  ;*  Upgrade Flash Command Check  ============================================================
                     18122  ;*
                     18123  Boot4:
 FC4A [02] A155      18124          cmp     #cmd_upgrade                ; check for Upgrade Flash command
 FC4C [03] 2670      18125          bne     Boot5                       ; skip if not
                     18126  ;
 FC4E [03] 458000    18127          ldhx    #init_first                 ; force
 FC51 [04] 3543      18128          sthx    flash_first                 ;  first Flash address
 FC53 [03] 45FB00    18129          ldhx    #init_last                  ; force
 FC56 [04] 3545      18130          sthx    flash_last                  ;  last Flash address
 FC58 [04] AD02      18131          bsr     EraseFlash                  ; go erase Flash
 FC5A [03] 20A8      18132          bra     BootProg                    ; go program Flash
                     18133  
                     18134  


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 139
MC68HC908GP32 User Bootloader


                     18135  ;*  Multiple Flash Page Erase Subroutine  ===================================================
                     18136  ;*
                     18137  ;*  This subroutine will copy the Flash Erase algorithm into RAM and execute it to erase
                     18138  ;*  all pages between address pointers "flash_first" and "flash_last".
                     18139  ;*
                     18140  ;*  Calling convention:
                     18141  ;*
                     18142  ;*      ldhx    #init_first                 ; initialize
                     18143  ;*      sthx    flash_first                 ;  first Flash address
                     18144  ;*      ldhx    #init_last                  ; initialize
                     18145  ;*      sthx    flash_last                  ;  last Flash address
                     18146  ;*      jsr     EraseFlash                  ; go erase flash
                     18147  ;*
                     18148  ;*  Returns:    nothing
                     18149  ;*
                     18150  ;*  Changes:    everything
                     18151  ;*
                     18152  EraseFlash:
 FC5C [03] 45003B    18153          ldhx    #EraseRamSize               ; initialize pointer
                     18154  EraseFlash1:
 FC5F [04] D6FD08    18155          lda     MassErase-1,x               ; get program from Flash
 FC62 [04] D701EC    18156          sta     ram_exec-1,x                ; copy into RAM
 FC65 [03] 5BF8      18157          dbnzx   EraseFlash1                 ; decrement pointer and loop back until done
 FC67 [03] CC01ED    18158          jmp     ram_exec                    ; execute Flash Mass Erase algorithm from RAM
                     18159  
                     18160  
                     18161  ;*  GetChar Subroutine  =====================================================================
                     18162  ;*
                     18163  ;*  This subroutine will wait forever for a character to be received by the SCI and then
                     18164  ;*  returns with that character in ACC.  No error checking is performed.  Note that this
                     18165  ;*  is the primary loop where the COP counter is cleared.
                     18166  ;*
                     18167  ;*  C function prototype:
                     18168  ;*
                     18169  ;*      char GetChar (void);
                     18170  ;*
                     18171  ;*  Calling convention:
                     18172  ;*
                     18173  ;*      jsr     GetChar                     ; get a character from the SCI
                     18174  ;*
                     18175  ;*  Returns:
                     18176  ;*      ACC= data
                     18177  ;*
                     18178  GetChar:
 FC6A [04] C7FFFF    18179          sta     copctl                      ; clear the COP counter
 FC6D [05] 0B16FA    18180          brclr   SCRF,scs1,GetChar           ; wait forever until SCI receiver is full
 FC70 [03] B618      18181          lda     scdr                        ; get data
 FC72 [04] 81        18182          rts                                 ; return
                     18183  
                     18184  
                     18185  ;*  GetSRec Subroutine  =====================================================================
                     18186  ;*
                     18187  ;*  This subroutine will retrieve data in S19 record format via the SCI.
                     18188  ;*
                     18189  ;*  Calling convention:
                     18190  ;*
                     18191  ;*      ais     #-buffer_length             ; allocate stack space for data
                     18192  ;*      jsr     GetSRec                     ; go get S-record data
                     18193  ;*
                     18194  ;*  Returns:    CCRZ= 1 if valid S-Record retrieved.  Otherwise, CCRZ= 0.
                     18195  ;*              S-Record Type at SP+1     (1 byte)
                     18196  ;*              S-Record Size at SP+2     (1 byte)
                     18197  ;*              S-Record Address at SP+3  (2 bytes)
                     18198  ;*              S-Record Data at SP+5     (up to 32 bytes, typically)
                     18199  ;*
                     18200  ;*              |                |    <-sp (after local space allocation)
                     18201  ;*      H:X->   | SRecCount      |
                     18202  ;*              | SRecChkSum     |    <-sp (when called)
                     18203  ;*              | ReturnAddr msb |
                     18204  ;*              | ReturnAddr lsb |    <-sp (upon return)
                     18205  ;*              | SRecType       |
                     18206  ;*              | SRecSize       |
                     18207  ;*      H:X->   | SRecAddr msb   |
                     18208  ;*              | SRecAddr lsb   |
                     18209  ;*              | SRecData 00    |
                     18210  ;*              | SRecData 01    |  etc..
                     18211  ;*
                     18212  ;*  Changes:    everything
                     18213  ;*
 FC73                18214  SRecCount:      equ     1                   ; stack pointer offset for S-Record Counter
 FC73                18215  SRecChkSum:     equ     2                   ; stack pointer offset for S-Record Check Sum
 FC73                18216  SRecType:       equ     5                   ; stack pointer offset for S-Record Type


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 140
MC68HC908GP32 User Bootloader


 FC73                18217  SRecSize:       equ     6                   ; stack pointer offset for S-Record Size
 FC73                18218  SRecAddr:       equ     7                   ; stack pointer offset for S-Record Address
 FC73                18219  SRedData:       equ     8                   ; stack pointer offset for S-Record Data
                     18220  ;
                     18221  GetSRec:
 FC73 [02] A7FE      18222          ais     #-2                         ; allocate local variable space
 FC75 [04] 9E6F06    18223          clr     SRecSize,sp                 ; initialize S-Record size
                     18224  GetSRec1:
 FC78 [04] ADF0      18225          bsr     GetChar                     ; get a character from the SCI
 FC7A [02] A10D      18226          cmp     #ascii_CR                   ; check for ASCII carriage return
 FC7C [03] 2602      18227          bne     GetSRec1a                   ; just loop back if so
 FC7E [02] A60A      18228          lda     #ascii_LF                   ; get ASCII line feed
                     18229  GetSRec1a:
 FC80 [02] A153      18230          cmp     #'S'                        ; check for start of record character
 FC82 [03] 26F4      18231          bne     GetSRec1                    ; loop back if not
 FC84 [04] ADE4      18232          bsr     GetChar                     ; else, get next character from the SCI
 FC86 [02] A130      18233          cmp     #'0'                        ; check for header record type
 FC88 [03] 27EE      18234          beq     GetSRec1                    ; loop back if so
 FC8A [02] A139      18235          cmp     #'9'                        ; else, check for end record type
 FC8C [03] 2704      18236          beq     GetSRec2                    ; continue if so
 FC8E [02] A131      18237          cmp     #'1'                        ; else, check for data record type
 FC90 [03] 26E6      18238          bne     GetSRec1                    ; loop back if not
                     18239  GetSRec2:
 FC92 [04] 9EE705    18240          sta     SRecType,sp                 ; save S-Record type
 FC95 [04] AD3B      18241          bsr     GetHexByte                  ; get the S-Record length
 FC97 [03] 2622      18242          bne     GetSRec4                    ; exit if not a valid hex byte
 FC99 [04] 9EE701    18243          sta     SRecCount,sp                ; initialize S-Record counter
 FC9C [04] 9EE702    18244          sta     SRecChkSum,sp               ; initialize S-Record check sum
 FC9F [02] A003      18245          sub     #3                          ; adjust for address and checksum
 FCA1 [04] 9EE706    18246          sta     SRecSize,sp                 ; save S-Record size
 FCA4 [02] 95        18247          tsx                                 ; use H:X as data stack frame pointer
 FCA5 [02] AF06      18248          aix     #{SRecAddr-1}               ; adjust so pointer starts at S-Record Address
                     18249  GetSRec3:
 FCA7 [04] AD29      18250          bsr     GetHexByte                  ; get next S-Record hex byte
 FCA9 [03] 2610      18251          bne     GetSRec4                    ; exit if not a valid hex byte
 FCAB [02] F7        18252          sta     ,x                          ; save data in stack frame
 FCAC [04] 9EEB02    18253          add     SRecChkSum,sp               ; add data to check sum
 FCAF [04] 9EE702    18254          sta     SRecChkSum,sp               ; save new check sum
 FCB2 [02] AF01      18255          aix     #1                          ; move data stack frame pointer
 FCB4 [06] 9E6B01EF  18256          dbnz    SRecCount,sp,GetSRec3       ; loop back until all data has been received
 FCB8 [05] 9E6C02    18257          inc     SRecChkSum,sp               ; final calculation zeros check sum if it's okay
                     18258  GetSRec4:
 FCBB [02] A702      18259          ais     #2                          ; deallocate local variables
 FCBD [04] 81        18260          rts                                 ; return
                     18261  
                     18262  
                     18263  ;*  Help Command Response  ==================================================================
                     18264  ;*
                     18265  Boot5:
 FCBE [02] A148      18266          cmp     #cmd_help                   ; check for Help command
 FCC0 [03] 2704      18267          beq     Boot6                       ; continue if so
 FCC2 [02] A11F      18268          cmp     #cmd_help1                  ; check for alternate Help command
 FCC4 [03] 2606      18269          bne     Boot7                       ; skip if not
                     18270  boot6:
 FCC6 [03] 45FD90    18271          ldhx    #msg_help                   ; point to Help command message
 FCC9 [03] CCFBE9    18272          jmp     BootDone1                   ; go output it
                     18273  
                     18274  
                     18275  ;*  Unknown Command Response  ===============================================================
                     18276  ;*
                     18277  Boot7:
 FCCC [03] 45FDD7    18278          ldhx    #msg_what                   ; point to unknown command message
 FCCF [03] CCFBE9    18279          jmp     BootDone1                   ; go output it
                     18280  
                     18281  
                     18282  ;*  GetHexByte Subroutine  ==================================================================
                     18283  ;*
                     18284  ;*  This subroutine retrieves two ASCII bytes via the SCI and converts (packs) them into one
                     18285  ;*  hex byte, which is returned in ACC.
                     18286  ;*
                     18287  ;*  Calling convention:
                     18288  ;*
                     18289  ;*      jsr     GetHexByte
                     18290  ;*
                     18291  ;*  Returns:    CCRZ= 1 if valid hex byte retrieved.  Otherwise, CCRZ= 0.
                     18292  ;*              ACC= data
                     18293  ;*
                     18294  ;*  Changes:    ACC
                     18295  ;*
                     18296  GetHexByte:
 FCD2 [04] AD96      18297          bsr     GetChar                     ; get msb character from the SCI
 FCD4 [04] AD20      18298          bsr     IsHex                       ; check if valid ASCII hex character


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 141
MC68HC908GP32 User Bootloader


 FCD6 [03] 2614      18299          bne     GetHexByte2                 ; exit if not
 FCD8 [04] AD13      18300          bsr     ToHex                       ; convert ASCII hex character to hex value
 FCDA [03] 62        18301          nsa                                 ; swap lower nibble up
 FCDB [02] 87        18302          psha                                ; save temporarily
 FCDC [05] CDFC6A    18303          jsr     GetChar                     ; get lsb character from the SCI
 FCDF [04] AD15      18304          bsr     IsHex                       ; check if valid ASCII hex character
 FCE1 [03] 2607      18305          bne     GetHexByte1                 ; exit if not
 FCE3 [04] AD08      18306          bsr     ToHex                       ; convert ASCII hex character to hex value
 FCE5 [04] 9EEB01    18307          add     1,sp                        ; combine msb and lsb nibbles
 FCE8 [02] A500      18308          bit     #0                          ; CCRZ= 1
                     18309  GetHexByte1:
 FCEA [02] A701      18310          ais     #1                          ; deallocate local variable
                     18311  GetHexByte2:
 FCEC [04] 81        18312          rts                                 ; return
                     18313  
                     18314  
                     18315  ;*  ToHex Subroutine  =======================================================================
                     18316  ;*
                     18317  ;*  This subroutine converts the ASCII hex value passed in ACC to a binary hex value.
                     18318  ;*
                     18319  ;*  Calling convention:
                     18320  ;*
                     18321  ;*      lda     data
                     18322  ;*      jsr     ToHex
                     18323  ;*
                     18324  ;*  Returns:    ACC= data.
                     18325  ;*
                     18326  ;*  Changes:    ACC
                     18327  ;*
                     18328  ToHex:
 FCED [02] A030      18329          sub     #'0'                        ; adjust first by subtracting '0'
 FCEF [02] A109      18330          cmp     #9                          ; check if value was between '0' to '9'
 FCF1 [03] 2302      18331          bls     ToHex1                      ; exit if so
 FCF3 [02] A007      18332          sub     #7                          ; else, adjust for value between 'A' to 'F'
                     18333  ToHex1:
 FCF5 [04] 81        18334          rts                                 ; return
                     18335  
                     18336  
                     18337  ;*  IsHex Subroutine  =======================================================================
                     18338  ;*
                     18339  ;*  This subroutine checks if the value passed in ACC is a valid ASCII hex character within
                     18340  ;*  within the ranges of '0' to '9' or 'A' to 'F'.  Note that the range 'a' to 'f' is not
                     18341  ;*  checked.
                     18342  ;*
                     18343  ;*  Calling convention:
                     18344  ;*
                     18345  ;*      lda     data
                     18346  ;*      jsr     IsHex
                     18347  ;*
                     18348  ;*  Returns:    CCRZ= 1 if data is a valid hex character.  Otherwise, CCRZ= 0.
                     18349  ;*
                     18350  ;*  Changes:    nothing
                     18351  ;*
                     18352  IsHex:
 FCF6 [02] A130      18353          cmp     #'0'                        ; check value against '0'
 FCF8 [03] 250E      18354          blo     IsntHex                     ; not hex if lower
 FCFA [02] A139      18355          cmp     #'9'                        ; check value against '9'
 FCFC [03] 2308      18356          bls     IsHex1                      ; is hex if lower
 FCFE [02] A141      18357          cmp     #'A'                        ; check value against 'A'
 FD00 [03] 2506      18358          blo     IsntHex                     ; not hex if lower
 FD02 [02] A146      18359          cmp     #'F'                        ; check value against 'F'
 FD04 [03] 2202      18360          bhi     IsntHex                     ; not hex if higher
                     18361  IsHex1:
 FD06 [02] A500      18362          bit     #0                          ; CCRZ= 1
                     18363  IsntHex:
 FD08 [04] 81        18364          rts                                 ; return
                     18365  
                     18366  
                     18367  ;*  Flash Mass Erase Subroutine  ============================================================
                     18368  ;*
                     18369  ;*  This subroutine performs multiple Page Erase operations in order to erase the application
                     18370  ;*  space Flash memory between "flash_first" and "flash_last".  This subroutine has been
                     18371  ;*  tuned for a bus speed of 7.3728 MHz.
                     18372  ;*  This subroutine is copied into and executed from RAM.
                     18373  ;*
                     18374  MassErase:
 FD09 [04] 5545      18375          ldhx    flash_last                  ; initialize pointer to last Flash memory address
 FD0B [03] 2023      18376          bra     MassErase2                  ; go move pointer before erasing Flash
                     18377  MassErase1:
                     18378  ;
                     18379  ;   Set ERASE, read the Flash Block Protect Register and write any data into Flash page.
                     18380  ;


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 142
MC68HC908GP32 User Bootloader


 FD0D [02] A602      18381          lda     #{ERASE}                    ; set ERASE control bit
 FD0F [04] C7FE08    18382          sta     flcr                        ;  in Flash Control Register
 FD12 [04] C6FF7E    18383          lda     flbpr                       ; read from Flash Block Protect Register
 FD15 [02] F7        18384          sta     ,x                          ; write any data to address within page
                     18385  ;
                     18386  ;   Wait for >10us, then set HVEN.
                     18387  ;
 FD16 [02] A601      18388          lda     #1                          ; wait
 FD18 [04] AD1F      18389          bsr     delay                       ;  for 11.7us
 FD1A [02] A60A      18390          lda     #{ERASE | HVEN}             ; set HVEN control bit
 FD1C [04] C7FE08    18391          sta     flcr                        ;  in Flash Control Register
                     18392  ;
                     18393  ;   Wait for >1ms, then clear ERASE.
                     18394  ;
 FD1F [02] A664      18395          lda     #100                        ; wait
 FD21 [04] AD16      18396          bsr     delay                       ;  for 1.005ms
 FD23 [02] A608      18397          lda     #{HVEN}                     ; clear ERASE control bit
 FD25 [04] C7FE08    18398          sta     flcr                        ;  in Flash Control Register
                     18399  ;
                     18400  ;   Wait for >5us, then clear HVEN.
                     18401  ;
 FD28 [02] A601      18402          lda     #1                          ; wait
 FD2A [04] AD0D      18403          bsr     delay                       ;  for 11.7us
 FD2C [01] 4F        18404          clra                                ; clear HVEN control bit
 FD2D [04] C7FE08    18405          sta     flcr                        ;  in Flash Control Register
                     18406  ;
                     18407  ;   Advance pointer and repeat until finished.
                     18408  ;
                     18409  MassErase2:
 FD30 [02] AFC0      18410          aix     #-64                        ; move pointer back
 FD32 [02] AFC0      18411          aix     #-64                        ;  by one complete erase page
 FD34 [04] 7543      18412          cphx    flash_first                 ; check if finished
 FD36 [03] 22D5      18413          bhi     MassErase1                  ; loop back if not
                     18414  ;
 FD38 [04] 81        18415          rts                                 ; return
                     18416  
                     18417  
                     18418  ;*  Delay Subroutine  =======================================================================
                     18419  ;*
                     18420  ;*  This subroutine performs a simple software delay loop based upon the value passed in ACC.
                     18421  ;*  The following timing calculation applies:
                     18422  ;*
                     18423  ;*              delay = ((ACC * 74) + 12) (tcyc)
                     18424  ;*
                     18425  ;*  Calling convention:
                     18426  ;*
                     18427  ;*      lda     data
                     18428  ;*      jsr     delay
                     18429  ;*
                     18430  ;*  Returns:    nothing
                     18431  ;*
                     18432  ;*  Changes:    ACC
                     18433  ;*
                     18434  Delay:
 FD39 [02] 87        18435          psha                                ; [2] save outer delay loop parameter
                     18436  Delay1:
 FD3A [02] A616      18437          lda     #22                         ; [2] initialize inner delay loop counter
                     18438  Delay2:
 FD3C [03] 4BFE      18439          dbnza   Delay2                      ; [3] decrement inner delay loop counter
 FD3E [06] 9E6B01F8  18440          dbnz    1,sp,Delay1                 ; [6] decrement outer delay loop counter
 FD42 [02] 86        18441          pula                                ; [2] deallocate local variable
 FD43 [04] 81        18442          rts                                 ; [4] return
                     18443  
 FD44                18444  EraseRamSize:   equ     {*-MassErase}
 FD44                18445  ProgramRam:     equ     {*-Delay}
                     18446  
                     18447  
                     18448  ;*  Flash Program Subroutine  ===============================================================
                     18449  ;*
                     18450  ;*  This subroutine controls the Flash programming sequence.  A stack frame data block is
                     18451  ;*  passed to it in the format shown below.  This subroutine has been tuned for a bus speed
                     18452  ;*  of 7.3728 MHz.
                     18453  ;*  This subroutine is copied into and executed from RAM.
                     18454  ;*
                     18455  ;*              |                |    <-sp (when called)
                     18456  ;*              | ReturnAddr msb |
                     18457  ;*              | ReturnAddr lsb |    <-sp (upon return)
                     18458  ;*              | SRecSize       |
                     18459  ;*              | SRecAddr msb   |
                     18460  ;*              | SRecAddr lsb   |
                     18461  ;*              | SRecData 00    |
                     18462  ;*              | SRecData 01    |  etc..


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 143
MC68HC908GP32 User Bootloader


                     18463  ;*
                     18464  FlashProgram:
 FD44 [02] 95        18465          tsx                                 ; get the Stack Pointer
 FD45 [04] 3541      18466          sthx    temp_sp                     ; save it temporarily
                     18467  ;
                     18468  ;   Get S-Record size and use the Stack Pointer as the data source pointer.
                     18469  ;
 FD47 [02] A702      18470          ais     #2                          ; SP points to SRecSize
 FD49 [02] 86        18471          pula                                ; get SRecSize
 FD4A [03] B740      18472          sta     count                       ; save it temporarily
                     18473  ;
                     18474  ;   Establish H:X as the destination pointer.
                     18475  ;
 FD4C [02] 8A        18476          pulh                                ; get destination address msb
 FD4D [02] 88        18477          pulx                                ; get destination address lsb
                     18478  
                     18479  FlashProgram1:
 FD4E [04] 7543      18480          cphx    flash_first                 ; check against minimum address
 FD50 [03] 252D      18481          blo     FlashProgram2               ; skip if lower
 FD52 [04] 7545      18482          cphx    flash_last                  ; check against maximum address
 FD54 [03] 2429      18483          bhs     FlashProgram2               ; skip if the same or higher
                     18484  ;
                     18485  ;   Set PGM, read the Flash Block Protect Register and write anywhere in desired Flash row.
                     18486  ;
 FD56 [02] A601      18487          lda     #{PGM}                      ; set PGM control bit
 FD58 [04] C7FE08    18488          sta     flcr                        ;  in Flash Control Register
 FD5B [04] C6FF7E    18489          lda     flbpr                       ; read from Flash Block Protect Register
 FD5E [02] F7        18490          sta     ,x                          ; write any data to first Flash address
                     18491  ;
                     18492  ;   Wait for >10us, then set HVEN.
                     18493  ;
 FD5F [02] A601      18494          lda     #1                          ; wait
 FD61 [04] ADD6      18495          bsr     delay                       ;  for 11.7us
 FD63 [02] A609      18496          lda     #{PGM | HVEN}               ; set HVEN control bit
 FD65 [04] C7FE08    18497          sta     flcr                        ;  in Flash Control Register
                     18498  ;
                     18499  ;   Wait for >5us.
                     18500  ;
 FD68 [02] A601      18501          lda     #1                          ; wait
 FD6A [04] ADCD      18502          bsr     delay                       ;  for 11.7us
                     18503  ;
                     18504  ;   Write data to Flash and wait for 30 - 40us.
                     18505  ;
 FD6C [02] 86        18506          pula                                ; get S-Record data
 FD6D [02] F7        18507          sta     ,x                          ; write data to Flash
 FD6E [02] A603      18508          lda     #3                          ; wait
 FD70 [04] ADC7      18509          bsr     delay                       ;  for 31.7us
                     18510  ;
                     18511  ;   Clear PGM.
                     18512  ;
 FD72 [02] A608      18513          lda     #{HVEN}                     ; clear PGM
 FD74 [04] C7FE08    18514          sta     flcr                        ;  in Flash Control Register
                     18515  ;
                     18516  ;   Wait for >5us, then clear HVEN.
                     18517  ;
 FD77 [02] A601      18518          lda     #1                          ; wait
 FD79 [04] ADBE      18519          bsr     delay                       ;  for 11.7us
 FD7B [01] 4F        18520          clra                                ; clear HVEN control bit
 FD7C [04] C7FE08    18521          sta     flcr                        ;  in Flash Control Register
                     18522  ;
                     18523  ;   Advance destination pointer and data counter.
                     18524  ;
                     18525  FlashProgram2:
 FD7F [02] AF01      18526          aix     #1                          ; advance destination pointer
 FD81 [05] 3B40CA    18527          dbnz    count,FlashProgram1         ; decrement counter and loop back if not done.
                     18528  ;
 FD84 [04] 5541      18529          ldhx    temp_sp                     ; restore
 FD86 [02] 94        18530          txs                                 ;  Stack Pointer
 FD87 [04] 81        18531          rts                                 ; return
                     18532  
 FD88                18533  ProgramRamSize: equ     {*-Delay}
                     18534  
                     18535  
                     18536  ;*  Messages  ===================================================================================
                     18537  ;*
 FD88                18538  ascii_CR:       equ     $0D                 ; ASCII carriage return
 FD88                18539  ascii_LF:       equ     $0A                 ; ASCII line feed
                     18540  ;
 FD88      0D0A426F  18541  msg_hello:      db      ascii_CR,ascii_LF,'Boot>',0
           6F743E00 
 FD90      20202850  18542  msg_help:       db      '  (P)rogram (W)ipe (U)pgrade e(X)it',0
           29726F67 


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 144
MC68HC908GP32 User Bootloader


           72616D20 
           28572969 
           70652028 
           55297067 
           72616465 
           20652858 
           29697400 
                     18543  ;
 FDB4      2020436F  18544  msg_complete:   db      '  Complete',0
           6D706C65 
           746500 
 FDBF      202D2077  18545  msg_waiting:    db      ' - waiting ...',0
           61697469 
           6E67202E 
           2E2E00 
 FDCE      202D2065  18546  msg_error:      db      ' - error',0
           72726F72 
           00 
 FDD7      202D2077  18547  msg_what:       db      ' - what?',0
           6861743F 
           00 
 FDE0      202D2052  18548  msg_noreset:    db      ' - Reset Vector Invalid',0
           65736574 
           20566563 
           746F7220 
           496E7661 
           6C696400 
                     18549  
                     18550  ;
                     18551  ;   Last location not to exceed $FDFF
                     18552  ;
                     18553  BootEnd:
                     18554  
                     18555  
                     18556  ;*  Vectors  ************************************************************************************
                     18557  ;*
 FFDC                18558          org     vec_timebase                ; Timebase vector
 FFDC      FACA      18559          dw      user_timebase
 FFDE                18560          org     vec_adc                     ; ADC vector
 FFDE      FACD      18561          dw      user_ADC
 FFE0                18562          org     vec_kbd                     ; Keyboard vector
 FFE0      FAD0      18563          dw      user_keyboard
 FFE2                18564          org     vec_scitx                   ; SCI transmit vector
 FFE2      FAD3      18565          dw      user_SCItx
 FFE4                18566          org     vec_scirx                   ; SCI receive vector
 FFE4      FAD6      18567          dw      user_SCIrx
 FFE6                18568          org     vec_scierr                  ; SCI error vector
 FFE6      FAD9      18569          dw      user_SCIerr
 FFE8                18570          org     vec_spitx                   ; SPI transmit vector
 FFE8      FADC      18571          dw      user_SPItx
 FFEA                18572          org     vec_spirx                   ; SPI receive vector
 FFEA      FADF      18573          dw      user_SPIrx
 FFEC                18574          org     vec_tim2ov                  ; Timer 2 overflow vector
 FFEC      FAE2      18575          dw      user_Tim2Ov
 FFEE                18576          org     vec_tim2ch1                 ; Timer 2 channel 1 vector
 FFEE      FAE5      18577          dw      user_Tim2Ch1
 FFF0                18578          org     vec_tim2ch0                 ; Timer 2 channel 0 vector
 FFF0      FAE8      18579          dw      user_Tim2Ch0
 FFF2                18580          org     vec_tim1ov                  ; Timer 1 oveflow vector
 FFF2      FAEB      18581          dw      user_Tim1Ov
 FFF4                18582          org     vec_tim1ch1                 ; Timer 1 channel 1 vector
 FFF4      FAEE      18583          dw      user_Tim1Ch1
 FFF6                18584          org     vec_tim1ch0                 ; Timer 1 channel 0 vector
 FFF6      FAF1      18585          dw      user_Tim1Ch0
 FFF8                18586          org     vec_pll                     ; PLL vector
 FFF8      FAF4      18587          dw      user_PLL
 FFFA                18588          org     vec_irq                     ; IRQ vector
 FFFA      FAF7      18589          dw      user_IRQ
 FFFC                18590          org     vec_swi                     ; SWI vector
 FFFC      FAFA      18591          dw      user_SWI
 FFFE                18592          org     vec_reset                   ; Reset vector
 FFFE      FB08      18593          dw      BootReset
                     18594  
                     18595  
                     18596  ;*  Flash Block Protect Register  ***************************************************************
                     18597  ;*
 FF7E                18598          org     flbpr
 FF7E      F6        18599          db      flash_protect
                     18600  
 FF7F                18601          end
                     18602  ;check in the .lst file for how big the flash areas are by searching the variable list
                     18603  ;for the following. Do NOT exceed $C2 per table or stack corruption is likely


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 145
MC68HC908GP32 User Bootloader


 FF7F                18604  flash_0_size        equ {flash_table0_end-flash_table0}
 FF7F                18605  flash_1_size        equ {flash_table1_end-flash_table1}
 FF7F                18606  flash_2_size        equ {flash_table2_end-flash_table2}
 FF7F                18607  flash_3_size        equ {flash_table3_end-flash_table3}
 FF7F                18608  flash_4_size        equ {flash_table4_end-flash_table4}
 FF7F                18609  flash_5_size        equ {flash_table5_end-flash_table5}
 FF7F                18610  flash_6_size        equ {flash_table6_end-flash_table6}
 FF7F                18611  flash_7_size        equ {flash_table7_end-flash_table7}
 FF7F                18612  flash_8_size        equ {flash_table8_end-flash_table8}
                     18613  
                     18614  ******************************************************************************
                     18615  **                           Real Time variables sent out on RS232 port
                     18616  **                               "R" command = all 37 Bytes
                     18617  **                               "A" command = first 22 Bytes
                     18618  ******************************************************************************
                     18619  * Revised by DJA to start from 0, makes more sense
                     18620  **
                     18621  **  0    secl
                     18622  **  1    squirt
                     18623  **  2    engine
                     18624  **  3    baroADC
                     18625  **  4    mapADC
                     18626  **  5    matADC
                     18627  **  6    cltADC
                     18628  **  7    tpsADC
                     18629  **  8    batADC
                     18630  **  9    egoADC
                     18631  **  10   egoCorrection
                     18632  **  11   airCorrection
                     18633  **  12   warmupEnrich
                     18634  **  13   rpm100
                     18635  **  14   pulseWidth1
                     18636  **  15   accelEnrich
                     18637  **  16   baroCorrection
                     18638  **  17   gammaEnrich
                     18639  **  18   veCurr1
                     18640  **  19   pulseWidth2
                     18641  **  20   veCurr2
                     18642  **  21   idleDC
                     18643  **
                     18644  **  End of "A" command RT Variables for MegaView compatability
                     18645  **
                     18646  **  22/23 cTime             16 bit cycle timer.
                     18647  **  24    advance           Spark Gauge *0.352 -28.7     Min -10   Max 80
                     18648  **  25    afrtarget         Raw ADC target that MS is trying to reach
                     18649  **                      from the target table or switch point  255 = 5V.
                     18650  **  26    fuelADC           Raw ADC from X7 (second O2 or fuel pressure or
                     18651  **                      VSS sensor)
                     18652  **  27    egtADC            Raw ADC from X6 If EGT then temp in
                     18653  **                      F = egtADC*7.15625
                     18654  **                      C = egtADC*3.90625 if
                     18655  **                      VSS Volts = egtADC*0.019
                     18656  **  28    CltIatAngle       Spark Angle added or removed for IAT CLT temp.
                     18657  **                      Angle = MS value*0.352
                     18658  **                      (Angle < 45 ? Angle : -90 + Angle)
                     18659  **  29    KnockAngle        Spark Angle removed due to Knock System
                     18660  **                      *0.352
                     18661  **  30    egoCorrection2    Same as egocorrection, but this is for second
                     18662  **                      O2 sensor when fitted
                     18663  **  31    porta             Porta raw value for displaying the I/O state
                     18664  **  32    portb             Portb raw value for displaying the I/O state
                     18665  **  33    portc             Portc raw value for displaying the I/O state
                     18666  **  34    portd             Portd raw value for displaying the I/O state
                     18667  **  35    stackL            Low byte of stack for test purposes only, no
                     18668  **                      use to users.
                     18669  **  36    tpsLast           TPS/MAP last value for MT Accel Wizard, so we
                     18670  **                      have last and current values to give a gauge of dot
                     18671  ****************************************************************************
 FF7F                18672      end
                     18673   

 Symbol Table 

AACOK            8592
ACCELDECAY_F     E0B7
ACCH             00C8
ACCL             00C9
ACC_DONE_LED     85DE
ACK              0002
ACKK             0002
ACMULT_F1        E0B5
ACQ              0005


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 146
MC68HC908GP32 User Bootloader


AC_CHK36         99CE
AC_CHK37         99C5
AC_CHK38         99BC
ADCDONE          97D4
ADCH0            0000
ADCH1            0001
ADCH2            0002
ADCH3            0003
ADCH4            0004
ADCLK            003E
ADCO             0005
ADCPTR           97F6
ADICLK           0004
ADIV0            0005
ADIV1            0006
ADIV2            0007
ADR              003D
ADSCR            003C
ADSEL            008E
ADVANCING        0007
AECARRY_ONAE     8623
AE_CHK           85B8
AE_COMP_SHOOT_AM 85E4
AE_SET           85CE
AFR1_STEP_1      9D7C
AFR1_STEP_2      9D9B
AFR1_STEP_3      9DB2
AFR1_TARGETS     9D71
AFRTARGET        0059
AFRTARTPS_F      E079
AFR_F1           E600
AFR_F2           E650
AFTERAFRSET      8715
AIEN             0006
AIRCOR           004B
AIRDENFACTOR     F500
AIRTEMP          0107
ALED             0001
ALL_ASECOUNT     8587
ALPHATARAFR      0004
ALTCOUNT1        0086
ALTCOUNT2        0087
ALTERNATE_F1     E196
ALTERNATE_F2     E296
ALTERNATE_R      01A8
ALT_I1GE         0020
ALT_I2GE         0040
ALT_I2T2         0010
ALWAYSPRIMEB     0001
ASCII_CR         000D
ASCII_LF         000A
ASECOUNT         0083
ASEHOLDB         0002
ASEIGNCOUNTB     0001
ASETABLEB        0002
ASEVTBL_F        E5A8
ASIS_SPEED       95BB
AUTO             0007
AVGTOOTHH        00F3
AVGTOOTHL        00F4
AVGTTH12H        0209
AVGTTH12L        020A
AVGTTH14H        0207
AVGTTH14L        0208
AWC_F1           E5B2
BARCORR300_F     E083
BARO             0043
BAROCOR          0050
BAROCORCONSTB    0008
BAROFAC4115      F000
BAROFAC4250      F100
BARO_LO_CHECK    8372
BARROHI_F        E052
BARROLOW_F       E053
BATT             0048
BATTFAC_F1       E19B
BATTFAC_F2       E29B
BATTFAC_R        01AD
BATT_CORR_CALC   8809
BATT_CORR_PW     880A
BC3_KPA_F        E760
BCACTCLOCK       00D4


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 147
MC68HC908GP32 User Bootloader


BCCTLCLOCK       00D5
BCDC             00CF
BCDGAIN_F        E011
BCFE             0007
BCFREQDIV_F      E00E
BCPGAIN_F        E010
BCS              0004
BCTABLEUSE       0006
BCUPDATE_F       E00F
BC_DC_F          E730
BC_KPA_F         E700
BC_MAX_DIFF      E07D
BEND_OF_BARO     8361
BKF              0001
BLSSD            8D6E
BOOSTCONTROL     0000
BOOSTCUT2B       0020
BOOSTCUTB        0010
BOOSTDIRB        0040
BOOSTKNMAX_F     E06C
BOOSTKNOCK_F     E06B
BOOSTP           0003
BOOSTTABLE3B     0004
BOOT             FBBB
BOOT1            FBD9
BOOT2            FBE0
BOOT3            FBFC
BOOT4            FC4A
BOOT5            FCBE
BOOT6            FCC6
BOOT7            FCCC
BOOTDONE         FBE6
BOOTDONE1        FBE9
BOOTDONE2        FBEB
BOOTEND          FDF8
BOOTLOAD         9A41
BOOTPROG         FC04
BOOTPROG1        FC07
BOOTPROG2        FC14
BOOTPROG3        FC2D
BOOTPROG4        FC31
BOOTPROG5        FC42
BOOTPROG6        FC47
BOOTRESET        FB08
BOOTRESET1       FB59
BOOTRESET2       FB75
BOOTRESET3       FB7E
BOOTRESET4       FB87
BOOTRESET5       FB98
BOOTRESET6       FBA5
BOOTRESETUSER    FBA5
BOOT_START       FB00
BOTH_TABLE1      8842
BRKA             0006
BRKE             0007
BRKH             FE09
BRKL             FE0A
BRKSCR           FE0B
BURNCONST        9C56
BURNCOUNT        0093
BURNDST          0091
BURNSRC          008F
BURN_CONT        9C5D
BUS7372800       FB00
BUS8003584       FB04
B_ENABLE         8FE1
B_INJFC          8EF3
C13_BC           0008
C13_CS           0004
C13_O2           0002
C13_OF           0001
CALCGAMMAE       84EF
CALCPWS          8443
CALCRPM          83C5
CALCRUNNINGPARAM 835D
CALC_DELAY       8961
CALC_FINAL       882A
CANT_CRANK       0003
CANT_DELAY       0004
CANT_OFF         917A
CANT_SET         9176
CARRY_ON_TEA     8642


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 148
MC68HC908GP32 User Bootloader


CCNOT_ODD        959D
CC_CONT          95A5
CD_1RAIL         8C11
CD_1STORE        8C14
CD_2             8C16
CD_4DD           8BB1
CGMCHANGE        FB39
CHARGEFD:000F    8D4E
CHARGEFD:0012    8EA2
CHARGEFD:0015    91FD
CHECKBIT         0001
CHECKDECELT      86D9
CHECKRPMSETTINGS 8848
CHECK_GREATER_TH 9B70
CHECK_LESS_THAN  9B68
CHECK_MMS        90C2
CHECK_RPM        8FCC
CHECK_SPARK_LATE 8DE3
CHECK_SP_ADD     8950
CHECK_TXCMD      98A3
CHKHOLD          8DFF
CHKROLL_END      8A10
CHK_DONE_1       8F32
CHK_DONE_2       8F6A
CHK_DONE_2JMP    8F46
CHK_O2_LAG       8725
CHK_REARM        8FEF
CHK_RE_ENABLE    8FD5
CHK_ROLL         8A02
CHXF             0007
CHXIE            0006
CHXMAX           0000
CKD2SINGLE       8F78
CKDN2            8F78
CKP0_DDRC        9890
CKP0_NORM_DDRC   988E
CKP3_INV         9896
CKP3_I_DONE      9898
CK_PAGE0         9875
CK_PAGE3         9896
CK_PAGE7         989C
CLEARRAM         8148
CLEAR_DECEL      86C0
CLEAR_TABLE      9B2E
CLT              0046
CLTADVANCE_F     E02F
CLTCRANKB        0010
CLTDEG_F         E030
CLTFIXASE_F      E5B5
CLTIATANGLE      005C
CLTIATIGNITIONB  0004
CLTMAPB          0008
CLTMATCHECKB     0010
CLTMATCORR_F     E82F
CLTMATRANGE      E838
CMD_ERASE        0057
CMD_EXIT         0058
CMD_HELP         0048
CMD_HELP1        001F
CMD_PROGRAM      0050
CMD_UPGRADE      0055
CN_END:0010      8DDF
CN_END:0011      8E73
CN_END:0017      92BB
COCO             0007
COILA            0000
COILABIT         0000
COILB            0001
COILBBIT         0001
COILCBIT         0002
COILDBIT         0003
COILEBIT         0004
COILERR          0004
COILFBIT         0005
COILSEL          0068
CONFIG1          001F
CONFIG11_F1      E1B6
CONFIG11_F2      E2B6
CONFIG11_R       01D4
CONFIG12_F1      E1B7
CONFIG12_F2      E2B7
CONFIG12_R       01D5


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 149
MC68HC908GP32 User Bootloader


CONFIG13_F1      E1B8
CONFIG13_F2      E2B8
CONFIG13_R       01D6
CONFIG2          001E
CONFIG21_F       E2B6
CONFIG22_F       E2B7
CONFIG23_F       E2B8
CONFIG_ERROR     0007
CONF_ERR         9971
CONF_ERR2        997B
CONSBARCORB      0080
CONT_INC_COUNTER 9580
CONT_TX          9A2E
COOLANT          00CC
COP              0005
COPCTL           FFFF
COUNT            0040
CPHA             0003
CPOL             0004
CRANK            0001
CRANKANGLE_F     E3AB
CRANKANGLE_R     01BD
CRANKDWELL       8B6D
CRANKINGDONE     8A86
CRANKINGMODE     8A2E
CRANKINGMODEPRIM 8A31
CRANKINGPW       8A44
CRANKINGPW2      0006
CRANKIT          844D
CRANKPWS_F       E820
CRANKPWTABLEB    0001
CRANKRPM_F       E82B
CRANK_PWM        89A8
CTIMECOMMH       0056
CTIMECOMML       0057
CTIMEH           00BF
CTIMEHCP         0200
CTIMEL           00C0
CTIMELCP         0201
CTODIV           0007
CTODIVB          0080
CURRTTH14H       0205
CURRTTH14L       0206
CYCLE_CALC       959D
DC_LOW           95EA
DDRA             0004
DDRB             0005
DDRC             0006
DDRD             0007
DDRE             000C
DD_END:0013      8EF2
DD_END:0016      9248
DECAY_ACCEL      0088
DECELKPA_F       E081
DECELMAPB        0020
DECODER_NEW      9362
DECODE_WHEEL     92FF
DECRMT           9C36
DEC_ACCEL        85AF
DELAY            FD39
DELAY1           FD3A
DELAY2           FD3C
DELAYANGLE       0106
DELAY_CALC       95BF
DELAY_DONE       9580
DIVIDEND         0096
DIVIDER_F1       E195
DIVIDER_F2       E295
DIVIDER_R        01A7
DIVISOR          0098
DMARE            0005
DMATE            0004
DODWELL          8D0D
DONEBAROCORR     8395
DONEKPA          83AD
DONE_B           989E
DONE_BYTE        9A3F
DONE_DECODE      9523
DONE_FIXMAP      97EC
DONE_LOAD        9B36
DONE_RCV         9961
DONE_WITH_INTERP 9BB4


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 150
MC68HC908GP32 User Bootloader


DONT_CLR_WATER2  8F8B
DONT_RESETCNT    8D19
DORPMCALC        83CF
DOSLS_CD         8EC8
DOSLS_DONE       8EC2
DOSLS_FD         8EC5
DOSLS_INV        8E75
DOSPARKLSPEED    8DFF
DOSQUIRT         92E0
DO_BARO          837A
DO_BARO4115      838D
DO_DWELL_US      8B7D
DO_INTERP        9B7B
DO_KPA4115       83A8
DO_KPA4250       83A3
DO_SET_SPK       96C4
DO_TARGETS       9D78
DO_THE_EGO       8737
DO_VE1_4_NOW     8455
DSLSA:0010       8DC5
DSLSA:0011       8E59
DSLSA:0017       92A1
DSLSB:0010       8DC9
DSLSB:0011       8E5D
DSLSB:0017       92A5
DSLSC:0010       8DCD
DSLSC:0011       8E61
DSLSC:0017       92A9
DSLSD:0010       8DD1
DSLSD:0011       8E65
DSLSD:0017       92AD
DSLSE:0010       8DD5
DSLSE:0011       8E69
DSLSE:0017       92B1
DSLSF:0010       8DD9
DSLSF:0011       8E6D
DSLSF:0017       92B5
DSLSX:0010       8DDD
DSLSX:0011       8E71
DSLSX:0017       92B9
DSS2             96D9
DTMODE_F         E021
DTNOSB           0020
DUALDIZZYB       0010
DUALEDIS         0005
DUMMY            9B47
DWELLCD          0003
DWELLCONT        0001
DWELLCRANK_F     E06E
DWELLDELAY1      00E7
DWELLDELAY2      00E9
DWELLDELAY3      00EB
DWELLDELAY4      00ED
DWELLDELAY5      00EF
DWELLDELAY6      00F1
DWELLDMS         00F7
DWELLDUTY50      0006
DWELLRUN_F       E06F
DWELLTF          8B39
DWELLTMPH        0096
DWELLTMPHAC      00A8
DWELLTMPHMS      009C
DWELLTMPHOP      0099
DWELLTMPHP       00A0
DWELLTMPL        0097
DWELLTMPLAC      00A9
DWELLTMPLMS      009D
DWELLTMPLOP      009A
DWELLTMPLP       00A1
DWELLTMPX        0095
DWELLTMPXAC      00A7
DWELLTMPXMS      009B
DWELLTMPXOP      0098
DWELLTMPXP       009F
DWELLTV          8B33
DWELLUSH         00F8
DWELLUSL         00F9
DWELL_CORR       8B70
DWELL_LIM:000B   8C06
DWELL_LIM:000E   8C97
DWLLDEND:000B    8BFB
DWLLDEND:000E    8C8C


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 151
MC68HC908GP32 User Bootloader


DWLNWCHK:000D    8C5C
DWLNWOK:000D     8C70
DWLNWRAIL:000D   8C67
DWL_OK           9695
EDIS             0004
EDISMS_F         E015
EFANOFFTEMP_F    E04B
EFANONTEMP_F     E04A
EGO              0049
EGOALL_DONE      8791
EGOALL_DONEJMP   8735
EGOBUMP          958C
EGOCORR          004A
EGOCORR2         005E
EGOCOUNT         0082
EGOCOUNTCMP_F    E191
EGOCOUNTCMP_F2   E291
EGOCOUNTCMP_R    01A3
EGODELTA_F       E192
EGODELTA_F2      E292
EGODELTA_R       01A4
EGOIGNCOUNTB     0001
EGOLIM2_F        E028
EGOLIMITKPA_F    E027
EGOLIMIT_F       E193
EGOLIMIT_F2      E293
EGOLIMIT_R       01A5
EGOLIM_DONE      8753
EGORPM_F         E1B9
EGORPM_F2        E2B9
EGOTEMP_F        E190
EGOTEMP_F2       E290
EGOTEMP_R        01A2
EGO_2DONE        8794
EGO_CALC         86F3
EGO_DONE         878D
EGTADC           005B
ELSXA            0002
ELSXB            0003
ENABLE_THE_IRQ   90C0
END100TH         90FA
END_OF_BARO      8397
END_OF_MAIN      9E66
ENGINE           0042
ENHANCEDBITS     0066
ENHANCEDBITS2    0067
ENHANCEDBITS4    0069
ENHANCEDBITS5    006A
ENHANCEDBITS6    006B
ENSCI            0006
EN_XMIT          995B
ERASE            0002
ERASEFLASH       FC5C
ERASEFLASH1      FC5F
ERASERAMSIZE     003B
ERRIE            0006
EXCRFUELB        0040
EXITSN           9D70
EXTRACRFU_F      E82E
FALSETRIGB       0004
FASTIDLEBG_F     E1BA
FASTIDLETEMP_F   E811
FASTIDLE_F       E813
FASTIDLE_R       01D8
FCNITA:0010      8D82
FCNITA:0011      8E16
FCNITA:0017      925E
FCNITB:0010      8D88
FCNITB:0011      8E1C
FCNITB:0017      9264
FCNITC:0010      8D8E
FCNITC:0011      8E22
FCNITC:0017      926A
FC_END:000F      8D6E
FC_END:0012      8EC2
FC_END:0015      921D
FE               0001
FEATURE1         0063
FEATURE10_F5     E5B3
FEATURE11_F4     E82A
FEATURE12_F2     E2BC
FEATURE13_F      E810


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 152
MC68HC908GP32 User Bootloader


FEATURE14_F1     E1BC
FEATURE1_F       E00B
FEATURE2         0064
FEATURE2_F       E00C
FEATURE3_F       E02E
FEATURE4_F       E042
FEATURE5_F       E04C
FEATURE6_F       E05C
FEATURE7         0065
FEATURE7_F       E06D
FEATURE8_F       E074
FEATURE9_F       E0B8
FEIE             0001
FINALNORM        9D48
FIN_TX           9A39
FIREFD:0010      8DBF
FIREFD:0011      8E53
FIREFD:0017      929B
FIRE_ADC         90D0
FIRING1          0003
FIRING2          0005
FIXEDANGLE_F     E3A9
FIXEDANGLE_R     01BB
FIXEDSPLIT_F     E870
FIXED_FL         8854
FLASHPROGRAM     FD44
FLASHPROGRAM1    FD4E
FLASHPROGRAM2    FD7F
FLASH_0_SIZE     00BA
FLASH_1_SIZE     00BD
FLASH_2_SIZE     00BD
FLASH_3_SIZE     00B9
FLASH_4_SIZE     00A8
FLASH_5_SIZE     00B7
FLASH_6_SIZE     00B2
FLASH_7_SIZE     0090
FLASH_8_SIZE     0071
FLASH_ERASED     00FF
FLASH_FIRST      0043
FLASH_LAST       0045
FLASH_PAGE       0080
FLASH_PROTECT    00F6
FLASH_ROW        0040
FLASH_TABLE0     E000
FLASH_TABLE0_END E0BA
FLASH_TABLE1     E100
FLASH_TABLE1_END E1BD
FLASH_TABLE2     E200
FLASH_TABLE2_END E2BD
FLASH_TABLE3     E300
FLASH_TABLE3_END E3B9
FLASH_TABLE4     E400
FLASH_TABLE4_END E4A8
FLASH_TABLE5     E500
FLASH_TABLE5_END E5B7
FLASH_TABLE6     E600
FLASH_TABLE6_END E6B2
FLASH_TABLE7     E700
FLASH_TABLE7_END E790
FLASH_TABLE8     E800
FLASH_TABLE8_END E871
FLBPR            FF7E
FLCR             FE08
FLOCKER          0076
FLOODCLEAR       8A40
FUELP            0000
FUELSPARKCUTB    0020
FUELSPARKLCB     0002
FUEL_SPARKHARDB  0010
FUEL_SPARKHLCB   0001
FXDASEDONE       0007
FXR_C            8857
GAMMAE           0051
GETCHAR          FC6A
GETHEXBYTE       FCD2
GETHEXBYTE1      FCEA
GETHEXBYTE2      FCEC
GETSREC          FC73
GETSREC1         FC78
GETSREC1A        FC80
GETSREC2         FC92
GETSREC3         FCA7


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 153
MC68HC908GP32 User Bootloader


GETSREC4         FCBB
GOT_ORD_NUM      9B62
GO_INJ_FIRE      8D07
HEI7             0007
HEI7_SPD         8B42
HIGHER_ACCEL     8692
HIGHER_ACJMP     8668
HIGH_SPEED       95BB
HIRES_DWELL      924C
HISPDCORR        95D8
HRDWON           0000
HRD_CK           9692
HRD_INV          924C
HRD_OFF          9690
HRD_ON           968C
HRD_SET          92BB
HVEN             0008
HYBRIDALPHAN     0005
IASC             0001
IATBOOSTST_F     E087
IATBOOST_F       E088
IATDANGER_F      E034
IATDEG_F         E032
IATPOINT_F       E03D
ICTLRPM1_F       E807
ICTLRPM2_F       E808
IDASHBIT         0006
IDASHDELAY_F     E80A
IDEADBND_F       E809
IDLADVHLD        010F
IDLE             0004
IDLEACTCHECK     8FB7
IDLEACTCLOCK     00D3
IDLEACTDONE      8FCC
IDLEACTOFF       8FCA
IDLEACTON        8FC6
IDLEACTUATOR     8F9F
IDLEADVANCE_F    E3AE
IDLEADVTIMEOK    0004
IDLECLOSEDC_F    E80F
IDLECLTTHRESH_F  E3B1
IDLECRANKDC_F    E802
IDLECTLCLOCK     00D2
IDLEDASHDC_F     E804
IDLEDC           0055
IDLEDELAYCLOCK   0111
IDLEDELAYCLOCK_F E803
IDLEDELAYTIME_F  E3B2
IDLEFREQ_F       E80B
IDLELASTDC       00CD
IDLEMINDC_F      E805
IDLEON           0007
IDLEPERIOD2_F    E80D
IDLEPERIOD_F     E801
IDLEPH           0074
IDLEPL           0075
IDLERPM          0110
IDLERPMTHRESH_F  E3B0
IDLESTARTCLK_F   E80C
IDLETARGET       00CE
IDLETHRESH_F     E815
IDLETPSTHRESH_F  E3AF
IDLE_CLB         0004
IDLE_CLOSEDLOOP  89EC
IDLE_DC_HI       E806
IDLE_DC_LO       E800
IDLE_DONE        89EC
IDLE_DONEJMP1    89A5
IDLE_DONEJMP2    89E9
IDLE_LOOPCOLD    8985
IDLE_WARMUPB     0002
IGNCOUNT1        0084
IGNCOUNT2        0085
ILAD             0003
ILIE             0004
ILOP             0004
ILSOA:000F       8D54
ILSOA:0012       8EA8
ILSOA:0015       9203
ILSOB:000F       8D58
ILSOB:0012       8EAC
ILSOB:0015       9207


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 154
MC68HC908GP32 User Bootloader


ILSOC:000F       8D5C
ILSOC:0012       8EB0
ILSOC:0015       920B
ILSOD:000F       8D60
ILSOD:0012       8EB4
ILSOD:0015       920F
ILSOE:000F       8D64
ILSOE:0012       8EB8
ILSOE:0015       9213
ILSOF:000F       8D68
ILSOF:0012       8EBC
ILSOF:0015       9217
ILSOX:000F       8D6C
ILSOX:0012       8EC0
ILSOX:0015       921B
ILTY             0002
IMASK            0001
IMASKK           0001
INAC_CONT        99E0
INCRPMER         8FEF
INCRPM_CRANK     9008
INDWELL          0004
INIT_CONFIG1     0001
INIT_CONFIG2     0001
INIT_FIRST       8000
INIT_LAST        FB00
INIT_SCBR        0012
INIT_SCC1        0040
INIT_SCC2        000C
INIT_STACK       01EC
INJ1             0000
INJ2             0001
INJ2DONE         8F9F
INJECT1          0004
INJECT2          0005
INJF1            8EF8
INJF2            8EFB
INJF3            8EFE
INJF3JMP         8F30
INJOCFUEL_F1     E198
INJOCFUEL_F2     E298
INJOCFUEL_R      01AA
INJOPEN_F1       E197
INJOPEN_F2       E297
INJOPEN_R        01A9
INJPWMT_F1       E19A
INJPWMT_F2       E29A
INJPWMT_R        01AC
INJPWM_F1        E199
INJPWM_F2        E299
INJPWM_R         01AB
INJ_FIRE_CTL     8EF5
INT1             FE04
INT2             FE05
INT3             FE06
INTACC1          0094
INTACC2          0098
INTERPACELB      0040
INTKBIER         001B
INTKBSCR         001A
INTSCR           001D
INT_RAM          01ED
INT_SPARK_OFF    92CD
INT_SPARK_OFFA   91BA
INVERTOUTONEB    0002
INVERTOUTTWOB    0004
INVSPARKOFF      92CD
INVSPK           0006
IN_A_OR_C_MODE   99AD
IN_Q_MODE        9A2B
IN_Q_MODEJMP     99ED
IN_SCI_RCV       97FA
IN_SCI_TX        9993
IN_SIGN_MODE     9A21
IN_T_MODE        9A26
IN_V_MODE        99FE
IN_V_MV          9A0F
IRESTORERPM_F    E80E
IRQF             0003
IRQ_SPARK        8DFF
ISHEX            FCF6
ISHEX1           FD06


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 155
MC68HC908GP32 User Bootloader


ISNTHEX          FD08
ISOB2            92D4
ISOF2            92D8
ISTARTBIT        0007
IS_MISS          93D1
ITIMEH           00AF
ITIMEL           00B0
ITIMEPH          00FD
ITIMEPL          00FE
ITIMEPX          00FC
ITIMEX           00AE
ITMP00           01ED
ITMP01           01EE
ITMP02           01EF
ITMP03           01F0
ITMP04           01F1
ITMP05           01F2
ITMP06           01F3
ITMP07           01F4
ITMP08           01F5
ITMP09           01F6
ITMP0A           01F7
ITMP0B           01F8
ITMP0C           01F9
ITMP0D           01FA
ITMP0E           01FB
ITMP0F           01FC
ITMP10           01FD
ITMP11           01FE
ITMP12           01FF
ITMP13           0200
ITMP14           0201
ITMP15           0202
ITMP16           0203
ITMP17           0204
ITMP18           0205
ITMP19           0206
ITMP1A           0207
ITMP1B           0208
ITMP1C           0209
ITMP1D           020A
ITMP1E           020B
ITMP1F           020C
ITMPCOMM         020D
JBOOTLOAD        996E
JCHECK_MMS       9005
JDECODE_WHEEL    92FC
JINJ_FIRE_CTL    8DFC
JIN_SIGN_MODE    998A
JIN_T_MODE       998D
JIN_V_MODE       9990
JMODE_B          98CC
JMODE_BOOT       98D8
JMODE_P          98D5
JMODE_Q          98D2
JMODE_SIGN       98DB
JMODE_T          98E1
JMODE_W          98CF
JMODE_X          98DE
JRETW            9452
JWDWELL2OP:0013  8EC9
JWDWELL2OP:0016  921F
JWUE_DONE        8544
J_CSL            8D03
J_HIRES_DWELL    91BD
J_LOST_SYNC2     9320
J_SSC            9667
KBIE0            0000
KBIE1            0001
KBIE2            0002
KBIE3            0003
KBIE4            0004
KBIE5            0005
KBIE6            0006
KBIE7            0007
KEYF             0003
KNOCKADV         00DA
KNOCKADV_F       E03A
KNOCKANGLE       005D
KNOCKANGLERET    0102
KNOCKBOOST       0101
KNOCKDETB        0040


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 156
MC68HC908GP32 User Bootloader


KNOCKED          0007
KNOCKIN          0002
KNOCKKPAL_F      E037
KNOCKMAX_F       E03B
KNOCKRET1_F      E038
KNOCKRET2_F      E039
KNOCKRPMLL_F     E036
KNOCKRPML_F      E035
KNOCKTIMLFT      00D9
KNOCKTIM_F       E03C
KNOCK_TIMER_CHEC 915E
KPA              00CB
KPADOTBOOSTB     0010
KPADOTSETB       0080
KPAFACTOR4115    F200
KPAFACTOR4250    F300
KPALAST          00D0
KPAO2_F          E040
KPARANGEAFR_F1   E648
KPARANGEAFR_F2   E698
KPARANGESPLIT_F  E869
KPARANGEST_F1    E39C
KPARANGEST_F2    E49C
KPARANGEST_R     01AE
KPARANGEVE_F1    E1AA
KPARANGEVE_F2    E2AA
KPARANGEVE_F3    E59C
KPARANGEVE_R     01C2
KPARETARD_F      E033
KPASCALE300      0042
KPASCALE400      00A7
KPATPSOPENB      0001
KPA_ADC_CHECK    97DC
KPA_DOT_ON       958A
KPA_N            00DB
LATENCY_F        E022
LAUNCH           0003
LAUNCHCONTROL    0002
LAUNCHLIMIT_F    E014
LAUNCHON         0006
LBATT            007B
LCLT             0079
LC_FLATLIM       E080
LC_FLATSEL_F     E07C
LC_FS            0005
LC_F_LIMANGLE_F  E08D
LC_F_SLIM_F      E08C
LC_LIMANGLE_F    E02A
LC_SOFT_RPM_F    E02B
LC_THROTTLE_F    E029
LD_VE_1          87C3
LD_VE_1DONE      87C6
LED18_FAN        0006
LEGO             007C
LININTERP        9B63
LIX              0098
LIX1             0094
LIX2             0095
LIY              0099
LIY1             0096
LIY2             0097
LMAP             0077
LMAT             0078
LOADCONTRIBDONE  87D3
LOAD_TABLE       9B0D
LOCK             0006
LONGER_DELAY     89E6
LOOPS            0007
LOSPDCORR        95F8
LOST_SYNC_W      949E
LOWRESH          00F5
LOWRESL          00F6
LOWSPDSPK        8D0A
LOW_CONT         95B9
LOW_SPEED        95B5
LSD_A            966A
LSD_B            966F
LSD_DONE         965F
LSD_DONE2        9661
LSD_MIN          965A
LSSPK_DONE       8DDF
LSSPK_INV        8D70


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 157
MC68HC908GP32 User Bootloader


LTPS             007A
LVI              0001
LVIOUT           0007
LVISR            FE0C
M                0004
MAP              0044
MAPAEN           0006
MAPAQ_F          E0A9
MAPDOTRATE_F     E0A5
MAPFIXASE_F      E5B6
MAPHOLDB         0004
MAPTHRESH_F      E05B
MASS             0004
MASSAIRFLWB      0020
MASSERASE        FD09
MASSERASE1       FD0D
MASSERASE2       FD30
MAT              0045
MATCRANKB        0020
MAXADVANG_F      E031
MAXPULSE         8838
MAX_DWELL        8B7B
MBFF             8824
MINDISCHG_F      E08F
MIN_DWELL        0005
MISC_SPARK       8B3F
MISC_SPARK_END   8CA8
MISS2NDB         0001
MISS_TPS         8636
MMS              007D
MMSDIV           00E3
MODE             0000
MODEK            0000
MODE_A           98E4
MODE_AA_CONT     98EE
MODE_B           9852
MODE_BOOT        9963
MODE_B_OK        985C
MODE_C           98F4
MODE_P           994B
MODE_Q           9939
MODE_R           98E9
MODE_SIGN        9952
MODE_T           9942
MODE_V           98FD
MODE_V2          9929
MODE_V_F0        991A
MODE_V_F1        991E
MODE_V_F23       9922
MODE_V_MV        9926
MODE_W           992D
MODE_X           9932
MODF             0004
MODFEN           0002
MODRST           0002
MS               007E
MSDONE           90D8
MSEC             90CC
MSG_COMPLETE     FDB4
MSG_ERROR        FDCE
MSG_HELLO        FD88
MSG_HELP         FD90
MSG_NORESET      FDE0
MSG_WAITING      FDBF
MSG_WHAT         FDD7
MSNEON           0001
MSNS             0000
MSXA             0004
MSXB             0005
MS_DELAY         9CD1
MS_DELAY1        9CD2
MS_DELAY2        9CD4
MS_DWELL         8B88
MS_ERASEFLASH    9C8D
MS_ERASEFLASH1   9C90
MS_ERASERAMSIZE  0031
MS_FLASHPROGRAM  9CDC
MS_FLASHPROGRAM1 9CDC
MS_FLASHPROGRAM2 9D0B
MS_MASSERASE     9CAB
MS_PROGRAMFLASH  9C9C
MS_PROGRAMFLASH1 9C9F


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 158
MC68HC908GP32 User Bootloader


MS_PROGRAMRAM    000B
MS_PROGRAMRAMSIZ 004A
MS_RAM_END       0112
MS_RAM_SIZE      00D2
MS_RAM_START     0040
MS_RF_END        01DA
MS_RF_END_F      E871
MS_RF_SIZE       00C8
MS_RF_START      0112
MS_TOTAL_RAM_SIZ 019A
MULTIFACCRANK    8A84
MULTISPARKB      0008
MV_MODE          0006
MV_V_EMUL        9AD5
M_SC1INVSPARK    0008
M_SC1LNGTRG      0001
M_SC1ODDFIRE     0010
M_SC1TIMCRNK     0004
M_SC1XLNGTRG     0002
M_TWOSTROKE      0004
N2ODEL_FLAT_F    E09E
N2ODEL_LAUNCH_F  E09D
N2OHOLD          010C
N2OHOLDON_F      E09F
N2OLAUNCHDEL     010B
NEG_SLOPE        9BA7
NEIE             0002
NEW_EGOLIM       874E
NEW_SQUIRT1      8F04
NEW_SQUIRT2      8F1A
NEXTCYL          0005
NF               0002
NILS:0010        8DAB
NILS:0011        8E3F
NILS:0017        9287
NITROUS          0007
NITROUSANGLE     0108
NOACCELASEB      0004
NOAIRFACTORB     0040
NODECELBOOSTB    0080
NOITX_ERR        9573
NOL_TIMER        90FA
NON_EDIS         959D
NOPRIMEPB        0008
NORMAIRDEN       83BE
NORMAL_ADSEL     97E0
NORMDECEL        86AD
NORMMAP_COUNT    97DF
NOS2ANGLE_F      E6A3
NOS2DELAY_F      E6A2
NOS2PWHI_F       E6A5
NOS2PWLO_F       E6A4
NOS2RPMMAX_F     E6A1
NOS2RPM_F        E6A0
NOSANGLE_F       E044
NOSANTILAG       0004
NOSCLT_F         E016
NOSDCOK          0000
NOSFUELHI_F      E046
NOSFUELLO_F      E045
NOSHIKPA_F       E056
NOSIN            0001
NOSLAGSYSTEMB    0040
NOSLOWKPA_F      E055
NOSPARKCARRY     9640
NOSPKOFF         89F5
NOSPW            0109
NOSRPMMAX_F      E018
NOSRPM_F         E017
NOSSYSON         0001
NOSSYSREADY      0005
NOSTPS_F         E043
NOTSPKTIME       91B8
NOTTPSLAST_YET   99D7
NOT_2NDMISS      93DE
NOT_DWELL_ACCEL  8BAE
NOT_FIXED        885E
NOT_MISS         93E0
NOT_MISS_OK      944F
NOT_MISS_SKIP    9440
NOT_SPARK_TIME   924A
NOT_ST1          8935


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 159
MC68HC908GP32 User Bootloader


NOX_OF           842F
NO_DT_SECONDO2   878D
NO_EGO_CNT       9597
NO_EGO_MSEC      90CC
NO_FLYBK         8F16
NO_KPA_CHECK     8704
NO_MISC_SPARK    89F8
NO_ROLLCHK       92F7
NO_ST2DELAY      9149
NO_TPSCOUNT      914C
NO_TPS_SETAFR1   9D78
NO_VE3_DELAY     9141
NO_WD_TRIG       8CC6
NSQ1             8F0C
NSQ2CONT         8F28
NUMTEETH_F       E05A
O2TARGETV_F      E1BB
O2TARGETV_F2     E2BB
O2_FPADC         005A
O2_IS_LEAN       8772
O2_IS_RICH       875B
OFFSETANG        020C
OFFSETSTEP       020B
OFF_INJ_1        8F48
OFF_INJ_2        8F81
OKPAGE           9B1B
ONE00TH          90FA
ONESHOTBARRO     0007
ONETENTH         9100
ONETEN_NOTLOG    9127
OR               0003
ORIE             0003
ORUNKPA_F        E048
ORUNRPM_F        E047
ORUNTPS_F        E049
OUT1HYS_F        E07E
OUT1LIM          E007
OUT1SOURCE       E008
OUT1UPLIM_F      E058
OUT1_OUT3B       0080
OUT2HYS_F        E07F
OUT2LIM          E009
OUT2SOURCE       E00A
OUT2UPLIM_F      E059
OUT3LIM_F        E085
OUT3SOURCE_F     E084
OUT3SPARKD       0004
OUT3TIMER        00E5
OUT4LIM_F        E08B
OUT4SOURCE_F     E08A
OUTAOFFS_F       E6A6
OUTAOFFV_F       E6A7
OUTBOFFS_F       E6A8
OUTBOFFV_F       E6A9
OUTCOFFS_F       E6AA
OUTCOFFV_F       E6AB
OUTDOFFS_F       E6AC
OUTDOFFV_F       E6AD
OUTEOFFS_F       E6AE
OUTEOFFV_F       E6AF
OUTFOFFS_F       E6B0
OUTFOFFV_F       E6B1
OUTOFF_22B       0001
OUTOFF_45B       0002
OUTOFF_90B       0004
OUTPUT1          0003
OUTPUT1ON        0001
OUTPUT2          0002
OUTPUT2ON        0002
OUTPUT3          0000
OUTPUTPINS       0062
OUTPUTPINS_F     E001
OVERRUN          0002
OVERRUNCLT_F1    E0B6
OVERRUNONB       0040
OVERRUNTIME      00D7
OVERRUNT_F       E082
OVER_B_P_F       E02C
OVER_RUN_SET     0005
OVRF             0005
P8FEAT1_F        E86F
PAGE             0105


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 160
MC68HC908GP32 User Bootloader


PAGE2            0002
PAGESIZE         00BD
PAMBIENT         00CA
PAMBIENT_F       E0B9
PASS_STORE       90A1
PBWC             0037
PCTL             0036
PE               0000
PEIE             0000
PEN              0001
PERSONALITY      0061
PERSONALITY_F    E000
PGM              0001
PIN              0006
PIN10            0003
PIN11            0004
PLLF             0006
PLLIE            0007
PLLON            0005
PLLSET           FB3D
PLLWAIT          FB4D
PMDS             003B
PMRS             003A
PMSH             0038
PMSL             0039
POR              0007
PORTA            0000
PORTB            0001
PORTC            0002
PORTD            0003
PORTE            0008
POSINTERP        9B8E
PRE0             0002
PRE1             0003
PRIME            8347
PRIMED           0007
PRIMELATEB       0002
PRIMEPULSE_F     E82D
PRIMETWICEB      0004
PRINTSTRING      FBF8
PRINTSTRING1     FBF3
PROGRAMRAM       000B
PROGRAMRAMSIZE   004F
PS0              0000
PS1              0001
PS2              0002
PTAPUE           000D
PTCPUE           000E
PTDPUE           000F
PTY              0000
PUTCHAR          FB53
PUTSTRING        FBED
PW1              004E
PW2              0053
PWCALC1          006E
PWCALC2          006F
PWMIDLEB         0001
PWM_LIMIT_1      8F5E
PWM_LIMIT_2      8F96
PWRUN1           006C
PWRUN2           006D
PW_DONE          883A
PW_STAGED        010A
PW_STAGED2       010D
QUOTIENT         0094
R8               0007
RAILCALC         9D6D
RAM_EXEC         01ED
RAM_LAST         023F
RAM_START        0040
RE               0002
REALLY_DONE_DWEL 8CA5
REARM_IRQ        8FEB
RECALCDELAY      9608
REENT            9B4F
REMAINDER        0094
REQ_FUEL_F1      E194
REQ_FUEL_F2      E294
REQ_FUEL_R       01A6
RESTAGING        0003
RESTART_F0       910D
RESTART_F1       911A


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 161
MC68HC908GP32 User Bootloader


RET_W            9486
RET_W2           9484
REUSE_FIDLE      0000
REUSE_LED17      0001
REUSE_LED18      0002
REUSE_LED18_2    0003
REUSE_LED19      0004
REVLIMBITS       0060
REVLIMHARD       0002
REVLIMHSOFT      0001
REVLIMIT_F       E006
REVLIMSOFT       0000
REVNUM           9E1D
RISE             0004
ROLL1            0000
ROLL1SET         8A00
ROLL2            0001
ROLL_NOT_HIGH    8A0E
ROM_LAST         FDFF
ROM_START        8000
ROT2CN:0010      8D9F
ROT2CN:0011      8E33
ROT2CN:0017      927B
ROT2CP:000F      8D46
ROT2CP:0012      8E9A
ROT2CP:0015      91F5
ROT2DN:0010      8DA5
ROT2DN:0011      8E39
ROT2DN:0017      9281
ROT2DP:000F      8D4A
ROT2DP:0012      8E9E
ROT2DP:0015      91F9
ROT2NEG:0010     8D94
ROT2NEG:0011     8E28
ROT2NEG:0017     9270
ROT2POS:000F     8D3B
ROT2POS:0012     8E8F
ROT2POS:0015     91EA
ROTARY2          0000
ROTARY2B         0001
ROTARYFDIGN      0004
ROUNDREM         9D38
RPF              0000
RPM              004D
RPMAEBASED       0010
RPMAQL_F2        E09C
RPMAQ_F2         E099
RPMBACKAE        85D8
RPMBASEDRATE_F   E095
RPMCALCDONE      8441
RPMCALCFAST      8418
RPMCALCSLOW      83E7
RPMCALCZERO      8440
RPMCH            0072
RPMCL            0073
RPMDOTRATE       9E5E
RPMK_F1          E19C
RPMK_F2          E29C
RPMK_R           01AE
RPMLAST          0103
RPMLOWBYTECHK    8FE4
RPMOXLIMIT_R     01D7
RPMPH            0070
RPMPL            0071
RPMRANGE3BC_F    E784
RPMRANGEAFR_F1   E640
RPMRANGEAFR_F2   E690
RPMRANGEBC_F     E724
RPMRANGEBC_F2    E754
RPMRANGESPLIT_F  E863
RPMRANGEST_F1    E390
RPMRANGEST_F2    E490
RPMRANGEST_R     01A2
RPMRANGEVE_F1    E19E
RPMRANGEVE_F2    E29E
RPMRANGEVE_F3    E590
RPMRANGEVE_R     01B0
RPMRATE_F        E05E
RPMREDUHI_F      E837
RPMREDULO_F      E836
RPMTHRESH_F      E062
RQFE1            87F6


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 162
MC68HC908GP32 User Bootloader


RQFR1            87F3
RSH_R            0005
RSH_S            0004
RST_ACCEL        869B
RST_ACCJMP       866A
RTC_DONE         9184
RTC_DONE2        91B6
RTC_DONEJMP      9149
RTC_RESET        91A7
RUNIT            8453
RUNNING          0000
RWU              0001
RXOFFSET         008D
SAVE_DWELL:000B  8C0D
SAVE_DWELL:000E  8C9E
SAWH             00F3
SAWL             00F4
SBFCR            FE03
SBK              0000
SBSR             FE00
SBSW             0001
SC2DUAL          97A7
SC2SINGLE        977A
SCALEFAC_F       E04F
SCBR             0019
SCC1             0013
SCC2             0014
SCC3             0015
SCDR             0018
SCHED1           0002
SCHED2           0004
SCHEDULE1        976A
SCHEDULE1A       9771
SCHEDULE2D       97BD
SCHEDULE2DA      97C9
SCHEDULE2S       9790
SCHEDULE2SA      979C
SCRF             0005
SCRIE            0005
SCS1             0016
SCS2             0017
SCTE             0007
SCTIE            0007
SDD2             964C
SECH             0080
SECL             0040
SECONDO2B        0001
SECONDS          915C
SECS             9167
SEC_CONT         9169
SEC_FIN          917C
SEND_DATA_NORMAL 99EF
SEND_PORTS       99F3
SETAFR_UP        8711
SETIT            96E7
SETIT2           96E9
SETLSB           9C34
SET_SPKON        91CB
SET_SPKON2       91CE
SET_SPK_TIMER    9674
SHFTLP           9BFC
SHIFTHI_F        E013
SHIFTLIGHT       0001
SHIFTLO_F        E012
SIGNATURE        9E3E
SIN_A            8CCD
SIN_B            8CE0
SIN_C            8CF3
SIN_D            8CF7
SIN_E            8CFB
SIN_F            8CFF
SKIPO2           8789
SKIPO2A          8753
SKIPO2JMP        8706
SKIP_ALL_O2      8708
SKIP_CYCLE_CALC  96FD
SLED             0000
SLIPRATE         9E62
SLOWIDLETEMP_F   E812
SLOWIDLE_F       E814
SOD_CD           921F
SOD_CD_DONE      9248


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 163
MC68HC908GP32 User Bootloader


SOD_NE           921D
SOIN10:0009      8B11
SOIN10:0014      9075
SOIN10:0018      94F3
SOIN10:0019      9AB1
SOIN11:0009      8B1A
SOIN11:0014      907E
SOIN11:0018      94FC
SOIN11:0019      9ABA
SOIN1:0009       8AE3
SOIN1:0014       9047
SOIN1:0018       94C5
SOIN1:0019       9A83
SOIN2:0009       8AE5
SOIN2:0014       9049
SOIN2:0018       94C7
SOIN2:0019       9A85
SOIN3:0009       8AEC
SOIN3:0014       9050
SOIN3:0018       94CE
SOIN3:0019       9A8C
SOIN4:0009       8AEE
SOIN4:0014       9052
SOIN4:0018       94D0
SOIN4:0019       9A8E
SOIN5:0009       8AF5
SOIN5:0014       9059
SOIN5:0018       94D7
SOIN5:0019       9A95
SOIN6:0009       8AF7
SOIN6:0014       905B
SOIN6:0018       94D9
SOIN6:0019       9A97
SOIN7:0009       8B01
SOIN7:0014       9065
SOIN7:0018       94E3
SOIN7:0019       9AA1
SOIN8:0009       8B03
SOIN8:0014       9067
SOIN8:0018       94E5
SOIN8:0019       9AA3
SOIN9:0009       8B08
SOIN9:0014       906C
SOIN9:0018       94EA
SOIN9:0019       9AA8
SOIN:0009        8ADC
SOIN:0014        9040
SOIN:0018        94BE
SOIN:0019        9A7C
SOIN_DONE:0009   8B1A
SOIN_DONE:0014   907E
SOIN_DONE:0018   94FC
SOIN_DONE:0019   9ABA
SPARE1           E07A
SPARE1_2_F       E023
SPARE1_3_F       E024
SPARE1_4_F       E025
SPARE1_5_F       E026
SPARE3_182       E3B6
SPARE3_183       E3B7
SPARE3_184       E3B8
SPARE3_F         E08E
SPARK2DELAY_F    E057
SPARKANGLE       0058
SPARKBITS        005F
SPARKCARRY       00C3
SPARKCONFIG1_F   E3AD
SPARKCUT         0005
SPARKCUTBASE_F   E04E
SPARKCUTBNUM_F   E054
SPARKCUTCNT      00D8
SPARKCUTNLC_F    E04D
SPARKCUTNUM_F    E02D
SPARKDELAYH      00B1
SPARKDELAYL      00B2
SPARKDLTH        0096
SPARKDLTL        0097
SPARKDLTX        0095
SPARKHOLDCYC_F   E3AC
SPARKHSPEED      0001
SPARKLSPEED      0002
SPARKOFFDONE     92DA


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 164
MC68HC908GP32 User Bootloader


SPARKON          0003
SPARKONDONE      921D
SPARKONLEFTAH    00B3
SPARKONLEFTAL    00B4
SPARKONLEFTBH    00B5
SPARKONLEFTBL    00B6
SPARKONLEFTCH    00B7
SPARKONLEFTCL    00B8
SPARKONLEFTDH    00B9
SPARKONLEFTDL    00BA
SPARKONLEFTEH    00BB
SPARKONLEFTEL    00BC
SPARKONLEFTFH    00BD
SPARKONLEFTFL    00BE
SPARKTABLE2B     0080
SPARKTARGETH     00FA
SPARKTARGETL     00FB
SPARKTEMPH       00C1
SPARKTEMPL       00C2
SPARKTIME        91C0
SPARKTIME_EXIT   9248
SPARKTRIGG       0000
SPARK_LOOKUP     8848
SPCR             0010
SPDR             0012
SPE              0001
SPKEOPB          0008
SPKFOPB          0010
SPK_MULT         9621
SPLITDELH        00FF
SPLITDELL        0100
SPLIT_F          E83F
SPMSTR           0005
SPR0             0000
SPR1             0001
SPRF             0007
SPRIE            0007
SPSCR            0011
SPTE             0003
SPTIE            0000
SPWOM            0002
SQUIRT           0041
SQUIRTCHECK1     9756
SQUIRTCHECK2     977A
SQUIRTDONE1      977A
SQUIRTDONE2      97D2
SRECADDR         0007
SRECCHKSUM       0002
SRECCOUNT        0001
SRECSIZE         0006
SRECTYPE         0005
SREDDATA         0008
SREVLIMANGLE     E003
SREVLIMCTIME     E005
SREVLIMHTIME     E004
SREVLIMRPM       E002
SREVLIMTIMELEFT  00C4
SRSR             FE01
SSON_INV         91D0
ST2TIMER         00DE
ST2TIMER_ZERO    9136
STAGEDAND        0007
STAGEDB          0004
STAGEDEITHER     000C
STAGEDMAP2ND     0006
STAGEDMODEB      0008
STALL            900D
STALL_CONT       9096
START            8128
STARTW           0002
START_ADC        8311
START_DELAY      89C7
STG2NDPARMDLT_F  E3B5
STG2NDPARMKPA_F  E3B4
STGCYCLES_F      E3B3
STGDELTA_F       E051
STGTRANSDONE     0005
STGTRANSITIONCNT 010E
STGTRANS_F       E050
STH              01FE
STHP             00F3
STL              01FF


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 165
MC68HC908GP32 User Bootloader


STLP             00F4
STORETPSACCEL    868D
STORE_AIRCOR     83C3
STORE_SPARK2     8961
STORE_TEA1       85D4
STTABLELOOKUP    885E
STX              01FD
ST_F1            E300
ST_F2            E400
ST_R             0112
ST_STEP_1        8862
ST_STEP_2        887B
ST_STEP_3        8894
ST_STEP_4        88F1
ST_STEP_5        8906
ST_STEP_6        891B
SUBAR            FE02
SUPERNORM        9D1B
T1CH0H           0026
T1CH0L           0027
T1CH1H           0029
T1CH1L           002A
T1CNTH           0021
T1CNTL           0022
T1MODH           0023
T1MODL           0024
T1SC             0020
T1SC0            0025
T1SC1            0028
T1SCX_NO_PWM     0010
T1SCX_PWM        001E
T1TIMERGO        0052
T1TIMERSTOP      0032
T2CH0H           0031
T2CH0L           0032
T2CH1H           0034
T2CH1L           0035
T2CNTH           002C
T2CNTL           002D
T2CNTX           00AA
T2CURRH          0203
T2CURRL          0204
T2CURRX          0202
T2LASTH          00AC
T2LASTL          00AD
T2LASTX          00AB
T2MODH           002E
T2MODL           002F
T2OVERFLOW       9B3C
T2PREVH          00C6
T2PREVL          00C7
T2PREVX          00C5
T2SC             002B
T2SC0            0030
T2SC1            0033
T8               0006
TABLELOOKUP      9B48
TABLE_ASESTUFF   8553
TACHCONF_F       E090
TACHON_X5        9544
TACH_DONE        9548
TACH_FULL        9538
TACK             0003
TAEIGNCOUNT      0003
TAE_CALC         859B
TAE_CHK_JMP      85E1
TAE_CHK_JMP1     85B5
TAE_CHK_TIME     865E
TAE_DONE         86F3
TAE_DONEJMP      868F
TARGETAFR3B      0002
TARGETAFRB       0080
TBCR             001C
TBIE             0002
TBIF             0007
TBON             0001
TBR0             0004
TBR1             0005
TBR2             0006
TC               0006
TCACCEL          00E0
TCANGLE          00E1


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 166
MC68HC908GP32 User Bootloader


TCCYCLES         00E4
TCCYCLESEC       0002
TCIE             0006
TCSCALEFAC_F     E077
TCSLIPFACH_F     E07B
TCSLIPFAC_F      E078
TCSPARKCUT       00E2
TDE              86AD
TDE_CHK_DONE     86E7
TDE_CHK_FUEL_CUT 86CD
TE               0003
TEMP_SP          0041
TENTH            007F
TEXTVERSION_F    9E1E
TFI              0006
THERMFACTOR      F400
TIMEBASED        8DEE
TIMELEFT         9156
TIMERGO_NO_INT   0002
TIMEROUT3_F      E086
TIMERROLL        8CA9
TIMER_DONE       8CC1
TIMFIXASE_F      E5B4
TLHH             9720
TL_CONT          972A
TL_HIGH          9716
TMP1             0094
TMP10            009D
TMP11            009E
TMP12            009F
TMP13            00A0
TMP14            00A1
TMP15            00A2
TMP16            00A3
TMP17            00A4
TMP18            00A5
TMP19            00A6
TMP2             0095
TMP20            00A7
TMP21            00A8
TMP22            00A9
TMP3             0096
TMP31            00DC
TMP32            00DD
TMP4             0097
TMP5             0098
TMP6             0099
TMP7             009A
TMP8             009B
TMP9             009C
TOF              0007
TOHEX            FCED
TOHEX1           FCF5
TOIE             0006
TOOTHLOG         0002
TOOTHL_F0        9B20
TOOTHL_F1        9B24
TOOTH_AVG        93F0
TOOTH_LOG_SETUP  9B26
TOOTH_NOAVG      93E6
TOVX             0001
TOY_DLI          0007
TPS              0047
TPSACCEL         004F
TPSACLK          0081
TPSACOLD_F1      E0B1
TPSAEN           0004
TPSAQ_F1         E0AD
TPSASYNC_F1      E0B3
TPSBOOIAT_F      E089
TPSDEN           0005
TPSDOTRATE       E0A1
TPSDQ_F1         E0B4
TPSFLOOD_F       E82C
TPSFUELCORR      00D6
TPSFUELCUT       0089
TPSLAST          00D1
TPSO2_F          E041
TPSRANGE3BC_F    E78A
TPSRANGEBC_F     E72A
TPSRANGEBC_F2    E75A
TPSTARGETAFR     0005


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 167
MC68HC908GP32 User Bootloader


TPSTHRESH_F1     E0B2
TPS_COUNTER      9586
TPS_DECELL       86B6
TPS_DOT_ON       9588
TRACTCYCLE_F     E070
TRACTDEG_F       E063
TRACTION         0000
TRACTIONCB       0020
TRACTIONNOS      0000
TRACTSPARK_F     E067
TRIG1RET_F       E01D
TRIG1_F          E019
TRIG2FALLB       0001
TRIG2RET_F       E01E
TRIG2RISEFALLB   0002
TRIG2_F          E01A
TRIG3RET_F       E01F
TRIG3_F          E01B
TRIG4RET_F       E020
TRIG4_F          E01C
TRIG5RET_F       E093
TRIG5_F          E091
TRIG6RET_F       E094
TRIG6_F          E092
TRIGGANGLE_F     E3A8
TRIGGANGLE_R     01BA
TRIGGER2         0003
TRIGLOG          0003
TRIGRET          0006
TRIMANGLE_F      E3AA
TRIMANGLE_R      01BC
TRIM_C           8944
TRIM_DONE        8958
TRIM_DONE2       895E
TRIM_FL          8941
TROLL_CK_DONE    8A29
TRST             0004
TRUE_DWELL_CALC  8BB1
TSTOP            0005
TURNALLSPARKOFF  8AC9
TURN_ON_INTS     833F
TX6_MV           982C
TXCNT            008A
TXGOAL           008B
TXINV            0005
TXMODE           008C
TXMODE_5         9817
TXMODE_6         981F
TXMODE_7         982F
TXMODE_8         9837
TXMODE_9         983F
TXMODE_9_CONT    984F
TXMODE_C         9AE7
TXMODE_C1        9814
TX_DONE          9984
UDIVBY100        9BC6
UDIVROUNDINGDONE 9BDF
UDSPEEDLIM_F     E076
UDSPEEDLO_F      E075
UDVD32           9BE0
UMUL16           9BB5
UMULANDDIV       9BB5
USER_ADC         FACD
USER_CONFIG1     FAC4
USER_CONFIG2     FAC5
USER_FIRST       FAC6
USER_IRQ         FAF7
USER_KEYBOARD    FAD0
USER_LAST        FAC8
USER_PLL         FAF4
USER_RESET       FAFD
USER_SCBR        FAC3
USER_SCIERR      FAD9
USER_SCIRX       FAD6
USER_SCITX       FAD3
USER_SPIRX       FADF
USER_SPITX       FADC
USER_SWI         FAFA
USER_TIM1CH0     FAF1
USER_TIM1CH1     FAEE
USER_TIM1OV      FAEB
USER_TIM2CH0     FAE8


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 168
MC68HC908GP32 User Bootloader


USER_TIM2CH1     FAE5
USER_TIM2OV      FAE2
USER_TIMEBASE    FACA
USEVE3           0006
VARLAUNCHB       0002
VE1XC:0001       84A9
VE1XC:0002       84BB
VE1XC:0003       84D5
VE1XC:0004       84E7
VE1XF:0001       84A6
VE1XF:0002       84B8
VE1XF:0003       84D2
VE1XF:0004       84E4
VE1_LOOKUP       8455
VE1_LOOKUP_PW1   8457
VE1_STEP_1       8459
VE1_STEP_2       8478
VE1_STEP_3       848F
VE3DELAY_F       E05D
VE3TIMER         00DF
VE3TIMER_ZERO    913C
VE3XC:0005       88AE
VE3XC:0006       88C0
VE3XC:0007       88DA
VE3XC:0008       88EC
VE3XF:0005       88AB
VE3XF:0006       88BD
VE3XF:0007       88D7
VE3XF:0008       88E9
VE6XC:001A       9DCC
VE6XC:001B       9DDE
VE6XC:001C       9DF8
VE6XC:001D       9E0A
VE6XF:001A       9DC9
VE6XF:001B       9DDB
VE6XF:001C       9DF5
VE6XF:001D       9E07
VECURR           0052
VECURR2          0054
VEC_ADC          FFDE
VEC_IRQ          FFFA
VEC_KBD          FFE0
VEC_PLL          FFF8
VEC_RESET        FFFE
VEC_SCIERR       FFE6
VEC_SCIRX        FFE4
VEC_SCITX        FFE2
VEC_SPIRX        FFEA
VEC_SPITX        FFE8
VEC_SWI          FFFC
VEC_TIM1CH0      FFF6
VEC_TIM1CH1      FFF4
VEC_TIM1OV       FFF2
VEC_TIM2CH0      FFF0
VEC_TIM2CH1      FFEE
VEC_TIM2OV       FFEC
VEC_TIMEBASE     FFDC
VETABLE3B        0001
VE_F1            E100
VE_F2            E200
VE_F3            E500
VE_R             0112
VE_STEP_4        8A8B
VE_STEP_5        8AA0
VE_STEP_6        8AB5
VLAUNCHLIMIT     0104
VOLTOXTARGET_R   01D9
VPR0             0000
VPR1             0001
V_F2             9A12
V_F2ZERO         9A19
V_F3             9A1C
V_MV2            9AE3
WAKE             0003
WARMACCEL_COMP   8794
WARMCOR          004C
WARMUP           0003
WARMUP_OVERAE    861B
WARM_DONE_NOW    8539
WATER            0005
WATER2           0004
WATERINJB        0008


msns-extra.asm         Assembled with CASM08Z  7/16/2023  12:37:58 PM  PAGE 169
MC68HC908GP32 User Bootloader


WATERIPOINT_F    E03E
WATERIRPM_F      E03F
WC_OP            9455
WC_OP2           9457
WC_OP3           9464
WC_WHEEL         90AB
WD2A180:0013     8EE9
WD2A180:0016     923F
WD2A360:0013     8ED1
WD2A360:0016     9227
WD2B180:0013     8EED
WD2B180:0016     9243
WD2B360:0013     8ED5
WD2B360:0016     922B
WD2END180:0013   8EEF
WD2END180:0016   9245
WD2END360:0013   8ED7
WD2END360:0016   922D
WD2OK:0013       8EE1
WD2OK:0016       9237
WD2SKIP:0013     8EEF
WD2SKIP:0016     9245
WDTH             9358
WDTL             935C
WDTLT            9733
WDTS             9359
WDWELL2OP:0013   8ECC
WDWELL2OP:0016   9222
WD_2TRIG         0000
WD_2TRIGB        0001
WHEEL            0002
WHEEL2           0003
WHEELCOUNT       00E6
WHEELINIT        00C3
WHEELSENSOR      0003
WHEEL_OLDB       0008
WHLSIM           0002
WHLSIMCNT        E00D
WHOLD            0002
WLED             0002
WSPK             0003
WSYNC            0001
WUE1             8500
WUE1A            8509
WUE2             8547
WUE2_LEDSKIP     8549
WUE3             8596
WUE_CALC         84EF
WUE_DONE         8598
WWURANGE         9E13
WWU_F1           E816
W_COMP           93C1
W_DECODE         9335
W_DECODE2        93AB
W_DECODE_FALSE   9384
W_DECODE_OK      9386
W_DEC_NOTLOG     935F
W_DEC_NOTLOGT    9736
W_HIGH           930E
W_HIGH_FAST      9327
W_LOW            9306
W_NO3            81CA
W_RTI            9397
W_STORE          9519
W_STORE2         9517
W_TRIG1          9473
W_TRIG2          947A
W_TRIGRET1       9492
W_TRIGRET2       9498
X2_FAN           0005
XXKPACORR300_F   E0A0
ZD_A             96BC
ZD_B             96C0
ZERO_SLOPE       9BB2
